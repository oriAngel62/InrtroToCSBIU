/*! jQuery v1.7.1 jquery.com | jquery.org/license */
(function(a,b){function cy(a){return f.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cv(a){if(!ck[a]){var b=c.body,d=f("<"+a+">").appendTo(b),e=d.css("display");d.remove();if(e==="none"||e===""){cl||(cl=c.createElement("iframe"),cl.frameBorder=cl.width=cl.height=0),b.appendChild(cl);if(!cm||!cl.createElement)cm=(cl.contentWindow||cl.contentDocument).document,cm.write((c.compatMode==="CSS1Compat"?"<!doctype html>":"")+"<html><body>"),cm.close();d=cm.createElement(a),cm.body.appendChild(d),e=f.css(d,"display"),b.removeChild(cl)}ck[a]=e}return ck[a]}function cu(a,b){var c={};f.each(cq.concat.apply([],cq.slice(0,b)),function(){c[this]=a});return c}function ct(){cr=b}function cs(){setTimeout(ct,0);return cr=f.now()}function cj(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function ci(){try{return new a.XMLHttpRequest}catch(b){}}function cc(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var d=a.dataTypes,e={},g,h,i=d.length,j,k=d[0],l,m,n,o,p;for(g=1;g<i;g++){if(g===1)for(h in a.converters)typeof h=="string"&&(e[h.toLowerCase()]=a.converters[h]);l=k,k=d[g];if(k==="*")k=l;else if(l!=="*"&&l!==k){m=l+" "+k,n=e[m]||e["* "+k];if(!n){p=b;for(o in e){j=o.split(" ");if(j[0]===l||j[0]==="*"){p=e[j[1]+" "+k];if(p){o=e[o],o===!0?n=p:p===!0&&(n=o);break}}}}!n&&!p&&f.error("No conversion from "+m.replace(" "," to ")),n!==!0&&(c=n?n(c):p(o(c)))}}return c}function cb(a,c,d){var e=a.contents,f=a.dataTypes,g=a.responseFields,h,i,j,k;for(i in g)i in d&&(c[g[i]]=d[i]);while(f[0]==="*")f.shift(),h===b&&(h=a.mimeType||c.getResponseHeader("content-type"));if(h)for(i in e)if(e[i]&&e[i].test(h)){f.unshift(i);break}if(f[0]in d)j=f[0];else{for(i in d){if(!f[0]||a.converters[i+" "+f[0]]){j=i;break}k||(k=i)}j=j||k}if(j){j!==f[0]&&f.unshift(j);return d[j]}}function ca(a,b,c,d){if(f.isArray(b))f.each(b,function(b,e){c||bE.test(a)?d(a,e):ca(a+"["+(typeof e=="object"||f.isArray(e)?b:"")+"]",e,c,d)});else if(!c&&b!=null&&typeof b=="object")for(var e in b)ca(a+"["+e+"]",b[e],c,d);else d(a,b)}function b_(a,c){var d,e,g=f.ajaxSettings.flatOptions||{};for(d in c)c[d]!==b&&((g[d]?a:e||(e={}))[d]=c[d]);e&&f.extend(!0,a,e)}function b$(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h=a[f],i=0,j=h?h.length:0,k=a===bT,l;for(;i<j&&(k||!l);i++)l=h[i](c,d,e),typeof l=="string"&&(!k||g[l]?l=b:(c.dataTypes.unshift(l),l=b$(a,c,d,e,l,g)));(k||!l)&&!g["*"]&&(l=b$(a,c,d,e,"*",g));return l}function bZ(a){return function(b,c){typeof b!="string"&&(c=b,b="*");if(f.isFunction(c)){var d=b.toLowerCase().split(bP),e=0,g=d.length,h,i,j;for(;e<g;e++)h=d[e],j=/^\+/.test(h),j&&(h=h.substr(1)||"*"),i=a[h]=a[h]||[],i[j?"unshift":"push"](c)}}}function bC(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=b==="width"?bx:by,g=0,h=e.length;if(d>0){if(c!=="border")for(;g<h;g++)c||(d-=parseFloat(f.css(a,"padding"+e[g]))||0),c==="margin"?d+=parseFloat(f.css(a,c+e[g]))||0:d-=parseFloat(f.css(a,"border"+e[g]+"Width"))||0;return d+"px"}d=bz(a,b,b);if(d<0||d==null)d=a.style[b]||0;d=parseFloat(d)||0;if(c)for(;g<h;g++)d+=parseFloat(f.css(a,"padding"+e[g]))||0,c!=="padding"&&(d+=parseFloat(f.css(a,"border"+e[g]+"Width"))||0),c==="margin"&&(d+=parseFloat(f.css(a,c+e[g]))||0);return d+"px"}function bp(a,b){b.src?f.ajax({url:b.src,async:!1,dataType:"script"}):f.globalEval((b.text||b.textContent||b.innerHTML||"").replace(bf,"/*$0*/")),b.parentNode&&b.parentNode.removeChild(b)}function bo(a){var b=c.createElement("div");bh.appendChild(b),b.innerHTML=a.outerHTML;return b.firstChild}function bn(a){var b=(a.nodeName||"").toLowerCase();b==="input"?bm(a):b!=="script"&&typeof a.getElementsByTagName!="undefined"&&f.grep(a.getElementsByTagName("input"),bm)}function bm(a){if(a.type==="checkbox"||a.type==="radio")a.defaultChecked=a.checked}function bl(a){return typeof a.getElementsByTagName!="undefined"?a.getElementsByTagName("*"):typeof a.querySelectorAll!="undefined"?a.querySelectorAll("*"):[]}function bk(a,b){var c;if(b.nodeType===1){b.clearAttributes&&b.clearAttributes(),b.mergeAttributes&&b.mergeAttributes(a),c=b.nodeName.toLowerCase();if(c==="object")b.outerHTML=a.outerHTML;else if(c!=="input"||a.type!=="checkbox"&&a.type!=="radio"){if(c==="option")b.selected=a.defaultSelected;else if(c==="input"||c==="textarea")b.defaultValue=a.defaultValue}else a.checked&&(b.defaultChecked=b.checked=a.checked),b.value!==a.value&&(b.value=a.value);b.removeAttribute(f.expando)}}function bj(a,b){if(b.nodeType===1&&!!f.hasData(a)){var c,d,e,g=f._data(a),h=f._data(b,g),i=g.events;if(i){delete h.handle,h.events={};for(c in i)for(d=0,e=i[c].length;d<e;d++)f.event.add(b,c+(i[c][d].namespace?".":"")+i[c][d].namespace,i[c][d],i[c][d].data)}h.data&&(h.data=f.extend({},h.data))}}function bi(a,b){return f.nodeName(a,"table")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function U(a){var b=V.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}function T(a,b,c){b=b||0;if(f.isFunction(b))return f.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return f.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=f.grep(a,function(a){return a.nodeType===1});if(O.test(b))return f.filter(b,d,!c);b=f.filter(b,d)}return f.grep(a,function(a,d){return f.inArray(a,b)>=0===c})}function S(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function K(){return!0}function J(){return!1}function n(a,b,c){var d=b+"defer",e=b+"queue",g=b+"mark",h=f._data(a,d);h&&(c==="queue"||!f._data(a,e))&&(c==="mark"||!f._data(a,g))&&setTimeout(function(){!f._data(a,e)&&!f._data(a,g)&&(f.removeData(a,d,!0),h.fire())},0)}function m(a){for(var b in a){if(b==="data"&&f.isEmptyObject(a[b]))continue;if(b!=="toJSON")return!1}return!0}function l(a,c,d){if(d===b&&a.nodeType===1){var e="data-"+c.replace(k,"-$1").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:f.isNumeric(d)?parseFloat(d):j.test(d)?f.parseJSON(d):d}catch(g){}f.data(a,c,d)}else d=b}return d}function h(a){var b=g[a]={},c,d;a=a.split(/\s+/);for(c=0,d=a.length;c<d;c++)b[a[c]]=!0;return b}var c=a.document,d=a.navigator,e=a.location,f=function(){function J(){if(!e.isReady){try{c.documentElement.doScroll("left")}catch(a){setTimeout(J,1);return}e.ready()}}var e=function(a,b){return new e.fn.init(a,b,h)},f=a.jQuery,g=a.$,h,i=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,j=/\S/,k=/^\s+/,l=/\s+$/,m=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,n=/^[\],:{}\s]*$/,o=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,p=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,q=/(?:^|:|,)(?:\s*\[)+/g,r=/(webkit)[ \/]([\w.]+)/,s=/(opera)(?:.*version)?[ \/]([\w.]+)/,t=/(msie) ([\w.]+)/,u=/(mozilla)(?:.*? rv:([\w.]+))?/,v=/-([a-z]|[0-9])/ig,w=/^-ms-/,x=function(a,b){return(b+"").toUpperCase()},y=d.userAgent,z,A,B,C=Object.prototype.toString,D=Object.prototype.hasOwnProperty,E=Array.prototype.push,F=Array.prototype.slice,G=String.prototype.trim,H=Array.prototype.indexOf,I={};e.fn=e.prototype={constructor:e,init:function(a,d,f){var g,h,j,k;if(!a)return this;if(a.nodeType){this.context=this[0]=a,this.length=1;return this}if(a==="body"&&!d&&c.body){this.context=c,this[0]=c.body,this.selector=a,this.length=1;return this}if(typeof a=="string"){a.charAt(0)!=="<"||a.charAt(a.length-1)!==">"||a.length<3?g=i.exec(a):g=[null,a,null];if(g&&(g[1]||!d)){if(g[1]){d=d instanceof e?d[0]:d,k=d?d.ownerDocument||d:c,j=m.exec(a),j?e.isPlainObject(d)?(a=[c.createElement(j[1])],e.fn.attr.call(a,d,!0)):a=[k.createElement(j[1])]:(j=e.buildFragment([g[1]],[k]),a=(j.cacheable?e.clone(j.fragment):j.fragment).childNodes);return e.merge(this,a)}h=c.getElementById(g[2]);if(h&&h.parentNode){if(h.id!==g[2])return f.find(a);this.length=1,this[0]=h}this.context=c,this.selector=a;return this}return!d||d.jquery?(d||f).find(a):this.constructor(d).find(a)}if(e.isFunction(a))return f.ready(a);a.selector!==b&&(this.selector=a.selector,this.context=a.context);return e.makeArray(a,this)},selector:"",jquery:"1.7.1",length:0,size:function(){return this.length},toArray:function(){return F.call(this,0)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=this.constructor();e.isArray(a)?E.apply(d,a):e.merge(d,a),d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&&(d.selector=this.selector+"."+b+"("+c+")");return d},each:function(a,b){return e.each(this,a,b)},ready:function(a){e.bindReady(),A.add(a);return this},eq:function(a){a=+a;return a===-1?this.slice(a):this.slice(a,a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(F.apply(this,arguments),"slice",F.call(arguments).join(","))},map:function(a){return this.pushStack(e.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:E,sort:[].sort,splice:[].splice},e.fn.init.prototype=e.fn,e.extend=e.fn.extend=function(){var a,c,d,f,g,h,i=arguments[0]||{},j=1,k=arguments.length,l=!1;typeof i=="boolean"&&(l=i,i=arguments[1]||{},j=2),typeof i!="object"&&!e.isFunction(i)&&(i={}),k===j&&(i=this,--j);for(;j<k;j++)if((a=arguments[j])!=null)for(c in a){d=i[c],f=a[c];if(i===f)continue;l&&f&&(e.isPlainObject(f)||(g=e.isArray(f)))?(g?(g=!1,h=d&&e.isArray(d)?d:[]):h=d&&e.isPlainObject(d)?d:{},i[c]=e.extend(l,h,f)):f!==b&&(i[c]=f)}return i},e.extend({noConflict:function(b){a.$===e&&(a.$=g),b&&a.jQuery===e&&(a.jQuery=f);return e},isReady:!1,readyWait:1,holdReady:function(a){a?e.readyWait++:e.ready(!0)},ready:function(a){if(a===!0&&!--e.readyWait||a!==!0&&!e.isReady){if(!c.body)return setTimeout(e.ready,1);e.isReady=!0;if(a!==!0&&--e.readyWait>0)return;A.fireWith(c,[e]),e.fn.trigger&&e(c).trigger("ready").off("ready")}},bindReady:function(){if(!A){A=e.Callbacks("once memory");if(c.readyState==="complete")return setTimeout(e.ready,1);if(c.addEventListener)c.addEventListener("DOMContentLoaded",B,!1),a.addEventListener("load",e.ready,!1);else if(c.attachEvent){c.attachEvent("onreadystatechange",B),a.attachEvent("onload",e.ready);var b=!1;try{b=a.frameElement==null}catch(d){}c.documentElement.doScroll&&b&&J()}}},isFunction:function(a){return e.type(a)==="function"},isArray:Array.isArray||function(a){return e.type(a)==="array"},isWindow:function(a){return a&&typeof a=="object"&&"setInterval"in a},isNumeric:function(a){return!isNaN(parseFloat(a))&&isFinite(a)},type:function(a){return a==null?String(a):I[C.call(a)]||"object"},isPlainObject:function(a){if(!a||e.type(a)!=="object"||a.nodeType||e.isWindow(a))return!1;try{if(a.constructor&&!D.call(a,"constructor")&&!D.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}var d;for(d in a);return d===b||D.call(a,d)},isEmptyObject:function(a){for(var b in a)return!1;return!0},error:function(a){throw new Error(a)},parseJSON:function(b){if(typeof b!="string"||!b)return null;b=e.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(n.test(b.replace(o,"@").replace(p,"]").replace(q,"")))return(new Function("return "+b))();e.error("Invalid JSON: "+b)},parseXML:function(c){var d,f;try{a.DOMParser?(f=new DOMParser,d=f.parseFromString(c,"text/xml")):(d=new ActiveXObject("Microsoft.XMLDOM"),d.async="false",d.loadXML(c))}catch(g){d=b}(!d||!d.documentElement||d.getElementsByTagName("parsererror").length)&&e.error("Invalid XML: "+c);return d},noop:function(){},globalEval:function(b){b&&j.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(w,"ms-").replace(v,x)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,c,d){var f,g=0,h=a.length,i=h===b||e.isFunction(a);if(d){if(i){for(f in a)if(c.apply(a[f],d)===!1)break}else for(;g<h;)if(c.apply(a[g++],d)===!1)break}else if(i){for(f in a)if(c.call(a[f],f,a[f])===!1)break}else for(;g<h;)if(c.call(a[g],g,a[g++])===!1)break;return a},trim:G?function(a){return a==null?"":G.call(a)}:function(a){return a==null?"":(a+"").replace(k,"").replace(l,"")},makeArray:function(a,b){var c=b||[];if(a!=null){var d=e.type(a);a.length==null||d==="string"||d==="function"||d==="regexp"||e.isWindow(a)?E.call(c,a):e.merge(c,a)}return c},inArray:function(a,b,c){var d;if(b){if(H)return H.call(b,a,c);d=b.length,c=c?c<0?Math.max(0,d+c):c:0;for(;c<d;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,c){var d=a.length,e=0;if(typeof c.length=="number")for(var f=c.length;e<f;e++)a[d++]=c[e];else while(c[e]!==b)a[d++]=c[e++];a.length=d;return a},grep:function(a,b,c){var d=[],e;c=!!c;for(var f=0,g=a.length;f<g;f++)e=!!b(a[f],f),c!==e&&d.push(a[f]);return d},map:function(a,c,d){var f,g,h=[],i=0,j=a.length,k=a instanceof e||j!==b&&typeof j=="number"&&(j>0&&a[0]&&a[j-1]||j===0||e.isArray(a));if(k)for(;i<j;i++)f=c(a[i],i,d),f!=null&&(h[h.length]=f);else for(g in a)f=c(a[g],g,d),f!=null&&(h[h.length]=f);return h.concat.apply([],h)},guid:1,proxy:function(a,c){if(typeof c=="string"){var d=a[c];c=a,a=d}if(!e.isFunction(a))return b;var f=F.call(arguments,2),g=function(){return a.apply(c,f.concat(F.call(arguments)))};g.guid=a.guid=a.guid||g.guid||e.guid++;return g},access:function(a,c,d,f,g,h){var i=a.length;if(typeof c=="object"){for(var j in c)e.access(a,j,c[j],f,g,d);return a}if(d!==b){f=!h&&f&&e.isFunction(d);for(var k=0;k<i;k++)g(a[k],c,f?d.call(a[k],k,g(a[k],c)):d,h);return a}return i?g(a[0],c):b},now:function(){return(new Date).getTime()},uaMatch:function(a){a=a.toLowerCase();var b=r.exec(a)||s.exec(a)||t.exec(a)||a.indexOf("compatible")<0&&u.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},sub:function(){function a(b,c){return new a.fn.init(b,c)}e.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function(d,f){f&&f instanceof e&&!(f instanceof a)&&(f=a(f));return e.fn.init.call(this,d,f,b)},a.fn.init.prototype=a.fn;var b=a(c);return a},browser:{}}),e.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){I["[object "+b+"]"]=b.toLowerCase()}),z=e.uaMatch(y),z.browser&&(e.browser[z.browser]=!0,e.browser.version=z.version),e.browser.webkit&&(e.browser.safari=!0),j.test(" ")&&(k=/^[\s\xA0]+/,l=/[\s\xA0]+$/),h=e(c),c.addEventListener?B=function(){c.removeEventListener("DOMContentLoaded",B,!1),e.ready()}:c.attachEvent&&(B=function(){c.readyState==="complete"&&(c.detachEvent("onreadystatechange",B),e.ready())});return e}(),g={};f.Callbacks=function(a){a=a?g[a]||h(a):{};var c=[],d=[],e,i,j,k,l,m=function(b){var d,e,g,h,i;for(d=0,e=b.length;d<e;d++)g=b[d],h=f.type(g),h==="array"?m(g):h==="function"&&(!a.unique||!o.has(g))&&c.push(g)},n=function(b,f){f=f||[],e=!a.memory||[b,f],i=!0,l=j||0,j=0,k=c.length;for(;c&&l<k;l++)if(c[l].apply(b,f)===!1&&a.stopOnFalse){e=!0;break}i=!1,c&&(a.once?e===!0?o.disable():c=[]:d&&d.length&&(e=d.shift(),o.fireWith(e[0],e[1])))},o={add:function(){if(c){var a=c.length;m(arguments),i?k=c.length:e&&e!==!0&&(j=a,n(e[0],e[1]))}return this},remove:function(){if(c){var b=arguments,d=0,e=b.length;for(;d<e;d++)for(var f=0;f<c.length;f++)if(b[d]===c[f]){i&&f<=k&&(k--,f<=l&&l--),c.splice(f--,1);if(a.unique)break}}return this},has:function(a){if(c){var b=0,d=c.length;for(;b<d;b++)if(a===c[b])return!0}return!1},empty:function(){c=[];return this},disable:function(){c=d=e=b;return this},disabled:function(){return!c},lock:function(){d=b,(!e||e===!0)&&o.disable();return this},locked:function(){return!d},fireWith:function(b,c){d&&(i?a.once||d.push([b,c]):(!a.once||!e)&&n(b,c));return this},fire:function(){o.fireWith(this,arguments);return this},fired:function(){return!!e}};return o};var i=[].slice;f.extend({Deferred:function(a){var b=f.Callbacks("once memory"),c=f.Callbacks("once memory"),d=f.Callbacks("memory"),e="pending",g={resolve:b,reject:c,notify:d},h={done:b.add,fail:c.add,progress:d.add,state:function(){return e},isResolved:b.fired,isRejected:c.fired,then:function(a,b,c){i.done(a).fail(b).progress(c);return this},always:function(){i.done.apply(i,arguments).fail.apply(i,arguments);return this},pipe:function(a,b,c){return f.Deferred(function(d){f.each({done:[a,"resolve"],fail:[b,"reject"],progress:[c,"notify"]},function(a,b){var c=b[0],e=b[1],g;f.isFunction(c)?i[a](function(){g=c.apply(this,arguments),g&&f.isFunction(g.promise)?g.promise().then(d.resolve,d.reject,d.notify):d[e+"With"](this===i?d:this,[g])}):i[a](d[e])})}).promise()},promise:function(a){if(a==null)a=h;else for(var b in h)a[b]=h[b];return a}},i=h.promise({}),j;for(j in g)i[j]=g[j].fire,i[j+"With"]=g[j].fireWith;i.done(function(){e="resolved"},c.disable,d.lock).fail(function(){e="rejected"},b.disable,d.lock),a&&a.call(i,i);return i},when:function(a){function m(a){return function(b){e[a]=arguments.length>1?i.call(arguments,0):b,j.notifyWith(k,e)}}function l(a){return function(c){b[a]=arguments.length>1?i.call(arguments,0):c,--g||j.resolveWith(j,b)}}var b=i.call(arguments,0),c=0,d=b.length,e=Array(d),g=d,h=d,j=d<=1&&a&&f.isFunction(a.promise)?a:f.Deferred(),k=j.promise();if(d>1){for(;c<d;c++)b[c]&&b[c].promise&&f.isFunction(b[c].promise)?b[c].promise().then(l(c),j.reject,m(c)):--g;g||j.resolveWith(j,b)}else j!==a&&j.resolveWith(j,d?[a]:[]);return k}}),f.support=function(){var b,d,e,g,h,i,j,k,l,m,n,o,p,q=c.createElement("div"),r=c.documentElement;q.setAttribute("className","t"),q.innerHTML="   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>",d=q.getElementsByTagName("*"),e=q.getElementsByTagName("a")[0];if(!d||!d.length||!e)return{};g=c.createElement("select"),h=g.appendChild(c.createElement("option")),i=q.getElementsByTagName("input")[0],b={leadingWhitespace:q.firstChild.nodeType===3,tbody:!q.getElementsByTagName("tbody").length,htmlSerialize:!!q.getElementsByTagName("link").length,style:/top/.test(e.getAttribute("style")),hrefNormalized:e.getAttribute("href")==="/a",opacity:/^0.55/.test(e.style.opacity),cssFloat:!!e.style.cssFloat,checkOn:i.value==="on",optSelected:h.selected,getSetAttribute:q.className!=="t",enctype:!!c.createElement("form").enctype,html5Clone:c.createElement("nav").cloneNode(!0).outerHTML!=="<:nav></:nav>",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0},i.checked=!0,b.noCloneChecked=i.cloneNode(!0).checked,g.disabled=!0,b.optDisabled=!h.disabled;try{delete q.test}catch(s){b.deleteExpando=!1}!q.addEventListener&&q.attachEvent&&q.fireEvent&&(q.attachEvent("onclick",function(){b.noCloneEvent=!1}),q.cloneNode(!0).fireEvent("onclick")),i=c.createElement("input"),i.value="t",i.setAttribute("type","radio"),b.radioValue=i.value==="t",i.setAttribute("checked","checked"),q.appendChild(i),k=c.createDocumentFragment(),k.appendChild(q.lastChild),b.checkClone=k.cloneNode(!0).cloneNode(!0).lastChild.checked,b.appendChecked=i.checked,k.removeChild(i),k.appendChild(q),q.innerHTML="",a.getComputedStyle&&(j=c.createElement("div"),j.style.width="0",j.style.marginRight="0",q.style.width="2px",q.appendChild(j),b.reliableMarginRight=(parseInt((a.getComputedStyle(j,null)||{marginRight:0}).marginRight,10)||0)===0);if(q.attachEvent)for(o in{submit:1,change:1,focusin:1})n="on"+o,p=n in q,p||(q.setAttribute(n,"return;"),p=typeof q[n]=="function"),b[o+"Bubbles"]=p;k.removeChild(q),k=g=h=j=q=i=null,f(function(){var a,d,e,g,h,i,j,k,m,n,o,r=c.getElementsByTagName("body")[0];!r||(j=1,k="position:absolute;top:0;left:0;width:1px;height:1px;margin:0;",m="visibility:hidden;border:0;",n="style='"+k+"border:5px solid #000;padding:0;'",o="<div "+n+"><div></div></div>"+"<table "+n+" cellpadding='0' cellspacing='0'>"+"<tr><td></td></tr></table>",a=c.createElement("div"),a.style.cssText=m+"width:0;height:0;position:static;top:0;margin-top:"+j+"px",r.insertBefore(a,r.firstChild),q=c.createElement("div"),a.appendChild(q),q.innerHTML="<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>",l=q.getElementsByTagName("td"),p=l[0].offsetHeight===0,l[0].style.display="",l[1].style.display="none",b.reliableHiddenOffsets=p&&l[0].offsetHeight===0,q.innerHTML="",q.style.width=q.style.paddingLeft="1px",f.boxModel=b.boxModel=q.offsetWidth===2,typeof q.style.zoom!="undefined"&&(q.style.display="inline",q.style.zoom=1,b.inlineBlockNeedsLayout=q.offsetWidth===2,q.style.display="",q.innerHTML="<div style='width:4px;'></div>",b.shrinkWrapBlocks=q.offsetWidth!==2),q.style.cssText=k+m,q.innerHTML=o,d=q.firstChild,e=d.firstChild,h=d.nextSibling.firstChild.firstChild,i={doesNotAddBorder:e.offsetTop!==5,doesAddBorderForTableAndCells:h.offsetTop===5},e.style.position="fixed",e.style.top="20px",i.fixedPosition=e.offsetTop===20||e.offsetTop===15,e.style.position=e.style.top="",d.style.overflow="hidden",d.style.position="relative",i.subtractsBorderForOverflowNotVisible=e.offsetTop===-5,i.doesNotIncludeMarginInBodyOffset=r.offsetTop!==j,r.removeChild(a),q=a=null,f.extend(b,i))});return b}();var j=/^(?:\{.*\}|\[.*\])$/,k=/([A-Z])/g;f.extend({cache:{},uuid:0,expando:"jQuery"+(f.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){a=a.nodeType?f.cache[a[f.expando]]:a[f.expando];return!!a&&!m(a)},data:function(a,c,d,e){if(!!f.acceptData(a)){var g,h,i,j=f.expando,k=typeof c=="string",l=a.nodeType,m=l?f.cache:a,n=l?a[j]:a[j]&&j,o=c==="events";if((!n||!m[n]||!o&&!e&&!m[n].data)&&k&&d===b)return;n||(l?a[j]=n=++f.uuid:n=j),m[n]||(m[n]={},l||(m[n].toJSON=f.noop));if(typeof c=="object"||typeof c=="function")e?m[n]=f.extend(m[n],c):m[n].data=f.extend(m[n].data,c);g=h=m[n],e||(h.data||(h.data={}),h=h.data),d!==b&&(h[f.camelCase(c)]=d);if(o&&!h[c])return g.events;k?(i=h[c],i==null&&(i=h[f.camelCase(c)])):i=h;return i}},removeData:function(a,b,c){if(!!f.acceptData(a)){var d,e,g,h=f.expando,i=a.nodeType,j=i?f.cache:a,k=i?a[h]:h;if(!j[k])return;if(b){d=c?j[k]:j[k].data;if(d){f.isArray(b)||(b in d?b=[b]:(b=f.camelCase(b),b in d?b=[b]:b=b.split(" ")));for(e=0,g=b.length;e<g;e++)delete d[b[e]];if(!(c?m:f.isEmptyObject)(d))return}}if(!c){delete j[k].data;if(!m(j[k]))return}f.support.deleteExpando||!j.setInterval?delete j[k]:j[k]=null,i&&(f.support.deleteExpando?delete a[h]:a.removeAttribute?a.removeAttribute(h):a[h]=null)}},_data:function(a,b,c){return f.data(a,b,c,!0)},acceptData:function(a){if(a.nodeName){var b=f.noData[a.nodeName.toLowerCase()];if(b)return b!==!0&&a.getAttribute("classid")===b}return!0}}),f.fn.extend({data:function(a,c){var d,e,g,h=null;if(typeof a=="undefined"){if(this.length){h=f.data(this[0]);if(this[0].nodeType===1&&!f._data(this[0],"parsedAttrs")){e=this[0].attributes;for(var i=0,j=e.length;i<j;i++)g=e[i].name,g.indexOf("data-")===0&&(g=f.camelCase(g.substring(5)),l(this[0],g,h[g]));f._data(this[0],"parsedAttrs",!0)}}return h}if(typeof a=="object")return this.each(function(){f.data(this,a)});d=a.split("."),d[1]=d[1]?"."+d[1]:"";if(c===b){h=this.triggerHandler("getData"+d[1]+"!",[d[0]]),h===b&&this.length&&(h=f.data(this[0],a),h=l(this[0],a,h));return h===b&&d[1]?this.data(d[0]):h}return this.each(function(){var b=f(this),e=[d[0],c];b.triggerHandler("setData"+d[1]+"!",e),f.data(this,a,c),b.triggerHandler("changeData"+d[1]+"!",e)})},removeData:function(a){return this.each(function(){f.removeData(this,a)})}}),f.extend({_mark:function(a,b){a&&(b=(b||"fx")+"mark",f._data(a,b,(f._data(a,b)||0)+1))},_unmark:function(a,b,c){a!==!0&&(c=b,b=a,a=!1);if(b){c=c||"fx";var d=c+"mark",e=a?0:(f._data(b,d)||1)-1;e?f._data(b,d,e):(f.removeData(b,d,!0),n(b,c,"mark"))}},queue:function(a,b,c){var d;if(a){b=(b||"fx")+"queue",d=f._data(a,b),c&&(!d||f.isArray(c)?d=f._data(a,b,f.makeArray(c)):d.push(c));return d||[]}},dequeue:function(a,b){b=b||"fx";var c=f.queue(a,b),d=c.shift(),e={};d==="inprogress"&&(d=c.shift()),d&&(b==="fx"&&c.unshift("inprogress"),f._data(a,b+".run",e),d.call(a,function(){f.dequeue(a,b)},e)),c.length||(f.removeData(a,b+"queue "+b+".run",!0),n(a,b,"queue"))}}),f.fn.extend({queue:function(a,c){typeof a!="string"&&(c=a,a="fx");if(c===b)return f.queue(this[0],a);return this.each(function(){var b=f.queue(this,a,c);a==="fx"&&b[0]!=="inprogress"&&f.dequeue(this,a)})},dequeue:function(a){return this.each(function(){f.dequeue(this,a)})},delay:function(a,b){a=f.fx?f.fx.speeds[a]||a:a,b=b||"fx";return this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){function m(){--h||d.resolveWith(e,[e])}typeof a!="string"&&(c=a,a=b),a=a||"fx";var d=f.Deferred(),e=this,g=e.length,h=1,i=a+"defer",j=a+"queue",k=a+"mark",l;while(g--)if(l=f.data(e[g],i,b,!0)||(f.data(e[g],j,b,!0)||f.data(e[g],k,b,!0))&&f.data(e[g],i,f.Callbacks("once memory"),!0))h++,l.add(m);m();return d.promise()}});var o=/[\n\t\r]/g,p=/\s+/,q=/\r/g,r=/^(?:button|input)$/i,s=/^(?:button|input|object|select|textarea)$/i,t=/^a(?:rea)?$/i,u=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,v=f.support.getSetAttribute,w,x,y;f.fn.extend({attr:function(a,b){return f.access(this,a,b,!0,f.attr)},removeAttr:function(a){return this.each(function(){f.removeAttr(this,a)})},prop:function(a,b){return f.access(this,a,b,!0,f.prop)},removeProp:function(a){a=f.propFix[a]||a;return this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,g,h,i;if(f.isFunction(a))return this.each(function(b){f(this).addClass(a.call(this,b,this.className))});if(a&&typeof a=="string"){b=a.split(p);for(c=0,d=this.length;c<d;c++){e=this[c];if(e.nodeType===1)if(!e.className&&b.length===1)e.className=a;else{g=" "+e.className+" ";for(h=0,i=b.length;h<i;h++)~g.indexOf(" "+b[h]+" ")||(g+=b[h]+" ");e.className=f.trim(g)}}}return this},removeClass:function(a){var c,d,e,g,h,i,j;if(f.isFunction(a))return this.each(function(b){f(this).removeClass(a.call(this,b,this.className))});if(a&&typeof a=="string"||a===b){c=(a||"").split(p);for(d=0,e=this.length;d<e;d++){g=this[d];if(g.nodeType===1&&g.className)if(a){h=(" "+g.className+" ").replace(o," ");for(i=0,j=c.length;i<j;i++)h=h.replace(" "+c[i]+" "," ");g.className=f.trim(h)}else g.className=""}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";if(f.isFunction(a))return this.each(function(c){f(this).toggleClass(a.call(this,c,this.className,b),b)});return this.each(function(){if(c==="string"){var e,g=0,h=f(this),i=b,j=a.split(p);while(e=j[g++])i=d?i:!h.hasClass(e),h[i?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&&f._data(this,"__className__",this.className),this.className=this.className||a===!1?"":f._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ",c=0,d=this.length;for(;c<d;c++)if(this[c].nodeType===1&&(" "+this[c].className+" ").replace(o," ").indexOf(b)>-1)return!0;return!1},val:function(a){var c,d,e,g=this[0];{if(!!arguments.length){e=f.isFunction(a);return this.each(function(d){var g=f(this),h;if(this.nodeType===1){e?h=a.call(this,d,g.val()):h=a,h==null?h="":typeof h=="number"?h+="":f.isArray(h)&&(h=f.map(h,function(a){return a==null?"":a+""})),c=f.valHooks[this.nodeName.toLowerCase()]||f.valHooks[this.type];if(!c||!("set"in c)||c.set(this,h,"value")===b)this.value=h}})}if(g){c=f.valHooks[g.nodeName.toLowerCase()]||f.valHooks[g.type];if(c&&"get"in c&&(d=c.get(g,"value"))!==b)return d;d=g.value;return typeof d=="string"?d.replace(q,""):d==null?"":d}}}}),f.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c,d,e,g=a.selectedIndex,h=[],i=a.options,j=a.type==="select-one";if(g<0)return null;c=j?g:0,d=j?g+1:i.length;for(;c<d;c++){e=i[c];if(e.selected&&(f.support.optDisabled?!e.disabled:e.getAttribute("disabled")===null)&&(!e.parentNode.disabled||!f.nodeName(e.parentNode,"optgroup"))){b=f(e).val();if(j)return b;h.push(b)}}if(j&&!h.length&&i.length)return f(i[g]).val();return h},set:function(a,b){var c=f.makeArray(b);f(a).find("option").each(function(){this.selected=f.inArray(f(this).val(),c)>=0}),c.length||(a.selectedIndex=-1);return c}}},attrFn:{val:!0,css:!0,html:!0,text:!0,data:!0,width:!0,height:!0,offset:!0},attr:function(a,c,d,e){var g,h,i,j=a.nodeType;if(!!a&&j!==3&&j!==8&&j!==2){if(e&&c in f.attrFn)return f(a)[c](d);if(typeof a.getAttribute=="undefined")return f.prop(a,c,d);i=j!==1||!f.isXMLDoc(a),i&&(c=c.toLowerCase(),h=f.attrHooks[c]||(u.test(c)?x:w));if(d!==b){if(d===null){f.removeAttr(a,c);return}if(h&&"set"in h&&i&&(g=h.set(a,d,c))!==b)return g;a.setAttribute(c,""+d);return d}if(h&&"get"in h&&i&&(g=h.get(a,c))!==null)return g;g=a.getAttribute(c);return g===null?b:g}},removeAttr:function(a,b){var c,d,e,g,h=0;if(b&&a.nodeType===1){d=b.toLowerCase().split(p),g=d.length;for(;h<g;h++)e=d[h],e&&(c=f.propFix[e]||e,f.attr(a,e,""),a.removeAttribute(v?e:c),u.test(e)&&c in a&&(a[c]=!1))}},attrHooks:{type:{set:function(a,b){if(r.test(a.nodeName)&&a.parentNode)f.error("type property can't be changed");else if(!f.support.radioValue&&b==="radio"&&f.nodeName(a,"input")){var c=a.value;a.setAttribute("type",b),c&&(a.value=c);return b}}},value:{get:function(a,b){if(w&&f.nodeName(a,"button"))return w.get(a,b);return b in a?a.value:null},set:function(a,b,c){if(w&&f.nodeName(a,"button"))return w.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e,g,h,i=a.nodeType;if(!!a&&i!==3&&i!==8&&i!==2){h=i!==1||!f.isXMLDoc(a),h&&(c=f.propFix[c]||c,g=f.propHooks[c]);return d!==b?g&&"set"in g&&(e=g.set(a,d,c))!==b?e:a[c]=d:g&&"get"in g&&(e=g.get(a,c))!==null?e:a[c]}},propHooks:{tabIndex:{get:function(a){var c=a.getAttributeNode("tabindex");return c&&c.specified?parseInt(c.value,10):s.test(a.nodeName)||t.test(a.nodeName)&&a.href?0:b}}}}),f.attrHooks.tabindex=f.propHooks.tabIndex,x={get:function(a,c){var d,e=f.prop(a,c);return e===!0||typeof e!="boolean"&&(d=a.getAttributeNode(c))&&d.nodeValue!==!1?c.toLowerCase():b},set:function(a,b,c){var d;b===!1?f.removeAttr(a,c):(d=f.propFix[c]||c,d in a&&(a[d]=!0),a.setAttribute(c,c.toLowerCase()));return c}},v||(y={name:!0,id:!0},w=f.valHooks.button={get:function(a,c){var d;d=a.getAttributeNode(c);return d&&(y[c]?d.nodeValue!=="":d.specified)?d.nodeValue:b},set:function(a,b,d){var e=a.getAttributeNode(d);e||(e=c.createAttribute(d),a.setAttributeNode(e));return e.nodeValue=b+""}},f.attrHooks.tabindex.set=w.set,f.each(["width","height"],function(a,b){f.attrHooks[b]=f.extend(f.attrHooks[b],{set:function(a,c){if(c===""){a.setAttribute(b,"auto");return c}}})}),f.attrHooks.contenteditable={get:w.get,set:function(a,b,c){b===""&&(b="false"),w.set(a,b,c)}}),f.support.hrefNormalized||f.each(["href","src","width","height"],function(a,c){f.attrHooks[c]=f.extend(f.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),f.support.style||(f.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=""+b}}),f.support.optSelected||(f.propHooks.selected=f.extend(f.propHooks.selected,{get:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex);return null}})),f.support.enctype||(f.propFix.enctype="encoding"),f.support.checkOn||f.each(["radio","checkbox"],function(){f.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),f.each(["radio","checkbox"],function(){f.valHooks[this]=f.extend(f.valHooks[this],{set:function(a,b){if(f.isArray(b))return a.checked=f.inArray(f(a).val(),b)>=0}})});var z=/^(?:textarea|input|select)$/i,A=/^([^\.]*)?(?:\.(.+))?$/,B=/\bhover(\.\S+)?\b/,C=/^key/,D=/^(?:mouse|contextmenu)|click/,E=/^(?:focusinfocus|focusoutblur)$/,F=/^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,G=function(a){var b=F.exec(a);b&&(b[1]=(b[1]||"").toLowerCase(),b[3]=b[3]&&new RegExp("(?:^|\\s)"+b[3]+"(?:\\s|$)"));return b},H=function(a,b){var c=a.attributes||{};return(!b[1]||a.nodeName.toLowerCase()===b[1])&&(!b[2]||(c.id||{}).value===b[2])&&(!b[3]||b[3].test((c["class"]||{}).value))},I=function(a){return f.event.special.hover?a:a.replace(B,"mouseenter$1 mouseleave$1")};
f.event={add:function(a,c,d,e,g){var h,i,j,k,l,m,n,o,p,q,r,s;if(!(a.nodeType===3||a.nodeType===8||!c||!d||!(h=f._data(a)))){d.handler&&(p=d,d=p.handler),d.guid||(d.guid=f.guid++),j=h.events,j||(h.events=j={}),i=h.handle,i||(h.handle=i=function(a){return typeof f!="undefined"&&(!a||f.event.triggered!==a.type)?f.event.dispatch.apply(i.elem,arguments):b},i.elem=a),c=f.trim(I(c)).split(" ");for(k=0;k<c.length;k++){l=A.exec(c[k])||[],m=l[1],n=(l[2]||"").split(".").sort(),s=f.event.special[m]||{},m=(g?s.delegateType:s.bindType)||m,s=f.event.special[m]||{},o=f.extend({type:m,origType:l[1],data:e,handler:d,guid:d.guid,selector:g,quick:G(g),namespace:n.join(".")},p),r=j[m];if(!r){r=j[m]=[],r.delegateCount=0;if(!s.setup||s.setup.call(a,e,n,i)===!1)a.addEventListener?a.addEventListener(m,i,!1):a.attachEvent&&a.attachEvent("on"+m,i)}s.add&&(s.add.call(a,o),o.handler.guid||(o.handler.guid=d.guid)),g?r.splice(r.delegateCount++,0,o):r.push(o),f.event.global[m]=!0}a=null}},global:{},remove:function(a,b,c,d,e){var g=f.hasData(a)&&f._data(a),h,i,j,k,l,m,n,o,p,q,r,s;if(!!g&&!!(o=g.events)){b=f.trim(I(b||"")).split(" ");for(h=0;h<b.length;h++){i=A.exec(b[h])||[],j=k=i[1],l=i[2];if(!j){for(j in o)f.event.remove(a,j+b[h],c,d,!0);continue}p=f.event.special[j]||{},j=(d?p.delegateType:p.bindType)||j,r=o[j]||[],m=r.length,l=l?new RegExp("(^|\\.)"+l.split(".").sort().join("\\.(?:.*\\.)?")+"(\\.|$)"):null;for(n=0;n<r.length;n++)s=r[n],(e||k===s.origType)&&(!c||c.guid===s.guid)&&(!l||l.test(s.namespace))&&(!d||d===s.selector||d==="**"&&s.selector)&&(r.splice(n--,1),s.selector&&r.delegateCount--,p.remove&&p.remove.call(a,s));r.length===0&&m!==r.length&&((!p.teardown||p.teardown.call(a,l)===!1)&&f.removeEvent(a,j,g.handle),delete o[j])}f.isEmptyObject(o)&&(q=g.handle,q&&(q.elem=null),f.removeData(a,["events","handle"],!0))}},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,e,g){if(!e||e.nodeType!==3&&e.nodeType!==8){var h=c.type||c,i=[],j,k,l,m,n,o,p,q,r,s;if(E.test(h+f.event.triggered))return;h.indexOf("!")>=0&&(h=h.slice(0,-1),k=!0),h.indexOf(".")>=0&&(i=h.split("."),h=i.shift(),i.sort());if((!e||f.event.customEvent[h])&&!f.event.global[h])return;c=typeof c=="object"?c[f.expando]?c:new f.Event(h,c):new f.Event(h),c.type=h,c.isTrigger=!0,c.exclusive=k,c.namespace=i.join("."),c.namespace_re=c.namespace?new RegExp("(^|\\.)"+i.join("\\.(?:.*\\.)?")+"(\\.|$)"):null,o=h.indexOf(":")<0?"on"+h:"";if(!e){j=f.cache;for(l in j)j[l].events&&j[l].events[h]&&f.event.trigger(c,d,j[l].handle.elem,!0);return}c.result=b,c.target||(c.target=e),d=d!=null?f.makeArray(d):[],d.unshift(c),p=f.event.special[h]||{};if(p.trigger&&p.trigger.apply(e,d)===!1)return;r=[[e,p.bindType||h]];if(!g&&!p.noBubble&&!f.isWindow(e)){s=p.delegateType||h,m=E.test(s+h)?e:e.parentNode,n=null;for(;m;m=m.parentNode)r.push([m,s]),n=m;n&&n===e.ownerDocument&&r.push([n.defaultView||n.parentWindow||a,s])}for(l=0;l<r.length&&!c.isPropagationStopped();l++)m=r[l][0],c.type=r[l][1],q=(f._data(m,"events")||{})[c.type]&&f._data(m,"handle"),q&&q.apply(m,d),q=o&&m[o],q&&f.acceptData(m)&&q.apply(m,d)===!1&&c.preventDefault();c.type=h,!g&&!c.isDefaultPrevented()&&(!p._default||p._default.apply(e.ownerDocument,d)===!1)&&(h!=="click"||!f.nodeName(e,"a"))&&f.acceptData(e)&&o&&e[h]&&(h!=="focus"&&h!=="blur"||c.target.offsetWidth!==0)&&!f.isWindow(e)&&(n=e[o],n&&(e[o]=null),f.event.triggered=h,e[h](),f.event.triggered=b,n&&(e[o]=n));return c.result}},dispatch:function(c){c=f.event.fix(c||a.event);var d=(f._data(this,"events")||{})[c.type]||[],e=d.delegateCount,g=[].slice.call(arguments,0),h=!c.exclusive&&!c.namespace,i=[],j,k,l,m,n,o,p,q,r,s,t;g[0]=c,c.delegateTarget=this;if(e&&!c.target.disabled&&(!c.button||c.type!=="click")){m=f(this),m.context=this.ownerDocument||this;for(l=c.target;l!=this;l=l.parentNode||this){o={},q=[],m[0]=l;for(j=0;j<e;j++)r=d[j],s=r.selector,o[s]===b&&(o[s]=r.quick?H(l,r.quick):m.is(s)),o[s]&&q.push(r);q.length&&i.push({elem:l,matches:q})}}d.length>e&&i.push({elem:this,matches:d.slice(e)});for(j=0;j<i.length&&!c.isPropagationStopped();j++){p=i[j],c.currentTarget=p.elem;for(k=0;k<p.matches.length&&!c.isImmediatePropagationStopped();k++){r=p.matches[k];if(h||!c.namespace&&!r.namespace||c.namespace_re&&c.namespace_re.test(r.namespace))c.data=r.data,c.handleObj=r,n=((f.event.special[r.origType]||{}).handle||r.handler).apply(p.elem,g),n!==b&&(c.result=n,n===!1&&(c.preventDefault(),c.stopPropagation()))}}return c.result},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){a.which==null&&(a.which=b.charCode!=null?b.charCode:b.keyCode);return a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,d){var e,f,g,h=d.button,i=d.fromElement;a.pageX==null&&d.clientX!=null&&(e=a.target.ownerDocument||c,f=e.documentElement,g=e.body,a.pageX=d.clientX+(f&&f.scrollLeft||g&&g.scrollLeft||0)-(f&&f.clientLeft||g&&g.clientLeft||0),a.pageY=d.clientY+(f&&f.scrollTop||g&&g.scrollTop||0)-(f&&f.clientTop||g&&g.clientTop||0)),!a.relatedTarget&&i&&(a.relatedTarget=i===a.target?d.toElement:i),!a.which&&h!==b&&(a.which=h&1?1:h&2?3:h&4?2:0);return a}},fix:function(a){if(a[f.expando])return a;var d,e,g=a,h=f.event.fixHooks[a.type]||{},i=h.props?this.props.concat(h.props):this.props;a=f.Event(g);for(d=i.length;d;)e=i[--d],a[e]=g[e];a.target||(a.target=g.srcElement||c),a.target.nodeType===3&&(a.target=a.target.parentNode),a.metaKey===b&&(a.metaKey=a.ctrlKey);return h.filter?h.filter(a,g):a},special:{ready:{setup:f.bindReady},load:{noBubble:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},beforeunload:{setup:function(a,b,c){f.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}},simulate:function(a,b,c,d){var e=f.extend(new f.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?f.event.trigger(e,null,b):f.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},f.event.handle=f.event.dispatch,f.removeEvent=c.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){a.detachEvent&&a.detachEvent("on"+b,c)},f.Event=function(a,b){if(!(this instanceof f.Event))return new f.Event(a,b);a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?K:J):this.type=a,b&&f.extend(this,b),this.timeStamp=a&&a.timeStamp||f.now(),this[f.expando]=!0},f.Event.prototype={preventDefault:function(){this.isDefaultPrevented=K;var a=this.originalEvent;!a||(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){this.isPropagationStopped=K;var a=this.originalEvent;!a||(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=K,this.stopPropagation()},isDefaultPrevented:J,isPropagationStopped:J,isImmediatePropagationStopped:J},f.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){f.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c=this,d=a.relatedTarget,e=a.handleObj,g=e.selector,h;if(!d||d!==c&&!f.contains(c,d))a.type=e.origType,h=e.handler.apply(this,arguments),a.type=b;return h}}}),f.support.submitBubbles||(f.event.special.submit={setup:function(){if(f.nodeName(this,"form"))return!1;f.event.add(this,"click._submit keypress._submit",function(a){var c=a.target,d=f.nodeName(c,"input")||f.nodeName(c,"button")?c.form:b;d&&!d._submit_attached&&(f.event.add(d,"submit._submit",function(a){this.parentNode&&!a.isTrigger&&f.event.simulate("submit",this.parentNode,a,!0)}),d._submit_attached=!0)})},teardown:function(){if(f.nodeName(this,"form"))return!1;f.event.remove(this,"._submit")}}),f.support.changeBubbles||(f.event.special.change={setup:function(){if(z.test(this.nodeName)){if(this.type==="checkbox"||this.type==="radio")f.event.add(this,"propertychange._change",function(a){a.originalEvent.propertyName==="checked"&&(this._just_changed=!0)}),f.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1,f.event.simulate("change",this,a,!0))});return!1}f.event.add(this,"beforeactivate._change",function(a){var b=a.target;z.test(b.nodeName)&&!b._change_attached&&(f.event.add(b,"change._change",function(a){this.parentNode&&!a.isSimulated&&!a.isTrigger&&f.event.simulate("change",this.parentNode,a,!0)}),b._change_attached=!0)})},handle:function(a){var b=a.target;if(this!==b||a.isSimulated||a.isTrigger||b.type!=="radio"&&b.type!=="checkbox")return a.handleObj.handler.apply(this,arguments)},teardown:function(){f.event.remove(this,"._change");return z.test(this.nodeName)}}),f.support.focusinBubbles||f.each({focus:"focusin",blur:"focusout"},function(a,b){var d=0,e=function(a){f.event.simulate(b,a.target,f.event.fix(a),!0)};f.event.special[b]={setup:function(){d++===0&&c.addEventListener(a,e,!0)},teardown:function(){--d===0&&c.removeEventListener(a,e,!0)}}}),f.fn.extend({on:function(a,c,d,e,g){var h,i;if(typeof a=="object"){typeof c!="string"&&(d=c,c=b);for(i in a)this.on(i,c,d,a[i],g);return this}d==null&&e==null?(e=c,d=c=b):e==null&&(typeof c=="string"?(e=d,d=b):(e=d,d=c,c=b));if(e===!1)e=J;else if(!e)return this;g===1&&(h=e,e=function(a){f().off(a);return h.apply(this,arguments)},e.guid=h.guid||(h.guid=f.guid++));return this.each(function(){f.event.add(this,a,e,d,c)})},one:function(a,b,c,d){return this.on.call(this,a,b,c,d,1)},off:function(a,c,d){if(a&&a.preventDefault&&a.handleObj){var e=a.handleObj;f(a.delegateTarget).off(e.namespace?e.type+"."+e.namespace:e.type,e.selector,e.handler);return this}if(typeof a=="object"){for(var g in a)this.off(g,c,a[g]);return this}if(c===!1||typeof c=="function")d=c,c=b;d===!1&&(d=J);return this.each(function(){f.event.remove(this,a,d,c)})},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},live:function(a,b,c){f(this.context).on(a,this.selector,b,c);return this},die:function(a,b){f(this.context).off(a,this.selector||"**",b);return this},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return arguments.length==1?this.off(a,"**"):this.off(b,a,c)},trigger:function(a,b){return this.each(function(){f.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return f.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||f.guid++,d=0,e=function(c){var e=(f._data(this,"lastToggle"+a.guid)||0)%d;f._data(this,"lastToggle"+a.guid,e+1),c.preventDefault();return b[e].apply(this,arguments)||!1};e.guid=c;while(d<b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),f.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){f.fn[b]=function(a,c){c==null&&(c=a,a=null);return arguments.length>0?this.on(b,null,a,c):this.trigger(b)},f.attrFn&&(f.attrFn[b]=!0),C.test(b)&&(f.event.fixHooks[b]=f.event.keyHooks),D.test(b)&&(f.event.fixHooks[b]=f.event.mouseHooks)}),function(){function x(a,b,c,e,f,g){for(var h=0,i=e.length;h<i;h++){var j=e[h];if(j){var k=!1;j=j[a];while(j){if(j[d]===c){k=e[j.sizset];break}if(j.nodeType===1){g||(j[d]=c,j.sizset=h);if(typeof b!="string"){if(j===b){k=!0;break}}else if(m.filter(b,[j]).length>0){k=j;break}}j=j[a]}e[h]=k}}}function w(a,b,c,e,f,g){for(var h=0,i=e.length;h<i;h++){var j=e[h];if(j){var k=!1;j=j[a];while(j){if(j[d]===c){k=e[j.sizset];break}j.nodeType===1&&!g&&(j[d]=c,j.sizset=h);if(j.nodeName.toLowerCase()===b){k=j;break}j=j[a]}e[h]=k}}}var a=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,d="sizcache"+(Math.random()+"").replace(".",""),e=0,g=Object.prototype.toString,h=!1,i=!0,j=/\\/g,k=/\r\n/g,l=/\W/;[0,0].sort(function(){i=!1;return 0});var m=function(b,d,e,f){e=e||[],d=d||c;var h=d;if(d.nodeType!==1&&d.nodeType!==9)return[];if(!b||typeof b!="string")return e;var i,j,k,l,n,q,r,t,u=!0,v=m.isXML(d),w=[],x=b;do{a.exec(""),i=a.exec(x);if(i){x=i[3],w.push(i[1]);if(i[2]){l=i[3];break}}}while(i);if(w.length>1&&p.exec(b))if(w.length===2&&o.relative[w[0]])j=y(w[0]+w[1],d,f);else{j=o.relative[w[0]]?[d]:m(w.shift(),d);while(w.length)b=w.shift(),o.relative[b]&&(b+=w.shift()),j=y(b,j,f)}else{!f&&w.length>1&&d.nodeType===9&&!v&&o.match.ID.test(w[0])&&!o.match.ID.test(w[w.length-1])&&(n=m.find(w.shift(),d,v),d=n.expr?m.filter(n.expr,n.set)[0]:n.set[0]);if(d){n=f?{expr:w.pop(),set:s(f)}:m.find(w.pop(),w.length===1&&(w[0]==="~"||w[0]==="+")&&d.parentNode?d.parentNode:d,v),j=n.expr?m.filter(n.expr,n.set):n.set,w.length>0?k=s(j):u=!1;while(w.length)q=w.pop(),r=q,o.relative[q]?r=w.pop():q="",r==null&&(r=d),o.relative[q](k,r,v)}else k=w=[]}k||(k=j),k||m.error(q||b);if(g.call(k)==="[object Array]")if(!u)e.push.apply(e,k);else if(d&&d.nodeType===1)for(t=0;k[t]!=null;t++)k[t]&&(k[t]===!0||k[t].nodeType===1&&m.contains(d,k[t]))&&e.push(j[t]);else for(t=0;k[t]!=null;t++)k[t]&&k[t].nodeType===1&&e.push(j[t]);else s(k,e);l&&(m(l,h,e,f),m.uniqueSort(e));return e};m.uniqueSort=function(a){if(u){h=i,a.sort(u);if(h)for(var b=1;b<a.length;b++)a[b]===a[b-1]&&a.splice(b--,1)}return a},m.matches=function(a,b){return m(a,null,null,b)},m.matchesSelector=function(a,b){return m(b,null,null,[a]).length>0},m.find=function(a,b,c){var d,e,f,g,h,i;if(!a)return[];for(e=0,f=o.order.length;e<f;e++){h=o.order[e];if(g=o.leftMatch[h].exec(a)){i=g[1],g.splice(1,1);if(i.substr(i.length-1)!=="\\"){g[1]=(g[1]||"").replace(j,""),d=o.find[h](g,b,c);if(d!=null){a=a.replace(o.match[h],"");break}}}}d||(d=typeof b.getElementsByTagName!="undefined"?b.getElementsByTagName("*"):[]);return{set:d,expr:a}},m.filter=function(a,c,d,e){var f,g,h,i,j,k,l,n,p,q=a,r=[],s=c,t=c&&c[0]&&m.isXML(c[0]);while(a&&c.length){for(h in o.filter)if((f=o.leftMatch[h].exec(a))!=null&&f[2]){k=o.filter[h],l=f[1],g=!1,f.splice(1,1);if(l.substr(l.length-1)==="\\")continue;s===r&&(r=[]);if(o.preFilter[h]){f=o.preFilter[h](f,s,d,r,e,t);if(!f)g=i=!0;else if(f===!0)continue}if(f)for(n=0;(j=s[n])!=null;n++)j&&(i=k(j,f,n,s),p=e^i,d&&i!=null?p?g=!0:s[n]=!1:p&&(r.push(j),g=!0));if(i!==b){d||(s=r),a=a.replace(o.match[h],"");if(!g)return[];break}}if(a===q)if(g==null)m.error(a);else break;q=a}return s},m.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)};var n=m.getText=function(a){var b,c,d=a.nodeType,e="";if(d){if(d===1||d===9){if(typeof a.textContent=="string")return a.textContent;if(typeof a.innerText=="string")return a.innerText.replace(k,"");for(a=a.firstChild;a;a=a.nextSibling)e+=n(a)}else if(d===3||d===4)return a.nodeValue}else for(b=0;c=a[b];b++)c.nodeType!==8&&(e+=n(c));return e},o=m.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(a){return a.getAttribute("href")},type:function(a){return a.getAttribute("type")}},relative:{"+":function(a,b){var c=typeof b=="string",d=c&&!l.test(b),e=c&&!d;d&&(b=b.toLowerCase());for(var f=0,g=a.length,h;f<g;f++)if(h=a[f]){while((h=h.previousSibling)&&h.nodeType!==1);a[f]=e||h&&h.nodeName.toLowerCase()===b?h||!1:h===b}e&&m.filter(b,a,!0)},">":function(a,b){var c,d=typeof b=="string",e=0,f=a.length;if(d&&!l.test(b)){b=b.toLowerCase();for(;e<f;e++){c=a[e];if(c){var g=c.parentNode;a[e]=g.nodeName.toLowerCase()===b?g:!1}}}else{for(;e<f;e++)c=a[e],c&&(a[e]=d?c.parentNode:c.parentNode===b);d&&m.filter(b,a,!0)}},"":function(a,b,c){var d,f=e++,g=x;typeof b=="string"&&!l.test(b)&&(b=b.toLowerCase(),d=b,g=w),g("parentNode",b,f,a,d,c)},"~":function(a,b,c){var d,f=e++,g=x;typeof b=="string"&&!l.test(b)&&(b=b.toLowerCase(),d=b,g=w),g("previousSibling",b,f,a,d,c)}},find:{ID:function(a,b,c){if(typeof b.getElementById!="undefined"&&!c){var d=b.getElementById(a[1]);return d&&d.parentNode?[d]:[]}},NAME:function(a,b){if(typeof b.getElementsByName!="undefined"){var c=[],d=b.getElementsByName(a[1]);for(var e=0,f=d.length;e<f;e++)d[e].getAttribute("name")===a[1]&&c.push(d[e]);return c.length===0?null:c}},TAG:function(a,b){if(typeof b.getElementsByTagName!="undefined")return b.getElementsByTagName(a[1])}},preFilter:{CLASS:function(a,b,c,d,e,f){a=" "+a[1].replace(j,"")+" ";if(f)return a;for(var g=0,h;(h=b[g])!=null;g++)h&&(e^(h.className&&(" "+h.className+" ").replace(/[\t\n\r]/g," ").indexOf(a)>=0)?c||d.push(h):c&&(b[g]=!1));return!1},ID:function(a){return a[1].replace(j,"")},TAG:function(a,b){return a[1].replace(j,"").toLowerCase()},CHILD:function(a){if(a[1]==="nth"){a[2]||m.error(a[0]),a[2]=a[2].replace(/^\+|\s*/g,"");var b=/(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2]==="even"&&"2n"||a[2]==="odd"&&"2n+1"||!/\D/.test(a[2])&&"0n+"+a[2]||a[2]);a[2]=b[1]+(b[2]||1)-0,a[3]=b[3]-0}else a[2]&&m.error(a[0]);a[0]=e++;return a},ATTR:function(a,b,c,d,e,f){var g=a[1]=a[1].replace(j,"");!f&&o.attrMap[g]&&(a[1]=o.attrMap[g]),a[4]=(a[4]||a[5]||"").replace(j,""),a[2]==="~="&&(a[4]=" "+a[4]+" ");return a},PSEUDO:function(b,c,d,e,f){if(b[1]==="not")if((a.exec(b[3])||"").length>1||/^\w/.test(b[3]))b[3]=m(b[3],null,null,c);else{var g=m.filter(b[3],c,d,!0^f);d||e.push.apply(e,g);return!1}else if(o.match.POS.test(b[0])||o.match.CHILD.test(b[0]))return!0;return b},POS:function(a){a.unshift(!0);return a}},filters:{enabled:function(a){return a.disabled===!1&&a.type!=="hidden"},disabled:function(a){return a.disabled===!0},checked:function(a){return a.checked===!0},selected:function(a){a.parentNode&&a.parentNode.selectedIndex;return a.selected===!0},parent:function(a){return!!a.firstChild},empty:function(a){return!a.firstChild},has:function(a,b,c){return!!m(c[3],a).length},header:function(a){return/h\d/i.test(a.nodeName)},text:function(a){var b=a.getAttribute("type"),c=a.type;return a.nodeName.toLowerCase()==="input"&&"text"===c&&(b===c||b===null)},radio:function(a){return a.nodeName.toLowerCase()==="input"&&"radio"===a.type},checkbox:function(a){return a.nodeName.toLowerCase()==="input"&&"checkbox"===a.type},file:function(a){return a.nodeName.toLowerCase()==="input"&&"file"===a.type},password:function(a){return a.nodeName.toLowerCase()==="input"&&"password"===a.type},submit:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"submit"===a.type},image:function(a){return a.nodeName.toLowerCase()==="input"&&"image"===a.type},reset:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"reset"===a.type},button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&"button"===a.type||b==="button"},input:function(a){return/input|select|textarea|button/i.test(a.nodeName)},focus:function(a){return a===a.ownerDocument.activeElement}},setFilters:{first:function(a,b){return b===0},last:function(a,b,c,d){return b===d.length-1},even:function(a,b){return b%2===0},odd:function(a,b){return b%2===1},lt:function(a,b,c){return b<c[3]-0},gt:function(a,b,c){return b>c[3]-0},nth:function(a,b,c){return c[3]-0===b},eq:function(a,b,c){return c[3]-0===b}},filter:{PSEUDO:function(a,b,c,d){var e=b[1],f=o.filters[e];if(f)return f(a,c,b,d);if(e==="contains")return(a.textContent||a.innerText||n([a])||"").indexOf(b[3])>=0;if(e==="not"){var g=b[3];for(var h=0,i=g.length;h<i;h++)if(g[h]===a)return!1;return!0}m.error(e)},CHILD:function(a,b){var c,e,f,g,h,i,j,k=b[1],l=a;switch(k){case"only":case"first":while(l=l.previousSibling)if(l.nodeType===1)return!1;if(k==="first")return!0;l=a;case"last":while(l=l.nextSibling)if(l.nodeType===1)return!1;return!0;case"nth":c=b[2],e=b[3];if(c===1&&e===0)return!0;f=b[0],g=a.parentNode;if(g&&(g[d]!==f||!a.nodeIndex)){i=0;for(l=g.firstChild;l;l=l.nextSibling)l.nodeType===1&&(l.nodeIndex=++i);g[d]=f}j=a.nodeIndex-e;return c===0?j===0:j%c===0&&j/c>=0}},ID:function(a,b){return a.nodeType===1&&a.getAttribute("id")===b},TAG:function(a,b){return b==="*"&&a.nodeType===1||!!a.nodeName&&a.nodeName.toLowerCase()===b},CLASS:function(a,b){return(" "+(a.className||a.getAttribute("class"))+" ").indexOf(b)>-1},ATTR:function(a,b){var c=b[1],d=m.attr?m.attr(a,c):o.attrHandle[c]?o.attrHandle[c](a):a[c]!=null?a[c]:a.getAttribute(c),e=d+"",f=b[2],g=b[4];return d==null?f==="!=":!f&&m.attr?d!=null:f==="="?e===g:f==="*="?e.indexOf(g)>=0:f==="~="?(" "+e+" ").indexOf(g)>=0:g?f==="!="?e!==g:f==="^="?e.indexOf(g)===0:f==="$="?e.substr(e.length-g.length)===g:f==="|="?e===g||e.substr(0,g.length+1)===g+"-":!1:e&&d!==!1},POS:function(a,b,c,d){var e=b[2],f=o.setFilters[e];if(f)return f(a,c,b,d)}}},p=o.match.POS,q=function(a,b){return"\\"+(b-0+1)};for(var r in o.match)o.match[r]=new RegExp(o.match[r].source+/(?![^\[]*\])(?![^\(]*\))/.source),o.leftMatch[r]=new RegExp(/(^(?:.|\r|\n)*?)/.source+o.match[r].source.replace(/\\(\d+)/g,q));var s=function(a,b){a=Array.prototype.slice.call(a,0);if(b){b.push.apply(b,a);return b}return a};try{Array.prototype.slice.call(c.documentElement.childNodes,0)[0].nodeType}catch(t){s=function(a,b){var c=0,d=b||[];if(g.call(a)==="[object Array]")Array.prototype.push.apply(d,a);else if(typeof a.length=="number")for(var e=a.length;c<e;c++)d.push(a[c]);else for(;a[c];c++)d.push(a[c]);return d}}var u,v;c.documentElement.compareDocumentPosition?u=function(a,b){if(a===b){h=!0;return 0}if(!a.compareDocumentPosition||!b.compareDocumentPosition)return a.compareDocumentPosition?-1:1;return a.compareDocumentPosition(b)&4?-1:1}:(u=function(a,b){if(a===b){h=!0;return 0}if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],g=a.parentNode,i=b.parentNode,j=g;if(g===i)return v(a,b);if(!g)return-1;if(!i)return 1;while(j)e.unshift(j),j=j.parentNode;j=i;while(j)f.unshift(j),j=j.parentNode;c=e.length,d=f.length;for(var k=0;k<c&&k<d;k++)if(e[k]!==f[k])return v(e[k],f[k]);return k===c?v(a,f[k],-1):v(e[k],b,1)},v=function(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}),function(){var a=c.createElement("div"),d="script"+(new Date).getTime(),e=c.documentElement;a.innerHTML="<a name='"+d+"'/>",e.insertBefore(a,e.firstChild),c.getElementById(d)&&(o.find.ID=function(a,c,d){if(typeof c.getElementById!="undefined"&&!d){var e=c.getElementById(a[1]);return e?e.id===a[1]||typeof e.getAttributeNode!="undefined"&&e.getAttributeNode("id").nodeValue===a[1]?[e]:b:[]}},o.filter.ID=function(a,b){var c=typeof a.getAttributeNode!="undefined"&&a.getAttributeNode("id");return a.nodeType===1&&c&&c.nodeValue===b}),e.removeChild(a),e=a=null}(),function(){var a=c.createElement("div");a.appendChild(c.createComment("")),a.getElementsByTagName("*").length>0&&(o.find.TAG=function(a,b){var c=b.getElementsByTagName(a[1]);if(a[1]==="*"){var d=[];for(var e=0;c[e];e++)c[e].nodeType===1&&d.push(c[e]);c=d}return c}),a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!="undefined"&&a.firstChild.getAttribute("href")!=="#"&&(o.attrHandle.href=function(a){return a.getAttribute("href",2)}),a=null}(),c.querySelectorAll&&function(){var a=m,b=c.createElement("div"),d="__sizzle__";b.innerHTML="<p class='TEST'></p>";if(!b.querySelectorAll||b.querySelectorAll(".TEST").length!==0){m=function(b,e,f,g){e=e||c;if(!g&&!m.isXML(e)){var h=/^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);if(h&&(e.nodeType===1||e.nodeType===9)){if(h[1])return s(e.getElementsByTagName(b),f);if(h[2]&&o.find.CLASS&&e.getElementsByClassName)return s(e.getElementsByClassName(h[2]),f)}if(e.nodeType===9){if(b==="body"&&e.body)return s([e.body],f);if(h&&h[3]){var i=e.getElementById(h[3]);if(!i||!i.parentNode)return s([],f);if(i.id===h[3])return s([i],f)}try{return s(e.querySelectorAll(b),f)}catch(j){}}else if(e.nodeType===1&&e.nodeName.toLowerCase()!=="object"){var k=e,l=e.getAttribute("id"),n=l||d,p=e.parentNode,q=/^\s*[+~]/.test(b);l?n=n.replace(/'/g,"\\$&"):e.setAttribute("id",n),q&&p&&(e=e.parentNode);try{if(!q||p)return s(e.querySelectorAll("[id='"+n+"'] "+b),f)}catch(r){}finally{l||k.removeAttribute("id")}}}return a(b,e,f,g)};for(var e in a)m[e]=a[e];b=null}}(),function(){var a=c.documentElement,b=a.matchesSelector||a.mozMatchesSelector||a.webkitMatchesSelector||a.msMatchesSelector;if(b){var d=!b.call(c.createElement("div"),"div"),e=!1;try{b.call(c.documentElement,"[test!='']:sizzle")}catch(f){e=!0}m.matchesSelector=function(a,c){c=c.replace(/\=\s*([^'"\]]*)\s*\]/g,"='$1']");if(!m.isXML(a))try{if(e||!o.match.PSEUDO.test(c)&&!/!=/.test(c)){var f=b.call(a,c);if(f||!d||a.document&&a.document.nodeType!==11)return f}}catch(g){}return m(c,null,null,[a]).length>0}}}(),function(){var a=c.createElement("div");a.innerHTML="<div class='test e'></div><div class='test'></div>";if(!!a.getElementsByClassName&&a.getElementsByClassName("e").length!==0){a.lastChild.className="e";if(a.getElementsByClassName("e").length===1)return;o.order.splice(1,0,"CLASS"),o.find.CLASS=function(a,b,c){if(typeof b.getElementsByClassName!="undefined"&&!c)return b.getElementsByClassName(a[1])},a=null}}(),c.documentElement.contains?m.contains=function(a,b){return a!==b&&(a.contains?a.contains(b):!0)}:c.documentElement.compareDocumentPosition?m.contains=function(a,b){return!!(a.compareDocumentPosition(b)&16)}:m.contains=function(){return!1},m.isXML=function(a){var b=(a?a.ownerDocument||a:0).documentElement;return b?b.nodeName!=="HTML":!1};var y=function(a,b,c){var d,e=[],f="",g=b.nodeType?[b]:b;while(d=o.match.PSEUDO.exec(a))f+=d[0],a=a.replace(o.match.PSEUDO,"");a=o.relative[a]?a+"*":a;for(var h=0,i=g.length;h<i;h++)m(a,g[h],e,c);return m.filter(f,e)};m.attr=f.attr,m.selectors.attrMap={},f.find=m,f.expr=m.selectors,f.expr[":"]=f.expr.filters,f.unique=m.uniqueSort,f.text=m.getText,f.isXMLDoc=m.isXML,f.contains=m.contains}();var L=/Until$/,M=/^(?:parents|prevUntil|prevAll)/,N=/,/,O=/^.[^:#\[\.,]*$/,P=Array.prototype.slice,Q=f.expr.match.POS,R={children:!0,contents:!0,next:!0,prev:!0};f.fn.extend({find:function(a){var b=this,c,d;if(typeof a!="string")return f(a).filter(function(){for(c=0,d=b.length;c<d;c++)if(f.contains(b[c],this))return!0});var e=this.pushStack("","find",a),g,h,i;for(c=0,d=this.length;c<d;c++){g=e.length,f.find(a,this[c],e);if(c>0)for(h=g;h<e.length;h++)for(i=0;i<g;i++)if(e[i]===e[h]){e.splice(h--,1);break}}return e},has:function(a){var b=f(a);return this.filter(function(){for(var a=0,c=b.length;a<c;a++)if(f.contains(this,b[a]))return!0})},not:function(a){return this.pushStack(T(this,a,!1),"not",a)},filter:function(a){return this.pushStack(T(this,a,!0),"filter",a)},is:function(a){return!!a&&(typeof a=="string"?Q.test(a)?f(a,this.context).index(this[0])>=0:f.filter(a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var c=[],d,e,g=this[0];if(f.isArray(a)){var h=1;while(g&&g.ownerDocument&&g!==b){for(d=0;d<a.length;d++)f(g).is(a[d])&&c.push({selector:a[d],elem:g,level:h});g=g.parentNode,h++}return c}var i=Q.test(a)||typeof a!="string"?f(a,b||this.context):0;for(d=0,e=this.length;d<e;d++){g=this[d];while(g){if(i?i.index(g)>-1:f.find.matchesSelector(g,a)){c.push(g);break}g=g.parentNode;if(!g||!g.ownerDocument||g===b||g.nodeType===11)break}}c=c.length>1?f.unique(c):c;return this.pushStack(c,"closest",a)},index:function(a){if(!a)return this[0]&&this[0].parentNode?this.prevAll().length:-1;if(typeof a=="string")return f.inArray(this[0],f(a));return f.inArray(a.jquery?a[0]:a,this)},add:function(a,b){var c=typeof a=="string"?f(a,b):f.makeArray(a&&a.nodeType?[a]:a),d=f.merge(this.get(),c);return this.pushStack(S(c[0])||S(d[0])?d:f.unique(d))},andSelf:function(){return this.add(this.prevObject)}}),f.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return f.dir(a,"parentNode")},parentsUntil:function(a,b,c){return f.dir(a,"parentNode",c)},next:function(a){return f.nth(a,2,"nextSibling")},prev:function(a){return f.nth(a,2,"previousSibling")},nextAll:function(a){return f.dir(a,"nextSibling")},prevAll:function(a){return f.dir(a,"previousSibling")},nextUntil:function(a,b,c){return f.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return f.dir(a,"previousSibling",c)},siblings:function(a){return f.sibling(a.parentNode.firstChild,a)},children:function(a){return f.sibling(a.firstChild)},contents:function(a){return f.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:f.makeArray(a.childNodes)}},function(a,b){f.fn[a]=function(c,d){var e=f.map(this,b,c);L.test(a)||(d=c),d&&typeof d=="string"&&(e=f.filter(d,e)),e=this.length>1&&!R[a]?f.unique(e):e,(this.length>1||N.test(d))&&M.test(a)&&(e=e.reverse());return this.pushStack(e,a,P.call(arguments).join(","))}}),f.extend({filter:function(a,b,c){c&&(a=":not("+a+")");return b.length===1?f.find.matchesSelector(b[0],a)?[b[0]]:[]:f.find.matches(a,b)},dir:function(a,c,d){var e=[],g=a[c];while(g&&g.nodeType!==9&&(d===b||g.nodeType!==1||!f(g).is(d)))g.nodeType===1&&e.push(g),g=g[c];return e},nth:function(a,b,c,d){b=b||1;var e=0;for(;a;a=a[c])if(a.nodeType===1&&++e===b)break;return a},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var V="abbr|article|aside|audio|canvas|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",W=/ jQuery\d+="(?:\d+|null)"/g,X=/^\s+/,Y=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,Z=/<([\w:]+)/,$=/<tbody/i,_=/<|&#?\w+;/,ba=/<(?:script|style)/i,bb=/<(?:script|object|embed|option|style)/i,bc=new RegExp("<(?:"+V+")","i"),bd=/checked\s*(?:[^=]|=\s*.checked.)/i,be=/\/(java|ecma)script/i,bf=/^\s*<!(?:\[CDATA\[|\-\-)/,bg={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]},bh=U(c);bg.optgroup=bg.option,bg.tbody=bg.tfoot=bg.colgroup=bg.caption=bg.thead,bg.th=bg.td,f.support.htmlSerialize||(bg._default=[1,"div<div>","</div>"]),f.fn.extend({text:function(a){if(f.isFunction(a))return this.each(function(b){var c=f(this);c.text(a.call(this,b,c.text()))});if(typeof a!="object"&&a!==b)return this.empty().append((this[0]&&this[0].ownerDocument||c).createTextNode(a));return f.text(this)},wrapAll:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapAll(a.call(this,b))});if(this[0]){var b=f(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapInner(a.call(this,b))});return this.each(function(){var b=f(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=f.isFunction(a);return this.each(function(c){f(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){f.nodeName(this,"body")||f(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=f.clean(arguments);a.push.apply(a,this.toArray());return this.pushStack(a,"before",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=this.pushStack(this,"after",arguments);a.push.apply(a,f.clean(arguments));return a}},remove:function(a,b){for(var c=0,d;(d=this[c])!=null;c++)if(!a||f.filter(a,[d]).length)!b&&d.nodeType===1&&(f.cleanData(d.getElementsByTagName("*")),f.cleanData([d])),d.parentNode&&d.parentNode.removeChild(d);return this},empty:function()
{for(var a=0,b;(b=this[a])!=null;a++){b.nodeType===1&&f.cleanData(b.getElementsByTagName("*"));while(b.firstChild)b.removeChild(b.firstChild)}return this},clone:function(a,b){a=a==null?!1:a,b=b==null?a:b;return this.map(function(){return f.clone(this,a,b)})},html:function(a){if(a===b)return this[0]&&this[0].nodeType===1?this[0].innerHTML.replace(W,""):null;if(typeof a=="string"&&!ba.test(a)&&(f.support.leadingWhitespace||!X.test(a))&&!bg[(Z.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(Y,"<$1></$2>");try{for(var c=0,d=this.length;c<d;c++)this[c].nodeType===1&&(f.cleanData(this[c].getElementsByTagName("*")),this[c].innerHTML=a)}catch(e){this.empty().append(a)}}else f.isFunction(a)?this.each(function(b){var c=f(this);c.html(a.call(this,b,c.html()))}):this.empty().append(a);return this},replaceWith:function(a){if(this[0]&&this[0].parentNode){if(f.isFunction(a))return this.each(function(b){var c=f(this),d=c.html();c.replaceWith(a.call(this,b,d))});typeof a!="string"&&(a=f(a).detach());return this.each(function(){var b=this.nextSibling,c=this.parentNode;f(this).remove(),b?f(b).before(a):f(c).append(a)})}return this.length?this.pushStack(f(f.isFunction(a)?a():a),"replaceWith",a):this},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){var e,g,h,i,j=a[0],k=[];if(!f.support.checkClone&&arguments.length===3&&typeof j=="string"&&bd.test(j))return this.each(function(){f(this).domManip(a,c,d,!0)});if(f.isFunction(j))return this.each(function(e){var g=f(this);a[0]=j.call(this,e,c?g.html():b),g.domManip(a,c,d)});if(this[0]){i=j&&j.parentNode,f.support.parentNode&&i&&i.nodeType===11&&i.childNodes.length===this.length?e={fragment:i}:e=f.buildFragment(a,this,k),h=e.fragment,h.childNodes.length===1?g=h=h.firstChild:g=h.firstChild;if(g){c=c&&f.nodeName(g,"tr");for(var l=0,m=this.length,n=m-1;l<m;l++)d.call(c?bi(this[l],g):this[l],e.cacheable||m>1&&l<n?f.clone(h,!0,!0):h)}k.length&&f.each(k,bp)}return this}}),f.buildFragment=function(a,b,d){var e,g,h,i,j=a[0];b&&b[0]&&(i=b[0].ownerDocument||b[0]),i.createDocumentFragment||(i=c),a.length===1&&typeof j=="string"&&j.length<512&&i===c&&j.charAt(0)==="<"&&!bb.test(j)&&(f.support.checkClone||!bd.test(j))&&(f.support.html5Clone||!bc.test(j))&&(g=!0,h=f.fragments[j],h&&h!==1&&(e=h)),e||(e=i.createDocumentFragment(),f.clean(a,i,e,d)),g&&(f.fragments[j]=h?e:1);return{fragment:e,cacheable:g}},f.fragments={},f.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){f.fn[a]=function(c){var d=[],e=f(c),g=this.length===1&&this[0].parentNode;if(g&&g.nodeType===11&&g.childNodes.length===1&&e.length===1){e[b](this[0]);return this}for(var h=0,i=e.length;h<i;h++){var j=(h>0?this.clone(!0):this).get();f(e[h])[b](j),d=d.concat(j)}return this.pushStack(d,a,e.selector)}}),f.extend({clone:function(a,b,c){var d,e,g,h=f.support.html5Clone||!bc.test("<"+a.nodeName)?a.cloneNode(!0):bo(a);if((!f.support.noCloneEvent||!f.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!f.isXMLDoc(a)){bk(a,h),d=bl(a),e=bl(h);for(g=0;d[g];++g)e[g]&&bk(d[g],e[g])}if(b){bj(a,h);if(c){d=bl(a),e=bl(h);for(g=0;d[g];++g)bj(d[g],e[g])}}d=e=null;return h},clean:function(a,b,d,e){var g;b=b||c,typeof b.createElement=="undefined"&&(b=b.ownerDocument||b[0]&&b[0].ownerDocument||c);var h=[],i;for(var j=0,k;(k=a[j])!=null;j++){typeof k=="number"&&(k+="");if(!k)continue;if(typeof k=="string")if(!_.test(k))k=b.createTextNode(k);else{k=k.replace(Y,"<$1></$2>");var l=(Z.exec(k)||["",""])[1].toLowerCase(),m=bg[l]||bg._default,n=m[0],o=b.createElement("div");b===c?bh.appendChild(o):U(b).appendChild(o),o.innerHTML=m[1]+k+m[2];while(n--)o=o.lastChild;if(!f.support.tbody){var p=$.test(k),q=l==="table"&&!p?o.firstChild&&o.firstChild.childNodes:m[1]==="<table>"&&!p?o.childNodes:[];for(i=q.length-1;i>=0;--i)f.nodeName(q[i],"tbody")&&!q[i].childNodes.length&&q[i].parentNode.removeChild(q[i])}!f.support.leadingWhitespace&&X.test(k)&&o.insertBefore(b.createTextNode(X.exec(k)[0]),o.firstChild),k=o.childNodes}var r;if(!f.support.appendChecked)if(k[0]&&typeof (r=k.length)=="number")for(i=0;i<r;i++)bn(k[i]);else bn(k);k.nodeType?h.push(k):h=f.merge(h,k)}if(d){g=function(a){return!a.type||be.test(a.type)};for(j=0;h[j];j++)if(e&&f.nodeName(h[j],"script")&&(!h[j].type||h[j].type.toLowerCase()==="text/javascript"))e.push(h[j].parentNode?h[j].parentNode.removeChild(h[j]):h[j]);else{if(h[j].nodeType===1){var s=f.grep(h[j].getElementsByTagName("script"),g);h.splice.apply(h,[j+1,0].concat(s))}d.appendChild(h[j])}}return h},cleanData:function(a){var b,c,d=f.cache,e=f.event.special,g=f.support.deleteExpando;for(var h=0,i;(i=a[h])!=null;h++){if(i.nodeName&&f.noData[i.nodeName.toLowerCase()])continue;c=i[f.expando];if(c){b=d[c];if(b&&b.events){for(var j in b.events)e[j]?f.event.remove(i,j):f.removeEvent(i,j,b.handle);b.handle&&(b.handle.elem=null)}g?delete i[f.expando]:i.removeAttribute&&i.removeAttribute(f.expando),delete d[c]}}}});var bq=/alpha\([^)]*\)/i,br=/opacity=([^)]*)/,bs=/([A-Z]|^ms)/g,bt=/^-?\d+(?:px)?$/i,bu=/^-?\d/,bv=/^([\-+])=([\-+.\de]+)/,bw={position:"absolute",visibility:"hidden",display:"block"},bx=["Left","Right"],by=["Top","Bottom"],bz,bA,bB;f.fn.css=function(a,c){if(arguments.length===2&&c===b)return this;return f.access(this,a,c,!0,function(a,c,d){return d!==b?f.style(a,c,d):f.css(a,c)})},f.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bz(a,"opacity","opacity");return c===""?"1":c}return a.style.opacity}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":f.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!!a&&a.nodeType!==3&&a.nodeType!==8&&!!a.style){var g,h,i=f.camelCase(c),j=a.style,k=f.cssHooks[i];c=f.cssProps[i]||i;if(d===b){if(k&&"get"in k&&(g=k.get(a,!1,e))!==b)return g;return j[c]}h=typeof d,h==="string"&&(g=bv.exec(d))&&(d=+(g[1]+1)*+g[2]+parseFloat(f.css(a,c)),h="number");if(d==null||h==="number"&&isNaN(d))return;h==="number"&&!f.cssNumber[i]&&(d+="px");if(!k||!("set"in k)||(d=k.set(a,d))!==b)try{j[c]=d}catch(l){}}},css:function(a,c,d){var e,g;c=f.camelCase(c),g=f.cssHooks[c],c=f.cssProps[c]||c,c==="cssFloat"&&(c="float");if(g&&"get"in g&&(e=g.get(a,!0,d))!==b)return e;if(bz)return bz(a,c)},swap:function(a,b,c){var d={};for(var e in b)d[e]=a.style[e],a.style[e]=b[e];c.call(a);for(e in b)a.style[e]=d[e]}}),f.curCSS=f.css,f.each(["height","width"],function(a,b){f.cssHooks[b]={get:function(a,c,d){var e;if(c){if(a.offsetWidth!==0)return bC(a,b,d);f.swap(a,bw,function(){e=bC(a,b,d)});return e}},set:function(a,b){if(!bt.test(b))return b;b=parseFloat(b);if(b>=0)return b+"px"}}}),f.support.opacity||(f.cssHooks.opacity={get:function(a,b){return br.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?parseFloat(RegExp.$1)/100+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=f.isNumeric(b)?"alpha(opacity="+b*100+")":"",g=d&&d.filter||c.filter||"";c.zoom=1;if(b>=1&&f.trim(g.replace(bq,""))===""){c.removeAttribute("filter");if(d&&!d.filter)return}c.filter=bq.test(g)?g.replace(bq,e):g+" "+e}}),f(function(){f.support.reliableMarginRight||(f.cssHooks.marginRight={get:function(a,b){var c;f.swap(a,{display:"inline-block"},function(){b?c=bz(a,"margin-right","marginRight"):c=a.style.marginRight});return c}})}),c.defaultView&&c.defaultView.getComputedStyle&&(bA=function(a,b){var c,d,e;b=b.replace(bs,"-$1").toLowerCase(),(d=a.ownerDocument.defaultView)&&(e=d.getComputedStyle(a,null))&&(c=e.getPropertyValue(b),c===""&&!f.contains(a.ownerDocument.documentElement,a)&&(c=f.style(a,b)));return c}),c.documentElement.currentStyle&&(bB=function(a,b){var c,d,e,f=a.currentStyle&&a.currentStyle[b],g=a.style;f===null&&g&&(e=g[b])&&(f=e),!bt.test(f)&&bu.test(f)&&(c=g.left,d=a.runtimeStyle&&a.runtimeStyle.left,d&&(a.runtimeStyle.left=a.currentStyle.left),g.left=b==="fontSize"?"1em":f||0,f=g.pixelLeft+"px",g.left=c,d&&(a.runtimeStyle.left=d));return f===""?"auto":f}),bz=bA||bB,f.expr&&f.expr.filters&&(f.expr.filters.hidden=function(a){var b=a.offsetWidth,c=a.offsetHeight;return b===0&&c===0||!f.support.reliableHiddenOffsets&&(a.style&&a.style.display||f.css(a,"display"))==="none"},f.expr.filters.visible=function(a){return!f.expr.filters.hidden(a)});var bD=/%20/g,bE=/\[\]$/,bF=/\r?\n/g,bG=/#.*$/,bH=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,bI=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,bJ=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,bK=/^(?:GET|HEAD)$/,bL=/^\/\//,bM=/\?/,bN=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,bO=/^(?:select|textarea)/i,bP=/\s+/,bQ=/([?&])_=[^&]*/,bR=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,bS=f.fn.load,bT={},bU={},bV,bW,bX=["*/"]+["*"];try{bV=e.href}catch(bY){bV=c.createElement("a"),bV.href="",bV=bV.href}bW=bR.exec(bV.toLowerCase())||[],f.fn.extend({load:function(a,c,d){if(typeof a!="string"&&bS)return bS.apply(this,arguments);if(!this.length)return this;var e=a.indexOf(" ");if(e>=0){var g=a.slice(e,a.length);a=a.slice(0,e)}var h="GET";c&&(f.isFunction(c)?(d=c,c=b):typeof c=="object"&&(c=f.param(c,f.ajaxSettings.traditional),h="POST"));var i=this;f.ajax({url:a,type:h,dataType:"html",data:c,complete:function(a,b,c){c=a.responseText,a.isResolved()&&(a.done(function(a){c=a}),i.html(g?f("<div>").append(c.replace(bN,"")).find(g):c)),d&&i.each(d,[c,b,a])}});return this},serialize:function(){return f.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?f.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||bO.test(this.nodeName)||bI.test(this.type))}).map(function(a,b){var c=f(this).val();return c==null?null:f.isArray(c)?f.map(c,function(a,c){return{name:b.name,value:a.replace(bF,"\r\n")}}):{name:b.name,value:c.replace(bF,"\r\n")}}).get()}}),f.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){f.fn[b]=function(a){return this.on(b,a)}}),f.each(["get","post"],function(a,c){f[c]=function(a,d,e,g){f.isFunction(d)&&(g=g||e,e=d,d=b);return f.ajax({type:c,url:a,data:d,success:e,dataType:g})}}),f.extend({getScript:function(a,c){return f.get(a,b,c,"script")},getJSON:function(a,b,c){return f.get(a,b,c,"json")},ajaxSetup:function(a,b){b?b_(a,f.ajaxSettings):(b=a,a=f.ajaxSettings),b_(a,b);return a},ajaxSettings:{url:bV,isLocal:bJ.test(bW[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":bX},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":f.parseJSON,"text xml":f.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:bZ(bT),ajaxTransport:bZ(bU),ajax:function(a,c){function w(a,c,l,m){if(s!==2){s=2,q&&clearTimeout(q),p=b,n=m||"",v.readyState=a>0?4:0;var o,r,u,w=c,x=l?cb(d,v,l):b,y,z;if(a>=200&&a<300||a===304){if(d.ifModified){if(y=v.getResponseHeader("Last-Modified"))f.lastModified[k]=y;if(z=v.getResponseHeader("Etag"))f.etag[k]=z}if(a===304)w="notmodified",o=!0;else try{r=cc(d,x),w="success",o=!0}catch(A){w="parsererror",u=A}}else{u=w;if(!w||a)w="error",a<0&&(a=0)}v.status=a,v.statusText=""+(c||w),o?h.resolveWith(e,[r,w,v]):h.rejectWith(e,[v,w,u]),v.statusCode(j),j=b,t&&g.trigger("ajax"+(o?"Success":"Error"),[v,d,o?r:u]),i.fireWith(e,[v,w]),t&&(g.trigger("ajaxComplete",[v,d]),--f.active||f.event.trigger("ajaxStop"))}}typeof a=="object"&&(c=a,a=b),c=c||{};var d=f.ajaxSetup({},c),e=d.context||d,g=e!==d&&(e.nodeType||e instanceof f)?f(e):f.event,h=f.Deferred(),i=f.Callbacks("once memory"),j=d.statusCode||{},k,l={},m={},n,o,p,q,r,s=0,t,u,v={readyState:0,setRequestHeader:function(a,b){if(!s){var c=a.toLowerCase();a=m[c]=m[c]||a,l[a]=b}return this},getAllResponseHeaders:function(){return s===2?n:null},getResponseHeader:function(a){var c;if(s===2){if(!o){o={};while(c=bH.exec(n))o[c[1].toLowerCase()]=c[2]}c=o[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){s||(d.mimeType=a);return this},abort:function(a){a=a||"abort",p&&p.abort(a),w(0,a);return this}};h.promise(v),v.success=v.done,v.error=v.fail,v.complete=i.add,v.statusCode=function(a){if(a){var b;if(s<2)for(b in a)j[b]=[j[b],a[b]];else b=a[v.status],v.then(b,b)}return this},d.url=((a||d.url)+"").replace(bG,"").replace(bL,bW[1]+"//"),d.dataTypes=f.trim(d.dataType||"*").toLowerCase().split(bP),d.crossDomain==null&&(r=bR.exec(d.url.toLowerCase()),d.crossDomain=!(!r||r[1]==bW[1]&&r[2]==bW[2]&&(r[3]||(r[1]==="http:"?80:443))==(bW[3]||(bW[1]==="http:"?80:443)))),d.data&&d.processData&&typeof d.data!="string"&&(d.data=f.param(d.data,d.traditional)),b$(bT,d,c,v);if(s===2)return!1;t=d.global,d.type=d.type.toUpperCase(),d.hasContent=!bK.test(d.type),t&&f.active++===0&&f.event.trigger("ajaxStart");if(!d.hasContent){d.data&&(d.url+=(bM.test(d.url)?"&":"?")+d.data,delete d.data),k=d.url;if(d.cache===!1){var x=f.now(),y=d.url.replace(bQ,"$1_="+x);d.url=y+(y===d.url?(bM.test(d.url)?"&":"?")+"_="+x:"")}}(d.data&&d.hasContent&&d.contentType!==!1||c.contentType)&&v.setRequestHeader("Content-Type",d.contentType),d.ifModified&&(k=k||d.url,f.lastModified[k]&&v.setRequestHeader("If-Modified-Since",f.lastModified[k]),f.etag[k]&&v.setRequestHeader("If-None-Match",f.etag[k])),v.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+(d.dataTypes[0]!=="*"?", "+bX+"; q=0.01":""):d.accepts["*"]);for(u in d.headers)v.setRequestHeader(u,d.headers[u]);if(d.beforeSend&&(d.beforeSend.call(e,v,d)===!1||s===2)){v.abort();return!1}for(u in{success:1,error:1,complete:1})v[u](d[u]);p=b$(bU,d,c,v);if(!p)w(-1,"No Transport");else{v.readyState=1,t&&g.trigger("ajaxSend",[v,d]),d.async&&d.timeout>0&&(q=setTimeout(function(){v.abort("timeout")},d.timeout));try{s=1,p.send(l,w)}catch(z){if(s<2)w(-1,z);else throw z}}return v},param:function(a,c){var d=[],e=function(a,b){b=f.isFunction(b)?b():b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=f.ajaxSettings.traditional);if(f.isArray(a)||a.jquery&&!f.isPlainObject(a))f.each(a,function(){e(this.name,this.value)});else for(var g in a)ca(g,a[g],c,e);return d.join("&").replace(bD,"+")}}),f.extend({active:0,lastModified:{},etag:{}});var cd=f.now(),ce=/(\=)\?(&|$)|\?\?/i;f.ajaxSetup({jsonp:"callback",jsonpCallback:function(){return f.expando+"_"+cd++}}),f.ajaxPrefilter("json jsonp",function(b,c,d){var e=b.contentType==="application/x-www-form-urlencoded"&&typeof b.data=="string";if(b.dataTypes[0]==="jsonp"||b.jsonp!==!1&&(ce.test(b.url)||e&&ce.test(b.data))){var g,h=b.jsonpCallback=f.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,i=a[h],j=b.url,k=b.data,l="$1"+h+"$2";b.jsonp!==!1&&(j=j.replace(ce,l),b.url===j&&(e&&(k=k.replace(ce,l)),b.data===k&&(j+=(/\?/.test(j)?"&":"?")+b.jsonp+"="+h))),b.url=j,b.data=k,a[h]=function(a){g=[a]},d.always(function(){a[h]=i,g&&f.isFunction(i)&&a[h](g[0])}),b.converters["script json"]=function(){g||f.error(h+" was not called");return g[0]},b.dataTypes[0]="json";return"script"}}),f.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){f.globalEval(a);return a}}}),f.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),f.ajaxTransport("script",function(a){if(a.crossDomain){var d,e=c.head||c.getElementsByTagName("head")[0]||c.documentElement;return{send:function(f,g){d=c.createElement("script"),d.async="async",a.scriptCharset&&(d.charset=a.scriptCharset),d.src=a.url,d.onload=d.onreadystatechange=function(a,c){if(c||!d.readyState||/loaded|complete/.test(d.readyState))d.onload=d.onreadystatechange=null,e&&d.parentNode&&e.removeChild(d),d=b,c||g(200,"success")},e.insertBefore(d,e.firstChild)},abort:function(){d&&d.onload(0,1)}}}});var cf=a.ActiveXObject?function(){for(var a in ch)ch[a](0,1)}:!1,cg=0,ch;f.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&ci()||cj()}:ci,function(a){f.extend(f.support,{ajax:!!a,cors:!!a&&"withCredentials"in a})}(f.ajaxSettings.xhr()),f.support.ajax&&f.ajaxTransport(function(c){if(!c.crossDomain||f.support.cors){var d;return{send:function(e,g){var h=c.xhr(),i,j;c.username?h.open(c.type,c.url,c.async,c.username,c.password):h.open(c.type,c.url,c.async);if(c.xhrFields)for(j in c.xhrFields)h[j]=c.xhrFields[j];c.mimeType&&h.overrideMimeType&&h.overrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(j in e)h.setRequestHeader(j,e[j])}catch(k){}h.send(c.hasContent&&c.data||null),d=function(a,e){var j,k,l,m,n;try{if(d&&(e||h.readyState===4)){d=b,i&&(h.onreadystatechange=f.noop,cf&&delete ch[i]);if(e)h.readyState!==4&&h.abort();else{j=h.status,l=h.getAllResponseHeaders(),m={},n=h.responseXML,n&&n.documentElement&&(m.xml=n),m.text=h.responseText;try{k=h.statusText}catch(o){k=""}!j&&c.isLocal&&!c.crossDomain?j=m.text?200:404:j===1223&&(j=204)}}}catch(p){e||g(-1,p)}m&&g(j,k,m,l)},!c.async||h.readyState===4?d():(i=++cg,cf&&(ch||(ch={},f(a).unload(cf)),ch[i]=d),h.onreadystatechange=d)},abort:function(){d&&d(0,1)}}}});var ck={},cl,cm,cn=/^(?:toggle|show|hide)$/,co=/^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,cp,cq=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]],cr;f.fn.extend({show:function(a,b,c){var d,e;if(a||a===0)return this.animate(cu("show",3),a,b,c);for(var g=0,h=this.length;g<h;g++)d=this[g],d.style&&(e=d.style.display,!f._data(d,"olddisplay")&&e==="none"&&(e=d.style.display=""),e===""&&f.css(d,"display")==="none"&&f._data(d,"olddisplay",cv(d.nodeName)));for(g=0;g<h;g++){d=this[g];if(d.style){e=d.style.display;if(e===""||e==="none")d.style.display=f._data(d,"olddisplay")||""}}return this},hide:function(a,b,c){if(a||a===0)return this.animate(cu("hide",3),a,b,c);var d,e,g=0,h=this.length;for(;g<h;g++)d=this[g],d.style&&(e=f.css(d,"display"),e!=="none"&&!f._data(d,"olddisplay")&&f._data(d,"olddisplay",e));for(g=0;g<h;g++)this[g].style&&(this[g].style.display="none");return this},_toggle:f.fn.toggle,toggle:function(a,b,c){var d=typeof a=="boolean";f.isFunction(a)&&f.isFunction(b)?this._toggle.apply(this,arguments):a==null||d?this.each(function(){var b=d?a:f(this).is(":hidden");f(this)[b?"show":"hide"]()}):this.animate(cu("toggle",3),a,b,c);return this},fadeTo:function(a,b,c,d){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){function g(){e.queue===!1&&f._mark(this);var b=f.extend({},e),c=this.nodeType===1,d=c&&f(this).is(":hidden"),g,h,i,j,k,l,m,n,o;b.animatedProperties={};for(i in a){g=f.camelCase(i),i!==g&&(a[g]=a[i],delete a[i]),h=a[g],f.isArray(h)?(b.animatedProperties[g]=h[1],h=a[g]=h[0]):b.animatedProperties[g]=b.specialEasing&&b.specialEasing[g]||b.easing||"swing";if(h==="hide"&&d||h==="show"&&!d)return b.complete.call(this);c&&(g==="height"||g==="width")&&(b.overflow=[this.style.overflow,this.style.overflowX,this.style.overflowY],f.css(this,"display")==="inline"&&f.css(this,"float")==="none"&&(!f.support.inlineBlockNeedsLayout||cv(this.nodeName)==="inline"?this.style.display="inline-block":this.style.zoom=1))}b.overflow!=null&&(this.style.overflow="hidden");for(i in a)j=new f.fx(this,b,i),h=a[i],cn.test(h)?(o=f._data(this,"toggle"+i)||(h==="toggle"?d?"show":"hide":0),o?(f._data(this,"toggle"+i,o==="show"?"hide":"show"),j[o]()):j[h]()):(k=co.exec(h),l=j.cur(),k?(m=parseFloat(k[2]),n=k[3]||(f.cssNumber[i]?"":"px"),n!=="px"&&(f.style(this,i,(m||1)+n),l=(m||1)/j.cur()*l,f.style(this,i,l+n)),k[1]&&(m=(k[1]==="-="?-1:1)*m+l),j.custom(l,m,n)):j.custom(l,h,""));return!0}var e=f.speed(b,c,d);if(f.isEmptyObject(a))return this.each(e.complete,[!1]);a=f.extend({},a);return e.queue===!1?this.each(g):this.queue(e.queue,g)},stop:function(a,c,d){typeof a!="string"&&(d=c,c=a,a=b),c&&a!==!1&&this.queue(a||"fx",[]);return this.each(function(){function h(a,b,c){var e=b[c];f.removeData(a,c,!0),e.stop(d)}var b,c=!1,e=f.timers,g=f._data(this);d||f._unmark(!0,this);if(a==null)for(b in g)g[b]&&g[b].stop&&b.indexOf(".run")===b.length-4&&h(this,g,b);else g[b=a+".run"]&&g[b].stop&&h(this,g,b);for(b=e.length;b--;)e[b].elem===this&&(a==null||e[b].queue===a)&&(d?e[b](!0):e[b].saveState(),c=!0,e.splice(b,1));(!d||!c)&&f.dequeue(this,a)})}}),f.each({slideDown:cu("show",1),slideUp:cu("hide",1),slideToggle:cu("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){f.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),f.extend({speed:function(a,b,c){var d=a&&typeof a=="object"?f.extend({},a):{complete:c||!c&&b||f.isFunction(a)&&a,duration:a,easing:c&&b||b&&!f.isFunction(b)&&b};d.duration=f.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in f.fx.speeds?f.fx.speeds[d.duration]:f.fx.speeds._default;if(d.queue==null||d.queue===!0)d.queue="fx";d.old=d.complete,d.complete=function(a){f.isFunction(d.old)&&d.old.call(this),d.queue?f.dequeue(this,d.queue):a!==!1&&f._unmark(this)};return d},easing:{linear:function(a,b,c,d){return c+d*a},swing:function(a,b,c,d){return(-Math.cos(a*Math.PI)/2+.5)*d+c}},timers:[],fx:function(a,b,c){this.options=b,this.elem=a,this.prop=c,b.orig=b.orig||{}}}),f.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this),(f.fx.step[this.prop]||f.fx.step._default)(this)},cur:function(){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null))return this.elem[this.prop];var a,b=f.css(this.elem,this.prop);return isNaN(a=parseFloat(b))?!b||b==="auto"?0:b:a},custom:function(a,c,d){function h(a){return e.step(a)}var e=this,g=f.fx;this.startTime=cr||cs(),this.end=c,this.now=this.start=a,this.pos=this.state=0,this.unit=d||this.unit||(f.cssNumber[this.prop]?"":"px"),h.queue=this.options.queue,h.elem=this.elem,h.saveState=function(){e.options.hide&&f._data(e.elem,"fxshow"+e.prop)===b&&f._data(e.elem,"fxshow"+e.prop,e.start)},h()&&f.timers.push(h)&&!cp&&(cp=setInterval(g.tick,g.interval))},show:function(){var a=f._data(this.elem,"fxshow"+this.prop);this.options.orig[this.prop]=a||f.style(this.elem,this.prop),this.options.show=!0,a!==b?this.custom(this.cur(),a):this.custom(this.prop==="width"||this.prop==="height"?1:0,this.cur()),f(this.elem).show()},hide:function(){this.options.orig[this.prop]=f._data(this.elem,"fxshow"+this.prop)||f.style(this.elem,this.prop),this.options.hide=!0,this.custom(this.cur(),0)},step:function(a){var b,c,d,e=cr||cs(),g=!0,h=this.elem,i=this.options;if(a||e>=i.duration+this.startTime){this.now=this.end,this.pos=this.state=1,this.update(),i.animatedProperties[this.prop]=!0;for(b in i.animatedProperties)i.animatedProperties[b]!==!0&&(g=!1);if(g){i.overflow!=null&&!f.support.shrinkWrapBlocks&&f.each(["","X","Y"],function(a,b){h.style["overflow"+b]=i.overflow[a]}),i.hide&&f(h).hide();if(i.hide||i.show)for(b in i.animatedProperties)f.style(h,b,i.orig[b]),f.removeData(h,"fxshow"+b,!0),f.removeData(h,"toggle"+b,!0);d=i.complete,d&&(i.complete=!1,d.call(h))}return!1}i.duration==Infinity?this.now=e:(c=e-this.startTime,this.state=c/i.duration,this.pos=f.easing[i.animatedProperties[this.prop]](this.state,c,0,1,i.duration),this.now=this.start+(this.end-this.start)*this.pos),this.update();return!0}},f.extend(f.fx,{tick:function(){var a,b=f.timers,c=0;for(;c<b.length;c++)a=b[c],!a()&&b[c]===a&&b.splice(c--,1);b.length||f.fx.stop()},interval:13,stop:function(){clearInterval(cp),cp=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){f.style(a.elem,"opacity",a.now)},_default:function(a){a.elem.style&&a.elem.style[a.prop]!=null?a.elem.style[a.prop]=a.now+a.unit:a.elem[a.prop]=a.now}}}),f.each(["width","height"],function(a,b){f.fx.step[b]=function(a){f.style(a.elem,b,Math.max(0,a.now)+a.unit)}}),f.expr&&f.expr.filters&&(f.expr.filters.animated=function(a){return f.grep(f.timers,function(b){return a===b.elem}).length});var cw=/^t(?:able|d|h)$/i,cx=/^(?:body|html)$/i;"getBoundingClientRect"in c.documentElement?f.fn.offset=function(a){var b=this[0],c;if(a)return this.each(function(b){f.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return f.offset.bodyOffset(b);try{c=b.getBoundingClientRect()}catch(d){}var e=b.ownerDocument,g=e.documentElement;if(!c||!f.contains(g,b))return c?{top:c.top,left:c.left}:{top:0,left:0};var h=e.body,i=cy(e),j=g.clientTop||h.clientTop||0,k=g.clientLeft||h.clientLeft||0,l=i.pageYOffset||f.support.boxModel&&g.scrollTop||h.scrollTop,m=i.pageXOffset||f.support.boxModel&&g.scrollLeft||h.scrollLeft,n=c.top+l-j,o=c.left+m-k;return{top:n,left:o}}:f.fn.offset=function(a){var b=this[0];if(a)return this.each(function(b){f.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return f.offset.bodyOffset(b);var c,d=b.offsetParent,e=b,g=b.ownerDocument,h=g.documentElement,i=g.body,j=g.defaultView,k=j?j.getComputedStyle(b,null):b.currentStyle,l=b.offsetTop,m=b.offsetLeft;while((b=b.parentNode)&&b!==i&&b!==h){if(f.support.fixedPosition&&k.position==="fixed")break;c=j?j.getComputedStyle(b,null):b.currentStyle,l-=b.scrollTop,m-=b.scrollLeft,b===d&&(l+=b.offsetTop,m+=b.offsetLeft,f.support.doesNotAddBorder&&(!f.support.doesAddBorderForTableAndCells||!cw.test(b.nodeName))&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),e=d,d=b.offsetParent),f.support.subtractsBorderForOverflowNotVisible&&c.overflow!=="visible"&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),k=c}if(k.position==="relative"||k.position==="static")l+=i.offsetTop,m+=i.offsetLeft;f.support.fixedPosition&&k.position==="fixed"&&(l+=Math.max(h.scrollTop,i.scrollTop),m+=Math.max(h.scrollLeft,i.scrollLeft));return{top:l,left:m}},f.offset={bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;f.support.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(f.css(a,"marginTop"))||0,c+=parseFloat(f.css(a,"marginLeft"))||0);return{top:b,left:c}},setOffset:function(a,b,c){var d=f.css(a,"position");d==="static"&&(a.style.position="relative");var e=f(a),g=e.offset(),h=f.css(a,"top"),i=f.css(a,"left"),j=(d==="absolute"||d==="fixed")&&f.inArray("auto",[h,i])>-1,k={},l={},m,n;j?(l=e.position(),m=l.top,n=l.left):(m=parseFloat(h)||0,n=parseFloat(i)||0),f.isFunction(b)&&(b=b.call(a,c,g)),b.top!=null&&(k.top=b.top-g.top+m),b.left!=null&&(k.left=b.left-g.left+n),"using"in b?b.using.call(a,k):e.css(k)}},f.fn.extend({position:function(){if(!this[0])return null;var a=this[0],b=this.offsetParent(),c=this.offset(),d=cx.test(b[0].nodeName)?{top:0,left:0}:b.offset();c.top-=parseFloat(f.css(a,"marginTop"))||0,c.left-=parseFloat(f.css(a,"marginLeft"))||0,d.top+=parseFloat(f.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(f.css(b[0],"borderLeftWidth"))||0;return{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||c.body;while(a&&!cx.test(a.nodeName)&&f.css(a,"position")==="static")a=a.offsetParent;return a})}}),f.each(["Left","Top"],function(a,c){var d="scroll"+c;f.fn[d]=function(c){var e,g;if(c===b){e=this[0];if(!e)return null;g=cy(e);return g?"pageXOffset"in g?g[a?"pageYOffset":"pageXOffset"]:f.support.boxModel&&g.document.documentElement[d]||g.document.body[d]:e[d]}return this.each(function(){g=cy(this),g?g.scrollTo(a?f(g).scrollLeft():c,a?c:f(g).scrollTop()):this[d]=c})}}),f.each(["Height","Width"],function(a,c){var d=c.toLowerCase();f.fn["inner"+c]=function(){var a=this[0];return a?a.style?parseFloat(f.css(a,d,"padding")):this[d]():null},f.fn["outer"+c]=function(a){var b=this[0];return b?b.style?parseFloat(f.css(b,d,a?"margin":"border")):this[d]():null},f.fn[d]=function(a){var e=this[0];if(!e)return a==null?null:this;if(f.isFunction(a))return this.each(function(b){var c=f(this);c[d](a.call(this,b,c[d]()))});if(f.isWindow(e)){var g=e.document.documentElement["client"+c],h=e.document.body;return e.document.compatMode==="CSS1Compat"&&g||h&&h["client"+c]||g}if(e.nodeType===9)return Math.max(e.documentElement["client"+c],e.body["scroll"+c],e.documentElement["scroll"+c],e.body["offset"+c],e.documentElement["offset"+c]);if(a===b){var i=f.css(e,d),j=parseFloat(i);return f.isNumeric(j)?j:i}return this.css(d,typeof a=="string"?a:a+"px")}}),a.jQuery=a.$=f,typeof define=="function"&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return f})})(window);

(function($){$.extend({tablesorter:new
function(){var parsers=[],widgets=[];this.defaults={cssHeader:"header",cssAsc:"headerSortUp",cssDesc:"headerSortDown",cssChildRow:"expand-child",sortInitialOrder:"asc",sortMultiSortKey:"shiftKey",sortForce:null,sortAppend:null,sortLocaleCompare:true,textExtraction:"simple",parsers:{},widgets:[],widgetZebra:{css:["even","odd"]},headers:{},widthFixed:false,cancelSelection:true,sortList:[],headerList:[],dateFormat:"us",decimal:'/\.|\,/g',onRenderHeader:null,selectorHeaders:'thead th',debug:false};function benchmark(s,d){log(s+","+(new Date().getTime()-d.getTime())+"ms");}this.benchmark=benchmark;function log(s){if(typeof console!="undefined"&&typeof console.debug!="undefined"){console.log(s);}else{alert(s);}}function buildParserCache(table,$headers){if(table.config.debug){var parsersDebug="";}if(table.tBodies.length==0)return;var rows=table.tBodies[0].rows;if(rows[0]){var list=[],cells=rows[0].cells,l=cells.length;for(var i=0;i<l;i++){var p=false;if($.metadata&&($($headers[i]).metadata()&&$($headers[i]).metadata().sorter)){p=getParserById($($headers[i]).metadata().sorter);}else if((table.config.headers[i]&&table.config.headers[i].sorter)){p=getParserById(table.config.headers[i].sorter);}if(!p){p=detectParserForColumn(table,rows,-1,i);}if(table.config.debug){parsersDebug+="column:"+i+" parser:"+p.id+"\n";}list.push(p);}}if(table.config.debug){log(parsersDebug);}return list;};function detectParserForColumn(table,rows,rowIndex,cellIndex){var l=parsers.length,node=false,nodeValue=false,keepLooking=true;while(nodeValue==''&&keepLooking){rowIndex++;if(rows[rowIndex]){node=getNodeFromRowAndCellIndex(rows,rowIndex,cellIndex);nodeValue=trimAndGetNodeText(table.config,node);if(table.config.debug){log('Checking if value was empty on row:'+rowIndex);}}else{keepLooking=false;}}for(var i=1;i<l;i++){if(parsers[i].is(nodeValue,table,node)){return parsers[i];}}return parsers[0];}function getNodeFromRowAndCellIndex(rows,rowIndex,cellIndex){return rows[rowIndex].cells[cellIndex];}function trimAndGetNodeText(config,node){return $.trim(getElementText(config,node));}function getParserById(name){var l=parsers.length;for(var i=0;i<l;i++){if(parsers[i].id.toLowerCase()==name.toLowerCase()){return parsers[i];}}return false;}function buildCache(table){if(table.config.debug){var cacheTime=new Date();}var totalRows=(table.tBodies[0]&&table.tBodies[0].rows.length)||0,totalCells=(table.tBodies[0].rows[0]&&table.tBodies[0].rows[0].cells.length)||0,parsers=table.config.parsers,cache={row:[],normalized:[]};for(var i=0;i<totalRows;++i){var c=$(table.tBodies[0].rows[i]),cols=[];if(c.hasClass(table.config.cssChildRow)){cache.row[cache.row.length-1]=cache.row[cache.row.length-1].add(c);continue;}cache.row.push(c);for(var j=0;j<totalCells;++j){cols.push(parsers[j].format(getElementText(table.config,c[0].cells[j]),table,c[0].cells[j]));}cols.push(cache.normalized.length);cache.normalized.push(cols);cols=null;};if(table.config.debug){benchmark("Building cache for "+totalRows+" rows:",cacheTime);}return cache;};function getElementText(config,node){var text="";if(!node)return"";if(!config.supportsTextContent)config.supportsTextContent=node.textContent||false;if(config.textExtraction=="simple"){if(config.supportsTextContent){text=node.textContent;}else{if(node.childNodes[0]&&node.childNodes[0].hasChildNodes()){text=node.childNodes[0].innerHTML;}else{text=node.innerHTML;}}}else{if(typeof(config.textExtraction)=="function"){text=config.textExtraction(node);}else{text=$(node).text();}}return text;}function appendToTable(table,cache){if(table.config.debug){var appendTime=new Date()}var c=cache,r=c.row,n=c.normalized,totalRows=n.length,checkCell=(n[0].length-1),tableBody=$(table.tBodies[0]),rows=[];for(var i=0;i<totalRows;i++){var pos=n[i][checkCell];rows.push(r[pos]);if(!table.config.appender){var l=r[pos].length;for(var j=0;j<l;j++){tableBody[0].appendChild(r[pos][j]);}}}if(table.config.appender){table.config.appender(table,rows);}rows=null;if(table.config.debug){benchmark("Rebuilt table:",appendTime);}applyWidget(table);setTimeout(function(){$(table).trigger("sortEnd");},0);};function buildHeaders(table){if(table.config.debug){var time=new Date();}var meta=($.metadata)?true:false;var header_index=computeTableHeaderCellIndexes(table);$tableHeaders=$(table.config.selectorHeaders,table).each(function(index){this.column=header_index[this.parentNode.rowIndex+"-"+this.cellIndex];this.order=formatSortingOrder(table.config.sortInitialOrder);this.count=this.order;if(checkHeaderMetadata(this)||checkHeaderOptions(table,index))this.sortDisabled=true;if(checkHeaderOptionsSortingLocked(table,index))this.order=this.lockedOrder=checkHeaderOptionsSortingLocked(table,index);if(!this.sortDisabled){var $th=$(this).addClass(table.config.cssHeader);if(table.config.onRenderHeader)table.config.onRenderHeader.apply($th);}table.config.headerList[index]=this;});if(table.config.debug){benchmark("Built headers:",time);log($tableHeaders);}return $tableHeaders;};function computeTableHeaderCellIndexes(t){var matrix=[];var lookup={};var thead=t.getElementsByTagName('THEAD')[0];var trs=thead.getElementsByTagName('TR');for(var i=0;i<trs.length;i++){var cells=trs[i].cells;for(var j=0;j<cells.length;j++){var c=cells[j];var rowIndex=c.parentNode.rowIndex;var cellId=rowIndex+"-"+c.cellIndex;var rowSpan=c.rowSpan||1;var colSpan=c.colSpan||1
var firstAvailCol;if(typeof(matrix[rowIndex])=="undefined"){matrix[rowIndex]=[];}for(var k=0;k<matrix[rowIndex].length+1;k++){if(typeof(matrix[rowIndex][k])=="undefined"){firstAvailCol=k;break;}}lookup[cellId]=firstAvailCol;for(var k=rowIndex;k<rowIndex+rowSpan;k++){if(typeof(matrix[k])=="undefined"){matrix[k]=[];}var matrixrow=matrix[k];for(var l=firstAvailCol;l<firstAvailCol+colSpan;l++){matrixrow[l]="x";}}}}return lookup;}function checkCellColSpan(table,rows,row){var arr=[],r=table.tHead.rows,c=r[row].cells;for(var i=0;i<c.length;i++){var cell=c[i];if(cell.colSpan>1){arr=arr.concat(checkCellColSpan(table,headerArr,row++));}else{if(table.tHead.length==1||(cell.rowSpan>1||!r[row+1])){arr.push(cell);}}}return arr;};function checkHeaderMetadata(cell){if(($.metadata)&&($(cell).metadata().sorter===false)){return true;};return false;}function checkHeaderOptions(table,i){if((table.config.headers[i])&&(table.config.headers[i].sorter===false)){return true;};return false;}function checkHeaderOptionsSortingLocked(table,i){if((table.config.headers[i])&&(table.config.headers[i].lockedOrder))return table.config.headers[i].lockedOrder;return false;}function applyWidget(table){var c=table.config.widgets;var l=c.length;for(var i=0;i<l;i++){getWidgetById(c[i]).format(table);}}function getWidgetById(name){var l=widgets.length;for(var i=0;i<l;i++){if(widgets[i].id.toLowerCase()==name.toLowerCase()){return widgets[i];}}};function formatSortingOrder(v){if(typeof(v)!="Number"){return(v.toLowerCase()=="desc")?1:0;}else{return(v==1)?1:0;}}function isValueInArray(v,a){var l=a.length;for(var i=0;i<l;i++){if(a[i][0]==v){return true;}}return false;}function setHeadersCss(table,$headers,list,css){$headers.removeClass(css[0]).removeClass(css[1]);var h=[];$headers.each(function(offset){if(!this.sortDisabled){h[this.column]=$(this);}});var l=list.length;for(var i=0;i<l;i++){h[list[i][0]].addClass(css[list[i][1]]);}}function fixColumnWidth(table,$headers){var c=table.config;if(c.widthFixed){var colgroup=$('<colgroup>');$("tr:first td",table.tBodies[0]).each(function(){colgroup.append($('<col>').css('width',$(this).width()));});$(table).prepend(colgroup);};}function updateHeaderSortCount(table,sortList){var c=table.config,l=sortList.length;for(var i=0;i<l;i++){var s=sortList[i],o=c.headerList[s[0]];o.count=s[1];o.count++;}}function multisort(table,sortList,cache){if(table.config.debug){var sortTime=new Date();}var dynamicExp="var sortWrapper = function(a,b) {",l=sortList.length;for(var i=0;i<l;i++){var c=sortList[i][0];var order=sortList[i][1];var s=(table.config.parsers[c].type=="text")?((order==0)?makeSortFunction("text","asc",c):makeSortFunction("text","desc",c)):((order==0)?makeSortFunction("numeric","asc",c):makeSortFunction("numeric","desc",c));var e="e"+i;dynamicExp+="var "+e+" = "+s;dynamicExp+="if("+e+") { return "+e+"; } ";dynamicExp+="else { ";}var orgOrderCol=cache.normalized[0].length-1;dynamicExp+="return a["+orgOrderCol+"]-b["+orgOrderCol+"];";for(var i=0;i<l;i++){dynamicExp+="}; ";}dynamicExp+="return 0; ";dynamicExp+="}; ";if(table.config.debug){benchmark("Evaling expression:"+dynamicExp,new Date());}eval(dynamicExp);cache.normalized.sort(sortWrapper);if(table.config.debug){benchmark("Sorting on "+sortList.toString()+" and dir "+order+" time:",sortTime);}return cache;};function makeSortFunction(type,direction,index){var a="a["+index+"]",b="b["+index+"]";if(type=='text'&&direction=='asc'){return"("+a+" == "+b+" ? 0 : ("+a+" === null ? Number.POSITIVE_INFINITY : ("+b+" === null ? Number.NEGATIVE_INFINITY : ("+a+" < "+b+") ? -1 : 1 )));";}else if(type=='text'&&direction=='desc'){return"("+a+" == "+b+" ? 0 : ("+a+" === null ? Number.POSITIVE_INFINITY : ("+b+" === null ? Number.NEGATIVE_INFINITY : ("+b+" < "+a+") ? -1 : 1 )));";}else if(type=='numeric'&&direction=='asc'){return"("+a+" === null && "+b+" === null) ? 0 :("+a+" === null ? Number.POSITIVE_INFINITY : ("+b+" === null ? Number.NEGATIVE_INFINITY : "+a+" - "+b+"));";}else if(type=='numeric'&&direction=='desc'){return"("+a+" === null && "+b+" === null) ? 0 :("+a+" === null ? Number.POSITIVE_INFINITY : ("+b+" === null ? Number.NEGATIVE_INFINITY : "+b+" - "+a+"));";}};function makeSortText(i){return"((a["+i+"] < b["+i+"]) ? -1 : ((a["+i+"] > b["+i+"]) ? 1 : 0));";};function makeSortTextDesc(i){return"((b["+i+"] < a["+i+"]) ? -1 : ((b["+i+"] > a["+i+"]) ? 1 : 0));";};function makeSortNumeric(i){return"a["+i+"]-b["+i+"];";};function makeSortNumericDesc(i){return"b["+i+"]-a["+i+"];";};function sortText(a,b){if(table.config.sortLocaleCompare)return a.localeCompare(b);return((a<b)?-1:((a>b)?1:0));};function sortTextDesc(a,b){if(table.config.sortLocaleCompare)return b.localeCompare(a);return((b<a)?-1:((b>a)?1:0));};function sortNumeric(a,b){return a-b;};function sortNumericDesc(a,b){return b-a;};function getCachedSortType(parsers,i){return parsers[i].type;};this.construct=function(settings){return this.each(function(){if(!this.tHead||!this.tBodies)return;var $this,$document,$headers,cache,config,shiftDown=0,sortOrder;this.config={};config=$.extend(this.config,$.tablesorter.defaults,settings);$this=$(this);$.data(this,"tablesorter",config);$headers=buildHeaders(this);this.config.parsers=buildParserCache(this,$headers);cache=buildCache(this);var sortCSS=[config.cssDesc,config.cssAsc];fixColumnWidth(this);$headers.click(function(e){var totalRows=($this[0].tBodies[0]&&$this[0].tBodies[0].rows.length)||0;if(!this.sortDisabled&&totalRows>0){$this.trigger("sortStart");var $cell=$(this);var i=this.column;this.order=this.count++%2;if(this.lockedOrder)this.order=this.lockedOrder;if(!e[config.sortMultiSortKey]){config.sortList=[];if(config.sortForce!=null){var a=config.sortForce;for(var j=0;j<a.length;j++){if(a[j][0]!=i){config.sortList.push(a[j]);}}}config.sortList.push([i,this.order]);}else{if(isValueInArray(i,config.sortList)){for(var j=0;j<config.sortList.length;j++){var s=config.sortList[j],o=config.headerList[s[0]];if(s[0]==i){o.count=s[1];o.count++;s[1]=o.count%2;}}}else{config.sortList.push([i,this.order]);}};setTimeout(function(){setHeadersCss($this[0],$headers,config.sortList,sortCSS);appendToTable($this[0],multisort($this[0],config.sortList,cache));},1);return false;}}).mousedown(function(){if(config.cancelSelection){this.onselectstart=function(){return false};return false;}});$this.bind("update",function(){var me=this;setTimeout(function(){me.config.parsers=buildParserCache(me,$headers);cache=buildCache(me);},1);}).bind("updateCell",function(e,cell){var config=this.config;var pos=[(cell.parentNode.rowIndex-1),cell.cellIndex];cache.normalized[pos[0]][pos[1]]=config.parsers[pos[1]].format(getElementText(config,cell),cell);}).bind("sorton",function(e,list){$(this).trigger("sortStart");config.sortList=list;var sortList=config.sortList;updateHeaderSortCount(this,sortList);setHeadersCss(this,$headers,sortList,sortCSS);appendToTable(this,multisort(this,sortList,cache));}).bind("appendCache",function(){appendToTable(this,cache);}).bind("applyWidgetId",function(e,id){getWidgetById(id).format(this);}).bind("applyWidgets",function(){applyWidget(this);});if($.metadata&&($(this).metadata()&&$(this).metadata().sortlist)){config.sortList=$(this).metadata().sortlist;}if(config.sortList.length>0){$this.trigger("sorton",[config.sortList]);}applyWidget(this);});};this.addParser=function(parser){var l=parsers.length,a=true;for(var i=0;i<l;i++){if(parsers[i].id.toLowerCase()==parser.id.toLowerCase()){a=false;}}if(a){parsers.push(parser);};};this.addWidget=function(widget){widgets.push(widget);};this.formatFloat=function(s){var i=parseFloat(s);return(isNaN(i))?0:i;};this.formatInt=function(s){var i=parseInt(s);return(isNaN(i))?0:i;};this.isDigit=function(s,config){return/^[-+]?\d*$/.test($.trim(s.replace(/[,.']/g,'')));};this.clearTableBody=function(table){if($.browser.msie){function empty(){while(this.firstChild)this.removeChild(this.firstChild);}empty.apply(table.tBodies[0]);}else{table.tBodies[0].innerHTML="";}};}});$.fn.extend({tablesorter:$.tablesorter.construct});var ts=$.tablesorter;ts.addParser({id:"text",is:function(s){return true;},format:function(s){return $.trim(s.toLocaleLowerCase());},type:"text"});ts.addParser({id:"digit",is:function(s,table){var c=table.config;return $.tablesorter.isDigit(s,c);},format:function(s){return $.tablesorter.formatFloat(s);},type:"numeric"});ts.addParser({id:"currency",is:function(s){return/^[£$€?.]/.test(s);},format:function(s){return $.tablesorter.formatFloat(s.replace(new RegExp(/[£$€]/g),""));},type:"numeric"});ts.addParser({id:"ipAddress",is:function(s){return/^\d{2,3}[\.]\d{2,3}[\.]\d{2,3}[\.]\d{2,3}$/.test(s);},format:function(s){var a=s.split("."),r="",l=a.length;for(var i=0;i<l;i++){var item=a[i];if(item.length==2){r+="0"+item;}else{r+=item;}}return $.tablesorter.formatFloat(r);},type:"numeric"});ts.addParser({id:"url",is:function(s){return/^(https?|ftp|file):\/\/$/.test(s);},format:function(s){return jQuery.trim(s.replace(new RegExp(/(https?|ftp|file):\/\//),''));},type:"text"});ts.addParser({id:"isoDate",is:function(s){return/^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/.test(s);},format:function(s){return $.tablesorter.formatFloat((s!="")?new Date(s.replace(new RegExp(/-/g),"/")).getTime():"0");},type:"numeric"});ts.addParser({id:"percent",is:function(s){return/\%$/.test($.trim(s));},format:function(s){return $.tablesorter.formatFloat(s.replace(new RegExp(/%/g),""));},type:"numeric"});ts.addParser({id:"usLongDate",is:function(s){return s.match(new RegExp(/^[A-Za-z]{3,10}\.? [0-9]{1,2}, ([0-9]{4}|'?[0-9]{2}) (([0-2]?[0-9]:[0-5][0-9])|([0-1]?[0-9]:[0-5][0-9]\s(AM|PM)))$/));},format:function(s){return $.tablesorter.formatFloat(new Date(s).getTime());},type:"numeric"});ts.addParser({id:"shortDate",is:function(s){return/\d{1,2}[\/\-]\d{1,2}[\/\-]\d{2,4}/.test(s);},format:function(s,table){var c=table.config;s=s.replace(/\-/g,"/");if(c.dateFormat=="us"){s=s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/,"$3/$1/$2");}else if(c.dateFormat=="uk"){s=s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/,"$3/$2/$1");}else if(c.dateFormat=="dd/mm/yy"||c.dateFormat=="dd-mm-yy"){s=s.replace(/(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{2})/,"$1/$2/$3");}return $.tablesorter.formatFloat(new Date(s).getTime());},type:"numeric"});ts.addParser({id:"time",is:function(s){return/^(([0-2]?[0-9]:[0-5][0-9])|([0-1]?[0-9]:[0-5][0-9]\s(am|pm)))$/.test(s);},format:function(s){return $.tablesorter.formatFloat(new Date("2000/01/01 "+s).getTime());},type:"numeric"});ts.addParser({id:"metadata",is:function(s){return false;},format:function(s,table,cell){var c=table.config,p=(!c.parserMetadataName)?'sortValue':c.parserMetadataName;return $(cell).metadata()[p];},type:"numeric"});ts.addWidget({id:"zebra",format:function(table){if(table.config.debug){var time=new Date();}var $tr,row=-1,odd;$("tr:visible",table.tBodies[0]).each(function(i){$tr=$(this);if(!$tr.hasClass(table.config.cssChildRow))row++;odd=(row%2==0);$tr.removeClass(table.config.widgetZebra.css[odd?0:1]).addClass(table.config.widgetZebra.css[odd?1:0])});if(table.config.debug){$.tablesorter.benchmark("Applying Zebra widget",time);}}});})(jQuery);
/*!
* Bootstrap.js by @fat & @mdo
* Copyright 2012 Twitter, Inc.
* http://www.apache.org/licenses/LICENSE-2.0.txt
*/
!function(e){"use strict";e(function(){e.support.transition=function(){var e=function(){var e=document.createElement("bootstrap"),t={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},n;for(n in t)if(e.style[n]!==undefined)return t[n]}();return e&&{end:e}}()})}(window.jQuery),!function(e){"use strict";var t='[data-dismiss="alert"]',n=function(n){e(n).on("click",t,this.close)};n.prototype.close=function(t){function s(){i.trigger("closed").remove()}var n=e(this),r=n.attr("data-target"),i;r||(r=n.attr("href"),r=r&&r.replace(/.*(?=#[^\s]*$)/,"")),i=e(r),t&&t.preventDefault(),i.length||(i=n.hasClass("alert")?n:n.parent()),i.trigger(t=e.Event("close"));if(t.isDefaultPrevented())return;i.removeClass("in"),e.support.transition&&i.hasClass("fade")?i.on(e.support.transition.end,s):s()};var r=e.fn.alert;e.fn.alert=function(t){return this.each(function(){var r=e(this),i=r.data("alert");i||r.data("alert",i=new n(this)),typeof t=="string"&&i[t].call(r)})},e.fn.alert.Constructor=n,e.fn.alert.noConflict=function(){return e.fn.alert=r,this},e(document).on("click.alert.data-api",t,n.prototype.close)}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.$element=e(t),this.options=e.extend({},e.fn.button.defaults,n)};t.prototype.setState=function(e){var t="disabled",n=this.$element,r=n.data(),i=n.is("input")?"val":"html";e+="Text",r.resetText||n.data("resetText",n[i]()),n[i](r[e]||this.options[e]),setTimeout(function(){e=="loadingText"?n.addClass(t).attr(t,t):n.removeClass(t).removeAttr(t)},0)},t.prototype.toggle=function(){var e=this.$element.closest('[data-toggle="buttons-radio"]');e&&e.find(".active").removeClass("active"),this.$element.toggleClass("active")};var n=e.fn.button;e.fn.button=function(n){return this.each(function(){var r=e(this),i=r.data("button"),s=typeof n=="object"&&n;i||r.data("button",i=new t(this,s)),n=="toggle"?i.toggle():n&&i.setState(n)})},e.fn.button.defaults={loadingText:"loading..."},e.fn.button.Constructor=t,e.fn.button.noConflict=function(){return e.fn.button=n,this},e(document).on("click.button.data-api","[data-toggle^=button]",function(t){var n=e(t.target);n.hasClass("btn")||(n=n.closest(".btn")),n.button("toggle")})}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.$element=e(t),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.options.pause=="hover"&&this.$element.on("mouseenter",e.proxy(this.pause,this)).on("mouseleave",e.proxy(this.cycle,this))};t.prototype={cycle:function(t){return t||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(e.proxy(this.next,this),this.options.interval)),this},getActiveIndex:function(){return this.$active=this.$element.find(".item.active"),this.$items=this.$active.parent().children(),this.$items.index(this.$active)},to:function(t){var n=this.getActiveIndex(),r=this;if(t>this.$items.length-1||t<0)return;return this.sliding?this.$element.one("slid",function(){r.to(t)}):n==t?this.pause().cycle():this.slide(t>n?"next":"prev",e(this.$items[t]))},pause:function(t){return t||(this.paused=!0),this.$element.find(".next, .prev").length&&e.support.transition.end&&(this.$element.trigger(e.support.transition.end),this.cycle(!0)),clearInterval(this.interval),this.interval=null,this},next:function(){if(this.sliding)return;return this.slide("next")},prev:function(){if(this.sliding)return;return this.slide("prev")},slide:function(t,n){var r=this.$element.find(".item.active"),i=n||r[t](),s=this.interval,o=t=="next"?"left":"right",u=t=="next"?"first":"last",a=this,f;this.sliding=!0,s&&this.pause(),i=i.length?i:this.$element.find(".item")[u](),f=e.Event("slide",{relatedTarget:i[0],direction:o});if(i.hasClass("active"))return;this.$indicators.length&&(this.$indicators.find(".active").removeClass("active"),this.$element.one("slid",function(){var t=e(a.$indicators.children()[a.getActiveIndex()]);t&&t.addClass("active")}));if(e.support.transition&&this.$element.hasClass("slide")){this.$element.trigger(f);if(f.isDefaultPrevented())return;i.addClass(t),i[0].offsetWidth,r.addClass(o),i.addClass(o),this.$element.one(e.support.transition.end,function(){i.removeClass([t,o].join(" ")).addClass("active"),r.removeClass(["active",o].join(" ")),a.sliding=!1,setTimeout(function(){a.$element.trigger("slid")},0)})}else{this.$element.trigger(f);if(f.isDefaultPrevented())return;r.removeClass("active"),i.addClass("active"),this.sliding=!1,this.$element.trigger("slid")}return s&&this.cycle(),this}};var n=e.fn.carousel;e.fn.carousel=function(n){return this.each(function(){var r=e(this),i=r.data("carousel"),s=e.extend({},e.fn.carousel.defaults,typeof n=="object"&&n),o=typeof n=="string"?n:s.slide;i||r.data("carousel",i=new t(this,s)),typeof n=="number"?i.to(n):o?i[o]():s.interval&&i.pause().cycle()})},e.fn.carousel.defaults={interval:5e3,pause:"hover"},e.fn.carousel.Constructor=t,e.fn.carousel.noConflict=function(){return e.fn.carousel=n,this},e(document).on("click.carousel.data-api","[data-slide], [data-slide-to]",function(t){var n=e(this),r,i=e(n.attr("data-target")||(r=n.attr("href"))&&r.replace(/.*(?=#[^\s]+$)/,"")),s=e.extend({},i.data(),n.data()),o;i.carousel(s),(o=n.attr("data-slide-to"))&&i.data("carousel").pause().to(o).cycle(),t.preventDefault()})}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.$element=e(t),this.options=e.extend({},e.fn.collapse.defaults,n),this.options.parent&&(this.$parent=e(this.options.parent)),this.options.toggle&&this.toggle()};t.prototype={constructor:t,dimension:function(){var e=this.$element.hasClass("width");return e?"width":"height"},show:function(){var t,n,r,i;if(this.transitioning||this.$element.hasClass("in"))return;t=this.dimension(),n=e.camelCase(["scroll",t].join("-")),r=this.$parent&&this.$parent.find("> .accordion-group > .in");if(r&&r.length){i=r.data("collapse");if(i&&i.transitioning)return;r.collapse("hide"),i||r.data("collapse",null)}this.$element[t](0),this.transition("addClass",e.Event("show"),"shown"),e.support.transition&&this.$element[t](this.$element[0][n])},hide:function(){var t;if(this.transitioning||!this.$element.hasClass("in"))return;t=this.dimension(),this.reset(this.$element[t]()),this.transition("removeClass",e.Event("hide"),"hidden"),this.$element[t](0)},reset:function(e){var t=this.dimension();return this.$element.removeClass("collapse")[t](e||"auto")[0].offsetWidth,this.$element[e!==null?"addClass":"removeClass"]("collapse"),this},transition:function(t,n,r){var i=this,s=function(){n.type=="show"&&i.reset(),i.transitioning=0,i.$element.trigger(r)};this.$element.trigger(n);if(n.isDefaultPrevented())return;this.transitioning=1,this.$element[t]("in"),e.support.transition&&this.$element.hasClass("collapse")?this.$element.one(e.support.transition.end,s):s()},toggle:function(){this[this.$element.hasClass("in")?"hide":"show"]()}};var n=e.fn.collapse;e.fn.collapse=function(n){return this.each(function(){var r=e(this),i=r.data("collapse"),s=e.extend({},e.fn.collapse.defaults,r.data(),typeof n=="object"&&n);i||r.data("collapse",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.collapse.defaults={toggle:!0},e.fn.collapse.Constructor=t,e.fn.collapse.noConflict=function(){return e.fn.collapse=n,this},e(document).on("click.collapse.data-api","[data-toggle=collapse]",function(t){var n=e(this),r,i=n.attr("data-target")||t.preventDefault()||(r=n.attr("href"))&&r.replace(/.*(?=#[^\s]+$)/,""),s=e(i).data("collapse")?"toggle":n.data();n[e(i).hasClass("in")?"addClass":"removeClass"]("collapsed"),e(i).collapse(s)})}(window.jQuery),!function(e){"use strict";function r(){e(".dropdown-backdrop").remove(),e(t).each(function(){i(e(this)).removeClass("open")})}function i(t){var n=t.attr("data-target"),r;n||(n=t.attr("href"),n=n&&/#/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,"")),r=n&&e(n);if(!r||!r.length)r=t.parent();return r}var t="[data-toggle=dropdown]",n=function(t){var n=e(t).on("click.dropdown.data-api",this.toggle);e("html").on("click.dropdown.data-api",function(){n.parent().removeClass("open")})};n.prototype={constructor:n,toggle:function(t){var n=e(this),s,o;if(n.is(".disabled, :disabled"))return;return s=i(n),o=s.hasClass("open"),r(),o||("ontouchstart"in document.documentElement&&e('<div class="dropdown-backdrop"/>').insertBefore(e(this)).on("click",r),s.toggleClass("open")),n.focus(),!1},keydown:function(n){var r,s,o,u,a,f;if(!/(38|40|27)/.test(n.keyCode))return;r=e(this),n.preventDefault(),n.stopPropagation();if(r.is(".disabled, :disabled"))return;u=i(r),a=u.hasClass("open");if(!a||a&&n.keyCode==27)return n.which==27&&u.find(t).focus(),r.click();s=e("[role=menu] li:not(.divider):visible a",u);if(!s.length)return;f=s.index(s.filter(":focus")),n.keyCode==38&&f>0&&f--,n.keyCode==40&&f<s.length-1&&f++,~f||(f=0),s.eq(f).focus()}};var s=e.fn.dropdown;e.fn.dropdown=function(t){return this.each(function(){var r=e(this),i=r.data("dropdown");i||r.data("dropdown",i=new n(this)),typeof t=="string"&&i[t].call(r)})},e.fn.dropdown.Constructor=n,e.fn.dropdown.noConflict=function(){return e.fn.dropdown=s,this},e(document).on("click.dropdown.data-api",r).on("click.dropdown.data-api",".dropdown form",function(e){e.stopPropagation()}).on("click.dropdown.data-api",t,n.prototype.toggle).on("keydown.dropdown.data-api",t+", [role=menu]",n.prototype.keydown)}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.options=n,this.$element=e(t).delegate('[data-dismiss="modal"]',"click.dismiss.modal",e.proxy(this.hide,this)),this.options.remote&&this.$element.find(".modal-body").load(this.options.remote)};t.prototype={constructor:t,toggle:function(){return this[this.isShown?"hide":"show"]()},show:function(){var t=this,n=e.Event("show");this.$element.trigger(n);if(this.isShown||n.isDefaultPrevented())return;this.isShown=!0,this.escape(),this.backdrop(function(){var n=e.support.transition&&t.$element.hasClass("fade");t.$element.parent().length||t.$element.appendTo(document.body),t.$element.show(),n&&t.$element[0].offsetWidth,t.$element.addClass("in").attr("aria-hidden",!1),t.enforceFocus(),n?t.$element.one(e.support.transition.end,function(){t.$element.focus().trigger("shown")}):t.$element.focus().trigger("shown")})},hide:function(t){t&&t.preventDefault();var n=this;t=e.Event("hide"),this.$element.trigger(t);if(!this.isShown||t.isDefaultPrevented())return;this.isShown=!1,this.escape(),e(document).off("focusin.modal"),this.$element.removeClass("in").attr("aria-hidden",!0),e.support.transition&&this.$element.hasClass("fade")?this.hideWithTransition():this.hideModal()},enforceFocus:function(){var t=this;e(document).on("focusin.modal",function(e){t.$element[0]!==e.target&&!t.$element.has(e.target).length&&t.$element.focus()})},escape:function(){var e=this;this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.modal",function(t){t.which==27&&e.hide()}):this.isShown||this.$element.off("keyup.dismiss.modal")},hideWithTransition:function(){var t=this,n=setTimeout(function(){t.$element.off(e.support.transition.end),t.hideModal()},500);this.$element.one(e.support.transition.end,function(){clearTimeout(n),t.hideModal()})},hideModal:function(){var e=this;this.$element.hide(),this.backdrop(function(){e.removeBackdrop(),e.$element.trigger("hidden")})},removeBackdrop:function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},backdrop:function(t){var n=this,r=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var i=e.support.transition&&r;this.$backdrop=e('<div class="modal-backdrop '+r+'" />').appendTo(document.body),this.$backdrop.click(this.options.backdrop=="static"?e.proxy(this.$element[0].focus,this.$element[0]):e.proxy(this.hide,this)),i&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in");if(!t)return;i?this.$backdrop.one(e.support.transition.end,t):t()}else!this.isShown&&this.$backdrop?(this.$backdrop.removeClass("in"),e.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one(e.support.transition.end,t):t()):t&&t()}};var n=e.fn.modal;e.fn.modal=function(n){return this.each(function(){var r=e(this),i=r.data("modal"),s=e.extend({},e.fn.modal.defaults,r.data(),typeof n=="object"&&n);i||r.data("modal",i=new t(this,s)),typeof n=="string"?i[n]():s.show&&i.show()})},e.fn.modal.defaults={backdrop:!0,keyboard:!0,show:!0},e.fn.modal.Constructor=t,e.fn.modal.noConflict=function(){return e.fn.modal=n,this},e(document).on("click.modal.data-api",'[data-toggle="modal"]',function(t){var n=e(this),r=n.attr("href"),i=e(n.attr("data-target")||r&&r.replace(/.*(?=#[^\s]+$)/,"")),s=i.data("modal")?"toggle":e.extend({remote:!/#/.test(r)&&r},i.data(),n.data());t.preventDefault(),i.modal(s).one("hide",function(){n.focus()})})}(window.jQuery),!function(e){"use strict";var t=function(e,t){this.init("tooltip",e,t)};t.prototype={constructor:t,init:function(t,n,r){var i,s,o,u,a;this.type=t,this.$element=e(n),this.options=this.getOptions(r),this.enabled=!0,o=this.options.trigger.split(" ");for(a=o.length;a--;)u=o[a],u=="click"?this.$element.on("click."+this.type,this.options.selector,e.proxy(this.toggle,this)):u!="manual"&&(i=u=="hover"?"mouseenter":"focus",s=u=="hover"?"mouseleave":"blur",this.$element.on(i+"."+this.type,this.options.selector,e.proxy(this.enter,this)),this.$element.on(s+"."+this.type,this.options.selector,e.proxy(this.leave,this)));this.options.selector?this._options=e.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},getOptions:function(t){return t=e.extend({},e.fn[this.type].defaults,this.$element.data(),t),t.delay&&typeof t.delay=="number"&&(t.delay={show:t.delay,hide:t.delay}),t},enter:function(t){var n=e.fn[this.type].defaults,r={},i;this._options&&e.each(this._options,function(e,t){n[e]!=t&&(r[e]=t)},this),i=e(t.currentTarget)[this.type](r).data(this.type);if(!i.options.delay||!i.options.delay.show)return i.show();clearTimeout(this.timeout),i.hoverState="in",this.timeout=setTimeout(function(){i.hoverState=="in"&&i.show()},i.options.delay.show)},leave:function(t){var n=e(t.currentTarget)[this.type](this._options).data(this.type);this.timeout&&clearTimeout(this.timeout);if(!n.options.delay||!n.options.delay.hide)return n.hide();n.hoverState="out",this.timeout=setTimeout(function(){n.hoverState=="out"&&n.hide()},n.options.delay.hide)},show:function(){var t,n,r,i,s,o,u=e.Event("show");if(this.hasContent()&&this.enabled){this.$element.trigger(u);if(u.isDefaultPrevented())return;t=this.tip(),this.setContent(),this.options.animation&&t.addClass("fade"),s=typeof this.options.placement=="function"?this.options.placement.call(this,t[0],this.$element[0]):this.options.placement,t.detach().css({top:0,left:0,display:"block"}),this.options.container?t.appendTo(this.options.container):t.insertAfter(this.$element),n=this.getPosition(),r=t[0].offsetWidth,i=t[0].offsetHeight;switch(s){case"bottom":o={top:n.top+n.height,left:n.left+n.width/2-r/2};break;case"top":o={top:n.top-i,left:n.left+n.width/2-r/2};break;case"left":o={top:n.top+n.height/2-i/2,left:n.left-r};break;case"right":o={top:n.top+n.height/2-i/2,left:n.left+n.width}}this.applyPlacement(o,s),this.$element.trigger("shown")}},applyPlacement:function(e,t){var n=this.tip(),r=n[0].offsetWidth,i=n[0].offsetHeight,s,o,u,a;n.offset(e).addClass(t).addClass("in"),s=n[0].offsetWidth,o=n[0].offsetHeight,t=="top"&&o!=i&&(e.top=e.top+i-o,a=!0),t=="bottom"||t=="top"?(u=0,e.left<0&&(u=e.left*-2,e.left=0,n.offset(e),s=n[0].offsetWidth,o=n[0].offsetHeight),this.replaceArrow(u-r+s,s,"left")):this.replaceArrow(o-i,o,"top"),a&&n.offset(e)},replaceArrow:function(e,t,n){this.arrow().css(n,e?50*(1-e/t)+"%":"")},setContent:function(){var e=this.tip(),t=this.getTitle();e.find(".tooltip-inner")[this.options.html?"html":"text"](t),e.removeClass("fade in top bottom left right")},hide:function(){function i(){var t=setTimeout(function(){n.off(e.support.transition.end).detach()},500);n.one(e.support.transition.end,function(){clearTimeout(t),n.detach()})}var t=this,n=this.tip(),r=e.Event("hide");this.$element.trigger(r);if(r.isDefaultPrevented())return;return n.removeClass("in"),e.support.transition&&this.$tip.hasClass("fade")?i():n.detach(),this.$element.trigger("hidden"),this},fixTitle:function(){var e=this.$element;(e.attr("title")||typeof e.attr("data-original-title")!="string")&&e.attr("data-original-title",e.attr("title")||"").attr("title","")},hasContent:function(){return this.getTitle()},getPosition:function(){var t=this.$element[0];return e.extend({},typeof t.getBoundingClientRect=="function"?t.getBoundingClientRect():{width:t.offsetWidth,height:t.offsetHeight},this.$element.offset())},getTitle:function(){var e,t=this.$element,n=this.options;return e=t.attr("data-original-title")||(typeof n.title=="function"?n.title.call(t[0]):n.title),e},tip:function(){return this.$tip=this.$tip||e(this.options.template)},arrow:function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},validate:function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},enable:function(){this.enabled=!0},disable:function(){this.enabled=!1},toggleEnabled:function(){this.enabled=!this.enabled},toggle:function(t){var n=t?e(t.currentTarget)[this.type](this._options).data(this.type):this;n.tip().hasClass("in")?n.hide():n.show()},destroy:function(){this.hide().$element.off("."+this.type).removeData(this.type)}};var n=e.fn.tooltip;e.fn.tooltip=function(n){return this.each(function(){var r=e(this),i=r.data("tooltip"),s=typeof n=="object"&&n;i||r.data("tooltip",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.tooltip.Constructor=t,e.fn.tooltip.defaults={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1},e.fn.tooltip.noConflict=function(){return e.fn.tooltip=n,this}}(window.jQuery),!function(e){"use strict";var t=function(e,t){this.init("popover",e,t)};t.prototype=e.extend({},e.fn.tooltip.Constructor.prototype,{constructor:t,setContent:function(){var e=this.tip(),t=this.getTitle(),n=this.getContent();e.find(".popover-title")[this.options.html?"html":"text"](t),e.find(".popover-content")[this.options.html?"html":"text"](n),e.removeClass("fade top bottom left right in")},hasContent:function(){return this.getTitle()||this.getContent()},getContent:function(){var e,t=this.$element,n=this.options;return e=(typeof n.content=="function"?n.content.call(t[0]):n.content)||t.attr("data-content"),e},tip:function(){return this.$tip||(this.$tip=e(this.options.template)),this.$tip},destroy:function(){this.hide().$element.off("."+this.type).removeData(this.type)}});var n=e.fn.popover;e.fn.popover=function(n){return this.each(function(){var r=e(this),i=r.data("popover"),s=typeof n=="object"&&n;i||r.data("popover",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.popover.Constructor=t,e.fn.popover.defaults=e.extend({},e.fn.tooltip.defaults,{placement:"right",trigger:"click",content:"",template:'<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),e.fn.popover.noConflict=function(){return e.fn.popover=n,this}}(window.jQuery),!function(e){"use strict";function t(t,n){var r=e.proxy(this.process,this),i=e(t).is("body")?e(window):e(t),s;this.options=e.extend({},e.fn.scrollspy.defaults,n),this.$scrollElement=i.on("scroll.scroll-spy.data-api",r),this.selector=(this.options.target||(s=e(t).attr("href"))&&s.replace(/.*(?=#[^\s]+$)/,"")||"")+" .nav li > a",this.$body=e("body"),this.refresh(),this.process()}t.prototype={constructor:t,refresh:function(){var t=this,n;this.offsets=e([]),this.targets=e([]),n=this.$body.find(this.selector).map(function(){var n=e(this),r=n.data("target")||n.attr("href"),i=/^#\w/.test(r)&&e(r);return i&&i.length&&[[i.position().top+(!e.isWindow(t.$scrollElement.get(0))&&t.$scrollElement.scrollTop()),r]]||null}).sort(function(e,t){return e[0]-t[0]}).each(function(){t.offsets.push(this[0]),t.targets.push(this[1])})},process:function(){var e=this.$scrollElement.scrollTop()+this.options.offset,t=this.$scrollElement[0].scrollHeight||this.$body[0].scrollHeight,n=t-this.$scrollElement.height(),r=this.offsets,i=this.targets,s=this.activeTarget,o;if(e>=n)return s!=(o=i.last()[0])&&this.activate(o);for(o=r.length;o--;)s!=i[o]&&e>=r[o]&&(!r[o+1]||e<=r[o+1])&&this.activate(i[o])},activate:function(t){var n,r;this.activeTarget=t,e(this.selector).parent(".active").removeClass("active"),r=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]',n=e(r).parent("li").addClass("active"),n.parent(".dropdown-menu").length&&(n=n.closest("li.dropdown").addClass("active")),n.trigger("activate")}};var n=e.fn.scrollspy;e.fn.scrollspy=function(n){return this.each(function(){var r=e(this),i=r.data("scrollspy"),s=typeof n=="object"&&n;i||r.data("scrollspy",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.scrollspy.Constructor=t,e.fn.scrollspy.defaults={offset:10},e.fn.scrollspy.noConflict=function(){return e.fn.scrollspy=n,this},e(window).on("load",function(){e('[data-spy="scroll"]').each(function(){var t=e(this);t.scrollspy(t.data())})})}(window.jQuery),!function(e){"use strict";var t=function(t){this.element=e(t)};t.prototype={constructor:t,show:function(){var t=this.element,n=t.closest("ul:not(.dropdown-menu)"),r=t.attr("data-target"),i,s,o;r||(r=t.attr("href"),r=r&&r.replace(/.*(?=#[^\s]*$)/,""));if(t.parent("li").hasClass("active"))return;i=n.find(".active:last a")[0],o=e.Event("show",{relatedTarget:i}),t.trigger(o);if(o.isDefaultPrevented())return;s=e(r),this.activate(t.parent("li"),n),this.activate(s,s.parent(),function(){t.trigger({type:"shown",relatedTarget:i})})},activate:function(t,n,r){function o(){i.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),t.addClass("active"),s?(t[0].offsetWidth,t.addClass("in")):t.removeClass("fade"),t.parent(".dropdown-menu")&&t.closest("li.dropdown").addClass("active"),r&&r()}var i=n.find("> .active"),s=r&&e.support.transition&&i.hasClass("fade");s?i.one(e.support.transition.end,o):o(),i.removeClass("in")}};var n=e.fn.tab;e.fn.tab=function(n){return this.each(function(){var r=e(this),i=r.data("tab");i||r.data("tab",i=new t(this)),typeof n=="string"&&i[n]()})},e.fn.tab.Constructor=t,e.fn.tab.noConflict=function(){return e.fn.tab=n,this},e(document).on("click.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(t){t.preventDefault(),e(this).tab("show")})}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.$element=e(t),this.options=e.extend({},e.fn.typeahead.defaults,n),this.matcher=this.options.matcher||this.matcher,this.sorter=this.options.sorter||this.sorter,this.highlighter=this.options.highlighter||this.highlighter,this.updater=this.options.updater||this.updater,this.source=this.options.source,this.$menu=e(this.options.menu),this.shown=!1,this.listen()};t.prototype={constructor:t,select:function(){var e=this.$menu.find(".active").attr("data-value");return this.$element.val(this.updater(e)).change(),this.hide()},updater:function(e){return e},show:function(){var t=e.extend({},this.$element.position(),{height:this.$element[0].offsetHeight});return this.$menu.insertAfter(this.$element).css({top:t.top+t.height,left:t.left}).show(),this.shown=!0,this},hide:function(){return this.$menu.hide(),this.shown=!1,this},lookup:function(t){var n;return this.query=this.$element.val(),!this.query||this.query.length<this.options.minLength?this.shown?this.hide():this:(n=e.isFunction(this.source)?this.source(this.query,e.proxy(this.process,this)):this.source,n?this.process(n):this)},process:function(t){var n=this;return t=e.grep(t,function(e){return n.matcher(e)}),t=this.sorter(t),t.length?this.render(t.slice(0,this.options.items)).show():this.shown?this.hide():this},matcher:function(e){return~e.toLowerCase().indexOf(this.query.toLowerCase())},sorter:function(e){var t=[],n=[],r=[],i;while(i=e.shift())i.toLowerCase().indexOf(this.query.toLowerCase())?~i.indexOf(this.query)?n.push(i):r.push(i):t.push(i);return t.concat(n,r)},highlighter:function(e){var t=this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&");return e.replace(new RegExp("("+t+")","ig"),function(e,t){return"<strong>"+t+"</strong>"})},render:function(t){var n=this;return t=e(t).map(function(t,r){return t=e(n.options.item).attr("data-value",r),t.find("a").html(n.highlighter(r)),t[0]}),t.first().addClass("active"),this.$menu.html(t),this},next:function(t){var n=this.$menu.find(".active").removeClass("active"),r=n.next();r.length||(r=e(this.$menu.find("li")[0])),r.addClass("active")},prev:function(e){var t=this.$menu.find(".active").removeClass("active"),n=t.prev();n.length||(n=this.$menu.find("li").last()),n.addClass("active")},listen:function(){this.$element.on("focus",e.proxy(this.focus,this)).on("blur",e.proxy(this.blur,this)).on("keypress",e.proxy(this.keypress,this)).on("keyup",e.proxy(this.keyup,this)),this.eventSupported("keydown")&&this.$element.on("keydown",e.proxy(this.keydown,this)),this.$menu.on("click",e.proxy(this.click,this)).on("mouseenter","li",e.proxy(this.mouseenter,this)).on("mouseleave","li",e.proxy(this.mouseleave,this))},eventSupported:function(e){var t=e in this.$element;return t||(this.$element.setAttribute(e,"return;"),t=typeof this.$element[e]=="function"),t},move:function(e){if(!this.shown)return;switch(e.keyCode){case 9:case 13:case 27:e.preventDefault();break;case 38:e.preventDefault(),this.prev();break;case 40:e.preventDefault(),this.next()}e.stopPropagation()},keydown:function(t){this.suppressKeyPressRepeat=~e.inArray(t.keyCode,[40,38,9,13,27]),this.move(t)},keypress:function(e){if(this.suppressKeyPressRepeat)return;this.move(e)},keyup:function(e){switch(e.keyCode){case 40:case 38:case 16:case 17:case 18:break;case 9:case 13:if(!this.shown)return;this.select();break;case 27:if(!this.shown)return;this.hide();break;default:this.lookup()}e.stopPropagation(),e.preventDefault()},focus:function(e){this.focused=!0},blur:function(e){this.focused=!1,!this.mousedover&&this.shown&&this.hide()},click:function(e){e.stopPropagation(),e.preventDefault(),this.select(),this.$element.focus()},mouseenter:function(t){this.mousedover=!0,this.$menu.find(".active").removeClass("active"),e(t.currentTarget).addClass("active")},mouseleave:function(e){this.mousedover=!1,!this.focused&&this.shown&&this.hide()}};var n=e.fn.typeahead;e.fn.typeahead=function(n){return this.each(function(){var r=e(this),i=r.data("typeahead"),s=typeof n=="object"&&n;i||r.data("typeahead",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.typeahead.defaults={source:[],items:8,menu:'<ul class="typeahead dropdown-menu"></ul>',item:'<li><a href="#"></a></li>',minLength:1},e.fn.typeahead.Constructor=t,e.fn.typeahead.noConflict=function(){return e.fn.typeahead=n,this},e(document).on("focus.typeahead.data-api",'[data-provide="typeahead"]',function(t){var n=e(this);if(n.data("typeahead"))return;n.typeahead(n.data())})}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.options=e.extend({},e.fn.affix.defaults,n),this.$window=e(window).on("scroll.affix.data-api",e.proxy(this.checkPosition,this)).on("click.affix.data-api",e.proxy(function(){setTimeout(e.proxy(this.checkPosition,this),1)},this)),this.$element=e(t),this.checkPosition()};t.prototype.checkPosition=function(){if(!this.$element.is(":visible"))return;var t=e(document).height(),n=this.$window.scrollTop(),r=this.$element.offset(),i=this.options.offset,s=i.bottom,o=i.top,u="affix affix-top affix-bottom",a;typeof i!="object"&&(s=o=i),typeof o=="function"&&(o=i.top()),typeof s=="function"&&(s=i.bottom()),a=this.unpin!=null&&n+this.unpin<=r.top?!1:s!=null&&r.top+this.$element.height()>=t-s?"bottom":o!=null&&n<=o?"top":!1;if(this.affixed===a)return;this.affixed=a,this.unpin=a=="bottom"?r.top-n:null,this.$element.removeClass(u).addClass("affix"+(a?"-"+a:""))};var n=e.fn.affix;e.fn.affix=function(n){return this.each(function(){var r=e(this),i=r.data("affix"),s=typeof n=="object"&&n;i||r.data("affix",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.affix.Constructor=t,e.fn.affix.defaults={offset:0},e.fn.affix.noConflict=function(){return e.fn.affix=n,this},e(window).on("load",function(){e('[data-spy="affix"]').each(function(){var t=e(this),n=t.data();n.offset=n.offset||{},n.offsetBottom&&(n.offset.bottom=n.offsetBottom),n.offsetTop&&(n.offset.top=n.offsetTop),t.affix(n)})})}(window.jQuery);
// lib/handlebars/base.js
/*jshint eqnull:true*/this.Handlebars={},function(e){e.VERSION="1.0.rc.1",e.helpers={},e.partials={},e.registerHelper=function(e,t,n){n&&(t.not=n),this.helpers[e]=t},e.registerPartial=function(e,t){this.partials[e]=t},e.registerHelper("helperMissing",function(e){if(arguments.length===2)return undefined;throw new Error("Could not find property '"+e+"'")});var t=Object.prototype.toString,n="[object Function]";e.registerHelper("blockHelperMissing",function(r,i){var s=i.inverse||function(){},o=i.fn,u="",a=t.call(r);return a===n&&(r=r.call(this)),r===!0?o(this):r===!1||r==null?s(this):a==="[object Array]"?r.length>0?e.helpers.each(r,i):s(this):o(r)}),e.K=function(){},e.createFrame=Object.create||function(t){e.K.prototype=t;var n=new e.K;return e.K.prototype=null,n},e.registerHelper("each",function(t,n){var r=n.fn,i=n.inverse,s=0,o="",u;n.data&&(u=e.createFrame(n.data));if(t&&typeof t=="object")if(t instanceof Array)for(var a=t.length;s<a;s++)u&&(u.index=s),o+=r(t[s],{data:u});else for(var f in t)t.hasOwnProperty(f)&&(u&&(u.key=f),o+=r(t[f],{data:u}),s++);return s===0&&(o=i(this)),o}),e.registerHelper("if",function(r,i){var s=t.call(r);return s===n&&(r=r.call(this)),!r||e.Utils.isEmpty(r)?i.inverse(this):i.fn(this)}),e.registerHelper("unless",function(t,n){var r=n.fn,i=n.inverse;return n.fn=i,n.inverse=r,e.helpers["if"].call(this,t,n)}),e.registerHelper("with",function(e,t){return t.fn(e)}),e.registerHelper("log",function(t){e.log(t)})}(this.Handlebars);var handlebars=function(){function n(){this.yy={}}var e={trace:function(){},yy:{},symbols_:{error:2,root:3,program:4,EOF:5,statements:6,simpleInverse:7,statement:8,openInverse:9,closeBlock:10,openBlock:11,mustache:12,partial:13,CONTENT:14,COMMENT:15,OPEN_BLOCK:16,inMustache:17,CLOSE:18,OPEN_INVERSE:19,OPEN_ENDBLOCK:20,path:21,OPEN:22,OPEN_UNESCAPED:23,OPEN_PARTIAL:24,params:25,hash:26,DATA:27,param:28,STRING:29,INTEGER:30,BOOLEAN:31,hashSegments:32,hashSegment:33,ID:34,EQUALS:35,pathSegments:36,SEP:37,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",14:"CONTENT",15:"COMMENT",16:"OPEN_BLOCK",18:"CLOSE",19:"OPEN_INVERSE",20:"OPEN_ENDBLOCK",22:"OPEN",23:"OPEN_UNESCAPED",24:"OPEN_PARTIAL",27:"DATA",29:"STRING",30:"INTEGER",31:"BOOLEAN",34:"ID",35:"EQUALS",37:"SEP"},productions_:[0,[3,2],[4,3],[4,1],[4,0],[6,1],[6,2],[8,3],[8,3],[8,1],[8,1],[8,1],[8,1],[11,3],[9,3],[10,3],[12,3],[12,3],[13,3],[13,4],[7,2],[17,3],[17,2],[17,2],[17,1],[17,1],[25,2],[25,1],[28,1],[28,1],[28,1],[28,1],[28,1],[26,1],[32,2],[32,1],[33,3],[33,3],[33,3],[33,3],[33,3],[21,1],[36,3],[36,1]],performAction:function(t,n,r,i,s,o,u){var a=o.length-1;switch(s){case 1:return o[a-1];case 2:this.$=new i.ProgramNode(o[a-2],o[a]);break;case 3:this.$=new i.ProgramNode(o[a]);break;case 4:this.$=new i.ProgramNode([]);break;case 5:this.$=[o[a]];break;case 6:o[a-1].push(o[a]),this.$=o[a-1];break;case 7:this.$=new i.BlockNode(o[a-2],o[a-1].inverse,o[a-1],o[a]);break;case 8:this.$=new i.BlockNode(o[a-2],o[a-1],o[a-1].inverse,o[a]);break;case 9:this.$=o[a];break;case 10:this.$=o[a];break;case 11:this.$=new i.ContentNode(o[a]);break;case 12:this.$=new i.CommentNode(o[a]);break;case 13:this.$=new i.MustacheNode(o[a-1][0],o[a-1][1]);break;case 14:this.$=new i.MustacheNode(o[a-1][0],o[a-1][1]);break;case 15:this.$=o[a-1];break;case 16:this.$=new i.MustacheNode(o[a-1][0],o[a-1][1]);break;case 17:this.$=new i.MustacheNode(o[a-1][0],o[a-1][1],!0);break;case 18:this.$=new i.PartialNode(o[a-1]);break;case 19:this.$=new i.PartialNode(o[a-2],o[a-1]);break;case 20:break;case 21:this.$=[[o[a-2]].concat(o[a-1]),o[a]];break;case 22:this.$=[[o[a-1]].concat(o[a]),null];break;case 23:this.$=[[o[a-1]],o[a]];break;case 24:this.$=[[o[a]],null];break;case 25:this.$=[[new i.DataNode(o[a])],null];break;case 26:o[a-1].push(o[a]),this.$=o[a-1];break;case 27:this.$=[o[a]];break;case 28:this.$=o[a];break;case 29:this.$=new i.StringNode(o[a]);break;case 30:this.$=new i.IntegerNode(o[a]);break;case 31:this.$=new i.BooleanNode(o[a]);break;case 32:this.$=new i.DataNode(o[a]);break;case 33:this.$=new i.HashNode(o[a]);break;case 34:o[a-1].push(o[a]),this.$=o[a-1];break;case 35:this.$=[o[a]];break;case 36:this.$=[o[a-2],o[a]];break;case 37:this.$=[o[a-2],new i.StringNode(o[a])];break;case 38:this.$=[o[a-2],new i.IntegerNode(o[a])];break;case 39:this.$=[o[a-2],new i.BooleanNode(o[a])];break;case 40:this.$=[o[a-2],new i.DataNode(o[a])];break;case 41:this.$=new i.IdNode(o[a]);break;case 42:o[a-2].push(o[a]),this.$=o[a-2];break;case 43:this.$=[o[a]]}},table:[{3:1,4:2,5:[2,4],6:3,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],22:[1,13],23:[1,14],24:[1,15]},{1:[3]},{5:[1,16]},{5:[2,3],7:17,8:18,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,19],20:[2,3],22:[1,13],23:[1,14],24:[1,15]},{5:[2,5],14:[2,5],15:[2,5],16:[2,5],19:[2,5],20:[2,5],22:[2,5],23:[2,5],24:[2,5]},{4:20,6:3,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,4],22:[1,13],23:[1,14],24:[1,15]},{4:21,6:3,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,4],22:[1,13],23:[1,14],24:[1,15]},{5:[2,9],14:[2,9],15:[2,9],16:[2,9],19:[2,9],20:[2,9],22:[2,9],23:[2,9],24:[2,9]},{5:[2,10],14:[2,10],15:[2,10],16:[2,10],19:[2,10],20:[2,10],22:[2,10],23:[2,10],24:[2,10]},{5:[2,11],14:[2,11],15:[2,11],16:[2,11],19:[2,11],20:[2,11],22:[2,11],23:[2,11],24:[2,11]},{5:[2,12],14:[2,12],15:[2,12],16:[2,12],19:[2,12],20:[2,12],22:[2,12],23:[2,12],24:[2,12]},{17:22,21:23,27:[1,24],34:[1,26],36:25},{17:27,21:23,27:[1,24],34:[1,26],36:25},{17:28,21:23,27:[1,24],34:[1,26],36:25},{17:29,21:23,27:[1,24],34:[1,26],36:25},{21:30,34:[1,26],36:25},{1:[2,1]},{6:31,8:4,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],22:[1,13],23:[1,14],24:[1,15]},{5:[2,6],14:[2,6],15:[2,6],16:[2,6],19:[2,6],20:[2,6],22:[2,6],23:[2,6],24:[2,6]},{17:22,18:[1,32],21:23,27:[1,24],34:[1,26],36:25},{10:33,20:[1,34]},{10:35,20:[1,34]},{18:[1,36]},{18:[2,24],21:41,25:37,26:38,27:[1,45],28:39,29:[1,42],30:[1,43],31:[1,44],32:40,33:46,34:[1,47],36:25},{18:[2,25]},{18:[2,41],27:[2,41],29:[2,41],30:[2,41],31:[2,41],34:[2,41],37:[1,48]},{18:[2,43],27:[2,43],29:[2,43],30:[2,43],31:[2,43],34:[2,43],37:[2,43]},{18:[1,49]},{18:[1,50]},{18:[1,51]},{18:[1,52],21:53,34:[1,26],36:25},{5:[2,2],8:18,9:5,11:6,12:7,13:8,14:[1,9],15:[1,10],16:[1,12],19:[1,11],20:[2,2],22:[1,13],23:[1,14],24:[1,15]},{14:[2,20],15:[2,20],16:[2,20],19:[2,20],22:[2,20],23:[2,20],24:[2,20]},{5:[2,7],14:[2,7],15:[2,7],16:[2,7],19:[2,7],20:[2,7],22:[2,7],23:[2,7],24:[2,7]},{21:54,34:[1,26],36:25},{5:[2,8],14:[2,8],15:[2,8],16:[2,8],19:[2,8],20:[2,8],22:[2,8],23:[2,8],24:[2,8]},{14:[2,14],15:[2,14],16:[2,14],19:[2,14],20:[2,14],22:[2,14],23:[2,14],24:[2,14]},{18:[2,22],21:41,26:55,27:[1,45],28:56,29:[1,42],30:[1,43],31:[1,44],32:40,33:46,34:[1,47],36:25},{18:[2,23]},{18:[2,27],27:[2,27],29:[2,27],30:[2,27],31:[2,27],34:[2,27]},{18:[2,33],33:57,34:[1,58]},{18:[2,28],27:[2,28],29:[2,28],30:[2,28],31:[2,28],34:[2,28]},{18:[2,29],27:[2,29],29:[2,29],30:[2,29],31:[2,29],34:[2,29]},{18:[2,30],27:[2,30],29:[2,30],30:[2,30],31:[2,30],34:[2,30]},{18:[2,31],27:[2,31],29:[2,31],30:[2,31],31:[2,31],34:[2,31]},{18:[2,32],27:[2,32],29:[2,32],30:[2,32],31:[2,32],34:[2,32]},{18:[2,35],34:[2,35]},{18:[2,43],27:[2,43],29:[2,43],30:[2,43],31:[2,43],34:[2,43],35:[1,59],37:[2,43]},{34:[1,60]},{14:[2,13],15:[2,13],16:[2,13],19:[2,13],20:[2,13],22:[2,13],23:[2,13],24:[2,13]},{5:[2,16],14:[2,16],15:[2,16],16:[2,16],19:[2,16],20:[2,16],22:[2,16],23:[2,16],24:[2,16]},{5:[2,17],14:[2,17],15:[2,17],16:[2,17],19:[2,17],20:[2,17],22:[2,17],23:[2,17],24:[2,17]},{5:[2,18],14:[2,18],15:[2,18],16:[2,18],19:[2,18],20:[2,18],22:[2,18],23:[2,18],24:[2,18]},{18:[1,61]},{18:[1,62]},{18:[2,21]},{18:[2,26],27:[2,26],29:[2,26],30:[2,26],31:[2,26],34:[2,26]},{18:[2,34],34:[2,34]},{35:[1,59]},{21:63,27:[1,67],29:[1,64],30:[1,65],31:[1,66],34:[1,26],36:25},{18:[2,42],27:[2,42],29:[2,42],30:[2,42],31:[2,42],34:[2,42],37:[2,42]},{5:[2,19],14:[2,19],15:[2,19],16:[2,19],19:[2,19],20:[2,19],22:[2,19],23:[2,19],24:[2,19]},{5:[2,15],14:[2,15],15:[2,15],16:[2,15],19:[2,15],20:[2,15],22:[2,15],23:[2,15],24:[2,15]},{18:[2,36],34:[2,36]},{18:[2,37],34:[2,37]},{18:[2,38],34:[2,38]},{18:[2,39],34:[2,39]},{18:[2,40],34:[2,40]}],defaultActions:{16:[2,1],24:[2,25],38:[2,23],55:[2,21]},parseError:function(t,n){throw new Error(t)},parse:function(t){function v(e){r.length=r.length-2*e,i.length=i.length-e,s.length=s.length-e}function m(){var e;return e=n.lexer.lex()||1,typeof e!="number"&&(e=n.symbols_[e]||e),e}var n=this,r=[0],i=[null],s=[],o=this.table,u="",a=0,f=0,l=0,c=2,h=1;this.lexer.setInput(t),this.lexer.yy=this.yy,this.yy.lexer=this.lexer,this.yy.parser=this,typeof this.lexer.yylloc=="undefined"&&(this.lexer.yylloc={});var p=this.lexer.yylloc;s.push(p);var d=this.lexer.options&&this.lexer.options.ranges;typeof this.yy.parseError=="function"&&(this.parseError=this.yy.parseError);var g,y,b,w,E,S,x={},T,N,C,k;for(;;){b=r[r.length-1];if(this.defaultActions[b])w=this.defaultActions[b];else{if(g===null||typeof g=="undefined")g=m();w=o[b]&&o[b][g]}if(typeof w=="undefined"||!w.length||!w[0]){var L="";if(!l){k=[];for(T in o[b])this.terminals_[T]&&T>2&&k.push("'"+this.terminals_[T]+"'");this.lexer.showPosition?L="Parse error on line "+(a+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+k.join(", ")+", got '"+(this.terminals_[g]||g)+"'":L="Parse error on line "+(a+1)+": Unexpected "+(g==1?"end of input":"'"+(this.terminals_[g]||g)+"'"),this.parseError(L,{text:this.lexer.match,token:this.terminals_[g]||g,line:this.lexer.yylineno,loc:p,expected:k})}}if(w[0]instanceof Array&&w.length>1)throw new Error("Parse Error: multiple actions possible at state: "+b+", token: "+g);switch(w[0]){case 1:r.push(g),i.push(this.lexer.yytext),s.push(this.lexer.yylloc),r.push(w[1]),g=null,y?(g=y,y=null):(f=this.lexer.yyleng,u=this.lexer.yytext,a=this.lexer.yylineno,p=this.lexer.yylloc,l>0&&l--);break;case 2:N=this.productions_[w[1]][1],x.$=i[i.length-N],x._$={first_line:s[s.length-(N||1)].first_line,last_line:s[s.length-1].last_line,first_column:s[s.length-(N||1)].first_column,last_column:s[s.length-1].last_column},d&&(x._$.range=[s[s.length-(N||1)].range[0],s[s.length-1].range[1]]),S=this.performAction.call(x,u,f,a,this.yy,w[1],i,s);if(typeof S!="undefined")return S;N&&(r=r.slice(0,-1*N*2),i=i.slice(0,-1*N),s=s.slice(0,-1*N)),r.push(this.productions_[w[1]][0]),i.push(x.$),s.push(x._$),C=o[r[r.length-2]][r[r.length-1]],r.push(C);break;case 3:return!0}}return!0}},t=function(){var e={EOF:1,parseError:function(t,n){if(!this.yy.parser)throw new Error(t);this.yy.parser.parseError(t,n)},setInput:function(e){return this._input=e,this._more=this._less=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var e=this._input[0];this.yytext+=e,this.yyleng++,this.offset++,this.match+=e,this.matched+=e;var t=e.match(/(?:\r\n?|\n).*/g);return t?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),e},unput:function(e){var t=e.length,n=e.split(/(?:\r\n?|\n)/g);this._input=e+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-t-1),this.offset-=t;var r=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),n.length-1&&(this.yylineno-=n.length-1);var i=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:n?(n.length===r.length?this.yylloc.first_column:0)+r[r.length-n.length].length-n[0].length:this.yylloc.first_column-t},this.options.ranges&&(this.yylloc.range=[i[0],i[0]+this.yyleng-t]),this},more:function(){return this._more=!0,this},less:function(e){this.unput(this.match.slice(e))},pastInput:function(){var e=this.matched.substr(0,this.matched.length-this.match.length);return(e.length>20?"...":"")+e.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var e=this.match;return e.length<20&&(e+=this._input.substr(0,20-e.length)),(e.substr(0,20)+(e.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var e=this.pastInput(),t=(new Array(e.length+1)).join("-");return e+this.upcomingInput()+"\n"+t+"^"},next:function(){if(this.done)return this.EOF;this._input||(this.done=!0);var e,t,n,r,i,s;this._more||(this.yytext="",this.match="");var o=this._currentRules();for(var u=0;u<o.length;u++){n=this._input.match(this.rules[o[u]]);if(n&&(!t||n[0].length>t[0].length)){t=n,r=u;if(!this.options.flex)break}}if(t){s=t[0].match(/(?:\r\n?|\n).*/g),s&&(this.yylineno+=s.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:s?s[s.length-1].length-s[s.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+t[0].length},this.yytext+=t[0],this.match+=t[0],this.matches=t,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._input=this._input.slice(t[0].length),this.matched+=t[0],e=this.performAction.call(this,this.yy,this,o[r],this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1);if(e)return e;return}return this._input===""?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var t=this.next();return typeof t!="undefined"?t:this.lex()},begin:function(t){this.conditionStack.push(t)},popState:function(){return this.conditionStack.pop()},_currentRules:function(){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules},topState:function(){return this.conditionStack[this.conditionStack.length-2]},pushState:function(t){this.begin(t)}};return e.options={},e.performAction=function(t,n,r,i){var s=i;switch(r){case 0:n.yytext.slice(-1)!=="\\"&&this.begin("mu"),n.yytext.slice(-1)==="\\"&&(n.yytext=n.yytext.substr(0,n.yyleng-1),this.begin("emu"));if(n.yytext)return 14;break;case 1:return 14;case 2:return n.yytext.slice(-1)!=="\\"&&this.popState(),n.yytext.slice(-1)==="\\"&&(n.yytext=n.yytext.substr(0,n.yyleng-1)),14;case 3:return n.yytext=n.yytext.substr(0,n.yyleng-4),this.popState(),15;case 4:return 24;case 5:return 16;case 6:return 20;case 7:return 19;case 8:return 19;case 9:return 23;case 10:return 23;case 11:this.popState(),this.begin("com");break;case 12:return n.yytext=n.yytext.substr(3,n.yyleng-5),this.popState(),15;case 13:return 22;case 14:return 35;case 15:return 34;case 16:return 34;case 17:return 37;case 18:break;case 19:return this.popState(),18;case 20:return this.popState(),18;case 21:return n.yytext=n.yytext.substr(1,n.yyleng-2).replace(/\\"/g,'"'),29;case 22:return n.yytext=n.yytext.substr(1,n.yyleng-2).replace(/\\'/g,"'"),29;case 23:return n.yytext=n.yytext.substr(1),27;case 24:return 31;case 25:return 31;case 26:return 30;case 27:return 34;case 28:return n.yytext=n.yytext.substr(1,n.yyleng-2),34;case 29:return"INVALID";case 30:return 5}},e.rules=[/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|$)))/,/^(?:[\s\S]*?--\}\})/,/^(?:\{\{>)/,/^(?:\{\{#)/,/^(?:\{\{\/)/,/^(?:\{\{\^)/,/^(?:\{\{\s*else\b)/,/^(?:\{\{\{)/,/^(?:\{\{&)/,/^(?:\{\{!--)/,/^(?:\{\{![\s\S]*?\}\})/,/^(?:\{\{)/,/^(?:=)/,/^(?:\.(?=[} ]))/,/^(?:\.\.)/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}\}\})/,/^(?:\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@[a-zA-Z]+)/,/^(?:true(?=[}\s]))/,/^(?:false(?=[}\s]))/,/^(?:[0-9]+(?=[}\s]))/,/^(?:[a-zA-Z0-9_$-]+(?=[=}\s\/.]))/,/^(?:\[[^\]]*\])/,/^(?:.)/,/^(?:$)/],e.conditions={mu:{rules:[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],inclusive:!1},emu:{rules:[2],inclusive:!1},com:{rules:[3],inclusive:!1},INITIAL:{rules:[0,1,30],inclusive:!0}},e}();return e.lexer=t,n.prototype=e,e.Parser=n,new n}();typeof require!="undefined"&&typeof exports!="undefined"&&(exports.parser=handlebars,exports.Parser=handlebars.Parser,exports.parse=function(){return handlebars.parse.apply(handlebars,arguments)},exports.main=function(t){if(!t[1])throw new Error("Usage: "+t[0]+" FILE");var n,r;return typeof process!="undefined"?n=require("fs").readFileSync(require("path").resolve(t[1]),"utf8"):n=require("file").path(require("file").cwd()).join(t[1]).read({charset:"utf-8"}),exports.parser.parse(n)},typeof module!="undefined"&&require.main===module&&exports.main(typeof process!="undefined"?process.argv.slice(1):require("system").args)),Handlebars.Parser=handlebars,Handlebars.parse=function(e){return Handlebars.Parser.yy=Handlebars.AST,Handlebars.Parser.parse(e)},Handlebars.print=function(e){return(new Handlebars.PrintVisitor).accept(e)},Handlebars.logger={DEBUG:0,INFO:1,WARN:2,ERROR:3,level:3,log:function(e,t){}},Handlebars.log=function(e,t){Handlebars.logger.log(e,t)},function(){Handlebars.AST={},Handlebars.AST.ProgramNode=function(e,t){this.type="program",this.statements=e,t&&(this.inverse=new Handlebars.AST.ProgramNode(t))},Handlebars.AST.MustacheNode=function(e,t,n){this.type="mustache",this.escaped=!n,this.hash=t;var r=this.id=e[0],i=this.params=e.slice(1),s=this.eligibleHelper=r.isSimple;this.isHelper=s&&(i.length||t)},Handlebars.AST.PartialNode=function(e,t){this.type="partial",this.id=e,this.context=t};var e=function(e,t){if(e.original!==t.original)throw new Handlebars.Exception(e.original+" doesn't match "+t.original)};Handlebars.AST.BlockNode=function(t,n,r,i){e(t.id,i),this.type="block",this.mustache=t,this.program=n,this.inverse=r,this.inverse&&!this.program&&(this.isInverse=!0)},Handlebars.AST.ContentNode=function(e){this.type="content",this.string=e},Handlebars.AST.HashNode=function(e){this.type="hash",this.pairs=e},Handlebars.AST.IdNode=function(e){this.type="ID",this.original=e.join(".");var t=[],n=0;for(var r=0,i=e.length;r<i;r++){var s=e[r];s===".."?n++:s==="."||s==="this"?this.isScoped=!0:t.push(s)}this.parts=t,this.string=t.join("."),this.depth=n,this.isSimple=e.length===1&&!this.isScoped&&n===0},Handlebars.AST.DataNode=function(e){this.type="DATA",this.id=e},Handlebars.AST.StringNode=function(e){this.type="STRING",this.string=e},Handlebars.AST.IntegerNode=function(e){this.type="INTEGER",this.integer=e},Handlebars.AST.BooleanNode=function(e){this.type="BOOLEAN",this.bool=e},Handlebars.AST.CommentNode=function(e){this.type="comment",this.comment=e}}();var errorProps=["description","fileName","lineNumber","message","name","number","stack"];Handlebars.Exception=function(e){var t=Error.prototype.constructor.apply(this,arguments);for(var n=0;n<errorProps.length;n++)this[errorProps[n]]=t[errorProps[n]]},Handlebars.Exception.prototype=new Error,Handlebars.SafeString=function(e){this.string=e},Handlebars.SafeString.prototype.toString=function(){return this.string.toString()},function(){var e={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},t=/[&<>"'`]/g,n=/[&<>"'`]/,r=function(t){return e[t]||"&amp;"};Handlebars.Utils={escapeExpression:function(e){return e instanceof Handlebars.SafeString?e.toString():e==null||e===!1?"":n.test(e)?e.replace(t,r):e},isEmpty:function(e){return typeof e=="undefined"?!0:e===null?!0:e===!1?!0:Object.prototype.toString.call(e)==="[object Array]"&&e.length===0?!0:!1}}}(),Handlebars.Compiler=function(){},Handlebars.JavaScriptCompiler=function(){},function(e,t){e.prototype={compiler:e,disassemble:function(){var e=this.opcodes,t,n=[],r,i;for(var s=0,o=e.length;s<o;s++){t=e[s];if(t.opcode==="DECLARE")n.push("DECLARE "+t.name+"="+t.value);else{r=[];for(var u=0;u<t.args.length;u++)i=t.args[u],typeof i=="string"&&(i='"'+i.replace("\n","\\n")+'"'),r.push(i);n.push(t.opcode+" "+r.join(" "))}}return n.join("\n")},guid:0,compile:function(e,t){this.children=[],this.depths={list:[]},this.options=t;var n=this.options.knownHelpers;this.options.knownHelpers={helperMissing:!0,blockHelperMissing:!0,each:!0,"if":!0,unless:!0,"with":!0,log:!0};if(n)for(var r in n)this.options.knownHelpers[r]=n[r];return this.program(e)},accept:function(e){return this[e.type](e)},program:function(e){var t=e.statements,n;this.opcodes=[];for(var r=0,i=t.length;r<i;r++)n=t[r],this[n.type](n);return this.isSimple=i===1,this.depths.list=this.depths.list.sort(function(e,t){return e-t}),this},compileProgram:function(e){var t=(new this.compiler).compile(e,this.options),n=this.guid++,r;this.usePartial=this.usePartial||t.usePartial,this.children[n]=t;for(var i=0,s=t.depths.list.length;i<s;i++){r=t.depths.list[i];if(r<2)continue;this.addDepth(r-1)}return n},block:function(e){var t=e.mustache,n=e.program,r=e.inverse;n&&(n=this.compileProgram(n)),r&&(r=this.compileProgram(r));var i=this.classifyMustache(t);i==="helper"?this.helperMustache(t,n,r):i==="simple"?(this.simpleMustache(t),this.opcode("pushProgram",n),this.opcode("pushProgram",r),this.opcode("pushLiteral","{}"),this.opcode("blockValue")):(this.ambiguousMustache(t,n,r),this.opcode("pushProgram",n),this.opcode("pushProgram",r),this.opcode("pushLiteral","{}"),this.opcode("ambiguousBlockValue")),this.opcode("append")},hash:function(e){var t=e.pairs,n,r;this.opcode("push","{}");for(var i=0,s=t.length;i<s;i++)n=t[i],r=n[1],this.accept(r),this.opcode("assignToHash",n[0])},partial:function(e){var t=e.id;this.usePartial=!0,e.context?this.ID(e.context):this.opcode("push","depth0"),this.opcode("invokePartial",t.original),this.opcode("append")},content:function(e){this.opcode("appendContent",e.string)},mustache:function(e){var t=this.options,n=this.classifyMustache(e);n==="simple"?this.simpleMustache(e):n==="helper"?this.helperMustache(e):this.ambiguousMustache(e),e.escaped&&!t.noEscape?this.opcode("appendEscaped"):this.opcode("append")},ambiguousMustache:function(e,t,n){var r=e.id,i=r.parts[0];this.opcode("getContext",r.depth),this.opcode("pushProgram",t),this.opcode("pushProgram",n),this.opcode("invokeAmbiguous",i)},simpleMustache:function(e,t,n){var r=e.id;r.type==="DATA"?this.DATA(r):r.parts.length?this.ID(r):(this.addDepth(r.depth),this.opcode("getContext",r.depth),this.opcode("pushContext")),this.opcode("resolvePossibleLambda")},helperMustache:function(e,t,n){var r=this.setupFullMustacheParams(e,t,n),i=e.id.parts[0];if(this.options.knownHelpers[i])this.opcode("invokeKnownHelper",r.length,i);else{if(this.knownHelpersOnly)throw new Error("You specified knownHelpersOnly, but used the unknown helper "+i);this.opcode("invokeHelper",r.length,i)}},ID:function(e){this.addDepth(e.depth),this.opcode("getContext",e.depth);var t=e.parts[0];t?this.opcode("lookupOnContext",e.parts[0]):this.opcode("pushContext");for(var n=1,r=e.parts.length;n<r;n++)this.opcode("lookup",e.parts[n])},DATA:function(e){this.options.data=!0,this.opcode("lookupData",e.id)},STRING:function(e){this.opcode("pushString",e.string)},INTEGER:function(e){this.opcode("pushLiteral",e.integer)},BOOLEAN:function(e){this.opcode("pushLiteral",e.bool)},comment:function(){},opcode:function(e){this.opcodes.push({opcode:e,args:[].slice.call(arguments,1)})},declare:function(e,t){this.opcodes.push({opcode:"DECLARE",name:e,value:t})},addDepth:function(e){if(isNaN(e))throw new Error("EWOT");if(e===0)return;this.depths[e]||(this.depths[e]=!0,this.depths.list.push(e))},classifyMustache:function(e){var t=e.isHelper,n=e.eligibleHelper,r=this.options;if(n&&!t){var i=e.id.parts[0];r.knownHelpers[i]?t=!0:r.knownHelpersOnly&&(n=!1)}return t?"helper":n?"ambiguous":"simple"},pushParams:function(e){var t=e.length,n;while(t--)n=e[t],this.options.stringParams?(n.depth&&this.addDepth(n.depth),this.opcode("getContext",n.depth||0),this.opcode("pushStringParam",n.string)):this[n.type](n)},setupMustacheParams:function(e){var t=e.params;return this.pushParams(t),e.hash?this.hash(e.hash):this.opcode("pushLiteral","{}"),t},setupFullMustacheParams:function(e,t,n){var r=e.params;return this.pushParams(r),this.opcode("pushProgram",t),this.opcode("pushProgram",n),e.hash?this.hash(e.hash):this.opcode("pushLiteral","{}"),r}};var n=function(e){this.value=e};t.prototype={nameLookup:function(e,n,r){return/^[0-9]+$/.test(n)?e+"["+n+"]":t.isValidJavaScriptVariableName(n)?e+"."+n:e+"['"+n+"']"},appendToBuffer:function(e){return this.environment.isSimple?"return "+e+";":"buffer += "+e+";"},initializeBuffer:function(){return this.quotedString("")},namespace:"Handlebars",compile:function(e,t,n,r){this.environment=e,this.options=t||{},Handlebars.log(Handlebars.logger.DEBUG,this.environment.disassemble()+"\n\n"),this.name=this.environment.name,this.isChild=!!n,this.context=n||{programs:[],aliases:{}},this.preamble(),this.stackSlot=0,this.stackVars=[],this.registers={list:[]},this.compileStack=[],this.compileChildren(e,t);var i=e.opcodes,s;this.i=0;for(o=i.length;this.i<o;this.i++)s=i[this.i],s.opcode==="DECLARE"?this[s.name]=s.value:this[s.opcode].apply(this,s.args);return this.createFunctionContext(r)},nextOpcode:function(){var e=this.environment.opcodes,t=e[this.i+1];return e[this.i+1]},eat:function(e){this.i=this.i+1},preamble:function(){var e=[];if(!this.isChild){var t=this.namespace,n="helpers = helpers || "+t+".helpers;";this.environment.usePartial&&(n=n+" partials = partials || "+t+".partials;"),this.options.data&&(n+=" data = data || {};"),e.push(n)}else e.push("");this.environment.isSimple?e.push(""):e.push(", buffer = "+this.initializeBuffer()),this.lastContext=0,this.source=e},createFunctionContext:function(e){var t=this.stackVars.concat(this.registers.list);t.length>0&&(this.source[1]=this.source[1]+", "+t.join(", "));if(!this.isChild){var n=[];for(var r in this.context.aliases)this.source[1]=this.source[1]+", "+r+"="+this.context.aliases[r]}this.source[1]&&(this.source[1]="var "+this.source[1].substring(2)+";"),this.isChild||(this.source[1]+="\n"+this.context.programs.join("\n")+"\n"),this.environment.isSimple||this.source.push("return buffer;");var i=this.isChild?["depth0","data"]:["Handlebars","depth0","helpers","partials","data"];for(var s=0,o=this.environment.depths.list.length;s<o;s++)i.push("depth"+this.environment.depths.list[s]);if(e)return i.push(this.source.join("\n  ")),Function.apply(this,i);var u="function "+(this.name||"")+"("+i.join(",")+") {\n  "+this.source.join("\n  ")+"}";return Handlebars.log(Handlebars.logger.DEBUG,u+"\n\n"),u},blockValue:function(){this.context.aliases.blockHelperMissing="helpers.blockHelperMissing";var e=["depth0"];this.setupParams(0,e),this.replaceStack(function(t){return e.splice(1,0,t),t+" = blockHelperMissing.call("+e.join(", ")+")"})},ambiguousBlockValue:function(){this.context.aliases.blockHelperMissing="helpers.blockHelperMissing";var e=["depth0"];this.setupParams(0,e);var t=this.topStack();e.splice(1,0,t),this.source.push("if (!"+this.lastHelper+") { "+t+" = blockHelperMissing.call("+e.join(", ")+"); }")},appendContent:function(e){this.source.push(this.appendToBuffer(this.quotedString(e)))},append:function(){var e=this.popStack();this.source.push("if("+e+" || "+e+" === 0) { "+this.appendToBuffer(e)+" }"),this.environment.isSimple&&this.source.push("else { "+this.appendToBuffer("''")+" }")},appendEscaped:function(){var e=this.nextOpcode(),t="";this.context.aliases.escapeExpression="this.escapeExpression",e&&e.opcode==="appendContent"&&(t=" + "+this.quotedString(e.args[0]),this.eat(e)),this.source.push(this.appendToBuffer("escapeExpression("+this.popStack()+")"+t))},getContext:function(e){this.lastContext!==e&&(this.lastContext=e)},lookupOnContext:function(e){this.pushStack(this.nameLookup("depth"+this.lastContext,e,"context"))},pushContext:function(){this.pushStackLiteral("depth"+this.lastContext)},resolvePossibleLambda:function(){this.context.aliases.functionType='"function"',this.replaceStack(function(e){return"typeof "+e+" === functionType ? "+e+".apply(depth0) : "+e})},lookup:function(e){this.replaceStack(function(t){return t+" == null || "+t+" === false ? "+t+" : "+this.nameLookup(t,e,"context")})},lookupData:function(e){this.pushStack(this.nameLookup("data",e,"data"))},pushStringParam:function(e){this.pushStackLiteral("depth"+this.lastContext),this.pushString(e)},pushString:function(e){this.pushStackLiteral(this.quotedString(e))},push:function(e){this.pushStack(e)},pushLiteral:function(e){this.pushStackLiteral(e)},pushProgram:function(e){e!=null?this.pushStackLiteral(this.programExpression(e)):this.pushStackLiteral(null)},invokeHelper:function(e,t){this.context.aliases.helperMissing="helpers.helperMissing";var n=this.lastHelper=this.setupHelper(e,t);this.register("foundHelper",n.name),this.pushStack("foundHelper ? foundHelper.call("+n.callParams+") "+": helperMissing.call("+n.helperMissingParams+")")},invokeKnownHelper:function(e,t){var n=this.setupHelper(e,t);this.pushStack(n.name+".call("+n.callParams+")")},invokeAmbiguous:function(e){this.context.aliases.functionType='"function"',this.pushStackLiteral("{}");var t=this.setupHelper(0,e),n=this.lastHelper=this.nameLookup("helpers",e,"helper");this.register("foundHelper",n);var r=this.nameLookup("depth"+this.lastContext,e,"context"),i=this.nextStack();this.source.push("if (foundHelper) { "+i+" = foundHelper.call("+t.callParams+"); }"),this.source.push("else { "+i+" = "+r+"; "+i+" = typeof "+i+" === functionType ? "+i+".apply(depth0) : "+i+"; }")},invokePartial:function(e){var t=[this.nameLookup("partials",e,"partial"),"'"+e+"'",this.popStack(),"helpers","partials"];this.options.data&&t.push("data"),this.context.aliases.self="this",this.pushStack("self.invokePartial("+t.join(", ")+");")},assignToHash:function(e){var t=this.popStack(),n=this.topStack();this.source.push(n+"['"+e+"'] = "+t+";")},compiler:t,compileChildren:function(e,t){var n=e.children,r,i;for(var s=0,o=n.length;s<o;s++){r=n[s],i=new this.compiler,this.context.programs.push("");var u=this.context.programs.length;r.index=u,r.name="program"+u,this.context.programs[u]=i.compile(r,t,this.context)}},programExpression:function(e){this.context.aliases.self="this";if(e==null)return"self.noop";var t=this.environment.children[e],n=t.depths.list,r,i=[t.index,t.name,"data"];for(var s=0,o=n.length;s<o;s++)r=n[s],r===1?i.push("depth0"):i.push("depth"+(r-1));return n.length===0?"self.program("+i.join(", ")+")":(i.shift(),"self.programWithDepth("+i.join(", ")+")")},register:function(e,t){this.useRegister(e),this.source.push(e+" = "+t+";")},useRegister:function(e){this.registers[e]||(this.registers[e]=!0,this.registers.list.push(e))},pushStackLiteral:function(e){return this.compileStack.push(new n(e)),e},pushStack:function(e){return this.source.push(this.incrStack()+" = "+e+";"),this.compileStack.push("stack"+this.stackSlot),"stack"+this.stackSlot},replaceStack:function(e){var t=e.call(this,this.topStack());return this.source.push(this.topStack()+" = "+t+";"),"stack"+this.stackSlot},nextStack:function(e){var t=this.incrStack();return this.compileStack.push("stack"+this.stackSlot),t},incrStack:function(){return this.stackSlot++,this.stackSlot>this.stackVars.length&&this.stackVars.push("stack"+this.stackSlot),"stack"+this.stackSlot},popStack:function(){var e=this.compileStack.pop();return e instanceof n?e.value:(this.stackSlot--,e)},topStack:function(){var e=this.compileStack[this.compileStack.length-1];return e instanceof n?e.value:e},quotedString:function(e){if(!e)return '""';return'"'+e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\n/g,"\\n").replace(/\r/g,"\\r")+'"'},setupHelper:function(e,t){var n=[];this.setupParams(e,n);var r=this.nameLookup("helpers",t,"helper");return{params:n,name:r,callParams:["depth0"].concat(n).join(", "),helperMissingParams:["depth0",this.quotedString(t)].concat(n).join(", ")}},setupParams:function(e,t){var n=[],r=[],i,s,o;n.push("hash:"+this.popStack()),s=this.popStack(),o=this.popStack();if(o||s)o||(this.context.aliases.self="this",o="self.noop"),s||(this.context.aliases.self="this",s="self.noop"),n.push("inverse:"+s),n.push("fn:"+o);for(var u=0;u<e;u++)i=this.popStack(),t.push(i),this.options.stringParams&&r.push(this.popStack());return this.options.stringParams&&n.push("contexts:["+r.join(",")+"]"),this.options.data&&n.push("data:data"),t.push("{"+n.join(",")+"}"),t.join(", ")}};var r="break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield".split(" "),i=t.RESERVED_WORDS={};for(var s=0,o=r.length;s<o;s++)i[r[s]]=!0;t.isValidJavaScriptVariableName=function(e){return!t.RESERVED_WORDS[e]&&/^[a-zA-Z_$][0-9a-zA-Z_$]+$/.test(e)?!0:!1}}(Handlebars
.Compiler,Handlebars.JavaScriptCompiler),Handlebars.precompile=function(e,t){t=t||{};var n=Handlebars.parse(e),r=(new Handlebars.Compiler).compile(n,t);return(new Handlebars.JavaScriptCompiler).compile(r,t)},Handlebars.compile=function(e,t){function r(){var n=Handlebars.parse(e),r=(new Handlebars.Compiler).compile(n,t),i=(new Handlebars.JavaScriptCompiler).compile(r,t,undefined,!0);return Handlebars.template(i)}t=t||{};var n;return function(e,t){return n||(n=r()),n.call(this,e,t)}},Handlebars.VM={template:function(e){var t={escapeExpression:Handlebars.Utils.escapeExpression,invokePartial:Handlebars.VM.invokePartial,programs:[],program:function(e,t,n){var r=this.programs[e];return n?Handlebars.VM.program(t,n):r?r:(r=this.programs[e]=Handlebars.VM.program(t),r)},programWithDepth:Handlebars.VM.programWithDepth,noop:Handlebars.VM.noop};return function(n,r){return r=r||{},e.call(t,Handlebars,n,r.helpers,r.partials,r.data)}},programWithDepth:function(e,t,n){var r=Array.prototype.slice.call(arguments,2);return function(n,i){return i=i||{},e.apply(this,[n,i.data||t].concat(r))}},program:function(e,t){return function(n,r){return r=r||{},e(n,r.data||t)}},noop:function(){return""},invokePartial:function(e,t,n,r,i,s){var o={helpers:r,partials:i,data:s};if(e===undefined)throw new Handlebars.Exception("The partial "+t+" could not be found");if(e instanceof Function)return e(n,o);if(!Handlebars.compile)throw new Handlebars.Exception("The partial "+t+" could not be compiled when running in runtime-only mode");return i[t]=Handlebars.compile(e,{data:s!==undefined}),i[t](n,o)}},Handlebars.template=Handlebars.VM.template;
/*
 * FancyBox - jQuery Plugin
 * Simple and fancy lightbox alternative
 *
 * Examples and documentation at: http://fancybox.net
 *
 * Copyright (c) 2008 - 2010 Janis Skarnelis
 * That said, it is hardly a one-person project. Many people have submitted bugs, code, and offered their advice freely. Their support is greatly appreciated.
 *
 * Version: 1.3.4 (11/11/2010)
 * Requires: jQuery v1.3+
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 */

;(function($) {
	var tmp, loading, overlay, wrap, outer, content, close, title, nav_left, nav_right,

		selectedIndex = 0, selectedOpts = {}, selectedArray = [], currentIndex = 0, currentOpts = {}, currentArray = [],

		ajaxLoader = null, imgPreloader = new Image(), imgRegExp = /\.(jpg|gif|png|bmp|jpeg)(.*)?$/i, swfRegExp = /[^\.]\.(swf)\s*$/i,

		loadingTimer, loadingFrame = 1,

		titleHeight = 0, titleStr = '', start_pos, final_pos, busy = false, fx = $.extend($('<div/>')[0], { prop: 0 }),

		isIE6 = $.browser.msie && $.browser.version < 7 && !window.XMLHttpRequest,

		/*
		 * Private methods 
		 */

		_abort = function() {
			loading.hide();

			imgPreloader.onerror = imgPreloader.onload = null;

			if (ajaxLoader) {
				ajaxLoader.abort();
			}

			tmp.empty();
		},

		_error = function() {
			if (false === selectedOpts.onError(selectedArray, selectedIndex, selectedOpts)) {
				loading.hide();
				busy = false;
				return;
			}

			selectedOpts.titleShow = false;

			selectedOpts.width = 'auto';
			selectedOpts.height = 'auto';

			tmp.html( '<p id="fancybox-error">The requested content cannot be loaded.<br />Please try again later.</p>' );

			_process_inline();
		},

		_start = function() {
			var obj = selectedArray[ selectedIndex ],
				href, 
				type, 
				title,
				str,
				emb,
				ret;

			_abort();

			selectedOpts = $.extend({}, $.fn.fancybox.defaults, (typeof $(obj).data('fancybox') == 'undefined' ? selectedOpts : $(obj).data('fancybox')));

			ret = selectedOpts.onStart(selectedArray, selectedIndex, selectedOpts);

			if (ret === false) {
				busy = false;
				return;
			} else if (typeof ret == 'object') {
				selectedOpts = $.extend(selectedOpts, ret);
			}

			title = selectedOpts.title || (obj.nodeName ? $(obj).attr('title') : obj.title) || '';

			if (obj.nodeName && !selectedOpts.orig) {
				selectedOpts.orig = $(obj).children("img:first").length ? $(obj).children("img:first") : $(obj);
			}

			if (title === '' && selectedOpts.orig && selectedOpts.titleFromAlt) {
				title = selectedOpts.orig.attr('alt');
			}

			href = selectedOpts.href || (obj.nodeName ? $(obj).attr('href') : obj.href) || null;

			if ((/^(?:javascript)/i).test(href) || href == '#') {
				href = null;
			}

			if (selectedOpts.type) {
				type = selectedOpts.type;

				if (!href) {
					href = selectedOpts.content;
				}

			} else if (selectedOpts.content) {
				type = 'html';

			} else if (href) {
				if (href.match(imgRegExp)) {
					type = 'image';

				} else if (href.match(swfRegExp)) {
					type = 'swf';

				} else if ($(obj).hasClass("iframe")) {
					type = 'iframe';

				} else if (href.indexOf("#") === 0) {
					type = 'inline';

				} else {
					type = 'ajax';
				}
			}

			if (!type) {
				_error();
				return;
			}

			if (type == 'inline') {
				obj	= href.substr(href.indexOf("#"));
				type = $(obj).length > 0 ? 'inline' : 'ajax';
			}

			selectedOpts.type = type;
			selectedOpts.href = href;
			selectedOpts.title = title;

			if (selectedOpts.autoDimensions) {
				if (selectedOpts.type == 'html' || selectedOpts.type == 'inline' || selectedOpts.type == 'ajax') {
					selectedOpts.width = 'auto';
					selectedOpts.height = 'auto';
				} else {
					selectedOpts.autoDimensions = false;	
				}
			}

			if (selectedOpts.modal) {
				selectedOpts.overlayShow = true;
				selectedOpts.hideOnOverlayClick = false;
				selectedOpts.hideOnContentClick = false;
				selectedOpts.enableEscapeButton = false;
				selectedOpts.showCloseButton = false;
			}

			selectedOpts.padding = parseInt(selectedOpts.padding, 10);
			selectedOpts.margin = parseInt(selectedOpts.margin, 10);

			tmp.css('padding', (selectedOpts.padding + selectedOpts.margin));

			$('.fancybox-inline-tmp').unbind('fancybox-cancel').bind('fancybox-change', function() {
				$(this).replaceWith(content.children());				
			});

			switch (type) {
				case 'html' :
					tmp.html( selectedOpts.content );
					_process_inline();
				break;

				case 'inline' :
					if ( $(obj).parent().is('#fancybox-content') === true) {
						busy = false;
						return;
					}

					$('<div class="fancybox-inline-tmp" />')
						.hide()
						.insertBefore( $(obj) )
						.bind('fancybox-cleanup', function() {
							$(this).replaceWith(content.children());
						}).bind('fancybox-cancel', function() {
							$(this).replaceWith(tmp.children());
						});

					$(obj).appendTo(tmp);

					_process_inline();
				break;

				case 'image':
					busy = false;

					$.fancybox.showActivity();

					imgPreloader = new Image();

					imgPreloader.onerror = function() {
						_error();
					};

					imgPreloader.onload = function() {
						busy = true;

						imgPreloader.onerror = imgPreloader.onload = null;

						_process_image();
					};

					imgPreloader.src = href;
				break;

				case 'swf':
					selectedOpts.scrolling = 'no';

					str = '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="' + selectedOpts.width + '" height="' + selectedOpts.height + '"><param name="movie" value="' + href + '"></param>';
					emb = '';

					$.each(selectedOpts.swf, function(name, val) {
						str += '<param name="' + name + '" value="' + val + '"></param>';
						emb += ' ' + name + '="' + val + '"';
					});

					str += '<embed src="' + href + '" type="application/x-shockwave-flash" width="' + selectedOpts.width + '" height="' + selectedOpts.height + '"' + emb + '></embed></object>';

					tmp.html(str);

					_process_inline();
				break;

				case 'ajax':
					busy = false;

					$.fancybox.showActivity();

					selectedOpts.ajax.win = selectedOpts.ajax.success;

					ajaxLoader = $.ajax($.extend({}, selectedOpts.ajax, {
						url	: href,
						data : selectedOpts.ajax.data || {},
						error : function(XMLHttpRequest, textStatus, errorThrown) {
							if ( XMLHttpRequest.status > 0 ) {
								_error();
							}
						},
						success : function(data, textStatus, XMLHttpRequest) {
							var o = typeof XMLHttpRequest == 'object' ? XMLHttpRequest : ajaxLoader;
							if (o.status == 200) {
								if ( typeof selectedOpts.ajax.win == 'function' ) {
									ret = selectedOpts.ajax.win(href, data, textStatus, XMLHttpRequest);

									if (ret === false) {
										loading.hide();
										return;
									} else if (typeof ret == 'string' || typeof ret == 'object') {
										data = ret;
									}
								}

								tmp.html( data );
								_process_inline();
							}
						}
					}));

				break;

				case 'iframe':
					_show();
				break;
			}
		},

		_process_inline = function() {
			var
				w = selectedOpts.width,
				h = selectedOpts.height;

			if (w.toString().indexOf('%') > -1) {
				w = parseInt( ($(window).width() - (selectedOpts.margin * 2)) * parseFloat(w) / 100, 10) + 'px';

			} else {
				w = w == 'auto' ? 'auto' : w + 'px';	
			}

			if (h.toString().indexOf('%') > -1) {
				h = parseInt( ($(window).height() - (selectedOpts.margin * 2)) * parseFloat(h) / 100, 10) + 'px';

			} else {
				h = h == 'auto' ? 'auto' : h + 'px';	
			}

			tmp.wrapInner('<div style="width:' + w + ';height:' + h + ';overflow: ' + (selectedOpts.scrolling == 'auto' ? 'auto' : (selectedOpts.scrolling == 'yes' ? 'scroll' : 'hidden')) + ';position:relative;"></div>');

			selectedOpts.width = tmp.width();
			selectedOpts.height = tmp.height();

			_show();
		},

		_process_image = function() {
			selectedOpts.width = imgPreloader.width;
			selectedOpts.height = imgPreloader.height;

			$("<img />").attr({
				'id' : 'fancybox-img',
				'src' : imgPreloader.src,
				'alt' : selectedOpts.title
			}).appendTo( tmp );

			_show();
		},

		_show = function() {
			var pos, equal;

			loading.hide();

			if (wrap.is(":visible") && false === currentOpts.onCleanup(currentArray, currentIndex, currentOpts)) {
				$.event.trigger('fancybox-cancel');

				busy = false;
				return;
			}

			busy = true;

			$(content.add( overlay )).unbind();

			$(window).unbind("resize.fb scroll.fb");
			$(document).unbind('keydown.fb');

			if (wrap.is(":visible") && currentOpts.titlePosition !== 'outside') {
				wrap.css('height', wrap.height());
			}

			currentArray = selectedArray;
			currentIndex = selectedIndex;
			currentOpts = selectedOpts;

			if (currentOpts.overlayShow) {
				overlay.css({
					'background-color' : currentOpts.overlayColor,
					'opacity' : currentOpts.overlayOpacity,
					'cursor' : currentOpts.hideOnOverlayClick ? 'pointer' : 'auto',
					'height' : $(document).height()
				});

				if (!overlay.is(':visible')) {
					if (isIE6) {
						$('select:not(#fancybox-tmp select)').filter(function() {
							return this.style.visibility !== 'hidden';
						}).css({'visibility' : 'hidden'}).one('fancybox-cleanup', function() {
							this.style.visibility = 'inherit';
						});
					}

					overlay.show();
				}
			} else {
				overlay.hide();
			}

			final_pos = _get_zoom_to();

			_process_title();

			if (wrap.is(":visible")) {
				$( close.add( nav_left ).add( nav_right ) ).hide();

				pos = wrap.position(),

				start_pos = {
					top	 : pos.top,
					left : pos.left,
					width : wrap.width(),
					height : wrap.height()
				};

				equal = (start_pos.width == final_pos.width && start_pos.height == final_pos.height);

				content.fadeTo(currentOpts.changeFade, 0.3, function() {
					var finish_resizing = function() {
						content.html( tmp.contents() ).fadeTo(currentOpts.changeFade, 1, _finish);
					};

					$.event.trigger('fancybox-change');

					content
						.empty()
						.removeAttr('filter')
						.css({
							'border-width' : currentOpts.padding,
							'width'	: final_pos.width - currentOpts.padding * 2,
							'height' : selectedOpts.autoDimensions ? 'auto' : final_pos.height - titleHeight - currentOpts.padding * 2
						});

					if (equal) {
						finish_resizing();

					} else {
						fx.prop = 0;

						$(fx).animate({prop: 1}, {
							 duration : currentOpts.changeSpeed,
							 easing : currentOpts.easingChange,
							 step : _draw,
							 complete : finish_resizing
						});
					}
				});

				return;
			}

			wrap.removeAttr("style");

			content.css('border-width', currentOpts.padding);

			if (currentOpts.transitionIn == 'elastic') {
				start_pos = _get_zoom_from();

				content.html( tmp.contents() );

				wrap.show();

				if (currentOpts.opacity) {
					final_pos.opacity = 0;
				}

				fx.prop = 0;

				$(fx).animate({prop: 1}, {
					 duration : currentOpts.speedIn,
					 easing : currentOpts.easingIn,
					 step : _draw,
					 complete : _finish
				});

				return;
			}

			if (currentOpts.titlePosition == 'inside' && titleHeight > 0) {	
				title.show();	
			}

			content
				.css({
					'width' : final_pos.width - currentOpts.padding * 2,
					'height' : selectedOpts.autoDimensions ? 'auto' : final_pos.height - titleHeight - currentOpts.padding * 2
				})
				.html( tmp.contents() );

			wrap
				.css(final_pos)
				.fadeIn( currentOpts.transitionIn == 'none' ? 0 : currentOpts.speedIn, _finish );
		},

		_format_title = function(title) {
			if (title && title.length) {
				if (currentOpts.titlePosition == 'float') {
					return '<table id="fancybox-title-float-wrap" cellpadding="0" cellspacing="0"><tr><td id="fancybox-title-float-left"></td><td id="fancybox-title-float-main">' + title + '</td><td id="fancybox-title-float-right"></td></tr></table>';
				}

				return '<div id="fancybox-title-' + currentOpts.titlePosition + '">' + title + '</div>';
			}

			return false;
		},

		_process_title = function() {
			titleStr = currentOpts.title || '';
			titleHeight = 0;

			title
				.empty()
				.removeAttr('style')
				.removeClass();

			if (currentOpts.titleShow === false) {
				title.hide();
				return;
			}

			titleStr = $.isFunction(currentOpts.titleFormat) ? currentOpts.titleFormat(titleStr, currentArray, currentIndex, currentOpts) : _format_title(titleStr);

			if (!titleStr || titleStr === '') {
				title.hide();
				return;
			}

			title
				.addClass('fancybox-title-' + currentOpts.titlePosition)
				.html( titleStr )
				.appendTo( 'body' )
				.show();

			switch (currentOpts.titlePosition) {
				case 'inside':
					title
						.css({
							'width' : final_pos.width - (currentOpts.padding * 2),
							'marginLeft' : currentOpts.padding,
							'marginRight' : currentOpts.padding
						});

					titleHeight = title.outerHeight(true);

					title.appendTo( outer );

					final_pos.height += titleHeight;
				break;

				case 'over':
					title
						.css({
							'marginLeft' : currentOpts.padding,
							'width'	: final_pos.width - (currentOpts.padding * 2),
							'bottom' : currentOpts.padding
						})
						.appendTo( outer );
				break;

				case 'float':
					title
						.css('left', parseInt((title.width() - final_pos.width - 40)/ 2, 10) * -1)
						.appendTo( wrap );
				break;

				default:
					title
						.css({
							'width' : final_pos.width - (currentOpts.padding * 2),
							'paddingLeft' : currentOpts.padding,
							'paddingRight' : currentOpts.padding
						})
						.appendTo( wrap );
				break;
			}

			title.hide();
		},

		_set_navigation = function() {
			if (currentOpts.enableEscapeButton || currentOpts.enableKeyboardNav) {
				$(document).bind('keydown.fb', function(e) {
					if (e.keyCode == 27 && currentOpts.enableEscapeButton) {
						e.preventDefault();
						$.fancybox.close();

					} else if ((e.keyCode == 37 || e.keyCode == 39) && currentOpts.enableKeyboardNav && e.target.tagName !== 'INPUT' && e.target.tagName !== 'TEXTAREA' && e.target.tagName !== 'SELECT') {
						e.preventDefault();
						$.fancybox[ e.keyCode == 37 ? 'prev' : 'next']();
					}
				});
			}

			if (!currentOpts.showNavArrows) { 
				nav_left.hide();
				nav_right.hide();
				return;
			}

			if ((currentOpts.cyclic && currentArray.length > 1) || currentIndex !== 0) {
				nav_left.show();
			}

			if ((currentOpts.cyclic && currentArray.length > 1) || currentIndex != (currentArray.length -1)) {
				nav_right.show();
			}
		},

		_finish = function () {
			if (!$.support.opacity) {
				content.get(0).style.removeAttribute('filter');
				wrap.get(0).style.removeAttribute('filter');
			}

			if (selectedOpts.autoDimensions) {
				content.css('height', 'auto');
			}

			wrap.css('height', 'auto');

			if (titleStr && titleStr.length) {
				title.show();
			}

			if (currentOpts.showCloseButton) {
				close.show();
			}

			_set_navigation();
	
			if (currentOpts.hideOnContentClick)	{
				content.bind('click', $.fancybox.close);
			}

			if (currentOpts.hideOnOverlayClick)	{
				overlay.bind('click', $.fancybox.close);
			}

			$(window).bind("resize.fb", $.fancybox.resize);

			if (currentOpts.centerOnScroll) {
				$(window).bind("scroll.fb", $.fancybox.center);
			}

			if (currentOpts.type == 'iframe') {
				$('<iframe id="fancybox-frame" name="fancybox-frame' + new Date().getTime() + '" frameborder="0" hspace="0" ' + ($.browser.msie ? 'allowtransparency="true""' : '') + ' scrolling="' + selectedOpts.scrolling + '" src="' + currentOpts.href + '"></iframe>').appendTo(content);
			}

			wrap.show();

			busy = false;

			$.fancybox.center();

			currentOpts.onComplete(currentArray, currentIndex, currentOpts);

			_preload_images();
		},

		_preload_images = function() {
			var href, 
				objNext;

			if ((currentArray.length -1) > currentIndex) {
				href = currentArray[ currentIndex + 1 ].href;

				if (typeof href !== 'undefined' && href.match(imgRegExp)) {
					objNext = new Image();
					objNext.src = href;
				}
			}

			if (currentIndex > 0) {
				href = currentArray[ currentIndex - 1 ].href;

				if (typeof href !== 'undefined' && href.match(imgRegExp)) {
					objNext = new Image();
					objNext.src = href;
				}
			}
		},

		_draw = function(pos) {
			var dim = {
				width : parseInt(start_pos.width + (final_pos.width - start_pos.width) * pos, 10),
				height : parseInt(start_pos.height + (final_pos.height - start_pos.height) * pos, 10),

				top : parseInt(start_pos.top + (final_pos.top - start_pos.top) * pos, 10),
				left : parseInt(start_pos.left + (final_pos.left - start_pos.left) * pos, 10)
			};

			if (typeof final_pos.opacity !== 'undefined') {
				dim.opacity = pos < 0.5 ? 0.5 : pos;
			}

			wrap.css(dim);

			content.css({
				'width' : dim.width - currentOpts.padding * 2,
				'height' : dim.height - (titleHeight * pos) - currentOpts.padding * 2
			});
		},

		_get_viewport = function() {
			var isFixed = wrap.css('position') === 'fixed';
			return [
				$(window).width() - (currentOpts.margin * 2),
				$(window).height() - (currentOpts.margin * 2),
				(isFixed ? 0 : $(document).scrollLeft()) + currentOpts.margin,
				(isFixed ? 0 : $(document).scrollTop()) + currentOpts.margin
			];
		},

		_get_zoom_to = function () {
			var view = _get_viewport(),
				to = {},
				resize = currentOpts.autoScale,
				double_padding = currentOpts.padding * 2,
				ratio;

			if (currentOpts.width.toString().indexOf('%') > -1) {
				to.width = parseInt((view[0] * parseFloat(currentOpts.width)) / 100, 10);
			} else {
				to.width = currentOpts.width + double_padding;
			}

			if (currentOpts.height.toString().indexOf('%') > -1) {
				to.height = parseInt((view[1] * parseFloat(currentOpts.height)) / 100, 10);
			} else {
				to.height = currentOpts.height + double_padding;
			}

			if (resize && (to.width > view[0] || to.height > view[1])) {
				if (selectedOpts.type == 'image' || selectedOpts.type == 'swf') {
					ratio = (currentOpts.width ) / (currentOpts.height );

					if ((to.width ) > view[0]) {
						to.width = view[0];
						to.height = parseInt(((to.width - double_padding) / ratio) + double_padding, 10);
					}

					if ((to.height) > view[1]) {
						to.height = view[1];
						to.width = parseInt(((to.height - double_padding) * ratio) + double_padding, 10);
					}

				} else {
					to.width = Math.min(to.width, view[0]);
					to.height = Math.min(to.height, view[1]);
				}
			}

			to.top = parseInt(Math.max(view[3] - 20, view[3] + ((view[1] - to.height - 40) * 0.5)), 10);
			to.left = parseInt(Math.max(view[2] - 20, view[2] + ((view[0] - to.width - 40) * 0.5)), 10);

			return to;
		},

		_get_obj_pos = function(obj) {
			var pos = obj.offset();

			pos.top += parseInt( obj.css('paddingTop'), 10 ) || 0;
			pos.left += parseInt( obj.css('paddingLeft'), 10 ) || 0;

			pos.top += parseInt( obj.css('border-top-width'), 10 ) || 0;
			pos.left += parseInt( obj.css('border-left-width'), 10 ) || 0;

			pos.width = obj.width();
			pos.height = obj.height();

			return pos;
		},

		_get_zoom_from = function() {
			var orig = selectedOpts.orig ? $(selectedOpts.orig) : false,
				from = {},
				pos,
				view;

			if (orig && orig.length) {
				pos = _get_obj_pos(orig);

				from = {
					width : pos.width + (currentOpts.padding * 2),
					height : pos.height + (currentOpts.padding * 2),
					top	: pos.top - currentOpts.padding - 20,
					left : pos.left - currentOpts.padding - 20
				};

			} else {
				view = _get_viewport();

				from = {
					width : currentOpts.padding * 2,
					height : currentOpts.padding * 2,
					top	: parseInt(view[3] + view[1] * 0.5, 10),
					left : parseInt(view[2] + view[0] * 0.5, 10)
				};
			}

			return from;
		},

		_animate_loading = function() {
			if (!loading.is(':visible')){
				clearInterval(loadingTimer);
				return;
			}

			$('div', loading).css('top', (loadingFrame * -40) + 'px');

			loadingFrame = (loadingFrame + 1) % 12;
		};

	/*
	 * Public methods 
	 */

	$.fn.fancybox = function(options) {
		if (!$(this).length) {
			return this;
		}

		$(this)
			.data('fancybox', $.extend({}, options, ($.metadata ? $(this).metadata() : {})))
			.unbind('click.fb')
			.bind('click.fb', function(e) {
				e.preventDefault();

				if (busy) {
					return;
				}

				busy = true;

				$(this).blur();

				selectedArray = [];
				selectedIndex = 0;

				var rel = $(this).attr('rel') || '';

				if (!rel || rel == '' || rel === 'nofollow') {
					selectedArray.push(this);

				} else {
					selectedArray = $("a[rel=" + rel + "], area[rel=" + rel + "]");
					selectedIndex = selectedArray.index( this );
				}

				_start();

				return;
			});

		return this;
	};

	$.fancybox = function(obj) {
		var opts;

		if (busy) {
			return;
		}

		busy = true;
		opts = typeof arguments[1] !== 'undefined' ? arguments[1] : {};

		selectedArray = [];
		selectedIndex = parseInt(opts.index, 10) || 0;

		if ($.isArray(obj)) {
			for (var i = 0, j = obj.length; i < j; i++) {
				if (typeof obj[i] == 'object') {
					$(obj[i]).data('fancybox', $.extend({}, opts, obj[i]));
				} else {
					obj[i] = $({}).data('fancybox', $.extend({content : obj[i]}, opts));
				}
			}

			selectedArray = jQuery.merge(selectedArray, obj);

		} else {
			if (typeof obj == 'object') {
				$(obj).data('fancybox', $.extend({}, opts, obj));
			} else {
				obj = $({}).data('fancybox', $.extend({content : obj}, opts));
			}

			selectedArray.push(obj);
		}

		if (selectedIndex > selectedArray.length || selectedIndex < 0) {
			selectedIndex = 0;
		}

		_start();
	};

	$.fancybox.showActivity = function() {
		clearInterval(loadingTimer);

		loading.show();
		loadingTimer = setInterval(_animate_loading, 66);
	};

	$.fancybox.hideActivity = function() {
		loading.hide();
	};

	$.fancybox.next = function() {
		return $.fancybox.pos( currentIndex + 1);
	};

	$.fancybox.prev = function() {
		return $.fancybox.pos( currentIndex - 1);
	};

	$.fancybox.pos = function(pos) {
		if (busy) {
			return;
		}

		pos = parseInt(pos);

		selectedArray = currentArray;

		if (pos > -1 && pos < currentArray.length) {
			selectedIndex = pos;
			_start();

		} else if (currentOpts.cyclic && currentArray.length > 1) {
			selectedIndex = pos >= currentArray.length ? 0 : currentArray.length - 1;
			_start();
		}

		return;
	};

	$.fancybox.cancel = function() {
		if (busy) {
			return;
		}

		busy = true;

		$.event.trigger('fancybox-cancel');

		_abort();

		selectedOpts.onCancel(selectedArray, selectedIndex, selectedOpts);

		busy = false;
	};

	// Note: within an iframe use - parent.$.fancybox.close();
	$.fancybox.close = function() {
		if (busy || wrap.is(':hidden')) {
			return;
		}

		busy = true;

		if (currentOpts && false === currentOpts.onCleanup(currentArray, currentIndex, currentOpts)) {
			busy = false;
			return;
		}

		_abort();

		$(close.add( nav_left ).add( nav_right )).hide();

		$(content.add( overlay )).unbind();

		$(window).unbind("resize.fb scroll.fb");
		$(document).unbind('keydown.fb');

		content.find('iframe').attr('src', isIE6 && /^https/i.test(window.location.href || '') ? 'javascript:void(false)' : 'about:blank');

		if (currentOpts.titlePosition !== 'inside') {
			title.empty();
		}

		wrap.stop();

		function _cleanup() {
			overlay.fadeOut('fast');

			title.empty().hide();
			wrap.hide();

			$.event.trigger('fancybox-cleanup');

			content.empty();

			currentOpts.onClosed(currentArray, currentIndex, currentOpts);

			currentArray = selectedOpts	= [];
			currentIndex = selectedIndex = 0;
			currentOpts = selectedOpts	= {};

			busy = false;
		}

		if (currentOpts.transitionOut == 'elastic') {
			start_pos = _get_zoom_from();

			var pos = wrap.position();

			final_pos = {
				top	 : pos.top ,
				left : pos.left,
				width :	wrap.width(),
				height : wrap.height()
			};

			if (currentOpts.opacity) {
				final_pos.opacity = 1;
			}

			title.empty().hide();

			fx.prop = 1;

			$(fx).animate({ prop: 0 }, {
				 duration : currentOpts.speedOut,
				 easing : currentOpts.easingOut,
				 step : _draw,
				 complete : _cleanup
			});

		} else {
			wrap.fadeOut( currentOpts.transitionOut == 'none' ? 0 : currentOpts.speedOut, _cleanup);
		}
	};

	$.fancybox.resize = function() {
		if (overlay.is(':visible')) {
			overlay.css('height', $(document).height());
		}

		$.fancybox.center(true);
	};

	$.fancybox.center = function() {
		var view, align;

		if (busy) {
			return;	
		}

		align = arguments[0] === true ? 1 : 0;
		view = _get_viewport();

		if (!align && (wrap.width() > view[0] || wrap.height() > view[1])) {
			return;	
		}

		wrap
			.stop()
			.animate({
				'top' : parseInt(Math.max(view[3] - 20, view[3] + ((view[1] - content.height() - 40) * 0.5) - currentOpts.padding)),
				'left' : parseInt(Math.max(view[2] - 20, view[2] + ((view[0] - content.width() - 40) * 0.5) - currentOpts.padding))
			}, typeof arguments[0] == 'number' ? arguments[0] : 200);
	};

	$.fancybox.init = function() {
		if ($("#fancybox-wrap").length) {
			return;
		}

		$('body').append(
			tmp	= $('<div id="fancybox-tmp"></div>'),
			loading	= $('<div id="fancybox-loading"><div></div></div>'),
			overlay	= $('<div id="fancybox-overlay"></div>'),
			wrap = $('<div id="fancybox-wrap"></div>')
		);

		outer = $('<div id="fancybox-outer"></div>')
			.append('<div class="fancybox-bg" id="fancybox-bg-n"></div><div class="fancybox-bg" id="fancybox-bg-ne"></div><div class="fancybox-bg" id="fancybox-bg-e"></div><div class="fancybox-bg" id="fancybox-bg-se"></div><div class="fancybox-bg" id="fancybox-bg-s"></div><div class="fancybox-bg" id="fancybox-bg-sw"></div><div class="fancybox-bg" id="fancybox-bg-w"></div><div class="fancybox-bg" id="fancybox-bg-nw"></div>')
			.appendTo( wrap );

		outer.append(
			content = $('<div id="fancybox-content"></div>'),
			close = $('<a id="fancybox-close"></a>'),
			title = $('<div id="fancybox-title"></div>'),

			nav_left = $('<a href="javascript:;" id="fancybox-left"><span class="fancy-ico" id="fancybox-left-ico"></span></a>'),
			nav_right = $('<a href="javascript:;" id="fancybox-right"><span class="fancy-ico" id="fancybox-right-ico"></span></a>')
		);

		close.click($.fancybox.close);
		loading.click($.fancybox.cancel);

		nav_left.click(function(e) {
			e.preventDefault();
			$.fancybox.prev();
		});

		nav_right.click(function(e) {
			e.preventDefault();
			$.fancybox.next();
		});

		if ($.fn.mousewheel) {
			wrap.bind('mousewheel.fb', function(e, delta) {
				if (busy) {
					e.preventDefault();

				} else if ($(e.target).get(0).clientHeight == 0 || $(e.target).get(0).scrollHeight === $(e.target).get(0).clientHeight) {
					e.preventDefault();
					$.fancybox[ delta > 0 ? 'prev' : 'next']();
				}
			});
		}

		if (!$.support.opacity) {
			wrap.addClass('fancybox-ie');
		}

		if (isIE6) {
			loading.addClass('fancybox-ie6');
			wrap.addClass('fancybox-ie6');

			$('<iframe id="fancybox-hide-sel-frame" src="' + (/^https/i.test(window.location.href || '') ? 'javascript:void(false)' : 'about:blank' ) + '" scrolling="no" border="0" frameborder="0" tabindex="-1"></iframe>').prependTo(outer);
		}
	};

	$.fn.fancybox.defaults = {
		padding : 10,
		margin : 40,
		opacity : false,
		modal : false,
		cyclic : false,
		scrolling : 'auto',	// 'auto', 'yes' or 'no'

		width : 560,
		height : 340,

		autoScale : true,
		autoDimensions : true,
		centerOnScroll : false,

		ajax : {},
		swf : { wmode: 'transparent' },

		hideOnOverlayClick : true,
		hideOnContentClick : false,

		overlayShow : true,
		overlayOpacity : 0.7,
		overlayColor : '#777',

		titleShow : true,
		titlePosition : 'float', // 'float', 'outside', 'inside' or 'over'
		titleFormat : null,
		titleFromAlt : false,

		transitionIn : 'fade', // 'elastic', 'fade' or 'none'
		transitionOut : 'fade', // 'elastic', 'fade' or 'none'

		speedIn : 300,
		speedOut : 300,

		changeSpeed : 300,
		changeFade : 'fast',

		easingIn : 'swing',
		easingOut : 'swing',

		showCloseButton	 : true,
		showNavArrows : true,
		enableEscapeButton : true,
		enableKeyboardNav : true,

		onStart : function(){},
		onCancel : function(){},
		onComplete : function(){},
		onCleanup : function(){},
		onClosed : function(){},
		onError : function(){}
	};

	$(document).ready(function() {
		$.fancybox.init();
	});

})(jQuery);!function(){/*

 Copyright (C) 2006 Google Inc.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
"undefined"!==typeof window&&(window.PR_SHOULD_USE_CONTINUATION=!0);
(function(){function T(a){function d(e){var a=e.charCodeAt(0);if(92!==a)return a;var c=e.charAt(1);return(a=w[c])?a:"0"<=c&&"7">=c?parseInt(e.substring(1),8):"u"===c||"x"===c?parseInt(e.substring(2),16):e.charCodeAt(1)}function f(e){if(32>e)return(16>e?"\\x0":"\\x")+e.toString(16);e=String.fromCharCode(e);return"\\"===e||"-"===e||"]"===e||"^"===e?"\\"+e:e}function c(e){var c=e.substring(1,e.length-1).match(RegExp("\\\\u[0-9A-Fa-f]{4}|\\\\x[0-9A-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\s\\S]|-|[^-\\\\]","g"));
e=[];var a="^"===c[0],b=["["];a&&b.push("^");for(var a=a?1:0,g=c.length;a<g;++a){var h=c[a];if(/\\[bdsw]/i.test(h))b.push(h);else{var h=d(h),k;a+2<g&&"-"===c[a+1]?(k=d(c[a+2]),a+=2):k=h;e.push([h,k]);65>k||122<h||(65>k||90<h||e.push([Math.max(65,h)|32,Math.min(k,90)|32]),97>k||122<h||e.push([Math.max(97,h)&-33,Math.min(k,122)&-33]))}}e.sort(function(e,a){return e[0]-a[0]||a[1]-e[1]});c=[];g=[];for(a=0;a<e.length;++a)h=e[a],h[0]<=g[1]+1?g[1]=Math.max(g[1],h[1]):c.push(g=h);for(a=0;a<c.length;++a)h=
c[a],b.push(f(h[0])),h[1]>h[0]&&(h[1]+1>h[0]&&b.push("-"),b.push(f(h[1])));b.push("]");return b.join("")}function m(e){for(var a=e.source.match(RegExp("(?:\\[(?:[^\\x5C\\x5D]|\\\\[\\s\\S])*\\]|\\\\u[A-Fa-f0-9]{4}|\\\\x[A-Fa-f0-9]{2}|\\\\[0-9]+|\\\\[^ux0-9]|\\(\\?[:!=]|[\\(\\)\\^]|[^\\x5B\\x5C\\(\\)\\^]+)","g")),b=a.length,d=[],g=0,h=0;g<b;++g){var k=a[g];"("===k?++h:"\\"===k.charAt(0)&&(k=+k.substring(1))&&(k<=h?d[k]=-1:a[g]=f(k))}for(g=1;g<d.length;++g)-1===d[g]&&(d[g]=++E);for(h=g=0;g<b;++g)k=a[g],
"("===k?(++h,d[h]||(a[g]="(?:")):"\\"===k.charAt(0)&&(k=+k.substring(1))&&k<=h&&(a[g]="\\"+d[k]);for(g=0;g<b;++g)"^"===a[g]&&"^"!==a[g+1]&&(a[g]="");if(e.ignoreCase&&q)for(g=0;g<b;++g)k=a[g],e=k.charAt(0),2<=k.length&&"["===e?a[g]=c(k):"\\"!==e&&(a[g]=k.replace(/[a-zA-Z]/g,function(a){a=a.charCodeAt(0);return"["+String.fromCharCode(a&-33,a|32)+"]"}));return a.join("")}for(var E=0,q=!1,l=!1,n=0,b=a.length;n<b;++n){var p=a[n];if(p.ignoreCase)l=!0;else if(/[a-z]/i.test(p.source.replace(/\\u[0-9a-f]{4}|\\x[0-9a-f]{2}|\\[^ux]/gi,
""))){q=!0;l=!1;break}}for(var w={b:8,t:9,n:10,v:11,f:12,r:13},r=[],n=0,b=a.length;n<b;++n){p=a[n];if(p.global||p.multiline)throw Error(""+p);r.push("(?:"+m(p)+")")}return new RegExp(r.join("|"),l?"gi":"g")}function U(a,d){function f(a){var b=a.nodeType;if(1==b){if(!c.test(a.className)){for(b=a.firstChild;b;b=b.nextSibling)f(b);b=a.nodeName.toLowerCase();if("br"===b||"li"===b)m[l]="\n",q[l<<1]=E++,q[l++<<1|1]=a}}else if(3==b||4==b)b=a.nodeValue,b.length&&(b=d?b.replace(/\r\n?/g,"\n"):b.replace(/[ \t\r\n]+/g,
" "),m[l]=b,q[l<<1]=E,E+=b.length,q[l++<<1|1]=a)}var c=/(?:^|\s)nocode(?:\s|$)/,m=[],E=0,q=[],l=0;f(a);return{a:m.join("").replace(/\n$/,""),c:q}}function J(a,d,f,c,m){f&&(a={h:a,l:1,j:null,m:null,a:f,c:null,i:d,g:null},c(a),m.push.apply(m,a.g))}function V(a){for(var d=void 0,f=a.firstChild;f;f=f.nextSibling)var c=f.nodeType,d=1===c?d?a:f:3===c?W.test(f.nodeValue)?a:d:d;return d===a?void 0:d}function G(a,d){function f(a){for(var l=a.i,n=a.h,b=[l,"pln"],p=0,q=a.a.match(m)||[],r={},e=0,t=q.length;e<
t;++e){var z=q[e],v=r[z],g=void 0,h;if("string"===typeof v)h=!1;else{var k=c[z.charAt(0)];if(k)g=z.match(k[1]),v=k[0];else{for(h=0;h<E;++h)if(k=d[h],g=z.match(k[1])){v=k[0];break}g||(v="pln")}!(h=5<=v.length&&"lang-"===v.substring(0,5))||g&&"string"===typeof g[1]||(h=!1,v="src");h||(r[z]=v)}k=p;p+=z.length;if(h){h=g[1];var A=z.indexOf(h),C=A+h.length;g[2]&&(C=z.length-g[2].length,A=C-h.length);v=v.substring(5);J(n,l+k,z.substring(0,A),f,b);J(n,l+k+A,h,K(v,h),b);J(n,l+k+C,z.substring(C),f,b)}else b.push(l+
k,v)}a.g=b}var c={},m;(function(){for(var f=a.concat(d),l=[],n={},b=0,p=f.length;b<p;++b){var w=f[b],r=w[3];if(r)for(var e=r.length;0<=--e;)c[r.charAt(e)]=w;w=w[1];r=""+w;n.hasOwnProperty(r)||(l.push(w),n[r]=null)}l.push(/[\0-\uffff]/);m=T(l)})();var E=d.length;return f}function x(a){var d=[],f=[];a.tripleQuotedStrings?d.push(["str",/^(?:\'\'\'(?:[^\'\\]|\\[\s\S]|\'{1,2}(?=[^\']))*(?:\'\'\'|$)|\"\"\"(?:[^\"\\]|\\[\s\S]|\"{1,2}(?=[^\"]))*(?:\"\"\"|$)|\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$))/,
null,"'\""]):a.multiLineStrings?d.push(["str",/^(?:\'(?:[^\\\']|\\[\s\S])*(?:\'|$)|\"(?:[^\\\"]|\\[\s\S])*(?:\"|$)|\`(?:[^\\\`]|\\[\s\S])*(?:\`|$))/,null,"'\"`"]):d.push(["str",/^(?:\'(?:[^\\\'\r\n]|\\.)*(?:\'|$)|\"(?:[^\\\"\r\n]|\\.)*(?:\"|$))/,null,"\"'"]);a.verbatimStrings&&f.push(["str",/^@\"(?:[^\"]|\"\")*(?:\"|$)/,null]);var c=a.hashComments;c&&(a.cStyleComments?(1<c?d.push(["com",/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,null,"#"]):d.push(["com",/^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\b|[^\r\n]*)/,
null,"#"]),f.push(["str",/^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h(?:h|pp|\+\+)?|[a-z]\w*)>/,null])):d.push(["com",/^#[^\r\n]*/,null,"#"]));a.cStyleComments&&(f.push(["com",/^\/\/[^\r\n]*/,null]),f.push(["com",/^\/\*[\s\S]*?(?:\*\/|$)/,null]));if(c=a.regexLiterals){var m=(c=1<c?"":"\n\r")?".":"[\\S\\s]";f.push(["lang-regex",RegExp("^(?:^^\\.?|[+-]|[!=]=?=?|\\#|%=?|&&?=?|\\(|\\*=?|[+\\-]=|->|\\/=?|::?|<<?=?|>>?>?=?|,|;|\\?|@|\\[|~|{|\\^\\^?=?|\\|\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\s*("+
("/(?=[^/*"+c+"])(?:[^/\\x5B\\x5C"+c+"]|\\x5C"+m+"|\\x5B(?:[^\\x5C\\x5D"+c+"]|\\x5C"+m+")*(?:\\x5D|$))+/")+")")])}(c=a.types)&&f.push(["typ",c]);c=(""+a.keywords).replace(/^ | $/g,"");c.length&&f.push(["kwd",new RegExp("^(?:"+c.replace(/[\s,]+/g,"|")+")\\b"),null]);d.push(["pln",/^\s+/,null," \r\n\t\u00a0"]);c="^.[^\\s\\w.$@'\"`/\\\\]*";a.regexLiterals&&(c+="(?!s*/)");f.push(["lit",/^@[a-z_$][a-z_$@0-9]*/i,null],["typ",/^(?:[@_]?[A-Z]+[a-z][A-Za-z_$@0-9]*|\w+_t\b)/,null],["pln",/^[a-z_$][a-z_$@0-9]*/i,
null],["lit",/^(?:0x[a-f0-9]+|(?:\d(?:_\d+)*\d*(?:\.\d*)?|\.\d\+)(?:e[+\-]?\d+)?)[a-z]*/i,null,"0123456789"],["pln",/^\\[\s\S]?/,null],["pun",new RegExp(c),null]);return G(d,f)}function L(a,d,f){function c(a){var b=a.nodeType;if(1==b&&!t.test(a.className))if("br"===a.nodeName.toLowerCase())m(a),a.parentNode&&a.parentNode.removeChild(a);else for(a=a.firstChild;a;a=a.nextSibling)c(a);else if((3==b||4==b)&&f){var e=a.nodeValue,d=e.match(q);d&&(b=e.substring(0,d.index),a.nodeValue=b,(e=e.substring(d.index+
d[0].length))&&a.parentNode.insertBefore(l.createTextNode(e),a.nextSibling),m(a),b||a.parentNode.removeChild(a))}}function m(a){function c(a,b){var e=b?a.cloneNode(!1):a,k=a.parentNode;if(k){var k=c(k,1),d=a.nextSibling;k.appendChild(e);for(var f=d;f;f=d)d=f.nextSibling,k.appendChild(f)}return e}for(;!a.nextSibling;)if(a=a.parentNode,!a)return;a=c(a.nextSibling,0);for(var e;(e=a.parentNode)&&1===e.nodeType;)a=e;b.push(a)}for(var t=/(?:^|\s)nocode(?:\s|$)/,q=/\r\n?|\n/,l=a.ownerDocument,n=l.createElement("li");a.firstChild;)n.appendChild(a.firstChild);
for(var b=[n],p=0;p<b.length;++p)c(b[p]);d===(d|0)&&b[0].setAttribute("value",d);var w=l.createElement("ol");w.className="linenums";d=Math.max(0,d-1|0)||0;for(var p=0,r=b.length;p<r;++p)n=b[p],n.className="L"+(p+d)%10,n.firstChild||n.appendChild(l.createTextNode("\u00a0")),w.appendChild(n);a.appendChild(w)}function t(a,d){for(var f=d.length;0<=--f;){var c=d[f];I.hasOwnProperty(c)?D.console&&console.warn("cannot override language handler %s",c):I[c]=a}}function K(a,d){a&&I.hasOwnProperty(a)||(a=/^\s*</.test(d)?
"default-markup":"default-code");return I[a]}function M(a){var d=a.j;try{var f=U(a.h,a.l),c=f.a;a.a=c;a.c=f.c;a.i=0;K(d,c)(a);var m=/\bMSIE\s(\d+)/.exec(navigator.userAgent),m=m&&8>=+m[1],d=/\n/g,t=a.a,q=t.length,f=0,l=a.c,n=l.length,c=0,b=a.g,p=b.length,w=0;b[p]=q;var r,e;for(e=r=0;e<p;)b[e]!==b[e+2]?(b[r++]=b[e++],b[r++]=b[e++]):e+=2;p=r;for(e=r=0;e<p;){for(var x=b[e],z=b[e+1],v=e+2;v+2<=p&&b[v+1]===z;)v+=2;b[r++]=x;b[r++]=z;e=v}b.length=r;var g=a.h;a="";g&&(a=g.style.display,g.style.display="none");
try{for(;c<n;){var h=l[c+2]||q,k=b[w+2]||q,v=Math.min(h,k),A=l[c+1],C;if(1!==A.nodeType&&(C=t.substring(f,v))){m&&(C=C.replace(d,"\r"));A.nodeValue=C;var N=A.ownerDocument,u=N.createElement("span");u.className=b[w+1];var B=A.parentNode;B.replaceChild(u,A);u.appendChild(A);f<h&&(l[c+1]=A=N.createTextNode(t.substring(v,h)),B.insertBefore(A,u.nextSibling))}f=v;f>=h&&(c+=2);f>=k&&(w+=2)}}finally{g&&(g.style.display=a)}}catch(y){D.console&&console.log(y&&y.stack||y)}}var D="undefined"!==typeof window?
window:{},B=["break,continue,do,else,for,if,return,while"],F=[[B,"auto,case,char,const,default,double,enum,extern,float,goto,inline,int,long,register,restrict,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"],"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"],H=[F,"alignas,alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,delegate,dynamic_cast,explicit,export,friend,generic,late_check,mutable,namespace,noexcept,noreturn,nullptr,property,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"],
O=[F,"abstract,assert,boolean,byte,extends,finally,final,implements,import,instanceof,interface,null,native,package,strictfp,super,synchronized,throws,transient"],P=[F,"abstract,add,alias,as,ascending,async,await,base,bool,by,byte,checked,decimal,delegate,descending,dynamic,event,finally,fixed,foreach,from,get,global,group,implicit,in,interface,internal,into,is,join,let,lock,null,object,out,override,orderby,params,partial,readonly,ref,remove,sbyte,sealed,select,set,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,value,var,virtual,where,yield"],
F=[F,"abstract,async,await,constructor,debugger,enum,eval,export,from,function,get,import,implements,instanceof,interface,let,null,of,set,undefined,var,with,yield,Infinity,NaN"],Q=[B,"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"],R=[B,"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"],
B=[B,"case,done,elif,esac,eval,fi,function,in,local,set,then,until"],S=/^(DIR|FILE|array|vector|(de|priority_)?queue|(forward_)?list|stack|(const_)?(reverse_)?iterator|(unordered_)?(multi)?(set|map)|bitset|u?(int|float)\d*)\b/,W=/\S/,X=x({keywords:[H,P,O,F,"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",Q,R,B],hashComments:!0,cStyleComments:!0,multiLineStrings:!0,regexLiterals:!0}),
I={};t(X,["default-code"]);t(G([],[["pln",/^[^<?]+/],["dec",/^<!\w[^>]*(?:>|$)/],["com",/^<\!--[\s\S]*?(?:-\->|$)/],["lang-",/^<\?([\s\S]+?)(?:\?>|$)/],["lang-",/^<%([\s\S]+?)(?:%>|$)/],["pun",/^(?:<[%?]|[%?]>)/],["lang-",/^<xmp\b[^>]*>([\s\S]+?)<\/xmp\b[^>]*>/i],["lang-js",/^<script\b[^>]*>([\s\S]*?)(<\/script\b[^>]*>)/i],["lang-css",/^<style\b[^>]*>([\s\S]*?)(<\/style\b[^>]*>)/i],["lang-in.tag",/^(<\/?[a-z][^<>]*>)/i]]),"default-markup htm html mxml xhtml xml xsl".split(" "));t(G([["pln",/^[\s]+/,
null," \t\r\n"],["atv",/^(?:\"[^\"]*\"?|\'[^\']*\'?)/,null,"\"'"]],[["tag",/^^<\/?[a-z](?:[\w.:-]*\w)?|\/?>$/i],["atn",/^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i],["lang-uq.val",/^=\s*([^>\'\"\s]*(?:[^>\'\"\s\/]|\/(?=\s)))/],["pun",/^[=<>\/]+/],["lang-js",/^on\w+\s*=\s*\"([^\"]+)\"/i],["lang-js",/^on\w+\s*=\s*\'([^\']+)\'/i],["lang-js",/^on\w+\s*=\s*([^\"\'>\s]+)/i],["lang-css",/^style\s*=\s*\"([^\"]+)\"/i],["lang-css",/^style\s*=\s*\'([^\']+)\'/i],["lang-css",/^style\s*=\s*([^\"\'>\s]+)/i]]),["in.tag"]);
t(G([],[["atv",/^[\s\S]+/]]),["uq.val"]);t(x({keywords:H,hashComments:!0,cStyleComments:!0,types:S}),"c cc cpp cxx cyc m".split(" "));t(x({keywords:"null,true,false"}),["json"]);t(x({keywords:P,hashComments:!0,cStyleComments:!0,verbatimStrings:!0,types:S}),["cs"]);t(x({keywords:O,cStyleComments:!0}),["java"]);t(x({keywords:B,hashComments:!0,multiLineStrings:!0}),["bash","bsh","csh","sh"]);t(x({keywords:Q,hashComments:!0,multiLineStrings:!0,tripleQuotedStrings:!0}),["cv","py","python"]);t(x({keywords:"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",
hashComments:!0,multiLineStrings:!0,regexLiterals:2}),["perl","pl","pm"]);t(x({keywords:R,hashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["rb","ruby"]);t(x({keywords:F,cStyleComments:!0,regexLiterals:!0}),["javascript","js","ts","typescript"]);t(x({keywords:"all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,throw,true,try,unless,until,when,while,yes",hashComments:3,cStyleComments:!0,multilineStrings:!0,tripleQuotedStrings:!0,
regexLiterals:!0}),["coffee"]);t(G([],[["str",/^[\s\S]+/]]),["regex"]);var Y=D.PR={createSimpleLexer:G,registerLangHandler:t,sourceDecorator:x,PR_ATTRIB_NAME:"atn",PR_ATTRIB_VALUE:"atv",PR_COMMENT:"com",PR_DECLARATION:"dec",PR_KEYWORD:"kwd",PR_LITERAL:"lit",PR_NOCODE:"nocode",PR_PLAIN:"pln",PR_PUNCTUATION:"pun",PR_SOURCE:"src",PR_STRING:"str",PR_TAG:"tag",PR_TYPE:"typ",prettyPrintOne:D.prettyPrintOne=function(a,d,f){f=f||!1;d=d||null;var c=document.createElement("div");c.innerHTML="<pre>"+a+"</pre>";
c=c.firstChild;f&&L(c,f,!0);M({j:d,m:f,h:c,l:1,a:null,i:null,c:null,g:null});return c.innerHTML},prettyPrint:D.prettyPrint=function(a,d){function f(){for(var c=D.PR_SHOULD_USE_CONTINUATION?b.now()+250:Infinity;p<x.length&&b.now()<c;p++){for(var d=x[p],l=g,n=d;n=n.previousSibling;){var m=n.nodeType,u=(7===m||8===m)&&n.nodeValue;if(u?!/^\??prettify\b/.test(u):3!==m||/\S/.test(n.nodeValue))break;if(u){l={};u.replace(/\b(\w+)=([\w:.%+-]+)/g,function(a,b,c){l[b]=c});break}}n=d.className;if((l!==g||r.test(n))&&
!e.test(n)){m=!1;for(u=d.parentNode;u;u=u.parentNode)if(v.test(u.tagName)&&u.className&&r.test(u.className)){m=!0;break}if(!m){d.className+=" prettyprinted";m=l.lang;if(!m){var m=n.match(w),q;!m&&(q=V(d))&&z.test(q.tagName)&&(m=q.className.match(w));m&&(m=m[1])}if(B.test(d.tagName))u=1;else var u=d.currentStyle,y=t.defaultView,u=(u=u?u.whiteSpace:y&&y.getComputedStyle?y.getComputedStyle(d,null).getPropertyValue("white-space"):0)&&"pre"===u.substring(0,3);y=l.linenums;(y="true"===y||+y)||(y=(y=n.match(/\blinenums\b(?::(\d+))?/))?
y[1]&&y[1].length?+y[1]:!0:!1);y&&L(d,y,u);M({j:m,h:d,m:y,l:u,a:null,i:null,c:null,g:null})}}}p<x.length?D.setTimeout(f,250):"function"===typeof a&&a()}for(var c=d||document.body,t=c.ownerDocument||document,c=[c.getElementsByTagName("pre"),c.getElementsByTagName("code"),c.getElementsByTagName("xmp")],x=[],q=0;q<c.length;++q)for(var l=0,n=c[q].length;l<n;++l)x.push(c[q][l]);var c=null,b=Date;b.now||(b={now:function(){return+new Date}});var p=0,w=/\blang(?:uage)?-([\w.]+)(?!\S)/,r=/\bprettyprint\b/,
e=/\bprettyprinted\b/,B=/pre|xmp/i,z=/^code$/i,v=/^(?:pre|code|xmp)$/i,g={};f()}},H=D.define;"function"===typeof H&&H.amd&&H("google-code-prettify",[],function(){return Y})})();}()
var EventManager = function() {
  this.init();
}

EventManager.prototype = {

  addListener: function(event, callback) {
    if (!this.listeners[event]) {
      this.listeners[event] = [];
    }
    if (callback instanceof Function) {
      this.listeners[event].push(callback);
    }
    return this;
  },
  addLastListener: function(event, callback) {
    if (!this.lastListeners[event]) {
      this.lastListeners[event] = [];
    }
    if (callback instanceof Function) {
      this.lastListeners[event].push(callback);
    }
    return this;
  },

  removeListener: function(event, callback) {
    if (this.listeners[event]) {
      var keepers = [];
      for (var i = 0; i < this.listeners[event].length; i++) {
        if (this.listeners[event][i] !== callback) {
          keepers.push(this.listeners[event][i]);
        }
        this.listeners[event] = keepers;
      }
    }
  },

  fire: function(event, params) {
    if (this.listeners[event]) {
      for (var i = 0; i < this.listeners[event].length; i++) {
        this.listeners[event][i].call(window, params);
      }
    }
    if (this.lastListeners[event]) {
      for (var i = 0; i < this.lastListeners[event].length; i++) {
        this.lastListeners[event][i].call(window, params);
      }
    }
    return false;
  },

  callFirst: function(event, params) {
    if (this.listeners[event])
      return this.listeners[event][0].call(window, params);
    return "";
  },

  callFirstTrue: function(event, params) {
    if (this.listeners[event]) {
      for (var i = 0; i < this.listeners[event].length; i++) {
        var ret = this.listeners[event][i].call(window, params);
        if (ret !== false) return ret;
      }
    }
    return false;
  },

  init: function() {
    this.listeners = {};
    this.lastListeners = {};
  }
}

var PEM = new EventManager();

function defaultVerify(callback) {
  callback.call(window);
}
PEM.addListener("verifyAnyCancel", defaultVerify);var P = {};

P.info = {
  myhost: null // hostname being used
};

P.modules = {
  user: false,
  network: false,
  modules: {}, // this is a hashmap of all loaded modules
  cacheBuster: 0, // this should be initialized to current version for cache busting
  data: {}, // for managing data
  dataLoading: {},
  dataCallbacks: {},
  /*
   *  This funciton loads module, if module is not yet loaded.
   *  Modules are only loaded after document.ready is called
   */
  loadModule: function(moduleName, options, callback, staticHTML) {
    if (P.modules.modules[moduleName]) {
      if (callback) {
        if (P.modules.modules[moduleName].isLoaded) {
          callback.call(window);
        } else {
          P.modules.modules[moduleName].callbacks.push(callback);
        }
      }
      return;
    }
    P.modules.modules[moduleName] = {
      name: moduleName,
      callbacks: [],
      options: {},
      isLoaded: false
    };
    if (callback)
      P.modules.modules[moduleName].callbacks.push(callback);
    if (options)
      P.modules.modules[moduleName].options = options;
    if (!$.isReady) {
      if (staticHTML)
        P.modules.modules[moduleName].template = PTM.createModuleTemplate(moduleName, moduleName, staticHTML);
    } else {
      P.modules._loadModule(P.modules.modules[moduleName]);
    }
  },

  _loadModule: function(module) {
    // inject CSS
    // inject JS
    // load HTML template
    // call module init
    var moduleName = module.name;
    if (!module.template) {
      P.modules.load("/modules/" + moduleName + "/" + moduleName + ".css", 1, function(css) {
        $('head').append('<style>' + css + '</style>');
      });
      P.modules.load("/modules/" + moduleName + "/" + moduleName + ".js", 1, function(js) {
        $('head').append('<script type="text/javascript">' + js + '</script>');
        module.js = js;
        if (module.js && module.template) {
          // both JS and template are loaded. Init module
          P.modules._loadModuleDone(module);
          // call all
        }
      });
      PTM.getModuleTemplate(moduleName, moduleName, function(template){
        module.template = template;
        if (module.js && module.template) {
          // both JS and template are loaded. Init module
          P.modules._loadModuleDone(module);
        }
      });
    } else {
      // template is set, it means that this is a static include. No need to load anything.
      P.modules._loadModuleDone(module);
    }
  },
  loadJS: function(js, callback) {
    P.modules.load(js, 1, function(js) {
      $('head').append('<script type="text/javascript">' + js + '</script>');
      if (callback) callback.call();
    });
  },
  _loadModuleDone: function(module) {
    module.isLoaded = true;
    module.options.user = P.modules.user;
    module.options.network = P.modules.network;
    //try {
      P[module.name].init(P.modules.modules[module.name]);
    //} catch (err) {}
    for (var i = 0; i < module.callbacks.length; i++) {
      if (module.callbacks[i])
        module.callbacks[i].call(window);
    }
  },

  initQueuedModules: function() {
    for (var name in P.modules.modules) {
      var module = P.modules.modules[name];
      if (!module.isLoaded)
        P.modules._loadModule(module);
    }
  },

  load: function(path, blockObject, callback, error) {
    if (!path) return;
    if (blockObject) {
      if (blockObject != 1) blockObject.block();
    } else
      $.blockUI();
    if (path.indexOf('?') < 0)
      path += "?t=" + P.modules.cacheBuster;
    else
      path += "&t=" + P.modules.cacheBuster;
    $.ajax({
      url: path,
      type: 'GET',
      dataType: 'html',
      success: function(data) {
        if (blockObject) {
          if (blockObject != 1) blockObject.unblock();
        } else
          $.unblockUI();
        if (data && callback)
          callback.call(window, data);
      },
      error: function(req, status, err) {
        if (blockObject)
          if (blockObject != 1) blockObject.unblock();
        else
          $.unblockUI();
        if (error)
          error.call(window, err);
      }
    });
  },
  setUser: function(u) {
    P.modules.user = u;
    PA.user = u;
    if (!P.modules.doneInitUser)
      P.modules.initUser();
    // go through all modules and set user
  },
  setNetwork: function(net) {
    if (typeof(IS_MANAGE) == 'undefined') {
      $('#loading-screen').hide();
    }
    P.modules.network = net;
    var colors = ['green', 'purple', 'grey', 'orange', 'teal', 'aqua'];
    for(var i = 0; i < colors.length; i++) {
      $('.top_bar').removeClass(colors[i]);
      $('#topbar_color_block').removeClass(colors[i]);
    }
    if (P.top_bar.user.config.topbar_colors && P.top_bar.user.config.topbar_colors[net.id]) {
      P.top_bar.setCustomTopbarColor(P.top_bar.user.config.topbar_colors[net.id]);
    }
  },
  initUser: function() {
    if (!P.modules.documentReady) return;
    if (P.modules.doneInitUser) return;
    P.modules.doneInitUser = true;
    for (var name in P.modules.modules) {
      try {
        eval("P." + name + ".setUser(P.modules.user)");
        eval("P." + name + ".setNetwork(P.modules.network)");
      } catch (err) {}
    }
  },
  // specific functions to load and access important data
  getData: function(type, block, callback, param) {
    if (P.modules.data[type]) {
      callback.call(window, P.modules.data[type]);
      return;
    }
    if (!P.modules.dataCallbacks[type]) P.modules.dataCallbacks[type] = [];
    P.modules.dataCallbacks[type].push(callback);
    if (P.modules.dataLoading[type]) return; // we are already loding this data. Callback will be triggered
    // based on type, load this data
    P.modules.dataLoading[type] = true;
    if (type == "user") {
      PA.call_pj("user.status", {}, block, function(data) {
        P.modules.getDataLoaded(type, data);
      });
    }
    if (type == "user_profile") {
      PA.call_pj("user_profile.get_profile", {}, block, function(data) {
        P.modules.getDataLoaded(type, data);
      }, function(err){});
    }
    if (type == "career_stories") {
      PA.call_pj("careers_story.get_user_stories", {}, block, function(data){
        P.modules.getDataLoaded(type, data);
      }, function(err){alert(err);});
    }
    if (type == "company_list") {
      PA.call_pj("careers_company.company_list", {}, block, function(data){
        P.modules.getDataLoaded(type, data);
      }, function(err){alert(err);});
    }
    if (type == "careers_feed_stories") {
      PA.call_pj("user_profile.get_careers_feed_stories", {}, block, function(data){
        P.modules.getDataLoaded(type, data);
      }, function(err){alert(err);});
    }
    if (type == "company_list_new") {
      PA.call_pj("company.get_all_companies", {}, block, function(data){
        P.modules.getDataLoaded(type, data);
      }, function(err){alert(err);});
    }
    if (type.indexOf("company_profile_") == 0) {
      var internalId = type.replace("company_profile_", "");
      PA.call_pj("careers_company.get_profile", {internal_id: internalId}, block, function(data){
        P.modules.getDataLoaded(type, data);
      }, function(err){alert(err);});
    }
  },
  getDataLoaded: function(type, data) {
    P.modules.data[type] = data;
    P.modules.dataLoading[type] = false;
    if (P.modules.dataCallbacks[type]) {
      for (var i = 0; i < P.modules.dataCallbacks[type].length; i++)
        P.modules.dataCallbacks[type][i].call(window, data);
    }
  }
};

P.clock = {
  CLOCK_DRIFT: 0,
  PENDING: {},
  PENDING_SIZE: 0,
  MAX_PENDING: 10,
  MAX_PENDING_DRIFT: 60000,
  AVERAGER_RATE: 0.2,
  CURRENT: 0,
  getLocalDiff: function (servertime, mytime) {
    if (mytime === null || mytime === undefined) {
      mytime = new Date().getTime();
    }
    return mytime + P.clock.CLOCK_DRIFT - servertime;
  },
  startDriftMeasure: function () {
    var now = new Date().getTime();
    if (P.clock.PENDING_SIZE == P.clock.MAX_PENDING) {
      for (var id in P.clock.PENDING) {
        if (P.clock.PENDING[id] + P.clock.MAX_PENDING_DRIFT < now) {
          delete (P.clock.PENDING[id]);
          P.clock.PENDING_SIZE--;
        }
      }
    }
    if (P.clock.PENDING_SIZE < P.clock.MAX_PENDING) {
      P.clock.CURRENT++;
      P.clock.PENDING[P.clock.CURRENT] = now;
      P.clock.PENDING_SIZE++;
      return P.clock.CURRENT;
    }
  },
  stopDriftMeasure: function (id, servertime) {
    if (id && P.clock.PENDING[id]) {
      if (servertime > 0) {
        var rtt = new Date().getTime() - P.clock.PENDING[id];
        var new_drift = P.clock.PENDING[id] + rtt / 2 - servertime;
        if (Math.abs(new_drift) > rtt) {
          P.clock.CLOCK_DRIFT = new_drift;
        } else {
          P.clock.CLOCK_DRIFT = P.clock.CLOCK_DRIFT * (1 - P.clock.AVERAGER_RATE) + (P.clock.AVERAGER_RATE) * new_drift;
        }
        console.log("rtt: " + rtt + " drift: " + new_drift + " -> " + P.clock.CLOCK_DRIFT);
      }
      delete (P.clock.PENDING[id]);
      P.clock.PENDING_SIZE--;
    }
  }
};

P.renderer = {
  render_progress :0,
  resetRenderProgress: function() {
    P.renderer.render_progress = 0;
  },
  setRenderInProgress: function() {
    if (P.renderer.render_progress > 0) {
      P.renderer.render_progress += 1;
    } else {
      P.renderer.render_progress = 1;
    }
  },
  setRenderComplete: function() {
    var _completer = function() {
      if (P.renderer.render_progress > 0) {
        P.renderer.render_progress -= 1;
      }
      if (P.renderer.render_progress === 0) {
        PEM.fire("content_rendered");
        P.renderer.render_progress = {};
      }
    };
    if (MathJax && MathJax.Hub) {
      MathJax.Hub.Queue(_completer);
    } else {
      _completer();
    }
  },
  renderMath: function (element) {
    if (MathJax && MathJax.Hub) {
      MathJax.Hub.Queue(["Typeset", MathJax.Hub, element]);
    }
  },
  ensureSyntaxHighlighting: function() {
    if (P.note_view && P.note_view.network ) {
      if (P.note_view.network.config && !P.note_view.network.config.disable_syntax && !is_ie) {
        $('.post_region_content').find('pre').addClass('prettyprint');
        prettyPrint();
        /* Avoid conflict with our own "tag" styles. */
        $('.prettyprint .tag').removeClass('tag').addClass('tag_code');
      }
      $('.others').tooltip({placement: 'left', html: true});
    }
  },
};

$(document).ready(function() {
  P.modules.initQueuedModules();
  P.modules.documentReady = true;
  if (P.modules.user) {
    P.modules.initUser();
  }
});
/*
 * Piazza Template Manager
 *
 */
var PTM = {
  templates: {},

  getTemplate: function(name, callback, options) {
    if (PTM.templates[name]) {
      if (callback)
        callback.call(window, PTM.templates[name], options);
      return PTM.templates[name];
    }
    else {
      P.modules.load("/modules/shared_templates/" + name + ".html", 1, function(html) {
        PTM.templates[name] = Handlebars.compile(html);
        if (callback)
          callback.call(window, PTM.templates[name], options);
      }, function(err) {alert(err)});
    }
    return null;
  },
  getAngularTemplate: function(name, callback, options) {
    if (PTM.templates[name]) {
      if (callback)
        callback.call(window, PTM.templates[name], options);
      return PTM.templates[name];
    }
    else {
      P.modules.load("/modules/shared_templates/" + name + ".html", 1, function(html) {
        PTM.templates[name] = html;
        if (callback)
          callback.call(window, PTM.templates[name], options);
      }, function(err) {alert(err)});
    }
    return null;
  },  
  createTemplate: function(name, html) {
    PTM.templates[name] = Handlebars.compile(html);
    return PTM.templates[name];
  },
  getModuleTemplate: function(moduleName, name, callback, options) {
    if (PTM.templates[moduleName + ":" + name]) {
      if (callback)
        callback.call(
          window,
          PTM.templates[moduleName + ":" + name],
          options,
          PTM.templates[moduleName + ":" + name + ":html" ]);
      return PTM.templates[moduleName + ":" + name];
    } else {
      P.modules.load("/modules/" + moduleName + "/" + name + ".html", 1, function(html) {
        PTM.templates[moduleName + ":" + name] = Handlebars.compile(html);
        PTM.templates[moduleName + ":" + name + ":html" ] = html;
        if (callback)
          callback.call(window, PTM.templates[moduleName + ":" + name], options, html);
      }, function(err) {alert(err)});
    }
    return null;
  },
  createModuleTemplate: function(moduleName, name, html) {
    PTM.templates[moduleName + ":" + name] = Handlebars.compile(html);
    return PTM.templates[moduleName + ":" + name];
  },

  init: function() {
    Handlebars.registerHelper('toRelativeTime', function(time) {
      if (!time) return "";
      return time.toRelativeTime();
    });
    Handlebars.registerHelper('limitChars', function(msg) {
      if (!msg) return "";
      if (msg.length < 50) return msg;
      return msg.substring(0, 48) + "...";
    });
    Handlebars.registerHelper('toUserName', function(uid, anon, is_followup, anonid) {
      if (typeof(anon) != "string") anon = "no";
      if (typeof(anonid) != "string") anonid = "";
      return PA.getUserName(uid, anon, undefined, undefined, is_followup === true, anonid);
    });
    Handlebars.registerHelper('toUserPic', function(uid, uid_a) {
      return PA.getUserPic(uid, uid_a);
    });
    Handlebars.registerHelper('forLoop', function(items, options) {
      var out = "";
      for (var i = 0;i<items.length;i++) {
        out += options.fn(items[i]);
      }
      return out;
    });
    // ifContains <array> <element> -> render if array contains given element
    Handlebars.registerHelper('ifContains', function(array, element, options) {
      if (!array) return options.inverse(this);
      if (array.exist(element)) return options.fn(this);
      return options.inverse(this);
    });
    Handlebars.registerHelper('ifEquals', function(str1, str2, options) {
      if (str1 == str2)
        return options.fn(this);
      return options.inverse(this);
    });
    Handlebars.registerHelper('ifNotEquals', function(str1, str2, options) {
      if (str1 != str2)
        return options.fn(this);
      return options.inverse(this);
    });
    Handlebars.registerHelper('ifGreater', function(str1, str2, options) {
      if (str1 > str2)
        return options.fn(this);
      return options.inverse(this);
    });
    Handlebars.registerHelper('ifOr', function(v1, v2, options) {
      if(v1 || v2) {
        return options.fn(this);
      }
      return options.inverse(this);
    });
    Handlebars.registerHelper('pluralizator', function(element, singular, plural) {
      if (parseInt(element) > 1) return plural;
      return singular;
    });
    Handlebars.registerHelper('processText', function(element, type) {
      if (P.note_view.content.config && P.note_view.content.config.student_product)
        return element;

      var pollOptions = null;
      if (type == "poll") {
        pollOptions = {question: P.poll_view.question};
      }
      return PEM.callFirst("makeHtml", {text:element, pollOptions:pollOptions});
    });
    Handlebars.registerHelper('extensionIcon', function(element) {
      return getFileTypeIcon(element);
    });
    Handlebars.registerHelper('isImage', function(element, options) {
      if (isFileTypeImage(element))
        return options.fn(this);
      return "";
    });
    Handlebars.registerHelper('networkName', function(nid) {
      var name = "-unknown-";
      if (P.modules.user) {
        for (var i = 0; i < P.modules.user.networks.length; i++)
          if (P.modules.user.networks[i].id == nid) {
            name = P.modules.user.networks[i].name;
            break;
          }
      }
      return name;
    });
    Handlebars.registerHelper('attachment', function(attach, content, network) {
      if (PTM.templates["attachment"]) {
        ATTACHMENTS[attach.id] = attach;
        return PTM.templates["attachment"]({attach:attach, content:content, network:network});
      }
      return "";
    });
    Handlebars.registerHelper('folderlist', function(folders, net_folders) {
      var html = "";
      if (!folders) return html;
      var sorted_folders = net_folders
        .filter(function(e) {return folders.exist(e)})
        .map(function(e, idx) {return {idx: folders.indexOf(e), name: e}});
      for (var i = 0; i < folders.length; i++) {
        var name = folders[i];
        if (!sorted_folders.find(function(e) {return e.name === name})) {
          sorted_folders.push({idx: i, name: name});
        }
      }
      for (var i = 0; i < sorted_folders.length; i++) {
        html += '<span data-pats="folders_item"><a data-pats="link" href="#" class="tag folder" onclick="return P.note_view.filterForFolder(' + sorted_folders[i].idx + ');">' + sorted_folders[i].name + '</a></span>';
      }
      return html;
    });
    Handlebars.registerHelper('showOthers', function(others, othersAnon, othersA) {
      if (!others) return "";
      if (others.length == 0) return "";
      if (!othersAnon) othersAnon = ["no"];
      if (others.length == 1) {
        return "and " + PA.getUserName(others[0], othersAnon[0], false, false, false, othersA[0]);
      } else {
        return "and " + PA.getOthersList(others, othersAnon, false, othersA);
      }
      return "";
    });
    Handlebars.registerHelper('ifIsOdd', function(num, options) {
      if (num % 2 == 1) return options.fn(this);
      return "";
    });
    Handlebars.registerHelper('ifIsEmpty', function(arr, options) {
      if (!arr || arr.length == 0) return options.fn(this);
      return "";
    });
    Handlebars.registerHelper('showCompanyUsers', function(arr, options) {
      var names = [];
      if (typeof(COMPANY_USERS) != 'undefined' && COMPANY_USERS && arr && arr.length > 0) {
        for (var i = 0; i < arr.length; i++) {
          if (COMPANY_USERS[arr[i]]) names.push(COMPANY_USERS[arr[i]].name);
        }
      }
      if (names.length > 0)
        return "<span class='company_user_list' tipsy='" + names.join("<br/>") + "'>" + options.fn(this) + "</span>";
      return "<span class='company_user_list'>" + options.fn(this) + "</span>";
    });
    Handlebars.registerHelper('showCompanyUserName', function(id, options) {
      if (typeof(COMPANY_USERS) != 'undefined' && COMPANY_USERS && id) {
        if (COMPANY_USERS[id]) return COMPANY_USERS[id].name;
      }
      return "";
    });
    Handlebars.registerHelper('timestampFormat', function(time, format, options) {
      var date = new Date();
      date.setTime(time);
      return date.format(format);
    });
    var companyActions = {
      "view_profile":"Viewed profile",
      "request_resume":"Requested resume",
      "note":"Added a note",
      "tag":"Tagged student with ",
      "status":"Changed Status ",
      "send_message":"Messaged student "
    };
    Handlebars.registerHelper('showCompanyAction', function(action, options) {
      return companyActions[action];
    });
  }
};

PTM.init();
var ATTACHMENTS = {};
var FOLDER_DELIMITER = "∕"; // DIVISION SLASH https://codepoints.net/U+2215

var LICENSING_TYPE_INSTRUCTOR = "instructor"
var LICENSING_TYPE_STUDENT = "student"
var LICENSING_TYPE_DONATION = "donation"
var LICENSING_TYPE_NON_CLASS = "non_class"
var LICENSING_TYPE_K12 = "k12"

function makeId() {
  return (Math.random().toString(36) + Date.now().toString(36)).substr(2, 11);
};
String.prototype.toRelativeTime = function(now_threshold) {
  var dt = new Date();
  dt.setISO8601(this);
  return dt.toRelativeTime(now_threshold);
};
String.prototype.toDate = function() {
  var dt = new Date();
  dt.setISO8601(this);
  return dt;
};
String.prototype.usDateToDB = function() {
  var arr = this.split('/');
  if (arr.length == 3) {
    if(arr[0].length == 1) arr[0] = "0" + arr[0];
    if(arr[1].length == 1) arr[1] = "0" + arr[1];
    return arr[2] + '-' + arr[0] + '-' + arr[1];
  }
};
String.prototype.trim = function() {
  return this.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
};
// TODO: do we still need to support this patch?
if (typeof Array.prototype.forEach != 'function') {
  Array.prototype.forEach = function(func) {
    for (var i = 0; i < this.length; i++)
    func(this[i]);
  };
}
Array.prototype.remove = function(val) {
    for (var i in this) {
        if (this[i] === val) {
          this.splice(i, 1);
        }
    }
};
Array.prototype.removeF = function(func) {
    for (var i in this) {
        if (func(this[i])) {
          this.splice(i, 1);
        }
    }
};
Array.prototype.findAll = function(func) {
    var items = [];
    this.forEach(function(i) {
    	if (!isFunction(i)) {
    		if (func(i)) {
    			items.push(i);
    		}
    	}
    });
    return items;
};
function shuffleArray(array) {
    for (var i = array.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
    return array;
}
function isFunction(obj) {
	return Object.prototype.toString.call(obj) === "[object Function]";
};
function showSecs(secs) {
  if (secs == 0) return "1 sec";
  if (!secs) return "-";
  if (secs < 60) return "" + secs + " sec";
  if (secs < 60*60) return "" + Math.round(secs / 60) + " min";
  return "" + Math.round(secs / 60 / 6) / 10 + " hr";
}
Date.prototype.toRelativeTime = function(now_threshold) {
  var delta = new Date() - this;

  now_threshold = parseInt(now_threshold, 10);

  if (isNaN(now_threshold)) {
    now_threshold = 10000;
  }

  if (delta <= now_threshold) {
    return '<span title="' + this + '">Just now</span>';
  }

  var units = null;
  var conversions = {
    millisecond: 1, // ms    -> ms
    second: 1000,   // ms    -> sec
    minute: 60,     // sec   -> min
    hour:   60,     // min   -> hour
    day:    24,     // hour  -> day
    month:  30,     // day   -> month (roughly)
    year:   12      // month -> year
  };

  for (var key in conversions) {
    if (delta < conversions[key]) {
      break;
    } else {
      units = key; // keeps track of the selected key over the iteration
      delta = delta / conversions[key];
    }
  }

  // pluralize a unit when the difference is greater than 1.
  delta = Math.floor(delta);
  if (delta !== 1) { units += "s"; }
  return '<span title="' + this + '">' + [delta, units, "ago"].join(" ") + '</span>';
};

Date.prototype.get12 = function() {
  var hour = this.getHours();
  var mins = this.getMinutes();
  var ap = "AM";
  if (hour   > 11) { ap = "PM";         }
  if (hour   > 12) { hour = hour - 12;  }
  if (hour   == 0) { hour = 12;         }
  if (mins   < 10) { mins = "0" + mins; }
  return "" + hour + ":" + mins + ap;
};

Date.prototype.getWDay = function() {
  return ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"][this.getDay()];
};

Date.prototype.getFullDate = function() {
  return "" + (this.getMonth() + 1) + "/" + this.getDate() + "/" + (this.getFullYear() % 100);
};

Date.prototype.toISOString = Date.prototype.toISOString || function() {
  return this.getUTCFullYear() + "-"
    + ("0" + (this.getUTCMonth() + 1) + "-").slice(-3)
    + ("0" + this.getUTCDate() + "T").slice(-3)
    + ("0" + this.getUTCHours() + ":").slice(-3)
    + ("0" + this.getUTCMinutes() + ":").slice(-3)
    + ("0" + this.getUTCSeconds() + ".").slice(-3)
    + ("00" + this.getUTCMilliseconds() + "Z").slice(-4);
};
Array.prototype.exist = function(val) {
  for (var i in this)
    if (this[i] == val) return true;
  return false;
};

/*
 * Wraps up a common pattern used with this plugin whereby you take a String
 * representation of a Date, and want back a date object.
 */
Date.fromString = function(str) {
  return new Date(Date.parse(str));
};

Date.prototype.setISO8601 = function(dString) {
  var regexp = /(\d\d\d\d)(-)?(\d\d)(-)?(\d\d)(T)?(\d\d)(:)?(\d\d)(:)?(\d\d)(\.\d+)?(Z|([+-])(\d\d)(:)?(\d\d))/;
  if (!dString) return this;
  if (dString.toString().match(new RegExp(regexp))) {
    var d = dString.match(new RegExp(regexp));
    var offset = 0;
    this.setUTCDate(1);
    this.setUTCFullYear(parseInt(d[1],10));
    this.setUTCMonth(parseInt(d[3],10) - 1);
    this.setUTCDate(parseInt(d[5],10));
    this.setUTCHours(parseInt(d[7],10));
    this.setUTCMinutes(parseInt(d[9],10));
    this.setUTCSeconds(parseInt(d[11],10));
    if (d[12])
    this.setUTCMilliseconds(parseFloat(d[12]) * 1000);
    else
    this.setUTCMilliseconds(0);
    if (d[13] != 'Z') {
      offset = (d[15] * 60) + parseInt(d[17],10);
      offset *= ((d[14] == '-') ? -1 : 1);
      this.setTime(this.getTime() - offset * 60 * 1000);
    }
  } else {
    this.setTime(Date.parse(dString));
  }
  return this;
};
Date.prototype.getFullDate = function() {
  return "" + (this.getMonth() + 1) + "/" + this.getDate() + "/" + (this.getFullYear() % 100);
}

var dateFormat = function () {
  var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,
    timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,
    timezoneClip = /[^-+\dA-Z]/g,
    pad = function (val, len) {
      val = String(val);
      len = len || 2;
      while (val.length < len) val = "0" + val;
      return val;
    };

  // Regexes and supporting functions are cached through closure
  return function (date, mask, utc) {
    var dF = dateFormat;

    // You can't provide utc if you skip other args (use the "UTC:" mask prefix)
    if (arguments.length == 1 && Object.prototype.toString.call(date) == "[object String]" && !/\d/.test(date)) {
      mask = date;
      date = undefined;
    }

    // Passing date through Date applies Date.parse, if necessary
    date = date ? new Date(date) : new Date;
    if (isNaN(date)) throw SyntaxError("invalid date");

    mask = String(dF.masks[mask] || mask || dF.masks["default"]);

    // Allow setting the utc argument via the mask
    if (mask.slice(0, 4) == "UTC:") {
      mask = mask.slice(4);
      utc = true;
    }

    var _ = utc ? "getUTC" : "get",
      d = date[_ + "Date"](),
      D = date[_ + "Day"](),
      m = date[_ + "Month"](),
      y = date[_ + "FullYear"](),
      H = date[_ + "Hours"](),
      M = date[_ + "Minutes"](),
      s = date[_ + "Seconds"](),
      L = date[_ + "Milliseconds"](),
      o = utc ? 0 : date.getTimezoneOffset(),
      flags = {
        d:    d,
        dd:   pad(d),
        ddd:  dF.i18n.dayNames[D],
        dddd: dF.i18n.dayNames[D + 7],
        m:    m + 1,
        mm:   pad(m + 1),
        mmm:  dF.i18n.monthNames[m],
        mmmm: dF.i18n.monthNames[m + 12],
        yy:   String(y).slice(2),
        yyyy: y,
        h:    H % 12 || 12,
        hh:   pad(H % 12 || 12),
        H:    H,
        HH:   pad(H),
        M:    M,
        MM:   pad(M),
        s:    s,
        ss:   pad(s),
        l:    pad(L, 3),
        L:    pad(L > 99 ? Math.round(L / 10) : L),
        t:    H < 12 ? "a"  : "p",
        tt:   H < 12 ? "am" : "pm",
        T:    H < 12 ? "A"  : "P",
        TT:   H < 12 ? "AM" : "PM",
        Z:    utc ? "UTC" : (String(date).match(timezone) || [""]).pop().replace(timezoneClip, ""),
        o:    (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
        S:    ["th", "st", "nd", "rd"][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10]
      };

    return mask.replace(token, function ($0) {
      return $0 in flags ? flags[$0] : $0.slice(1, $0.length - 1);
    });
  };
}();
dateFormat.masks = {
  "default":      "ddd mmm dd yyyy HH:MM:ss",
  shortDate:      "m/d/yy",
  mediumDate:     "mmm d, yyyy",
  longDate:       "mmmm d, yyyy",
  fullDate:       "dddd, mmmm d, yyyy",
  shortTime:      "h:MM TT",
  mediumTime:     "h:MM:ss TT",
  longTime:       "h:MM:ss TT Z",
  isoDate:        "yyyy-mm-dd",
  isoTime:        "HH:MM:ss",
  isoDateTime:    "yyyy-mm-dd'T'HH:MM:ss",
  isoUtcDateTime: "UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"
};
// Internationalization strings
dateFormat.i18n = {
  dayNames: [
    "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat",
    "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
  ],
  monthNames: [
    "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec",
    "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
  ]
};
Date.prototype.format = function (mask, utc) {
  return dateFormat(this, mask, utc);
};
function copyToClipboard(data) {
  var input = document.createElement('input');
  input.setAttribute('value', data);
  document.body.appendChild(input);
  input.select();
  document.execCommand('copy');
  document.body.removeChild(input);
}

function openDropdown(selector, event) {
  closeDropDown();
  $(selector).show();
  if (event.preventDefault) event.preventDefault();
  if (event.stop) event.stop();
  if (event.stopPropagation) event.stopPropagation();
  return false;
}
function closeDropDown() {
    $('.top_bar_dropdown_wrapper').hide();
    $('.general_dropdown').hide();
    $('#moreFolders').hide();
    $('.topbar_arrow').removeClass('settings_active');
    $('.topbar_account_wrapper').removeClass('active');
    $('.topBar_button_left').removeClass('active');
    $('.topBar_button_left').removeClass('highlighted');
    $('.topBar_button_right').removeClass('active');
    $('#user_button').removeClass('active');
    if (typeof(P) != 'undefined' && typeof(P.top_bar) != 'undefined' && P.top_bar.manageView) {
      $('#manage_class_dropdown').click();
    }
    $(".subfolder_menu").hide();
}

var DID_REPLACE_LATEST = false;
var POLL_OPTS = [];
function ProcessText(text, noReplace, contentType) {
  // do latex logic
  DID_REPLACE_LATEST = false;
  if (!text) return "";
  if (text.indexOf("<") >= 0) DID_REPLACE_LATEST = true;
  if (noReplace) {
    text = text.replace(/</g, "&lt;");
    text = text.replace(/>/g, "&gt;");
  }
  //text = text.replace(/([^>]|<br>)\n/g, "$1<br>");
  //text = text.replace(/([^>]|<br>)\n/g, "$1<br>");
  text = text.replace(/\n/g, "<br>");
  text = text.replace(/<br><br><ul>/g, "<br><ul>");
  text = text.replace(/<br><br><ol>/g, "<br><ol>");
  text = text.replace(/<\/ul><br>/g, "</ul>");
  text = text.replace(/<\/ol><br>/g, "</ol>");
  text = text.replace(/<br><li>/g, "<li>");
  text = text.replace(/<\/li><br>/g, "</li>");
  text = text.replace(/<br><br><pre>/g, "<br><pre>");
  text = text.replace(/<\/pre><br>/g, "</pre>");
  if (noReplace) return text;
  text = text.replace(/&amp;/g, "&");
  text = text.replace(/&quot;/g, '"');
  var pres = text.match(/<pre>[\s\S]*?<\/pre>/g);
  var tts = text.match(/<tt>[\s\S]*?<\/tt>/g);
  if (pres) {
    for (var i = 0; i < pres.length; i++) {
      text = text.replace(pres[i], "<|_p_" + i + "_p_|>");
    }
  }
  if (tts) {
    for (var i = 0; i < tts.length; i++) {
      text = text.replace(tts[i], "<|_tt_" + i + "_tt_|>");
    }
  }
  var arr = text.split('$$');
  if (arr.length > 2) {
    // potential latex
    for (var i = 1; i <= arr.length - 1; i+=2) {
      var str = arr[i]
      if (str.length >= 1) {
        // look for special chars: \, _, ^
        //if ((!str.match(/[\s]/) || str.match(/[\\_^]/)) && str.indexOf("<br>") == -1) {
          var content_text = str;
          content_text = content_text.replace(/&lt;/g, "<");
          content_text = content_text.replace(/&gt;/g, ">");
          content_text = content_text.replace(/&amp;/g, "&");
          content_text = content_text.replace(/&quot;/g, '"');
          content_text = content_text.replace(/<br>/g, "\n");
          var replaced = "<img style='width: auto;vertical-align: text-bottom;' src='/main/show_latex?" + escape(content_text) + "'/>"
          DID_REPLACE_LATEST = true;
          text = text.replace("$$" + str + "$$", replaced);
          //text = text.replace("$" + replaced, replaced);
          //text = text.replace("$" + replaced, replaced);
          //text = text.replace(replaced + "$", replaced);
          //text = text.replace(replaced + "$", replaced);
        //}
      }
    }
  }
  // replace URLs with links, except directly following a quote character
  // URLs are defined as http or https, followed by ://, followed by a sequence of non-whitespace, non-bracket, non-double quote characters, followed by one word character or certain punctuation
  // the text immediately after a URL must be whitespace; a newline; end of input; a comma, period, or colon followed by one of the first three; or a closing parenthesis or HTML-escaped > followed by an optional period, comma, colon or semicolon followed by one of the first three
  text = text.replace(/(^|[^"'])(https?:\/\/(\([^\s<\[\]"\)]*\)|[^ \t\n<\[\]"()])+?(\([^\s<\[\]"\)]*\)|[\w\/?=)}#&]))(?=$|<br|<\/|\s|([\]\)]|&gt;)[\.,:;?!"'\-]*(\s|<br|<\/|$)|[\.,:;!"'\-]+(\s|<br|<\/|$))/g, '$1<a href="$2" target="_blank">$2</a>');
  // don't make links on Piazza.com go to a new tab
  text = text.replace(/target="_blank">https?:\/\/(www\.)?piazzz?a\.com\/class/g, '>https://piazza.com/class');
  if (typeof PD != 'undefined') {
    //text = text.replace(/([^\w\/])#(\w[\w-]*(-&gt;){0,1}[\w-]+)/g, "$1" + PD.makeTag("$2"));
    //text = text.replace(/^#(\w[\w-]*(-&gt;){0,1}[\w-]+)/g, PD.makeTag("$1"));
    //if (PD.tags) {
    //  var regex = new RegExp('(#' + PD.tags.instructor.join("|#").replace(/\+/g, "\\+").replace(/\*/g, "\\*").replace(/\./g, "\\.") + ')', "g");
    //  text = text.replace(regex, '');
    //}
    text = text.replace(/([^\w\/])#(\w[\w\-.+]*[\w\-+]+)/g, "$1" + PD.makeTag("$2"));
    text = text.replace(/^#(\w[\w\-.+]*[\w\-+]+)/g, PD.makeTag("$1"));
    text = text.replace(/([^\w\/])#(\w)([^\w\/<\-.+])/g, "$1" + PD.makeTag("$2") + "$3");
    text = text.replace(/([^\w\/])#(\w)$/g, "$1" + PD.makeTag("$2"));
    text = text.replace(/^@(\d+)/g, '<a href="#' + PD.term + "/" + PD.selectedNetwork.short_number + '/$1">@$1</a>');
    text = text.replace(/([^\w])@(\d+)/g, '$1<a href="#' + PD.term + "/" + PD.selectedNetwork.short_number + '/$2">@$2</a>');
  }
  if (pres) {
    for (var i = 0; i < pres.length; i++) {
      text = text.replace("<|_p_" + i + "_p_|>", "<pre style='white-space: -moz-pre-wrap;white-space: -o-pre-wrap;white-space: pre-wrap;word-wrap: break-word;'>" +
        pres[i].substr(5, pres[i].length - 11).replace(/[$]/g, "$$$$").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/&lt;br&gt;/g, "<br>") + "</pre>");
    }
  }
  if (tts) {
    for (var i = 0; i < tts.length; i++) {
      text = text.replace("<|_tt_" + i + "_tt_|>", "<tt>" + tts[i].substr(4, tts[i].length - 9).replace(/[$]/g, "$$$$").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/&lt;br&gt;/g, "<br>") + "</tt>");
    }
  }
  if (contentType == "poll") {
    var allToReplace = text.match(/\[[o*]]/g);
    POLL_OPTS = [];
    if (allToReplace) {
      for (var i = 0; i < allToReplace.length; i++) {
        var toReplace = allToReplace[i];
        var checked = "";
        if ($('#pollButton' + i).attr('checked')) checked = " checked";
        var replaceWith = "<input type='radio' class='pollButton' name='pollRadioButton' id='pollButton" + i + "'" + checked + "/>";
        if (toReplace == "[*]")
          replaceWith = "<input type='checkbox' class='pollButton' name='pollRadioButton' id='pollButton" + i + "'" + checked + "/>";
        var at = text.indexOf(toReplace);
        var enter = text.indexOf("<br", at);
        if (enter < 0) enter = text.length;
        var label = text.substr(at + 3, (enter - at - 3));
        var goodLabel = label.replace(/<[^>]*>/g, "");
        POLL_OPTS.push(goodLabel);
        var before = text.substr(0, at + 3);
        var after = text.substr(enter);
        text = before + goodLabel + after;
        text = text.replace(toReplace, replaceWith);
      }
      text += "<br/><br/><span id='pollAnonymityPlaceholder' class='subregionMetadata'></span><br/><button onclick='PD.doVote();' data-pats='submit_poll_button' class='pollButton'>Submit</button>";
    }
  }
  // get back pre and cc
  return text;
}

function getFileTypeIcon(name) {
  var fileTypes = {
    avi:'avi.png', css:'css.png', xls:'excel.png', xlsx:'excel.png', doc:'word.png', docx:'word.png',
    zip:'zip.png', gz:'zip.png', tar:'zip.png', gif:'gif.png', html:'html.png', htm:'html.png',
    jpg:'jpg.png', jepg:'jpg.png', jpeg:'jpg.png', js:'js.png', mov:'mov.png', mp3:'mp3.png', mpg:'mpg.png', mpeg:'mpg.png',
    pdf:'pdf.png', png:'png.png', ppt:'powerpoint.png', pptx:'powerpoint.png', txt:'text.png', wma:'wma.png',
    wmv:'wmv.png', doc:'word.png', docx:'word.png', xml:'xml.png'
  }
  var folder = "https://dvngeac8rg9mb.cloudfront.net/images/dashboard/qa-panel/types/"
  var parts = name.split('.');
  if (parts.length == 0) return folder + "default.png";
  var ext = parts[parts.length - 1].toLowerCase();
  if (fileTypes[ext]) return folder + fileTypes[ext];
  return folder + "default.png";
}
function isFileTypeImage(name) {
  var parts = name.split('.');
  if (parts.length == 0) return false;
  var ext = parts[parts.length - 1].toLowerCase();
  return ["jpg", "jpeg", "png", "gif"].exist(ext);
}

/* from http://selbie.wordpress.com/2011/01/23/scale-crop-and-center-an-image-with-correct-aspect-ratio-in-html-and-javascript/ */
function scaleImage(srcwidth, srcheight, targetwidth, targetheight, fLetterBox) {

    var result = { width: 0, height: 0, fScaleToTargetWidth: true };

    if ((srcwidth <= 0) || (srcheight <= 0) || (targetwidth <= 0) || (targetheight <= 0)) {
        return result;
    }

    // scale to the target width
    var scaleX1 = targetwidth;
    var scaleY1 = (srcheight * targetwidth) / srcwidth;

    // scale to the target height
    var scaleX2 = (srcwidth * targetheight) / srcheight;
    var scaleY2 = targetheight;

    // now figure out which one we should use
    var fScaleOnWidth = (scaleX2 > targetwidth);
    if (fScaleOnWidth) {
        fScaleOnWidth = fLetterBox;
    }
    else {
       fScaleOnWidth = !fLetterBox;
    }

    if (fScaleOnWidth) {
        result.width = Math.floor(scaleX1);
        result.height = Math.floor(scaleY1);
        result.fScaleToTargetWidth = true;
    }
    else {
        result.width = Math.floor(scaleX2);
        result.height = Math.floor(scaleY2);
        result.fScaleToTargetWidth = false;
    }
    result.targetleft = Math.floor((targetwidth - result.width) / 2);
    result.targettop = Math.floor((targetheight - result.height) / 2);

    return result;
}

/* from http://selbie.wordpress.com/2011/01/23/scale-crop-and-center-an-image-with-correct-aspect-ratio-in-html-and-javascript/ */
function onImageLoad(evt, takeTwo) {
  var img;
  try {
    img = evt.currentTarget;
    img = (evt.currentTarget) ? evt.currentTarget : evt.srcElement;
  } catch (err) {
    return;
  }
    if (takeTwo) {
      img = takeTwo;
      $(img).show();
      $(img).css({
        width: 'auto',
        height: 'auto',
        left: '0px'
      });
    }
    if (!img) return;
    // what's the size of this image and it's parent
    var w = img.naturalWidth;
    var h = img.naturalHeight;
    var parent = $(img).parent();
    if (parent.hasClass("white_border"))
      parent = parent.parent();
    var tw = parent.width();
    var th = parent.height();

    // compute the new size and offsets
    var result = scaleImage(w, h, tw, th, false);

    if ((result.width == 0 || result.height == 0) && !takeTwo) {
      // if zero, allow DOM to render first
      var rememberEvent = evt;
      setTimeout(function(){ onImageLoad(rememberEvent, img);}, 500);
      $(img).hide();
      return;
    }
    // adjust the image coordinates and size
    img.width = result.width;
    img.height = result.height;
    $(img).css("width", result.width + "px");
    $(img).css("height", result.height + "px");
    $(img).css("left", result.targetleft);
    $(img).css("top", result.targettop);
}

/* When we have the directly dom element */
function onImageChange(img) {
  var w = $(img).width();
  var h = $(img).height();
  var tw = $(img).parent().width();
  var th = $(img).parent().height();

  //console.log(w, h, tw, th);

  // compute the new size and offsets
  var result = scaleImage(w, h, tw, th, false);

  //console.log(result);

  // adjust the image coordinates and size
  img.width = result.width;
  img.height = result.height;
  $(img).css("width", result.width + "px");
  $(img).css("height", result.height + "px");
  $(img).css("left", result.targetleft);
  $(img).css("top", result.targettop);
}

function getDeepParams() {
  return window.location.hash.substring(1).split('/');
}
function resizeFontToHeight(elContainer, elText, maxHeight, minTextSize) {
  var textSize = elText.css('font-size');
  textSize = textSize.replace('px', '');
  while (elContainer.height() > maxHeight && textSize > minTextSize) {
    textSize--;
    elText.css('font-size', textSize + 'px');
  }
}
function networkToUrl(network) {
  if (!network) return "/class";
  return "/class/" + network.id;
}
function isValidEmailAddress(emailAddress) {
  var pattern = new RegExp(/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i);
  return pattern.test(emailAddress);
}

function compare2Objects (x, y) {
  var p;

  // remember that NaN === NaN returns false
  // and isNaN(undefined) returns true
  if (isNaN(x) && isNaN(y) && typeof x === 'number' && typeof y === 'number') {
       return true;
  }

  // Compare primitives and functions.
  // Check if both arguments link to the same object.
  // Especially useful on step when comparing prototypes
  if (x === y) {
      return true;
  }

  // At last checking prototypes as good a we can
  if (!(x instanceof Object && y instanceof Object)) {
      return false;
  }

  // Quick checking of one object beeing a subset of another.
  // todo: cache the structure of arguments[0] for performance
  for (p in y) {
      if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
          return false;
      }
      else if (typeof y[p] !== typeof x[p]) {
          return false;
      }
  }

  for (p in x) {
      if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {
          return false;
      }
      else if (typeof y[p] !== typeof x[p]) {
          return false;
      }

      switch (typeof (x[p])) {
          case 'object':
          case 'function':
              if (!compare2Objects (x[p], y[p])) {
                  return false;
              }
              break;

          default:
              if (x[p] !== y[p]) {
                  return false;
              }
              break;
      }
  }
  return true;
}


var TIMEZONES = [
  {id: "GMT", name: "(GMT) Greenwich Mean", value: 0},
  {id: "UTC", name: "(GMT) Universal Coordinated", value: 0},
  {id: "ECT", name: "(GMT+1:00) European Central", value: 1},
  {id: "EET", name: "(GMT+2:00) Eastern European", value: 2},
  {id: "ART", name: "(GMT+3:00) Arabic, Egypt Standard", value: 3},
  {id: "EAT", name: "(GMT+3:00) Eastern African", value: 3},
  {id: "MET", name: "(GMT+3:30) Middle East", value: 3.5},
  {id: "NET", name: "(GMT+4:00) Near East", value: 4},
  {id: "PLT", name: "(GMT+5:00) Pakistan Lahore", value: 5},
  {id: "IST", name: "(GMT+5:30) India Standard", value: 5.5},
  {id: "BST", name: "(GMT+6:00) Bangladesh Standard", value: 6},
  {id: "VST", name: "(GMT+7:00) Vietnam Standard", value: 7},
  {id: "CTT", name: "(GMT+8:00) China Standard", value: 8},
  {id: "JST", name: "(GMT+9:00) Japan Standard", value: 9},
  {id: "ACT", name: "(GMT+9:30) Australia Central", value: 9.5},
  {id: "AET", name: "(GMT+10:00) Australia Eastern", value: 10},
  {id: "SST", name: "(GMT+11:00) Solomon Standard", value: 11},
  {id: "NST", name: "(GMT+12:00) New Zealand Standard", value: 12},
  {id: "MIT", name: "(GMT-11:00) Midway Islands", value: -11},
  {id: "HST", name: "(GMT-10:00) Hawaii Standard", value: -10},
  {id: "AST", name: "(GMT-9:00) Alaska Standard", value: -9},
  {id: "PST", name: "(GMT-8:00) Pacific Standard", value: -8},
  {id: "MST", name: "(GMT-7:00) Mountain Standard", value: -7},
  {id: "CST", name: "(GMT-6:00) Central Standard", value: -6},
  {id: "EST", name: "(GMT-5:00) Eastern Standard", value: -5},
  {id: "PRT", name: "(GMT-4:00) Puerto Rico and US Virgin Islands", value: -4},
  {id: "CNT", name: "(GMT-3:00) Canada Newfoundland", value: -3},
  {id: "AGT", name: "(GMT-3:00) Argentina Standard", value: -3},
  {id: "BET", name: "(GMT-3:00) Brazil Eastern", value: -3},
  {id: "CAT", name: "(GMT-1:00) Central African", value: -1}
];


function currentTimezoneOffset() {
  var dstPeriod = {
    2017: [new Date(2017, 2, 12), new Date(2017, 10, 5)],
    2018: [new Date(2018, 2, 11), new Date(2018, 10, 4)],
    2019: [new Date(2019, 2, 10), new Date(2019, 10, 3)],
    2020: [new Date(2020, 2, 9),  new Date(2020, 10, 2)]
  };
  var today = new Date();
  var offset = today.getTimezoneOffset();
  var year = today.getFullYear();
  var january = new Date(today.getFullYear(), 0, 1);
  var januaryOffset = january.getTimezoneOffset();
  var july = new Date(today.getFullYear(), 6, 1);
  var julyOffset = july.getTimezoneOffset();
  var dstObserved = (januaryOffset != julyOffset);
  var dstDiff = Math.abs(januaryOffset - julyOffset);
  if (dstObserved) {
    var period = dstPeriod[year] || [new Date(year, 2, 11), new Date(year, 10, 4)];
    if (today >= period[0] && today < period[1]) {
      offset += dstDiff;
    }
  }
  return ((offset / 60) * -1);
}

function getMyTimezone() {
  var currentOffset = currentTimezoneOffset();
  for (var i = 0; i < TIMEZONES.length; i++) {
    if (TIMEZONES[i].value == currentOffset) return TIMEZONES[i].id;
  }
  return 'PST';
}
/*global PushStream WebSocketWrapper EventSourceWrapper EventSource*/
/*jshint evil: true, plusplus: false, regexp: false */
/**
The MIT License (MIT)

Copyright (c) 2010-2014 Wandenberg Peixoto <wandenberg@gmail.com>, Rogério Carvalho Schneider <stockrt@gmail.com>

This file is part of Nginx Push Stream Module.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

pushstream.js

Created: Nov 01, 2011
Authors: Wandenberg Peixoto <wandenberg@gmail.com>, Rogério Carvalho Schneider <stockrt@gmail.com>
 */
(function (window, document, undefined) {
  "use strict";

  /* prevent duplicate declaration */
  if (window.PushStream) { return; }

  var Utils = {};

  var days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

  var valueToTwoDigits = function (value) {
    return ((value < 10) ? '0' : '') + value;
  };

  Utils.dateToUTCString = function (date) {
    var time = valueToTwoDigits(date.getUTCHours()) + ':' + valueToTwoDigits(date.getUTCMinutes()) + ':' + valueToTwoDigits(date.getUTCSeconds());
    return days[date.getUTCDay()] + ', ' + valueToTwoDigits(date.getUTCDate()) + ' ' + months[date.getUTCMonth()] + ' ' + date.getUTCFullYear() + ' ' + time + ' GMT';
  };

  var extend = function () {
    var object = arguments[0] || {};
    for (var i = 0; i < arguments.length; i++) {
      var settings = arguments[i];
      for (var attr in settings) {
        if (!settings.hasOwnProperty || settings.hasOwnProperty(attr)) {
          object[attr] = settings[attr];
        }
      }
    }
    return object;
  };

  var validChars  = /^[\],:{}\s]*$/,
      validEscape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
      validTokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
      validBraces = /(?:^|:|,)(?:\s*\[)+/g;

  var trim = function(value) {
    return value.replace(/^\s*/, "").replace(/\s*$/, "");
  };

  Utils.parseJSON = function(data) {
    if (!data || !isString(data)) {
      return null;
    }

    // Make sure leading/trailing whitespace is removed (IE can't handle it)
    data = trim(data);

    // Attempt to parse using the native JSON parser first
    if (window.JSON && window.JSON.parse) {
      try {
        return window.JSON.parse( data );
      } catch(e) {
        throw "Invalid JSON: " + data;
      }
    }

    // Make sure the incoming data is actual JSON
    // Logic borrowed from http://json.org/json2.js
    if (validChars.test(data.replace(validEscape, "@").replace( validTokens, "]").replace( validBraces, "")) ) {
      return (new Function("return " + data))();
    }

    throw "Invalid JSON: " + data;
  };

  var getControlParams = function(pushstream) {
    var data = {};
    // data[pushstream.tagArgument] = "";
    // data[pushstream.timeArgument] = "";
    // data[pushstream.eventIdArgument] = "";
    if (pushstream.messagesControlByArgument) {
      data[pushstream.tagArgument] = Number(pushstream._etag);
      if (pushstream._lastModified) {
        data[pushstream.timeArgument] = pushstream._lastModified;
      } else if (pushstream._lastEventId) {
        data[pushstream.eventIdArgument] = pushstream._lastEventId;
      }
    }
    return data;
  };

  var getTime = function() {
    return (new Date()).getTime();
  };

  var currentTimestampParam = function() {
    return { "_" : getTime() };
  };

  var objectToUrlParams = function(settings) {
    var params = settings;
    if (typeof(settings) === 'object') {
      params = '';
      for (var attr in settings) {
        if (!settings.hasOwnProperty || settings.hasOwnProperty(attr)) {
          params += '&' + attr + '=' + escapeText(settings[attr]);
        }
      }
      params = params.substring(1);
    }

    return params || '';
  };

  var addParamsToUrl = function(url, params) {
    return url + ((url.indexOf('?') < 0) ? '?' : '&') + objectToUrlParams(params);
  };

  var isArray = Array.isArray || function(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
  };

  var isString = function(obj) {
    return Object.prototype.toString.call(obj) === '[object String]';
  };

  var isDate = function(obj) {
    return Object.prototype.toString.call(obj) === '[object Date]';
  };

  var Log4js = {
    logger: null,
    debug : function() { if  (PushStream.LOG_LEVEL === 'debug')                                         { Log4js._log.apply(Log4js._log, arguments); }},
    info  : function() { if ((PushStream.LOG_LEVEL === 'info')  || (PushStream.LOG_LEVEL === 'debug'))  { Log4js._log.apply(Log4js._log, arguments); }},
    error : function() {                                                                                  Log4js._log.apply(Log4js._log, arguments); },
    _initLogger : function() {
      var console = window.console;
      if (console && console.log) {
        if (console.log.apply) {
          Log4js.logger = console.log;
        } else if ((typeof console.log === "object") && Function.prototype.bind) {
          Log4js.logger = Function.prototype.bind.call(console.log, console);
        } else if ((typeof console.log === "object") && Function.prototype.call) {
          Log4js.logger = function() {
            Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));
          };
        }
      }
    },
    _log  : function() {
      if (!Log4js.logger) {
        Log4js._initLogger();
      }

      if (Log4js.logger) {
        try {
          Log4js.logger.apply(window.console, arguments);
        } catch(e) {
          Log4js._initLogger();
          if (Log4js.logger) {
            Log4js.logger.apply(window.console, arguments);
          }
        }
      }

      var logElement = document.getElementById(PushStream.LOG_OUTPUT_ELEMENT_ID);
      if (logElement) {
        var str = '';
        for (var i = 0; i < arguments.length; i++) {
          str += arguments[i] + " ";
        }
        logElement.innerHTML += str + '\n';

        var lines = logElement.innerHTML.split('\n');
        if (lines.length > 100) {
          logElement.innerHTML = lines.slice(-100).join('\n');
        }
      }
    }
  };

  var Ajax = {
    _getXHRObject : function(crossDomain) {
      var xhr = false;
      if (crossDomain) {
        try { xhr = new window.XDomainRequest(); } catch (e) { }
        if (xhr) {
          return xhr;
        }
      }

      try { xhr = new window.XMLHttpRequest(); }
      catch (e1) {
        try { xhr = new window.ActiveXObject("Msxml2.XMLHTTP"); }
        catch (e2) {
          try { xhr = new window.ActiveXObject("Microsoft.XMLHTTP"); }
          catch (e3) {
            xhr = false;
          }
        }
      }
      return xhr;
    },

    _send : function(settings, post) {
      settings = settings || {};
      settings.timeout = settings.timeout || 30000;
      var xhr = Ajax._getXHRObject(settings.crossDomain);
      if (!xhr||!settings.url) { return; }

      Ajax.clear(settings);

      settings.xhr = xhr;

      if (window.XDomainRequest && (xhr instanceof window.XDomainRequest)) {
        xhr.onload = function () {
          if (settings.afterReceive) { settings.afterReceive(xhr); }
          if (settings.success) { settings.success(xhr.responseText); }
        };

        xhr.onerror = xhr.ontimeout = function () {
          if (settings.afterReceive) { settings.afterReceive(xhr); }
          if (settings.error) { settings.error(xhr.status); }
        };
      } else {
        xhr.onreadystatechange = function () {
          if (xhr.readyState === 4) {
            Ajax.clear(settings);
            if (settings.afterReceive) { settings.afterReceive(xhr); }
            try {
              if(xhr.status === 200) {
                if (settings.success) { settings.success(xhr.responseText); }
              } else {
                if (settings.error) { settings.error(xhr.status || 403); }
              }
            } catch (e) {
              if (settings.error) settings.error(403);
            }
          }
        };
      }

      if (settings.beforeOpen) { settings.beforeOpen(xhr); }

      var params = {};
      var body = null;
      var method = "GET";
      if (post) {
        body = objectToUrlParams(settings.data);
        method = "POST";
      } else {
        params = settings.data || {};
      }

      xhr.open(method, addParamsToUrl(settings.url, extend({}, params, currentTimestampParam())), true);

      if (settings.beforeSend) { settings.beforeSend(xhr); }

      var onerror = function() {
        Ajax.clear(settings);
        try { xhr.abort(); } catch (e) { /* ignore error on closing */ }
        settings.error(304);
      };

      if (post) {
        if (xhr.setRequestHeader) {
          xhr.setRequestHeader("Accept", "application/json");
          xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        }
      } else {
        settings.timeoutId = window.setTimeout(onerror, settings.timeout + 2000);
      }

      xhr.send(body);
      return xhr;
    },

    _clear_xhr : function(xhr) {
      if (xhr) {
        xhr.onreadystatechange = null;
      }
    },

    _clear_script : function(script) {
      // Handling memory leak in IE, removing and dereference the script
      if (script) {
        script.onerror = script.onload = script.onreadystatechange = null;
        if (script.parentNode) { script.parentNode.removeChild(script); }
      }
    },

    _clear_timeout : function(settings) {
      settings.timeoutId = clearTimer(settings.timeoutId);
    },

    _clear_jsonp : function(settings) {
      var callbackFunctionName = settings.data.callback;
      if (callbackFunctionName) {
        window[callbackFunctionName] = function() { window[callbackFunctionName] = null; };
      }
    },

    clear : function(settings) {
      Ajax._clear_timeout(settings);
      Ajax._clear_jsonp(settings);
      Ajax._clear_script(document.getElementById(settings.scriptId));
      Ajax._clear_xhr(settings.xhr);
    },

    jsonp : function(settings) {
      settings.timeout = settings.timeout || 30000;
      Ajax.clear(settings);

      var head = document.head || document.getElementsByTagName("head")[0];
      var script = document.createElement("script");
      var startTime = getTime();

      var onerror = function() {
        Ajax.clear(settings);
        var endTime = getTime();
        settings.error(((endTime - startTime) > settings.timeout/2) ? 304 : 403);
      };

      var onload = function() {
        Ajax.clear(settings);
        settings.load();
      };

      var onsuccess = function() {
        settings.afterSuccess = true;
        settings.success.apply(null, arguments);
      };

      script.onerror = onerror;
      script.onload = script.onreadystatechange = function(eventLoad) {
        if (!script.readyState || /loaded|complete/.test(script.readyState)) {
          if (settings.afterSuccess) {
            onload();
          } else {
            onerror();
          }
        }
      };

      if (settings.beforeOpen) { settings.beforeOpen({}); }
      if (settings.beforeSend) { settings.beforeSend({}); }

      settings.timeoutId = window.setTimeout(onerror, settings.timeout + 2000);
      settings.scriptId = settings.scriptId || getTime();
      settings.afterSuccess = null;

      settings.data.callback = settings.scriptId + "_onmessage_" + getTime();
      window[settings.data.callback] = onsuccess;

      script.setAttribute("src", addParamsToUrl(settings.url, extend({}, settings.data, currentTimestampParam())));
      script.setAttribute("async", "async");
      script.setAttribute("id", settings.scriptId);

      // Use insertBefore instead of appendChild to circumvent an IE6 bug.
      head.insertBefore(script, head.firstChild);
      return settings;
    },

    load : function(settings) {
      return Ajax._send(settings, false);
    },

    post : function(settings) {
      return Ajax._send(settings, true);
    }
  };

  var escapeText = function(text) {
    return (text) ? window.encodeURIComponent(text) : '';
  };

  var unescapeText = function(text) {
    return (text) ? window.decodeURIComponent(text) : '';
  };

  Utils.parseMessage = function(messageText, keys) {
    var msg = messageText;
    if (isString(messageText)) {
      msg = Utils.parseJSON(messageText);
    }

    var message = {
        id     : msg[keys.jsonIdKey],
        channel: msg[keys.jsonChannelKey],
        text   : isString(msg[keys.jsonTextKey]) ? unescapeText(msg[keys.jsonTextKey]) : msg[keys.jsonTextKey],
        tag    : msg[keys.jsonTagKey],
        time   : msg[keys.jsonTimeKey],
        eventid: msg[keys.jsonEventIdKey] || ""
    };

    return message;
  };

  var getBacktrack = function(options) {
    return (options.backtrack) ? ".b" + Number(options.backtrack) : "";
  };

  var getChannelsPath = function(channels, withBacktrack) {
    var path = '';
    for (var channelName in channels) {
      if (!channels.hasOwnProperty || channels.hasOwnProperty(channelName)) {
        path += "/" + channelName + (withBacktrack ? getBacktrack(channels[channelName]) : "");
      }
    }
    return path;
  };

  var getSubscriberUrl = function(pushstream, prefix, extraParams, withBacktrack) {
    var websocket = pushstream.wrapper.type === WebSocketWrapper.TYPE;
    var useSSL = pushstream.useSSL;
    var port = normalizePort(useSSL, pushstream.port);
    var url = (websocket) ? ((useSSL) ? "wss://" : "ws://") : ((useSSL) ? "https://" : "http://");
    url += pushstream.host;
    url += (port ? (":" + port) : "");
    url += prefix;

    // We do not need channels parameter as channels are part of auth token hmap already.
    // Plus it must me sorted which is guaranteed by backend code.
    // var channels = getChannelsPath(pushstream.channels, withBacktrack);
    // if (pushstream.channelsByArgument) {
    //   var channelParam = {};
    //   channelParam[pushstream.channelsArgument] = channels.substring(1);
    //   extraParams = extend({}, extraParams, channelParam);
    // } else {
    //   url += channels;
    // }
    return addParamsToUrl(url, extraParams);
  };

  var getPublisherUrl = function(pushstream) {
    var port = normalizePort(pushstream.useSSL, pushstream.port);
    var url = (pushstream.useSSL) ? "https://" : "http://";
    url += pushstream.host;
    url += (port ? (":" + port) : "");
    url += pushstream.urlPrefixPublisher;
    url += "?id=" + getChannelsPath(pushstream.channels, false);

    return url;
  };

  Utils.extract_xss_domain = function(domain) {
    // if domain is an ip address return it, else return ate least the last two parts of it
    if (domain.match(/^(\d{1,3}\.){3}\d{1,3}$/)) {
      return domain;
    }

    var domainParts = domain.split('.');
    // if the domain ends with 3 chars or 2 chars preceded by more than 4 chars,
    // we can keep only 2 parts, else we have to keep at least 3 (or all domain name)
    var keepNumber = Math.max(domainParts.length - 1, (domain.match(/(\w{4,}\.\w{2}|\.\w{3,})$/) ? 2 : 3));

    return domainParts.slice(-1 * keepNumber).join('.');
  };

  var normalizePort = function (useSSL, port) {
    port = Number(port || (useSSL ? 443 : 80));
    return ((!useSSL && port === 80) || (useSSL && port === 443)) ? "" : port;
  };

  Utils.isCrossDomainUrl = function(url) {
    if (!url) {
      return false;
    }

    var parser = document.createElement('a');
    parser.href = url;

    var srcPort = normalizePort(window.location.protocol === "https:", window.location.port);
    var dstPort = normalizePort(parser.protocol === "https:", parser.port);

    return (window.location.protocol !== parser.protocol) ||
           (window.location.hostname !== parser.hostname) ||
           (srcPort !== dstPort);
  };

  var linker = function(method, instance) {
    return function() {
      return method.apply(instance, arguments);
    };
  };

  var clearTimer = function(timer) {
    if (timer) {
      window.clearTimeout(timer);
    }
    return null;
  };

  /* common callbacks */
  var onmessageCallback = function(event) {
    Log4js.info("[" + this.type + "] message received", arguments);
    var message = Utils.parseMessage(event.data, this.pushstream);
    if (message.tag) { this.pushstream._etag = message.tag; }
    if (message.time) { this.pushstream._lastModified = message.time; }
    if (message.eventid) { this.pushstream._lastEventId = message.eventid; }
    this.pushstream._onmessage(message.text, message.id, message.channel, message.eventid, true, message.time);
  };

  var onopenCallback = function() {
    this.pushstream._onopen();
    Log4js.info("[" + this.type + "] connection opened");
  };

  var onerrorCallback = function(event) {
    Log4js.info("[" + this.type + "] error (disconnected by server):", event);
    if ((this.pushstream.readyState === PushStream.OPEN) &&
        (this.type === EventSourceWrapper.TYPE) &&
        (event.type === 'error') &&
        (this.connection.readyState === window.EventSource.CONNECTING)) {
      // EventSource already has a reconnection function using the last-event-id header
      return;
    }
    this._closeCurrentConnection();
    this.pushstream._onerror({type: ((event && ((event.type === "load") || ((event.type === "close") && (event.code === 1006)))) || (this.pushstream.readyState === PushStream.CONNECTING)) ? "load" : "timeout"});
  };

  /* wrappers */

  var WebSocketWrapper = function(pushstream) {
    if (!window.WebSocket && !window.MozWebSocket) { throw "WebSocket not supported"; }
    this.type = WebSocketWrapper.TYPE;
    this.pushstream = pushstream;
    this.connection = null;
  };

  WebSocketWrapper.TYPE = "WebSocket";

  WebSocketWrapper.prototype = {
    connect: function() {
      this._closeCurrentConnection();
      var params = extend({}, this.pushstream.extraParams(), currentTimestampParam(), getControlParams(this.pushstream));
      var url = getSubscriberUrl(this.pushstream, this.pushstream.urlPrefixWebsocket, params, !this.pushstream._useControlArguments());
      this.connection = (window.WebSocket) ? new window.WebSocket(url) : new window.MozWebSocket(url);
      this.connection.onerror   = linker(onerrorCallback, this);
      this.connection.onclose   = linker(onerrorCallback, this);
      this.connection.onopen    = linker(onopenCallback, this);
      this.connection.onmessage = linker(onmessageCallback, this);
      Log4js.info("[WebSocket] connecting to:", url);
    },

    disconnect: function() {
      if (this.connection) {
        Log4js.debug("[WebSocket] closing connection to:", this.connection.url);
        this.connection.onclose = null;
        this._closeCurrentConnection();
        this.pushstream._onclose();
      }
    },

    _closeCurrentConnection: function() {
      if (this.connection) {
        try { this.connection.close(); } catch (e) { /* ignore error on closing */ }
        this.connection = null;
      }
    },

    sendMessage: function(message) {
      if (this.connection) { this.connection.send(message); }
    }
  };

  var EventSourceWrapper = function(pushstream) {
    if (!window.EventSource) { throw "EventSource not supported"; }
    this.type = EventSourceWrapper.TYPE;
    this.pushstream = pushstream;
    this.connection = null;
  };

  EventSourceWrapper.TYPE = "EventSource";

  EventSourceWrapper.prototype = {
    connect: function() {
      this._closeCurrentConnection();
      var params = extend({}, this.pushstream.extraParams(), currentTimestampParam(), getControlParams(this.pushstream));
      var url = getSubscriberUrl(this.pushstream, this.pushstream.urlPrefixEventsource, params, !this.pushstream._useControlArguments());
      this.connection = new window.EventSource(url);
      this.connection.onerror   = linker(onerrorCallback, this);
      this.connection.onopen    = linker(onopenCallback, this);
      this.connection.onmessage = linker(onmessageCallback, this);
      Log4js.info("[EventSource] connecting to:", url);
    },

    disconnect: function() {
      if (this.connection) {
        Log4js.debug("[EventSource] closing connection to:", this.connection.url);
        this.connection.onclose = null;
        this._closeCurrentConnection();
        this.pushstream._onclose();
      }
    },

    _closeCurrentConnection: function() {
      if (this.connection) {
        try { this.connection.close(); } catch (e) { /* ignore error on closing */ }
        this.connection = null;
      }
    }
  };

  var StreamWrapper = function(pushstream) {
    this.type = StreamWrapper.TYPE;
    this.pushstream = pushstream;
    this.connection = null;
    this.url = null;
    this.frameloadtimer = null;
    this.pingtimer = null;
    this.iframeId = "PushStreamManager_" + pushstream.id;
  };

  StreamWrapper.TYPE = "Stream";

  StreamWrapper.prototype = {
    connect: function() {
      this._closeCurrentConnection();
      var domain = Utils.extract_xss_domain(this.pushstream.host);
      try {
        document.domain = domain;
      } catch(e) {
        Log4js.error("[Stream] (warning) problem setting document.domain = " + domain + " (OBS: IE8 does not support set IP numbers as domain)");
      }
      var params = extend({}, this.pushstream.extraParams(), currentTimestampParam(), {"streamid": this.pushstream.id}, getControlParams(this.pushstream));
      this.url = getSubscriberUrl(this.pushstream, this.pushstream.urlPrefixStream, params, !this.pushstream._useControlArguments());
      Log4js.debug("[Stream] connecting to:", this.url);
      this.loadFrame(this.url);
    },

    disconnect: function() {
      if (this.connection) {
        Log4js.debug("[Stream] closing connection to:", this.url);
        this._closeCurrentConnection();
        this.pushstream._onclose();
      }
    },

    _clear_iframe: function() {
      var oldIframe = document.getElementById(this.iframeId);
      if (oldIframe) {
        oldIframe.onload = null;
        oldIframe.src = "about:blank";
        if (oldIframe.parentNode) { oldIframe.parentNode.removeChild(oldIframe); }
      }
    },

    _closeCurrentConnection: function() {
      this._clear_iframe();
      if (this.connection) {
        this.pingtimer = clearTimer(this.pingtimer);
        this.frameloadtimer = clearTimer(this.frameloadtimer);
        this.connection = null;
        this.transferDoc = null;
        if (typeof window.CollectGarbage === 'function') { window.CollectGarbage(); }
      }
    },

    loadFrame: function(url) {
      this._clear_iframe();

      var ifr = null;
      if ("ActiveXObject" in window) {
        var transferDoc = new window.ActiveXObject("htmlfile");
        transferDoc.open();
        transferDoc.write("\x3C" + "html" + "\x3E\x3C" + "script" + "\x3E" + "document.domain='" + document.domain + "';\x3C" + "/script" + "\x3E");
        transferDoc.write("\x3C" + "body" + "\x3E\x3C" + "iframe id='" + this.iframeId + "' src='" + url + "'\x3E\x3C" + "/iframe" + "\x3E\x3C" + "/body" + "\x3E\x3C" + "/html" + "\x3E");
        transferDoc.parentWindow.PushStream = PushStream;
        transferDoc.close();
        ifr = transferDoc.getElementById(this.iframeId);
        this.transferDoc = transferDoc;
      } else {
        ifr = document.createElement("IFRAME");
        ifr.style.width = "1px";
        ifr.style.height = "1px";
        ifr.style.border = "none";
        ifr.style.position = "absolute";
        ifr.style.top = "-10px";
        ifr.style.marginTop = "-10px";
        ifr.style.zIndex = "-20";
        ifr.PushStream = PushStream;
        document.body.appendChild(ifr);
        ifr.setAttribute("src", url);
        ifr.setAttribute("id", this.iframeId);
      }

      ifr.onload = linker(onerrorCallback, this);
      this.connection = ifr;
      this.frameloadtimer = window.setTimeout(linker(onerrorCallback, this), this.pushstream.timeout);
    },

    register: function(iframeWindow) {
      this.frameloadtimer = clearTimer(this.frameloadtimer);
      iframeWindow.p = linker(this.process, this);
      this.connection.onload = linker(this._onframeloaded, this);
      this.pushstream._onopen();
      this.setPingTimer();
      Log4js.info("[Stream] frame registered");
    },

    process: function(id, channel, text, eventid, time, tag) {
      this.pingtimer = clearTimer(this.pingtimer);
      Log4js.info("[Stream] message received", arguments);
      if (id !== -1) {
        if (tag) { this.pushstream._etag = tag; }
        if (time) { this.pushstream._lastModified = time; }
        if (eventid) { this.pushstream._lastEventId = eventid; }
      }
      this.pushstream._onmessage(unescapeText(text), id, channel, eventid || "", true, time);
      this.setPingTimer();
    },

    _onframeloaded: function() {
      Log4js.info("[Stream] frame loaded (disconnected by server)");
      this.pushstream._onerror({type: "timeout"});
      this.connection.onload = null;
      this.disconnect();
    },

    setPingTimer: function() {
      if (this.pingtimer) { clearTimer(this.pingtimer); }
      this.pingtimer = window.setTimeout(linker(onerrorCallback, this), this.pushstream.pingtimeout);
    }
  };

  var LongPollingWrapper = function(pushstream) {
    this.type = LongPollingWrapper.TYPE;
    this.pushstream = pushstream;
    this.connection = null;
    this.opentimer = null;
    this.messagesQueue = [];
    this._linkedInternalListen = linker(this._internalListen, this);
    this.xhrSettings = {
        timeout: this.pushstream.timeout,
        data: {},
        url: null,
        success: linker(this.onmessage, this),
        error: linker(this.onerror, this),
        load: linker(this.onload, this),
        beforeSend: linker(this.beforeSend, this),
        afterReceive: linker(this.afterReceive, this)
    };
  };

  LongPollingWrapper.TYPE = "LongPolling";

  LongPollingWrapper.prototype = {
    connect: function() {
      this.messagesQueue = [];
      this._closeCurrentConnection();
      this.urlWithBacktrack = getSubscriberUrl(this.pushstream, this.pushstream.urlPrefixLongpolling, {}, true);
      this.urlWithoutBacktrack = getSubscriberUrl(this.pushstream, this.pushstream.urlPrefixLongpolling, {}, false);
      this.xhrSettings.url = this.urlWithBacktrack;
      this.useJSONP = this.pushstream._crossDomain || this.pushstream.useJSONP;
      this.xhrSettings.scriptId = "PushStreamManager_" + this.pushstream.id;
      if (this.useJSONP) {
        this.pushstream.messagesControlByArgument = true;
      }
      this._listen();
      this.opentimer = window.setTimeout(linker(onopenCallback, this), 150);
      Log4js.info("[LongPolling] connecting to:", this.xhrSettings.url);
    },

    _listen: function() {
      if (this._internalListenTimeout) { clearTimer(this._internalListenTimeout); }
      this._internalListenTimeout = window.setTimeout(this._linkedInternalListen, 100);
    },

    _internalListen: function() {
      if (this.pushstream._keepConnected) {
        this.xhrSettings.url = this.pushstream._useControlArguments() ? this.urlWithoutBacktrack : this.urlWithBacktrack;
        this.xhrSettings.data = extend({}, this.pushstream.extraParams(), this.xhrSettings.data, getControlParams(this.pushstream));
        if (this.useJSONP) {
          this.connection = Ajax.jsonp(this.xhrSettings);
        } else if (!this.connection) {
          this.connection = Ajax.load(this.xhrSettings);
        }
      }
    },

    disconnect: function() {
      if (this.connection) {
        Log4js.debug("[LongPolling] closing connection to:", this.xhrSettings.url);
        this._closeCurrentConnection();
        this.pushstream._onclose();
      }
    },

    _closeCurrentConnection: function() {
      this.opentimer = clearTimer(this.opentimer);
      if (this.connection) {
        try { this.connection.abort(); } catch (e) {
          try { Ajax.clear(this.connection); } catch (e1) { /* ignore error on closing */ }
        }
        this.connection = null;
        this.xhrSettings.url = null;
      }
    },

    beforeSend: function(xhr) {
      if (!this.pushstream.messagesControlByArgument) {
        xhr.setRequestHeader("If-None-Match", this.pushstream._etag);
        xhr.setRequestHeader("If-Modified-Since", this.pushstream._lastModified);
      }
    },

    afterReceive: function(xhr) {
      if (!this.pushstream.messagesControlByArgument) {
        this.pushstream._etag = xhr.getResponseHeader('Etag');
        this.pushstream._lastModified = xhr.getResponseHeader('Last-Modified');
      }
      this.connection = null;
    },

    onerror: function(status) {
      this._closeCurrentConnection();
      if (this.pushstream._keepConnected) { /* abort(), called by disconnect(), call this callback, but should be ignored */
        if (status === 304) {
          this._listen();
        } else {
          Log4js.info("[LongPolling] error (disconnected by server):", status);
          this.pushstream._onerror({type: ((status === 403) || (this.pushstream.readyState === PushStream.CONNECTING)) ? "load" : "timeout"});
        }
      }
    },

    onload: function() {
      this._listen();
    },

    onmessage: function(responseText) {
      if (this._internalListenTimeout) { clearTimer(this._internalListenTimeout); }
      Log4js.info("[LongPolling] message received", responseText);
      var lastMessage = null;
      var messages = isArray(responseText) ? responseText : responseText.replace(/\}\{/g, "}\r\n{").split("\r\n");
      for (var i = 0; i < messages.length; i++) {
        if (messages[i]) {
          lastMessage = Utils.parseMessage(messages[i], this.pushstream);
          this.messagesQueue.push(lastMessage);
          if (this.pushstream.messagesControlByArgument && lastMessage.time) {
            this.pushstream._etag = lastMessage.tag;
            this.pushstream._lastModified = lastMessage.time;
          }
        }
      }

      this._listen();

      while (this.messagesQueue.length > 0) {
        var message = this.messagesQueue.shift();
        this.pushstream._onmessage(message.text, message.id, message.channel, message.eventid, (this.messagesQueue.length === 0), message.time);
      }
    }
  };

  /* mains class */

  var PushStreamManager = [];

  var PushStream = function(settings) {
    settings = settings || {};

    this.id = PushStreamManager.push(this) - 1;

    this.useSSL = settings.useSSL || false;
    this.host = settings.host || window.location.hostname;
    this.port = Number(settings.port || (this.useSSL ? 443 : 80));

    this.timeout = settings.timeout || 30000;
    this.pingtimeout = settings.pingtimeout || 30000;
    this.reconnectOnTimeoutInterval = settings.reconnectOnTimeoutInterval || 3000;
    this.reconnectOnChannelUnavailableInterval = settings.reconnectOnChannelUnavailableInterval || 60000;
    this.autoReconnect = (settings.autoReconnect !== false);

    this.lastEventId = settings.lastEventId || null;
    this.messagesPublishedAfter = settings.messagesPublishedAfter;
    this.messagesControlByArgument = settings.messagesControlByArgument || false;
    this.tagArgument   = settings.tagArgument  || 'tag';
    this.timeArgument  = settings.timeArgument || 'time';
    this.eventIdArgument  = settings.eventIdArgument || 'eventid';
    this.useJSONP      = settings.useJSONP     || false;

    this._reconnecttimer = null;
    this._etag = 0;
    this._lastModified = null;
    this._lastEventId = null;
    this._keepConnected = false;

    this.urlPrefixPublisher   = settings.urlPrefixPublisher   || '/pub';
    this.urlPrefixStream      = settings.urlPrefixStream      || '/sub';
    this.urlPrefixEventsource = settings.urlPrefixEventsource || '/ev';
    this.urlPrefixLongpolling = settings.urlPrefixLongpolling || '/lp';
    this.urlPrefixWebsocket   = settings.urlPrefixWebsocket   || '/ws';

    this.jsonIdKey      = settings.jsonIdKey      || 'id';
    this.jsonChannelKey = settings.jsonChannelKey || 'channel';
    this.jsonTextKey    = settings.jsonTextKey    || 'text';
    this.jsonTagKey     = settings.jsonTagKey     || 'tag';
    this.jsonTimeKey    = settings.jsonTimeKey    || 'time';
    this.jsonEventIdKey = settings.jsonEventIdKey || 'eventid';

    this.modes = (settings.modes || 'eventsource|websocket|stream|longpolling').split('|');
    this.wrappers = [];
    this.wrapper = null;

    this.onchanneldeleted = settings.onchanneldeleted || null;
    this.onmessage = settings.onmessage || null;
    this.onerror = settings.onerror || null;
    this.onstatuschange = settings.onstatuschange || null;
    this.extraParams    = settings.extraParams    || function() { return {}; };

    this.channels = {};
    this.channelsCount = 0;
    this.channelsByArgument   = settings.channelsByArgument   || false;
    this.channelsArgument     = settings.channelsArgument     || 'channels';

    this._crossDomain = Utils.isCrossDomainUrl(getPublisherUrl(this));

    for (var i = 0; i < this.modes.length; i++) {
      try {
        var wrapper = null;
        switch (this.modes[i]) {
        case "websocket"  : wrapper = new WebSocketWrapper(this);   break;
        case "eventsource": wrapper = new EventSourceWrapper(this); break;
        case "longpolling": wrapper = new LongPollingWrapper(this); break;
        case "stream"     : wrapper = new StreamWrapper(this);      break;
        }
        this.wrappers[this.wrappers.length] = wrapper;
      } catch(e) { Log4js.info(e); }
    }

    this.readyState = 0;
  };

  /* constants */
  PushStream.LOG_LEVEL = 'error'; /* debug, info, error */
  PushStream.LOG_OUTPUT_ELEMENT_ID = 'Log4jsLogOutput';

  /* status codes */
  PushStream.CLOSED        = 0;
  PushStream.CONNECTING    = 1;
  PushStream.OPEN          = 2;

  /* main code */
  PushStream.prototype = {
    _lastUsedMode:0,
    _nextUsedMode:0,
    addChannel: function(channel, options) {
      if (escapeText(channel) !== channel) {
        throw "Invalid channel name! Channel has to be a set of [a-zA-Z0-9]";
      }
      Log4js.debug("entering addChannel");
      if (typeof(this.channels[channel]) !== "undefined") { throw "Cannot add channel " + channel + ": already subscribed"; }
      options = options || {};
      Log4js.info("adding channel", channel, options);
      this.channels[channel] = options;
      this.channelsCount++;
      if (this.readyState !== PushStream.CLOSED) { this.connect(); }
      Log4js.debug("leaving addChannel");
    },

    removeChannel: function(channel) {
      if (this.channels[channel]) {
        Log4js.info("removing channel", channel);
        delete this.channels[channel];
        this.channelsCount--;
      }
    },

    removeAllChannels: function() {
      Log4js.info("removing all channels");
      this.channels = {};
      this.channelsCount = 0;
    },

    _setState: function(state) {
      if (this.readyState !== state) {
        Log4js.info("status changed", state);
        this.readyState = state;
        if (this.onstatuschange) {
          this.onstatuschange(this.readyState);
        }
      }
    },

    connect: function() {
      Log4js.debug("entering connect");
      if (!this.host)                 { throw "PushStream host not specified"; }
      if (isNaN(this.port))           { throw "PushStream port not specified"; }
//    if (!this.channelsCount)        { throw "No channels specified"; }
      if (this.wrappers.length === 0) { throw "No available support for this browser"; }

      this._keepConnected = true;
      this._lastUsedMode = 0;
      this._connect();

      Log4js.debug("leaving connect");
    },

    disconnect: function() {
      Log4js.debug("entering disconnect");
      this._keepConnected = false;
      this._disconnect();
      this._setState(PushStream.CLOSED);
      Log4js.info("disconnected");
      Log4js.debug("leaving disconnect");
    },

    _useControlArguments :function() {
      return this.messagesControlByArgument && ((this._lastModified !== null) || (this._lastEventId !== null));
    },

    _connect: function() {
      if (this._lastEventId === null) {
        this._lastEventId = this.lastEventId;
      }
      if (this._lastModified === null) {
        var date = this.messagesPublishedAfter;
        if (!isDate(date)) {
          var messagesPublishedAfter = Number(this.messagesPublishedAfter);
          if (messagesPublishedAfter > 0) {
            date = new Date();
            date.setTime(date.getTime() - (messagesPublishedAfter * 1000));
          } else if (messagesPublishedAfter < 0) {
            date = new Date(0);
          }
        }

        if (isDate(date)) {
          this._lastModified = Utils.dateToUTCString(date);
        }
      }

      this._disconnect();
      this._setState(PushStream.CONNECTING);

      this.wrapper = this.wrappers[this._nextUsedMode];
      this._lastUsedMode = this._nextUsedMode;
      this._nextUsedMode = (this._lastUsedMode + 1) % this.wrappers.length;

      try {
        this.wrapper.connect();
      } catch (e) {
        //each wrapper has a cleanup routine at disconnect method
        if (this.wrapper) {
          this.wrapper.disconnect();
        }
      }
    },

    _disconnect: function() {
      this._reconnecttimer = clearTimer(this._reconnecttimer);
      if (this.wrapper) {
        this.wrapper.disconnect();
      }
    },

    _onopen: function() {
      this._reconnecttimer = clearTimer(this._reconnecttimer);
      this._setState(PushStream.OPEN);
    },

    _onclose: function() {
      this._reconnecttimer = clearTimer(this._reconnecttimer);
      this._setState(PushStream.CLOSED);
      this._reconnect(this.reconnectOnTimeoutInterval);
    },

    _onmessage: function(text, id, channel, eventid, isLastMessageFromBatch, time) {
      Log4js.debug("msg", text, id, channel, eventid, isLastMessageFromBatch, time);
      // successful message means we can use the same mode when reconnecting.
      this._nextUsedMode = this._lastUsedMode;
      if (id === -2) {
        if (this.onchanneldeleted) { this.onchanneldeleted(channel); }
      } else if (id > 0) {
        if (this.onmessage) { this.onmessage(text, id, channel, eventid, isLastMessageFromBatch, time); }
      }
    },

    _onerror: function(error) {
      this._setState(PushStream.CLOSED);
      this._reconnect((error.type === "timeout") ? this.reconnectOnTimeoutInterval : this.reconnectOnChannelUnavailableInterval);
      if (this.onerror) { this.onerror(error); }
    },

    _reconnect: function(timeout) {
      if (this.autoReconnect && this._keepConnected && !this._reconnecttimer && (this.readyState !== PushStream.CONNECTING)) {
        Log4js.info("trying to reconnect in", timeout);
        this._reconnecttimer = window.setTimeout(linker(this._connect, this), timeout);
      }
    },

    sendMessage: function(message, successCallback, errorCallback) {
      message = escapeText(message);
      if (this.wrapper.type === WebSocketWrapper.TYPE) {
        this.wrapper.sendMessage(message);
        if (successCallback) { successCallback(); }
      } else {
        Ajax.post({url: getPublisherUrl(this), data: message, success: successCallback, error: errorCallback, crossDomain: this._crossDomain});
      }
    }
  };

  PushStream.sendMessage = function(url, message, successCallback, errorCallback) {
    Ajax.post({url: url, data: escapeText(message), success: successCallback, error: errorCallback});
  };

  // to make server header template more clear, it calls register and
  // by a url parameter we find the stream wrapper instance
  PushStream.register = function(iframe) {
    var matcher = iframe.window.location.href.match(/streamid=([0-9]*)&?/);
    if (matcher[1] && PushStreamManager[matcher[1]]) {
      PushStreamManager[matcher[1]].wrapper.register(iframe);
    }
  };

  PushStream.unload = function() {
    for (var i = 0; i < PushStreamManager.length; i++) {
      try { PushStreamManager[i].disconnect(); } catch(e){}
    }
  };

  /* make class public */
  window.PushStream = PushStream;
  window.PushStreamManager = PushStreamManager;

  if (window.attachEvent) { window.attachEvent("onunload", PushStream.unload); }
  if (window.addEventListener) { window.addEventListener.call(window, "unload", PushStream.unload, false); }

})(window, document);
var EQUATION_ENGINE='http://latex.codecogs.com';
var FAVORITE_ENGINE='http://latex.codecogs.com/json';
var EDITOR_SRC='/modules/tinymce_plugins/eqneditor';
function $$(a){return document.getElementById(a)}function $onchange(d,c){var b=$$(d);if(b){b.onchange=c}}function $onclick(d,c){var b=$$(d);if(b){b.onclick=c}}function setadvert(){var b=$$("latex_formula");var a=b.offsetLeft;b=b.offsetParent;while(b!=null){a=parseInt(a)+parseInt(b.offsetLeft);b=b.offsetParent}$$("advert").style.display=(a<140?"none":"none")}var Cookie={set:function(b,c,a){var d=new Date();d.setDate(d.getDate()+a);document.cookie=b+"="+escape(c)+((a==null)?"":";expires="+d.toGMTString())},get:function(a){if(document.cookie.length>0){c_start=document.cookie.indexOf(a+"=");if(c_start!=-1){c_start=c_start+a.length+1;c_end=document.cookie.indexOf(";",c_start);if(c_end==-1){c_end=document.cookie.length}return unescape(document.cookie.substring(c_start,c_end))}}return""}};URL.get=function(a,b){if(location.href.match(a+"=")){return location.href.split(a+"=")[1].split("&")[0]}return b};var Opacity={set:function(c,a){var b=$$(c).style;b.opacity=(a/100);b.MozOpacity=(a/100);b.KhtmlOpacity=(a/100);b.filter="alpha(opacity="+a+")"},fade:function(d,c,a,b){speed=Math.round(b/100);sgn=(c>a)?-1:1;count=sgn*(a-c);for(i=1;i<count;i++){setTimeout("Opacity.set('"+d+"',"+(i*sgn+c)+")",(i*speed))}},fadeout:function(a){if($$(a)){this.fade(a,100,10,800);setTimeout("$$('"+a+"').style.display='none'",800)}},fadein:function(a){if($$(a)){this.set(a,20);$$(a).style.display="none";this.fade(a,20,100,800)}}};var Panel={plock:null,ctimer:null,otimer:null,oid:null,timer:Array(),open:function(b){if(b){var c=b.id;if(this.timer[c]!=""){clearTimeout(this.timer[c]);this.timer[c]=""}this.timer[c]=setTimeout("$$('"+c+"').style.overflow='visible';",200)}},close:function(b){if(b){var c=b.id;if(this.timer[c]!=""){clearTimeout(this.timer[c]);this.timer[c]=""}this.timer[c]=setTimeout("$$('"+c+"').style.overflow='hidden';",200)}},hoverdiv:null,hlock:false,hover:function(a,b){if(this.hoverdiv){this.lock=true;this.hoverdiv.innerHTML='<img src="/main/show_latex?'+encodeImageSrc(a.latex,true)+'"/>';if(document.all){this.hoverdiv.style.top=(event.clientY-10)+"px";this.hoverdiv.style.left=(event.clientX+20)+"px"}else{if(!b){b=window.event}this.hoverdiv.style.top=(b.pageY-10)+"px";this.hoverdiv.style.left=(b.pageX+20)+"px"}this.hoverdiv.style.display="block";this.lock=false;a.onmouseout=Panel.hidehover}},hidehover:function(){if(!this.hlock){$$("hover").style.display="none"}},init:function(f,c){this.hoverdiv=$$(f);var d;if(c!==undefined){d=document.getElementById(c)}else{d=document}var a=d.getElementsByTagName("area");for(i=0;i<a.length;i++){a[i].onmouseover=function(g){Panel.hover(this,g)};latex=a[i].alt;a[i].latex=latex;a[i].alt="";if(a[i].title==""){a[i].title=latex}if(a[i].onclick==undefined){a[i].onclick=function(){EqEditor.insert(this.latex)}}}if(d.getElementsByClassName==undefined){d.getElementsByClassName=function(l){var k=new RegExp("(?:^|\\s)"+l+"(?:$|\\s)");var o=d.getElementsByTagName("*");var j=[];var h;for(var g=0;(h=o[g])!=null;g++){var p=h.className;if(p&&p.indexOf(l)!=-1&&k.test(p)){j.push(h)}}return j}}var b=d.getElementsByClassName("panel");for(i=0;i<b.length;i++){if(b[i].id!=""){b[i].onmouseover=function(g){Panel.open(this)};b[i].onmouseout=function(g){Panel.close(this)}}}}};function EqTextArea(d,b,f,a,c){this.changed=false;this.orgtxt="";this.bArray_id=new Array();this.bArray_area=new Array();this.bArray_mode=new Array();this.bsize=0;this.updateExportArea=function(){for(i=0;i<this.bsize;i++){var h=this.exportEquation(this.bArray_mode[i]);var g=this.bArray_area[i].attributes;if(this.bArray_area[i].src!==undefined){this.bArray_area[i].src=h}else{if(this.bArray_area[i].value!==undefined){this.bArray_area[i].value=h}else{if(this.bArray_area[i].innerHTML!==undefined){this.bArray_area[i].innerHTML=h}}}}};this.addExportArea=function(j,h){var g=$$(j);if(g){this.bArray_id[this.bsize]=j;this.bArray_area[this.bsize]=g;this.bArray_mode[this.bsize]=h;this.bsize++}};this.changeExportArea=function(h,g){for(i=0;i<this.bsize;i++){if(h==this.bArray_id[i]){this.bArray_mode[i]=g;i=this.bsize}}};this.myUndo=0;this.myRedo=0;this.store_text=new Array();this.store_text.push("");this.addEvent=function(h,g){if(this.equation_input.addEventListener){this.equation_input.addEventListener(h,g,false)}else{this.equation_input.attachEvent("on"+h,g)}};this.set=function(k,h,l,g,j){if(k==undefined||k==""){k="equationview"}if(h==undefined||h==""){h="latex_formula"}if(l==undefined||l==""){l="equationcomment"}if(g==undefined||g==""){g="download"}if(j==undefined||j==""){j="intro"}this.equation_preview=$$(k);this.equation_input=$$(h);this.equation_comment=$$(l);this.equation_download=$$(g);this.intro_text=j;if(this.equation_input){this.addEvent("keydown",function(o){Panel.close();EqEditor.countclick();EqEditor.tabHandler(o)});this.addEvent("keyup",function(){EqEditor.textchanged();EqEditor.autorenderEqn(10)});this.addEvent("keypress",function(o){EqEditor.keyHandler(o)});if($$(this.intro_text)){$$(this.intro_text).onclick=function(o){EqEditor.targetArea.equation_input.focus();Opacity.fadeout(this.intro_text)}}}};this.cleartext=function(){this.equation_input.value="";this.equation_input.focus();this.changed=false;this.equation_preview.src=EDITOR_SRC+"/images/spacer.gif";Opacity.fadein(this.intro_text)};this.textchanged=function(){var g=this.getEquationStr();if(g.length==0){Opacity.fadein(this.intro_text)}else{Opacity.fadeout(this.intro_text)}if(g!=this.orgtxt){this.orgtxt=g;this.changed=true;return true}return false};this.auton=0;this.renderCountdown=function(){if(this.auton>0){this.auton--;var g=new Function(this.renderCountdown());setTimeout(g,100)}else{this.renderEqn(null)}};this.autorenderEqn=function(g){if(this.auton>0&&g>0){this.auton=g}else{this.auton=g;this.renderCountdown()}};this.insertText=function(r,v,l){var q="";if(v==1000){v=r.length-1}if(v==null){v=r.indexOf("{")+1;if(v<=0){r+=" ";v=r.length}else{if(r.charAt(v)!="}"){v=r.indexOf("}",v)+1}}}var w=(l==null)?v:l;var p;var x=this.equation_input;var o=(r.substring(1,5)=="left");if(document.selection){x.focus();var j=document.selection.createRange();p=this.equation_input.value.length+1;var g=j.duplicate();while(g.parentElement()==x&&g.move("character",1)==1){--p}if((o||w>=0)&&j.text.length){if(o){ins_point=7}else{ins_point=w}if(w==null){v=r.length+j.text.length+1}else{if(w<v){v+=j.text.length}}j.text=r.substring(0,ins_point)+j.text+r.substr(ins_point)}else{j.text=r}var t=x.createTextRange();t.collapse(true);v=p+v;v-=x.value.substr(0,v).split("\n").length-1;t.moveEnd("character",v);t.moveStart("character",v);t.select()}else{if(x.selectionStart||x.selectionStart=="0"){var u=x.selectionStart;var h=x.selectionEnd;var k=u+r.length;if((o||w>=0)&&h>u){if(o){ins_point=7}else{ins_point=w}if(w==null){v=r.length+h-u+1}else{if(w<v){v+=h-u}}r=r.substring(0,ins_point)+x.value.substring(u,h)+r.substr(ins_point)}x.value=x.value.substring(0,u)+r+x.value.substring(h,x.value.length);x.selectionStart=k;x.selectionEnd=k;x.focus();x.setSelectionRange(u+v,u+v)}else{x.value+=r}}this.textchanged();this.autorenderEqn(10);Panel.close(null);x.focus()};this.getEquationStr=function(){var g=this.equation_input.value;g=g.replace(/^\s+|\s+$/g,"");g=g.replace(/\s+/g," ");if(g.length>0){return EqEditor.getSize()+EqEditor.getCompressed()+EqEditor.getDPI()+EqEditor.getBG()+EqEditor.getFont()+g}return""};this.exportMessage=function(h){var g=$$("exportmessage");if(g){g.innerHTML=h}};this.exportEquation=function(g){var h=EqEditor.getFormat();switch(g){case"wp":this.exportMessage("Wordpress markup for this equation is:");text=EqEditor.getSize()+this.equation_input.value;return EqEditor.get_inline_wrap(text,"[latex]{$TEXT}[/latex]\n","$latex {$TEXT}$ ");break;case"phpBB":this.exportMessage("PHP Bulletin Board markup for this equation is:");text=this.getEquationStr();return("[tex]"+text+"[/tex]\n");break;case"tw":this.exportMessage("TiddlyWiki markup for this equation is:");text=this.getEquationStr();text=text.replace(/\[/g,"%5B");text=text.replace(/\]/g,"%5D");return("[img["+EQUATION_ENGINE+"/"+h+".latex?"+text+"]]");break;case"url":this.exportMessage("The URL link to this equation is:");text=this.getEquationStr();text=text.replace(/\s/g,"&space;");text=text.replace(/\+/g,"&plus;");return(EQUATION_ENGINE+"/"+h+".latex?"+text);break;case"urlencoded":this.exportMessage("The Encoded URL link to this equation is:");text=escape(this.getEquationStr());text=text.replace(/\+/g,"&plus;");return(EQUATION_ENGINE+"/"+h+".latex?"+text);break;case"pre":this.exportMessage("HTML code using pre-tags is:");text=EqEditor.getSize()+this.equation_input.value;return EqEditor.get_inline_wrap(text,'<pre xml:lang="latex">{$TEXT}</pre>\n','<code xml:lang="latex">{$TEXT}</code> ');break;case"doxygen":this.exportMessage("DOxygen markup for this equation is:");text=EqEditor.getSize()+this.equation_input.value;return EqEditor.get_inline_wrap(text,"\\f[{$TEXT}\\f]\n","\\f${$TEXT}\\f$ ");break;case"htmledit":this.exportMessage("HTML code to embed this equation into a web page is:");text=this.getEquationStr();if(h=="swf"){return('<a href="http://www.codecogs.com/eqnedit.php?latex='+text.replace(/\+/g,"@plus;")+'" target="_blank">'+AC_FL_RunContent("codebase","http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=8,0,0,0","width","600","height","100","src",(EQUATION_ENGINE+"/swf.latex?"+text),"quality","high","pluginspage","http://www.macromedia.com/go/getflashplayer","align","top","scale","showall","wmode","window","devicefont","false","bgcolor","#ffffff","menu","true","allowFullScreen","true","movie",(EQUATION_ENGINE+"/swf.latex?"+text))+"</a>")}else{return('<a href="http://www.codecogs.com/eqnedit.php?latex='+text.replace(/\+/g,"@plus;")+'" target="_blank"><img src="'+EQUATION_ENGINE+"/"+h+".latex?"+text+'" title="'+text+'" /></a>')}break;case"html":this.exportMessage("HTML code to embed this equation into a web page is:");text=this.getEquationStr();if(h=="swf"){return AC_FL_RunContent("codebase","http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=8,0,0,0","width","600","height","100","src",(EQUATION_ENGINE+"/swf.latex?"+text),"quality","high","pluginspage","http://www.macromedia.com/go/getflashplayer","align","top","scale","showall","wmode","window","devicefont","false","bgcolor","#ffffff","menu","true","allowFullScreen","true","movie",(EQUATION_ENGINE+"/swf.latex?"+text))}else{return('<img src="'+EQUATION_ENGINE+"/"+h+".latex?"+text+'" title="'+text+'" />')}break;default:this.exportMessage("LaTeX markup for this equation is:");text=EqEditor.getSize()+this.equation_input.value;return EqEditor.get_inline_wrap(text,"\\[{$TEXT}\\]\n","${$TEXT}$ ");break}return text};this.setdownload=function(g){if(this.equation_download){this.equation_download.innerHTML=g}};this.setcomment=function(g){if(this.equation_comment){this.equation_comment.innerHTML=g}};this.renderEqn=function(p){var l=this.equation_input.value;l=l.replace(/^\s+|\s+$/g,"");if(l.length==0){return true}var k=0;var h;for(h=0;h<l.length;h++){switch(l.charAt(h)){case"{":if(h==0||l[h-1]!="\\"){k++}break;case"}":if(h==0||l[h-1]!="\\"){k--}break}}var o;if(k==0){if($$("renderbutton")){$$("renderbutton").className="greybutton"}var g=this.equation_preview;l=this.getEquationStr();sval=l.replace(/"/g,'\\"').replace(/\s/g,"&space;");var j=EqEditor.getFormat();if(this.changed){this.setcomment("");switch(j){case"gif":case"png":case"svg":g.src=EQUATION_ENGINE+"/"+j+".latex?"+l;this.setdownload('<a href="'+EQUATION_ENGINE+"/"+j+".download?"+sval+'">Click here to Download Image ('+j.toUpperCase()+")</a>");break;case"pdf":g.src=EQUATION_ENGINE+"/gif.latex?"+l;this.setdownload('<a target="_blank" href="'+EQUATION_ENGINE+"/pdf.download?"+sval+'"><img src="images/pdf.jpg" width="30" height="30" align="middle" />Click here to Download Equation (PDF)</a>');break}this.updateExportArea()}}else{if(k<0){this.setcomment("<br/><span class=\"orange\">You have more <strong>closed '}' brackets</strong> than open '{' brackets</span>")}else{this.setcomment("<br/><span class=\"orange\">You have more <strong>open '{' brackets</strong> than closed '}' brackets</span>")}}this.changed=false};this.clickval=0;this.countclick=function(){var g=this.equation_input.value;this.clickval++;if(this.clickval>=3){this.clickval=0;if(this.myUndo==0||this.store_text[this.myUndo]!=g){if(this.myUndo>20){this.store_text.shift()}else{this.myUndo++}this.store_text[this.myUndo]=g}}this.myRedo=0};this.undo=function(h){if(this.myRedo==0){if(this.myUndo>20){this.store_text.shift()}else{this.myUndo++}this.store_text[this.myUndo]=this.equation_input.value}if(this.myRedo<this.myUndo){this.myRedo++;if(this.myRedo==this.myUndo&&$$("undobutton")){$$("undobutton").src=EDITOR_SRC+"/images/buttons/undo-x.gif"}var g=$$("redobutton");if(g){g.src=EDITOR_SRC+"/images/buttons/redo.gif"}}else{return}z=this.store_text.length-this.myRedo-1;if(this.store_text[z]){this.equation_input.value=this.store_text[z]}else{this.equation_input.value=this.store_text[0]}this.equation_input.focus()};this.redo=function(h){if(this.myRedo>0){this.myRedo--;if(this.myRedo==0&&$$("redobutton")){$$("redobutton").src=EDITOR_SRC+"/images/buttons/redo-x.gif"}var g=$$("undobutton");if(g){g.src=EDITOR_SRC+"/images/buttons/undo.gif"}}else{return}var j=this.store_text.length-this.myRedo-1;if(this.store_text[j]){this.equation_input.value=this.store_text[j]}else{this.equation_input.value=this.store_text[0]}this.equation_input.focus()};this.Export=function(g,h){g(this.exportEquation(h));Example.add_history(this.equation_input.value);Example.hide()};this.load=function(o){var l=o;if(l!==undefined){l=unescape(l);l=l.replace(/@plus;/g,"+");l=l.replace(/&plus;/g,"+");l=l.replace(/&space;/g," ");var h,g,k;do{k=0;l=l.replace(new RegExp("^[\\s]+","g"),"");h=l.indexOf(" ");var j=l.indexOf("}");if(j!=-1&&(j<h||h==-1)){h=j}if(h!=-1){g=l.substr(0,h);if(EqEditor.setSelIndx("fontsize",g)){k=1}if(g=="\\inline"){$$("inline").checked=true;$$("compressed").checked=true;k=1}if(g.substr(0,4)=="\\bg_"&&EqEditor.setSelIndx("bg",g.substr(4))){k=1}if(g.substr(0,4)=="\\fn_"&&EqEditor.setSelIndx("font",g.substr(4))){k=1}if(g.substr(0,5)=="\\dpi{"&&EqEditor.setSelIndx("dpi",g.substr(5))){k=1}if(k){l=l.substr(h+1)}}}while(k);if(l.length>0){this.equation_input.value=l;this.textchanged();this.renderEqn(null);Opacity.fadeout(this.intro_text)}}};if(d!==undefined){this.set(d,b,f,a,c)}}var gallery=null;var Example={lastbutton:null,load_json:function(f,h){var a=$$("load_json");if(a!=null){a.parentNode.removeChild(a);delete a}var g=new Date();h="rand="+g.getTime()+"&"+h;var c=document.getElementsByTagName("head")[0];var b=document.createElement("script");b.src=FAVORITE_ENGINE+"/"+f+"?"+h;b.id="load_json";c.appendChild(b)},add_fav:function(){text=EqEditor.getEquation();if(text!=""){this.load_json("favorite_json.php","sid="+EqEditor.SID+"&add&eqn="+escape(text.replace(/\+/g,"@plus;")));setTimeout("Example.show(null, 'fav')",200)}},del_fav:function(a){this.load_json("favorite_json.php","sid="+EqEditor.SID+"&delete="+a);setTimeout("Example.show(null, 'fav')",200)},add_history:function(a){if(a!=""){this.load_json("history_json.php","sid="+EqEditor.SID+"&add&eqn="+escape(a.replace(/\+/g,"@plus;")))}},show:function(a,b){$$("bar1").style.display="none";$$("bar2").style.display="none";if($$("photos")){$$("photos").innerHTML=""}if(a!==null){if(this.lastbutton!==null){this.lastbutton.className="lightbluebutton"}a.className="greybutton";this.lastbutton=a}gallery=new Scroll();if(b=="fav"||b=="history"){var c=new Date();gallery.init("photos","leftarrow","rightarrow","overview",FAVORITE_ENGINE+"/example_json.php?fn=gallery&rand="+c.getTime()+"&sid="+EqEditor.SID)}else{gallery.init("photos","leftarrow","rightarrow","overview",FAVORITE_ENGINE+"/example_json.php?fn=gallery")}gallery.visible_num=1;gallery.new_offset=5;gallery.maxpanels=1;gallery.set_width(600,100,60);gallery.set_subtext("&type="+b);gallery.add_panel();gallery.setarrow();gallery.setoverview()},hide:function(){$$("bar2").style.display="none";$$("bar1").style.display="none";if(this.lastbutton!==null){this.lastbutton.className="lightbluebutton"}this.lastbutton=null}};var ExportButton={bArray_id:new Array(),bArray_area:new Array(),bArray_mode:new Array(),bArray_fn:new Array(),bsize:0,state:function(a){for(i=0;i<this.bsize;i++){if(a){this.bArray_id[i].className="lightbluebutton"}else{this.bArray_id[i].className="greybutton"}}},add:function(c,d,g,f){var b=$$(d);if(b){this.bArray_id[this.bsize]=b;this.bArray_area[this.bsize]=c;this.bArray_mode[this.bsize]=f;this.bArray_fn[this.bsize]=g;b.onclick=function(h){var a=this.exportid;ExportButton.bArray_area[a].Export(ExportButton.bArray_fn[a],ExportButton.bArray_mode[a])};b.exportid=this.bsize;this.bsize++}}};var EqEditor={SID:0,copy_button:null,key_text:"",format:"gif",setSelIndx:function(d,a){var c=$$(d);if(c&&a){for(var b=0;b<c.options.length;b++){if(c.options[b].value==a){c.options[b].selected=true;return true}}}return false},targetArray:new Array(),targetSize:0,targetArea:null,curTarget:0,changeExportArea:function(b,a){for(i=0;i<this.targetSize;i++){this.targetArray[i].changeExportArea(b,a)}},autorenderEqn:function(a){this.targetArea.autorenderEqn(a)},change:function(a){if(a!=this.curTarget){this.curTarget=a;this.key_rext=""}this.targetArea=this.targetArray[a]},add:function(b,a){this.targetArray[this.targetSize]=b;b.equation_input.onfocus=new Function("EqEditor.change("+this.targetSize+");");if(a){if(window.addEventListener){window.addEventListener("resize",new Function("EqEditor.resize("+this.targetSize+");"),false)}else{window.attachEvent("onresize",new Function("EqEditor.resize("+this.targetSize+");"))}EqEditor.resize(this.targetSize)}if(this.targetSize==0){b.equation_input.focus()}this.targetSize++},editor_id:null,embed:function(f,c,b,d){this.editor_id=f;var a="http://latex.codecogs.com/editor_embedded_json.php?id="+f+"&SID="+c+"&design="+b;if(d!=undefined&&d!=""){a+="&lang="+d}document.write('<script src="'+a+'" type="text/javascript"><\/script>')},moveto:function(c){if(c!=this.editor_id){var a=$$(c);while($$(this.editor_id).childNodes[0]){var b=$$(this.editor_id).childNodes[0];b.parentNode.removeChild(b);a.appendChild(b)}this.editor_id=c}},targetFn:null,copyToTarget:function(a){if(this.targetFn!==null){this.targetFn(a)}},init:function(g,c,b,a){Panel.init("hover",a);if(g==""){this.SID=Cookie.get("eqeditor");if(!this.SID){var f=new Date();this.SID=f.getTime();Cookie.set("eqeditor",g,1000)}}else{this.SID=g}if(c!==undefined){this.add(c,b);this.targetArea=c}this.setSelIndx("format",Cookie.get("format"));this.setSelIndx("font",Cookie.get("font"));this.setSelIndx("fontsize",Cookie.get("fontsize"));this.setSelIndx("dpi",Cookie.get("dpi"));this.setSelIndx("bg",Cookie.get("bg"));$onclick("undobutton",function(d){EqEditor.targetArea.undo()});$onclick("redobutton",function(d){EqEditor.targetArea.redo()});$onchange("bg",function(h){var d=$$("bg");if(d){Cookie.set("bg",d.value,10)}EqEditor.update()});$onchange("dpi",function(h){var j=$$("dpi");if(j){Cookie.set("dpi",j.value,10)}EqEditor.update()});$onchange("font",function(h){var d=$$("font");if(d){Cookie.set("font",d.value,10)}EqEditor.update()});$onchange("format",function(h){var d=false;EqEditor.setFormat(EqEditor.getFormat())});$onchange("fontsize",function(){var d=$$("fontsize");if(d){Cookie.set("fontsize",d.value,10)}EqEditor.update()});$onclick("inline",function(h){var d=$$("compressed");if(d){d.checked=this.checked}EqEditor.update()});$onclick("compressed",function(d){EqEditor.update()})},textchanged:function(){if(this.targetArea.textchanged()){ExportButton.state(true)}},update:function(){this.targetArea.textchanged();this.targetArea.renderEqn(null)},load:function(a){if(this.targetArea!=null){this.targetArea.load(a)}},insert:function(a,c,b){if(this.targetArea!=null){this.targetArea.insertText(a,c,b);ExportButton.state(true)}},cleartext:function(){this.targetArea.cleartext();ExportButton.state(false)},setFormat:function(c){EqEditor.format=c;switch(c){case"gif":action=false;break;case"png":action=false;break;case"pdf":action=true;break;case"swf":action=true;break;case"emf":action=true;break}Cookie.set("format",c,10);var b=$$("dpi");if(b){b.disabled=action;b.readonly=action}b=$$("bg");if(b){b.disabled=action;b.readonly=action}EqEditor.targetArea.changed=true;EqEditor.targetArea.renderEqn(null)},getEquation:function(){if(this.targetArea!=null){return this.targetArea.getEquationStr()}},getFormat:function(){var b=$$("format");if(b){return b.value}return EqEditor.format},getFont:function(){var b=$$("font");if(b&&b.value!=""){return"\\fn_"+b.value+" "}return""},getSize:function(){var b=$$("fontsize");if(b&&b.value!=""){return b.value+" "}return""},getDPI:function(){var b=$$("dpi");if(b&&b.value!="110"){return"\\dpi{"+b.value+"} "}return""},getBG:function(){var d=$$("bg");if(d){var c=d.value.toLowerCase();if(c!="transparent"){return"\\bg_"+c+" "}}return""},getCompressed:function(){var b=$$("compressed");if(b&&b.checked){return"\\inline "}return""},get_inline_wrap:function(h,f,g){var d=$$("inline");if(d){var c=$$("compressed");if(d.checked){if(!c.checked){h="\\displaystyle "+h}return g.replace("{$TEXT}",h)}else{if(c.checked){h="\\inline "+h}return f.replace("{$TEXT}",h)}}return f.replace("{$TEXT}",h)},extendchar:null,countclick:function(){this.targetArea.countclick();var b=$$("redobutton");if(b){b.src=EDITOR_SRC+"/images/buttons/redo-x.gif"}b=$$("undobutton");if(b){b.src=EDITOR_SRC+"/images/buttons/undo.gif"}},tabHandler:function(h){var g=9;var k=this.targetArea.equation_input;if(h.keyCode==g){if(document.selection){var f=document.selection.createRange();i=k.value.length+1;var d=f.duplicate();while(d.parentElement()==k&&d.move("character",1)==1){--i}startPos=i;if(startPos==k.value.length){return true}}else{startPos=k.selectionStart;if(startPos==k.value.length){return true}}var p=k.value.indexOf("{",startPos);if(p==-1){p=k.value.length}else{p++}var o=k.value.indexOf("&",startPos);if(o==-1){o=k.value.length}else{o++}var j=k.value.indexOf("\\\\",startPos);if(j==-1){j=k.value.length}else{j+=2}var l=Math.min(Math.min(p,o),j);if(document.selection){range=k.createTextRange();range.collapse(true);l-=k.value.substr(0,l).split("\n").length-1;range.moveEnd("character",l);range.moveStart("character",l);range.select()}else{k.setSelectionRange(l,l)}if(h.preventDefault){h.preventDefault()}else{h.returnValue=false}return false}},backCursor:function(a){if(document.selection){a.focus();sel=document.selection.createRange();if(sel.text.length>0){sel.text=""}else{sel.moveEnd("character",1);sel.text=""}sel.select()}else{if(a.selectionStart||a.selectionStart=="0"){s=a.selectionStart;e=a.selectionEnd;a.value=a.value.substring(0,s)+a.value.substring(e+1,a.value.length);a.selectionStart=s;a.selectionEnd=s;a.focus()}}},extendkey:function(a){switch(this.key_text){case"\\left":this.insert(" \\right "+a,0);break;case"\\frac":case"\\tfrac":if(a=="}"){this.insert("}{}",0)}break;case"\\begin":if(a=="}"){this.insert("} \\end{}",0)}break;default:this.insert(a,0)}this.extendchar=a},keyHandler:function(c){var a;if(window.event){a=window.event.keyCode}else{if(c){a=c.which}}var b=String.fromCharCode(a);if(b==this.extendchar){this.backCursor(this.equation_input)}this.extendchar=null;switch(b){case"{":this.extendkey("}");break;case"[":this.extendkey("]");break;case"(":this.extendkey(")");break;case'"':this.extendkey('"');break}if(b!=" "){if(b=="\\"){this.key_text="\\"}else{if(!b.match(/^[a-zA-Z]$/)){this.key_text=""}else{this.key_text+=b}}}},addText:function(c,b,a){var g=c.getElementById(b);if(c.selection){g.focus();sel=c.selection.createRange();sel.text=a}else{var h=g.scrollTop;if(g.selectionStart||g.selectionStart=="0"){var f=g.selectionStart;var d=g.selectionEnd;var j=f+a.length;g.value=g.value.substring(0,f)+a+g.value.substring(d,g.value.length);pos=a.length+d-f;g.selectionStart=j;g.selectionEnd=j;g.focus();g.setSelectionRange(f+pos,f+pos)}else{g.value+=a}g.scrollTop=h}},makeEquationsMatrix:function(a,c,b){if(c===undefined){c=false}if(b===undefined){c=false}eqns="\\begin{"+a+((c)?"":"*")+"}";eqi="\n &"+((c)?" ":"= ")+((b)?"\\text{ if } x= ":"");eqEnd="\n\\end{"+a+((c)?"":"*")+"}";i=0;dim=prompt("Enter the number of lines:","");if(dim!=""&&dim!==null){n=parseInt(dim);if(!isNaN(n)){for(i=1;i<=n-1;i++){eqns=eqns+(eqi+"\\\\ ")}eqns=(eqns+eqi)+eqEnd;this.insert(eqns,a.length+((c)?0:1)+9)}}},makeArrayMatrix:function(d,j,a){var f=j+"\\begin{"+d+"matrix}";var h="\n";var c="\n\\end{"+d+"matrix}"+a;var b=0;var g=prompt('Enter the array dimensions separated by a comma (e.g. "2,3" for 2 rows and 3 columns):',"");if(g!==""&&g!==null){g=g.split(",");m=parseInt(g[0]);n=parseInt(g[1]);if(!isNaN(m)&&!isNaN(n)){for(b=2;b<=n;b++){h=h+" & "}for(b=1;b<=m-1;b++){f=f+h+"\\\\ "}f=f+h+c;this.insert(f,d.length+j.length+15)}}},resize:function(b){var a,c;if(self.innerHeight){c=self.innerHeight}else{if(document.documentElement&&document.documentElement.clientHeight){c=document.documentElement.clientHeight}else{if(document.body){c=document.body.clientHeight}}}this.targetArray[b].equation_input.style.height=parseInt(Math.max((c-200)/3,40))+"px"}};var oDiv=document.createElement("div");var oImg=document.createElement("img");var Scroll=function(){};Scroll.prototype={init:function(d,a,c,g,b){this.panels=0;this.maxpanels=0;this.speed=10;this.pause=2;this.visible=0;this.visible_num=2;this.layers=new Array();this.layers_offset=new Array();this.new_offset=0;this.subtext="";this.vertical=false;this.left_arrow=document.getElementById(a);this.right_arrow=document.getElementById(c);this.maindiv=document.getElementById(d);if(g!==""){this.overview=document.getElementById(g)}else{this.overview=null}if(b.indexOf("_json")>-1){this.ajax_php=null;this.json_php=b;this.ajax_response_fn=null}else{this.ajax_php=b;this.json_php=null;var f=this;this.ajax_response_fn=function(){f.add_panel_response()}}},set_subtext:function(a){this.subtext=a},set_width:function(b,a,c){this.width=b;this.height=a;this.speed=c;if(this.vertical){this.step=this.step_total=this.height/this.speed}else{this.step=this.step_total=this.width/this.speed}},add:function(a){var b=this.new_offset;if(this.vertical){this.new_offset+=this.height}else{this.new_offset+=this.width}this.layers[this.panels]=a;this.layers_offset[this.panels]=b;this.panels++;if(this.panels>this.maxpanels){this.maxpanels=this.panels}a.style.position="absolute";if(this.vertical){a.style.top=b+"px"}else{a.style.left=b+"px"}},add_id:function(b){var a=document.getElementById(b);if(a){this.add(a)}},add_panel_div:function(a){this.add(a);this.maindiv.appendChild(a);if(this.visible+this.visible_num>=this.panels){this.add_panel()}},add_panel_response:function(){if(req.readyState==4){if(req.status==200&&req.responseText.length>0){var a=oDiv.cloneNode(false);a.innerHTML=req.responseText;this.add_panel_div(a)}this.setarrow();this.setoverview()}},add_panel_json:function(b){if(b.length>0){var a=oDiv.cloneNode(false);a.innerHTML=b;this.add_panel_div(a)}this.setarrow();this.setoverview()},add_panel:function(){if(this.ajax_php&&this.ajax_response_fn){if(this.ajax_php.indexOf("?")==-1){loadXMLDoc(this.ajax_php+"?panel="+this.panels+this.subtext,this.ajax_response_fn)}else{loadXMLDoc(this.ajax_php+"&panel="+this.panels+this.subtext,this.ajax_response_fn)}}else{if(this.json_php){var b=this.panels;var d=document.getElementsByTagName("head")[0];var c=document.createElement("script");if(this.json_php.indexOf("?")==-1){c.src=this.json_php+"?panel="+b+this.subtext}else{c.src=this.json_php+"&panel="+b+this.subtext}d.appendChild(c)}}},redraw:function(){if(this.json_php||(this.ajax_php&&this.ajax_response_fn)){this.panels=0;this.visible=0;this.new_offset=0;while(this.maindiv.firstChild){this.maindiv.removeChild(this.maindiv.firstChild)}}if(this.ajax_php&&this.ajax_response_fn){var f=this;if(this.ajax_php.indexOf("?")==-1){loadXMLDoc(f.ajax_php+"?panel="+this.panels+this.subtext,f.ajax_response_fn)}else{loadXMLDoc(f.ajax_php+"&panel="+this.panels+this.subtext,f.ajax_response_fn)}}else{if(this.json_php){var b=this.panels;var d=document.getElementsByTagName("head")[0];var c=document.createElement("script");if(this.json_php.indexOf("?")==-1){c.src=this.json_php+"?panel="+b+this.subtext}else{c.src=this.json_php+"&panel="+b+this.subtext}d.appendChild(c)}}},move:function(a){this.new_offset+=a;for(var c=0;c<this.panels;c++){this.layers_offset[c]+=a;if(this.vertical){this.layers[c].style.top=this.layers_offset[c]+"px"}else{this.layers[c].style.left=this.layers_offset[c]+"px"}}this.step++;if(this.step<this.step_total){var b=this;window.setTimeout(function(){b.move(a)},this.pause)}},setoverview:function(){if(this.overview!==null){this.overview.innerHTML="";var a="";var b=this;for(i=0;i<this.maxpanels;i++){newimg=oImg.cloneNode(false);newimg.className="overview";if(i>=this.visible&&i<(this.visible+this.visible_num)){newimg.src="http://www.codecogs.com/images/scroll/soliddot.gif"}else{newimg.src="http://www.codecogs.com/images/scroll/emptydot.gif";newimg.i=i;newimg.onclick=function(){b.jump(this)}}this.overview.appendChild(newimg)}}},setarrow:function(){this.left_arrow.src="http://www.codecogs.com/images/scroll/"+(this.visible<=0?"leftarrow_grey.gif":"leftarrow.gif");this.right_arrow.src="http://www.codecogs.com/images/scroll/"+(this.visible>=(this.panels-1)?"rightarrow_grey.gif":"rightarrow.gif")},jump:function(a){if(this.step==this.step_total){panel=a.i;var b=panel-this.visible;this.step=this.step_total-Math.abs(b)*this.step_total;if(this.visible>panel){this.move(this.speed)}else{this.move(-this.speed)}this.visible+=b;if(this.visible+this.visible_num>=this.panels){this.add_panel()}else{this.setarrow();this.setoverview()}}},left:function(){if(this.step==this.step_total){if(this.visible<(this.panels-1)){this.visible++;this.step=0;this.move(-this.speed);if(this.visible+this.visible_num>=this.panels){this.add_panel()}else{this.setarrow();this.setoverview()}}}},right:function(){if(this.step==this.step_total){if(this.visible>0){this.step=0;this.move(this.speed);this.visible--;this.setarrow();this.setoverview()}}},subsearch:function(a){if(a!==""){this.subtext=("&subtext="+a)}else{this.subtext=""}this.redraw()}};

/**
 * Jquery integration plugin.
 *
 * @class tinymce.core.JqueryIntegration
 * @private
 */
!function(){var f,c,u,p,d,s=[];d="undefined"!=typeof global?global:window,p=d.jQuery;function v(){
// Reference to tinymce needs to be lazily evaluated since tinymce
// might be loaded through the compressor or other means
return d.tinymce}p.fn.tinymce=function(o){var e,t,i,l=this,r="";
// No match then just ignore the call
if(!l.length)return l;
// Get editor instance
if(!o)return v()?v().get(l[0].id):null;l.css("visibility","hidden");function n(){var a=[],c=0;
// Apply patches to the jQuery object, only once
u||(m(),u=!0),
// Create an editor instance for each matched node
l.each(function(e,t){var n,i=t.id,r=o.oninit;
// Generate unique id for target element if needed
i||(t.id=i=v().DOM.uniqueId()),
// Only init the editor once
v().get(i)||(
// Create editor instance and render it
n=v().createEditor(i,o),a.push(n),n.on("init",function(){var e,t=r;l.css("visibility",""),
// Run this if the oninit setting is defined
// this logic will fire the oninit callback ones each
// matched editor instance is initialized
r&&++c==a.length&&("string"==typeof t&&(e=-1===t.indexOf(".")?null:v().resolve(t.replace(/\.\w+$/,"")),t=v().resolve(t)),
// Call the oninit function with the object
t.apply(e||v(),a))}))}),
// Render the editor instances in a separate loop since we
// need to have the full editors array used in the onInit calls
p.each(a,function(e,t){t.render()})}
// Load TinyMCE on demand, if we need to
if(d.tinymce||c||!(e=o.script_url))
// Delay the init call until tinymce is loaded
1===c?s.push(n):n();else{c=1,t=e.substring(0,e.lastIndexOf("/")),
// Check if it's a dev/src version they want to load then
// make sure that all plugins, themes etc are loaded in source mode as well
-1!=e.indexOf(".min")&&(r=".min"),
// Setup tinyMCEPreInit object this will later be used by the TinyMCE
// core script to locate other resources like CSS files, dialogs etc
// You can also predefined a tinyMCEPreInit object and then it will use that instead
d.tinymce=d.tinyMCEPreInit||{base:t,suffix:r},
// url contains gzip then we assume it's a compressor
-1!=e.indexOf("gzip")&&(i=o.language||"en",e=e+(/\?/.test(e)?"&":"?")+"js=true&core=true&suffix="+escape(r)+"&themes="+escape(o.theme||"modern")+"&plugins="+escape(o.plugins||"")+"&languages="+(i||""),
// Check if compressor script is already loaded otherwise setup a basic one
d.tinyMCE_GZ||(d.tinyMCE_GZ={start:function(){function n(e){v().ScriptLoader.markDone(v().baseURI.toAbsolute(e))}
// Add core languages
n("langs/"+i+".js"),
// Add themes with languages
n("themes/"+o.theme+"/theme"+r+".js"),n("themes/"+o.theme+"/langs/"+i+".js"),
// Add plugins with languages
p.each(o.plugins.split(","),function(e,t){t&&(n("plugins/"+t+"/plugin"+r+".js"),n("plugins/"+t+"/langs/"+i+".js"))})},end:function(){}}));var a=document.createElement("script");a.type="text/javascript",a.onload=a.onreadystatechange=function(e){e=e||window.event,2===c||"load"!=e.type&&!/complete|loaded/.test(a.readyState)||(v().dom.Event.domLoaded=1,c=2,
// Execute callback after mainscript has been loaded and before the initialization occurs
o.script_loaded&&o.script_loaded(),n(),p.each(s,function(e,t){t()}))},a.src=e,document.body.appendChild(a)}return l},
// Add :tinymce pseudo selector this will select elements that has been converted into editor instances
// it's now possible to use things like $('*:tinymce') to get all TinyMCE bound elements.
p.extend(p.expr[":"],{tinymce:function(e){var t;return!!(e.id&&"tinymce"in d&&(t=v().get(e.id))&&t.editorManager===v())}});
// This function patches internal jQuery functions so that if
// you for example remove an div element containing an editor it's
// automatically destroyed by the TinyMCE API
var m=function(){function r(e){
// If the function is remove
"remove"===e&&this.each(function(e,t){var n=u(t);n&&n.remove()}),this.find("span.mceEditor,div.mceEditor").each(function(e,t){var n=v().get(t.id.replace(/_parent$/,""));n&&n.remove()})}function o(i){var e,t=this;
// Handle set value
/*jshint eqnull:true */if(null!=i)r.call(t),
// Saves the contents before get/set value of textarea/div
t.each(function(e,t){var n;(n=v().get(t.id))&&n.setContent(i)});else if(0<t.length&&(e=v().get(t[0].id)))return e.getContent()}function l(e){return!!(e&&e.length&&d.tinymce&&e.is(":tinymce"))}
// Removes any child editor instances by looking for editor wrapper elements
var u=function(e){var t=null;return e&&e.id&&d.tinymce&&(t=v().get(e.id)),t},s={};
// Loads or saves contents from/to textarea if the value
// argument is defined it will set the TinyMCE internal contents
// Patch some setter/getter functions these will
// now be able to set/get the contents of editor instances for
// example $('#editorid').html('Content'); will update the TinyMCE iframe instance
p.each(["text","html","val"],function(e,t){var a=s[t]=p.fn[t],c="text"===t;p.fn[t]=function(e){var t=this;if(!l(t))return a.apply(t,arguments);if(e!==f)return o.call(t.filter(":tinymce"),e),a.apply(t.not(":tinymce"),arguments),t;// return original set for chaining
var i="",r=arguments;return(c?t:t.eq(0)).each(function(e,t){var n=u(t);i+=n?c?n.getContent().replace(/<(?:"[^"]*"|'[^']*'|[^'">])*>/g,""):n.getContent({save:!0}):a.apply(p(t),r)}),i}}),
// Makes it possible to use $('#id').append("content"); to append contents to the TinyMCE editor iframe
p.each(["append","prepend"],function(e,t){var n=s[t]=p.fn[t],r="prepend"===t;p.fn[t]=function(i){var e=this;return l(e)?i!==f?("string"==typeof i&&e.filter(":tinymce").each(function(e,t){var n=u(t);n&&n.setContent(r?i+n.getContent():n.getContent()+i)}),n.apply(e.not(":tinymce"),arguments),e):void 0:n.apply(e,arguments)}}),
// Makes sure that the editor instance gets properly destroyed when the parent element is removed
p.each(["remove","replaceWith","replaceAll","empty"],function(e,t){var n=s[t]=p.fn[t];p.fn[t]=function(){return r.call(this,t),n.apply(this,arguments)}}),s.attr=p.fn.attr,
// Makes sure that $('#tinymce_id').attr('value') gets the editors current HTML contents
p.fn.attr=function(e,t){var n=this,i=arguments;if(!e||"value"!==e||!l(n))return s.attr.apply(n,i);if(t!==f)return o.call(n.filter(":tinymce"),t),s.attr.apply(n.not(":tinymce"),i),n;// return original set for chaining
var r=n[0],a=u(r);return a?a.getContent({save:!0}):s.attr.apply(p(r),i)}}}();
﻿/*!
 * jQuery blockUI plugin
 * Version 2.33 (29-MAR-2010)
 * @requires jQuery v1.2.3 or later
 *
 * Examples at: http://malsup.com/jquery/block/
 * Copyright (c) 2007-2008 M. Alsup
 * Dual licensed under the MIT and GPL licenses:
 * http://www.opensource.org/licenses/mit-license.php
 * http://www.gnu.org/licenses/gpl.html
 *
 * Thanks to Amir-Hossein Sobhi for some excellent contributions!
 */

;(function($) {

if (/1\.(0|1|2)\.(0|1|2)/.test($.fn.jquery) || /^1.1/.test($.fn.jquery)) {
	alert('blockUI requires jQuery v1.2.3 or later!  You are using v' + $.fn.jquery);
	return;
}

$.fn._fadeIn = $.fn.fadeIn;

var noOp = function() {};

// this bit is to ensure we don't call setExpression when we shouldn't (with extra muscle to handle
// retarded userAgent strings on Vista)
var mode = document.documentMode || 0;
var setExpr = false;//$.browser.msie && (($.browser.version < 8 && !mode) || mode < 8);
var ie6 = false;//$.browser.msie && /MSIE 6.0/.test(navigator.userAgent) && !mode;

// global $ methods for blocking/unblocking the entire page
$.blockUI   = function(opts) { install(window, opts); };
$.unblockUI = function(opts) { remove(window, opts); };

// convenience method for quick growl-like notifications  (http://www.google.com/search?q=growl)
$.growlUI = function(title, message, timeout, onClose) {
	var $m = $('<div class="growlUI"></div>');
	if (title) $m.append('<h1>'+title+'</h1>');
	if (message) $m.append('<h2>'+message+'</h2>');
	if (timeout == undefined) timeout = 3000;
	$.blockUI({
		message: $m, fadeIn: 700, fadeOut: 1000, centerY: false,
		timeout: timeout, showOverlay: false,
		onUnblock: onClose, 
		css: $.blockUI.defaults.growlCSS
	});
};

// plugin method for blocking element content
$.fn.block = function(opts) {
	return this.unblock({ fadeOut: 0 }).each(function() {
		if ($.css(this,'position') == 'static')
			this.style.position = 'relative';
		if ($.browser.msie)
			this.style.zoom = 1; // force 'hasLayout'
		install(this, opts);
	});
};

// plugin method for unblocking element content
$.fn.unblock = function(opts) {
	return this.each(function() {
		remove(this, opts);
	});
};

$.blockUI.version = 2.33; // 2nd generation blocking at no extra cost!

// override these in your code to change the default behavior and style
$.blockUI.defaults = {
	// message displayed when blocking (use null for no message)
	message:  '<h1>Please wait...</h1>',

	title: null,	  // title string; only used when theme == true
	draggable: true,  // only used when theme == true (requires jquery-ui.js to be loaded)
	
	theme: false, // set to true to use with jQuery UI themes
	
	// styles for the message when blocking; if you wish to disable
	// these and use an external stylesheet then do this in your code:
	// $.blockUI.defaults.css = {};
	css: {
		padding:	0,
		margin:		0,
		width:		'30%',
		top:		'40%',
		left:		'35%',
		textAlign:	'center',
		color:		'#000',
		border:		'3px solid #aaa',
		backgroundColor:'#fff',
		cursor:		'wait'
	},
	
	// minimal style set used when themes are used
	themedCSS: {
		width:	'30%',
		top:	'40%',
		left:	'35%'
	},

	// styles for the overlay
	overlayCSS:  {
		background: '#fff url(/images/dashboard/common/spinner_blue.gif) center center no-repeat',
		opacity:	  	 0.8,
		cursor:		  	 'wait'
	},

	// styles applied when using $.growlUI
	growlCSS: {
		width:  	'350px',
		top:		'10px',
		left:   	'',
		right:  	'10px',
		border: 	'none',
		padding:	'5px',
		opacity:	0.6,
		cursor: 	'default',
		color:		'#fff',
		backgroundColor: '#000',
		'-webkit-border-radius': '10px',
		'-moz-border-radius':	 '10px',
		'border-radius': 		 '10px'
	},
	
	// IE issues: 'about:blank' fails on HTTPS and javascript:false is s-l-o-w
	// (hat tip to Jorge H. N. de Vasconcelos)
	iframeSrc: /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank',

	// force usage of iframe in non-IE browsers (handy for blocking applets)
	forceIframe: false,

	// z-index for the blocking overlay
	baseZ: 1000,

	// set these to true to have the message automatically centered
	centerX: true, // <-- only effects element blocking (page block controlled via css above)
	centerY: true,

	// allow body element to be stetched in ie6; this makes blocking look better
	// on "short" pages.  disable if you wish to prevent changes to the body height
	allowBodyStretch: true,

	// enable if you want key and mouse events to be disabled for content that is blocked
	bindEvents: true,

	// be default blockUI will supress tab navigation from leaving blocking content
	// (if bindEvents is true)
	constrainTabKey: true,

	// fadeIn time in millis; set to 0 to disable fadeIn on block
	fadeIn:  100,

	// fadeOut time in millis; set to 0 to disable fadeOut on unblock
	fadeOut:  100,

	// time in millis to wait before auto-unblocking; set to 0 to disable auto-unblock
	timeout: 0,

	// disable if you don't want to show the overlay
	showOverlay: true,

	// if true, focus will be placed in the first available input field when
	// page blocking
	focusInput: true,

	// suppresses the use of overlay styles on FF/Linux (due to performance issues with opacity)
	applyPlatformOpacityRules: true,
	
	// callback method invoked when fadeIn has completed and blocking message is visible
	onBlock: null,

	// callback method invoked when unblocking has completed; the callback is
	// passed the element that has been unblocked (which is the window object for page
	// blocks) and the options that were passed to the unblock call:
	//	 onUnblock(element, options)
	onUnblock: null,

	// don't ask; if you really must know: http://groups.google.com/group/jquery-en/browse_thread/thread/36640a8730503595/2f6a79a77a78e493#2f6a79a77a78e493
	quirksmodeOffsetHack: 4
};

// private data and functions follow...

var pageBlock = null;
var pageBlockEls = [];

function install(el, opts) {
	var full = (el == window);
	var msg = opts && opts.message !== undefined ? opts.message : undefined;
	opts = $.extend({}, $.blockUI.defaults, opts || {});
	opts.overlayCSS = $.extend({}, $.blockUI.defaults.overlayCSS, opts.overlayCSS || {});
	var css = $.extend({}, $.blockUI.defaults.css, opts.css || {});
	var themedCSS = $.extend({}, $.blockUI.defaults.themedCSS, opts.themedCSS || {});
	msg = msg === undefined ? opts.message : msg;

	// remove the current block (if there is one)
	if (full && pageBlock)
		remove(window, {fadeOut:0});

	// if an existing element is being used as the blocking content then we capture
	// its current place in the DOM (and current display style) so we can restore
	// it when we unblock
	if (msg && typeof msg != 'string' && (msg.parentNode || msg.jquery)) {
		var node = msg.jquery ? msg[0] : msg;
		var data = {};
		$(el).data('blockUI.history', data);
		data.el = node;
		data.parent = node.parentNode;
		data.display = node.style.display;
		data.position = node.style.position;
		if (data.parent)
			data.parent.removeChild(node);
	}

	var z = opts.baseZ;

	// blockUI uses 3 layers for blocking, for simplicity they are all used on every platform;
	// layer1 is the iframe layer which is used to supress bleed through of underlying content
	// layer2 is the overlay layer which has opacity and a wait cursor (by default)
	// layer3 is the message content that is displayed while blocking

	var lyr1 = ($.browser.msie || opts.forceIframe) 
		? $('<iframe class="blockUI" style="z-index:'+ (z++) +';display:none;border:none;margin:0;padding:0;position:absolute;width:100%;height:100%;top:0;left:0" src="'+opts.iframeSrc+'"></iframe>')
		: $('<div class="blockUI" style="display:none"></div>');
	var lyr2 = $('<div class="blockUI blockOverlay" style="z-index:'+ (z++) +';display:none;border:none;margin:0;padding:0;width:100%;height:100%;top:0;left:0"></div>');
	
	var lyr3, s;
	if (opts.theme && full) {
		s = '<div class="blockUI blockMsg blockPage ui-dialog ui-widget ui-corner-all" style="z-index:'+z+';display:none;position:fixed">' +
				'<div class="ui-widget-header ui-dialog-titlebar blockTitle">'+(opts.title || '&nbsp;')+'</div>' +
				'<div class="ui-widget-content ui-dialog-content"></div>' +
			'</div>';
	}
	else if (opts.theme) {
		s = '<div class="blockUI blockMsg blockElement ui-dialog ui-widget ui-corner-all" style="z-index:'+z+';display:none;position:absolute">' +
				'<div class="ui-widget-header ui-dialog-titlebar blockTitle">'+(opts.title || '&nbsp;')+'</div>' +
				'<div class="ui-widget-content ui-dialog-content"></div>' +
			'</div>';
	}
	else if (full) {
		s = '<div class="blockUI blockMsg blockPage" style="z-index:'+z+';display:none;position:fixed"></div>';
	}			
	else {
		s = '<div class="blockUI blockMsg blockElement" style="z-index:'+z+';display:none;position:absolute"></div>';
	}
	lyr3 = $(s);

	// if we have a message, style it
	if (msg) {
		if (opts.theme) {
			lyr3.css(themedCSS);
			lyr3.addClass('ui-widget-content');
		}
		else 
			lyr3.css(css);
	}

	// style the overlay
	if (!opts.applyPlatformOpacityRules || !($.browser.mozilla && /Linux/.test(navigator.platform)))
		lyr2.css(opts.overlayCSS);
	lyr2.css('position', full ? 'fixed' : 'absolute');

	// make iframe layer transparent in IE
	if ($.browser.msie || opts.forceIframe)
		lyr1.css('opacity',0.0);

	//$([lyr1[0],lyr2[0],lyr3[0]]).appendTo(full ? 'body' : el);
	var layers = [lyr1,lyr2,lyr3], $par = full ? $('body') : $(el);
	$.each(layers, function() {
		this.appendTo($par);
	});
	
	if (opts.theme && opts.draggable && $.fn.draggable) {
		lyr3.draggable({
			handle: '.ui-dialog-titlebar',
			cancel: 'li'
		});
	}

	// ie7 must use absolute positioning in quirks mode and to account for activex issues (when scrolling)
	var expr = setExpr && (!$.boxModel || $('object,embed', full ? null : el).length > 0);
	if (ie6 || expr) {
		// give body 100% height
		if (full && opts.allowBodyStretch && $.boxModel)
			$('html,body').css('height','100%');

		// fix ie6 issue when blocked element has a border width
		if ((ie6 || !$.boxModel) && !full) {
			var t = sz(el,'borderTopWidth'), l = sz(el,'borderLeftWidth');
			var fixT = t ? '(0 - '+t+')' : 0;
			var fixL = l ? '(0 - '+l+')' : 0;
		}

		// simulate fixed position
		$.each([lyr1,lyr2,lyr3], function(i,o) {
			var s = o[0].style;
			s.position = 'absolute';
			if (i < 2) {
				full ? s.setExpression('height','Math.max(document.body.scrollHeight, document.body.offsetHeight) - (jQuery.boxModel?0:'+opts.quirksmodeOffsetHack+') + "px"')
					 : s.setExpression('height','this.parentNode.offsetHeight + "px"');
				full ? s.setExpression('width','jQuery.boxModel && document.documentElement.clientWidth || document.body.clientWidth + "px"')
					 : s.setExpression('width','this.parentNode.offsetWidth + "px"');
				if (fixL) s.setExpression('left', fixL);
				if (fixT) s.setExpression('top', fixT);
			}
			else if (opts.centerY) {
				if (full) s.setExpression('top','(document.documentElement.clientHeight || document.body.clientHeight) / 2 - (this.offsetHeight / 2) + (blah = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + "px"');
				s.marginTop = 0;
			}
			else if (!opts.centerY && full) {
				var top = (opts.css && opts.css.top) ? parseInt(opts.css.top) : 0;
				var expression = '((document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + '+top+') + "px"';
				s.setExpression('top',expression);
			}
		});
	}

	// show the message
	if (msg) {
		if (opts.theme)
			lyr3.find('.ui-widget-content').append(msg);
		else
			lyr3.append(msg);
		if (msg.jquery || msg.nodeType)
			$(msg).show();
	}

	if (($.browser.msie || opts.forceIframe) && opts.showOverlay)
		lyr1.show(); // opacity is zero
	if (opts.fadeIn) {
		var cb = opts.onBlock ? opts.onBlock : noOp;
		var cb1 = (opts.showOverlay && !msg) ? cb : noOp;
		var cb2 = msg ? cb : noOp;
		if (opts.showOverlay)
			lyr2._fadeIn(opts.fadeIn, cb1);
		if (msg)
			lyr3._fadeIn(opts.fadeIn, cb2);
	}
	else {
		if (opts.showOverlay)
			lyr2.show();
		if (msg)
			lyr3.show();
		if (opts.onBlock)
			opts.onBlock();
	}

	// bind key and mouse events
	bind(1, el, opts);

	if (full) {
		pageBlock = lyr3[0];
		pageBlockEls = $(':input:enabled:visible',pageBlock);
		if (opts.focusInput)
			setTimeout(focus, 20);
	}
	else
		center(lyr3[0], opts.centerX, opts.centerY);

	if (opts.timeout) {
		// auto-unblock
		var to = setTimeout(function() {
			full ? $.unblockUI(opts) : $(el).unblock(opts);
		}, opts.timeout);
		$(el).data('blockUI.timeout', to);
	}
};

// remove the block
function remove(el, opts) {
	var full = (el == window);
	var $el = $(el);
	var data = $el.data('blockUI.history');
	var to = $el.data('blockUI.timeout');
	if (to) {
		clearTimeout(to);
		$el.removeData('blockUI.timeout');
	}
	opts = $.extend({}, $.blockUI.defaults, opts || {});
	bind(0, el, opts); // unbind events
	
	var els;
	if (full) // crazy selector to handle odd field errors in ie6/7
		els = $('body').children().filter('.blockUI').add('body > .blockUI');
	else
		els = $('.blockUI', el);

	if (full)
		pageBlock = pageBlockEls = null;

	if (opts.fadeOut) {
		els.fadeOut(opts.fadeOut);
		setTimeout(function() { reset(els,data,opts,el); }, opts.fadeOut);
	}
	else
		reset(els, data, opts, el);
};

// move blocking element back into the DOM where it started
function reset(els,data,opts,el) {
	els.each(function(i,o) {
		// remove via DOM calls so we don't lose event handlers
		if (this.parentNode)
			this.parentNode.removeChild(this);
	});

	if (data && data.el) {
		data.el.style.display = data.display;
		data.el.style.position = data.position;
		if (data.parent)
			data.parent.appendChild(data.el);
		$(el).removeData('blockUI.history');
	}

	if (typeof opts.onUnblock == 'function')
		opts.onUnblock(el,opts);
};

// bind/unbind the handler
function bind(b, el, opts) {
	var full = el == window, $el = $(el);

	// don't bother unbinding if there is nothing to unbind
	if (!b && (full && !pageBlock || !full && !$el.data('blockUI.isBlocked')))
		return;
	if (!full)
		$el.data('blockUI.isBlocked', b);

	// don't bind events when overlay is not in use or if bindEvents is false
	if (!opts.bindEvents || (b && !opts.showOverlay)) 
		return;

	// bind anchors and inputs for mouse and key events
	var events = 'mousedown mouseup keydown keypress';
	b ? $(document).bind(events, opts, handler) : $(document).unbind(events, handler);

// former impl...
//	   var $e = $('a,:input');
//	   b ? $e.bind(events, opts, handler) : $e.unbind(events, handler);
};

// event handler to suppress keyboard/mouse events when blocking
function handler(e) {
	// allow tab navigation (conditionally)
	if (e.keyCode && e.keyCode == 9) {
		if (pageBlock && e.data.constrainTabKey) {
			var els = pageBlockEls;
			var fwd = !e.shiftKey && e.target == els[els.length-1];
			var back = e.shiftKey && e.target == els[0];
			if (fwd || back) {
				setTimeout(function(){focus(back)},10);
				return false;
			}
		}
	}
	// allow events within the message content
	if ($(e.target).parents('div.blockMsg').length > 0)
		return true;

	// allow events for content that is not being blocked
	return $(e.target).parents().children().filter('div.blockUI').length == 0;
};

function focus(back) {
	if (!pageBlockEls)
		return;
	var e = pageBlockEls[back===true ? pageBlockEls.length-1 : 0];
	if (e)
		e.focus();
};

function center(el, x, y) {
	var p = el.parentNode, s = el.style;
	var l = ((p.offsetWidth - el.offsetWidth)/2) - sz(p,'borderLeftWidth');
	var t = ((p.offsetHeight - el.offsetHeight)/2) - sz(p,'borderTopWidth');
	if (x) s.left = l > 0 ? (l+'px') : '0';
	if (y) s.top  = t > 0 ? (t+'px') : '0';
};

function sz(el, p) {
	return parseInt($.css(el,p))||0;
};

})(jQuery);
if(!this.JSON){this.JSON={};}
(function(){function f(n){return n<10?'0'+n:n;}
if(typeof Date.prototype.toJSON!=='function'){Date.prototype.toJSON=function(key){return isFinite(this.valueOf())?this.getUTCFullYear()+'-'+
f(this.getUTCMonth()+1)+'-'+
f(this.getUTCDate())+'T'+
f(this.getUTCHours())+':'+
f(this.getUTCMinutes())+':'+
f(this.getUTCSeconds())+'Z':null;};String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(key){return this.valueOf();};}
var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={'\b':'\\b','\t':'\\t','\n':'\\n','\f':'\\f','\r':'\\r','"':'\\"','\\':'\\\\'},rep;function quote(string){escapable.lastIndex=0;return escapable.test(string)?'"'+string.replace(escapable,function(a){var c=meta[a];return typeof c==='string'?c:'\\u'+('0000'+a.charCodeAt(0).toString(16)).slice(-4);})+'"':'"'+string+'"';}
function str(key,holder){var i,k,v,length,mind=gap,partial,value=holder[key];if(value&&typeof value==='object'&&typeof value.toJSON==='function'){value=value.toJSON(key);}
if(typeof rep==='function'){value=rep.call(holder,key,value);}
switch(typeof value){case'string':return quote(value);case'number':return isFinite(value)?String(value):'null';case'boolean':case'null':return String(value);case'object':if(!value){return'null';}
gap+=indent;partial=[];if(Object.prototype.toString.apply(value)==='[object Array]'){length=value.length;for(i=0;i<length;i+=1){partial[i]=str(i,value)||'null';}
v=partial.length===0?'[]':gap?'[\n'+gap+
partial.join(',\n'+gap)+'\n'+
mind+']':'['+partial.join(',')+']';gap=mind;return v;}
if(rep&&typeof rep==='object'){length=rep.length;for(i=0;i<length;i+=1){k=rep[i];if(typeof k==='string'){v=str(k,value);if(v){partial.push(quote(k)+(gap?': ':':')+v);}}}}else{for(k in value){if(Object.hasOwnProperty.call(value,k)){v=str(k,value);if(v){partial.push(quote(k)+(gap?': ':':')+v);}}}}
v=partial.length===0?'{}':gap?'{\n'+gap+partial.join(',\n'+gap)+'\n'+
mind+'}':'{'+partial.join(',')+'}';gap=mind;return v;}}
if(typeof JSON.stringify!=='function'){JSON.stringify=function(value,replacer,space){var i;gap='';indent='';if(typeof space==='number'){for(i=0;i<space;i+=1){indent+=' ';}}else if(typeof space==='string'){indent=space;}
rep=replacer;if(replacer&&typeof replacer!=='function'&&(typeof replacer!=='object'||typeof replacer.length!=='number')){throw new Error('JSON.stringify');}
return str('',{'':value});};}
if(typeof JSON.parse!=='function'){JSON.parse=function(text,reviver){var j;function walk(holder,key){var k,v,value=holder[key];if(value&&typeof value==='object'){for(k in value){if(Object.hasOwnProperty.call(value,k)){v=walk(value,k);if(v!==undefined){value[k]=v;}else{delete value[k];}}}}
return reviver.call(holder,key,value);}
text=String(text);cx.lastIndex=0;if(cx.test(text)){text=text.replace(cx,function(a){return'\\u'+
('0000'+a.charCodeAt(0).toString(16)).slice(-4);});}
if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,'@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,']').replace(/(?:^|:|,)(?:\s*\[)+/g,''))){j=eval('('+text+')');return typeof reviver==='function'?walk({'':j},''):j;}
throw new SyntaxError('JSON.parse');};}}());
(function($){$.fn.tipsy=function(options){options=$.extend({},$.fn.tipsy.defaults,options);return this.each(function(){var opts=$.fn.tipsy.elementOptions(this,options);$(this).hover(function(){$.data(this,'cancel.tipsy',true);var tip=$.data(this,'active.tipsy');if(!tip){tip=$('<div class="tipsy"><div class="tipsy-inner"/></div>');tip.css({position:'absolute',zIndex:100000});$.data(this,'active.tipsy',tip);}
if($(this).attr('title')||typeof($(this).attr('original-title'))!='string'){$(this).attr('original-title',$(this).attr('title')||'').removeAttr('title');}
var title;if(typeof opts.title=='string'){title=$(this).attr(opts.title=='title'?'original-title':opts.title);}else if(typeof opts.title=='function'){title=opts.title.call(this);}
tip.find('.tipsy-inner')[opts.html?'html':'text'](title||opts.fallback);var pos=$.extend({},$(this).offset(),{width:this.offsetWidth,height:this.offsetHeight});tip.get(0).className='tipsy';tip.remove().css({top:0,left:0,visibility:'hidden',display:'block'}).appendTo(document.body);var actualWidth=tip[0].offsetWidth,actualHeight=tip[0].offsetHeight;var gravity=(typeof opts.gravity=='function')?opts.gravity.call(this):opts.gravity;switch(gravity.charAt(0)){case'n':tip.css({top:pos.top+pos.height,left:pos.left+pos.width/2-actualWidth/2}).addClass('tipsy-north');break;case's':tip.css({top:pos.top-actualHeight,left:pos.left+pos.width/2-actualWidth/2}).addClass('tipsy-south');break;case'e':tip.css({top:pos.top+pos.height/2-actualHeight/2,left:pos.left-actualWidth}).addClass('tipsy-east');break;case'w':tip.css({top:pos.top+pos.height/2-actualHeight/2,left:pos.left+pos.width}).addClass('tipsy-west');break;}
if(opts.fade){tip.css({opacity:0,display:'block',visibility:'visible'}).animate({opacity:0.8});}else{tip.css({visibility:'visible'});}},function(){$.data(this,'cancel.tipsy',false);var self=this;setTimeout(function(){if($.data(this,'cancel.tipsy'))return;var tip=$.data(self,'active.tipsy');if(tip){if(opts.fade){tip.stop().fadeOut(function(){$(this).remove();});}else{tip.remove();}}},100);});});};$.fn.tipsy.elementOptions=function(ele,options){return $.metadata?$.extend({},options,$(ele).metadata()):options;};$.fn.tipsy.defaults={fade:false,fallback:'',gravity:'n',html:false,title:'title'};$.fn.tipsy.autoNS=function(){return $(this).offset().top>($(document).scrollTop()+$(window).height()/2)?'s':'n';};$.fn.tipsy.autoWE=function(){return $(this).offset().left>($(document).scrollLeft()+$(window).width()/2)?'e':'w';};})(jQuery);
/*!
 * jquery-timepicker v1.11.5 - A jQuery timepicker plugin inspired by Google Calendar. It supports both mouse and keyboard navigation.
 * Copyright (c) 2015 Jon Thornton - http://jonthornton.github.com/jquery-timepicker/
 * License: MIT
 */


(function (factory) {
    if (typeof exports === "object" && exports &&
        typeof module === "object" && module && module.exports === exports) {
        // Browserify. Attach to jQuery module.
        factory(require("jquery"));
    } else if (typeof define === 'function' && define.amd) {
		// AMD. Register as an anonymous module.
		define(['jquery'], factory);
	} else {
		// Browser globals
		factory(jQuery);
	}
}(function ($) {
	var _ONE_DAY = 86400;
	var _lang = {
		am: 'am',
		pm: 'pm',
		AM: 'AM',
		PM: 'PM',
		decimal: '.',
		mins: 'mins',
		hr: 'hr',
		hrs: 'hrs'
	};

	var methods = {
		init: function(options)
		{
			return this.each(function()
			{
				var self = $(this);

				// pick up settings from data attributes
				var attributeOptions = [];
				for (var key in $.fn.timepicker.defaults) {
					if (self.data(key))  {
						attributeOptions[key] = self.data(key);
					}
				}

				var settings = $.extend({}, $.fn.timepicker.defaults, attributeOptions, options);

				if (settings.lang) {
					_lang = $.extend(_lang, settings.lang);
				}

				settings = _parseSettings(settings);
				self.data('timepicker-settings', settings);
				self.addClass('ui-timepicker-input');

				if (settings.useSelect) {
					_render(self);
				} else {
					self.prop('autocomplete', 'off');
					if (settings.showOn) {
						for (var i in settings.showOn) {
							self.on(settings.showOn[i]+'.timepicker', methods.show);
						}
					}
					self.on('change.timepicker', _formatValue);
					self.on('keydown.timepicker', _keydownhandler);
					self.on('keyup.timepicker', _keyuphandler);
					if (settings.disableTextInput) {
						self.on('keydown.timepicker', _disableTextInputHandler);
					}

					_formatValue.call(self.get(0), null, 'initial');
				}
			});
		},

		show: function(e)
		{
			var self = $(this);
			var settings = self.data('timepicker-settings');

			if (e) {
				e.preventDefault();
			}

			if (settings.useSelect) {
				self.data('timepicker-list').focus();
				return;
			}

			if (_hideKeyboard(self)) {
				// block the keyboard on mobile devices
				self.blur();
			}

			var list = self.data('timepicker-list');

			// check if input is readonly
			if (self.prop('readonly')) {
				return;
			}

			// check if list needs to be rendered
			if (!list || list.length === 0 || typeof settings.durationTime === 'function') {
				_render(self);
				list = self.data('timepicker-list');
			}

			if (_isVisible(list)) {
				return;
			}

			self.data('ui-timepicker-value', self.val());
			_setSelected(self, list);

			// make sure other pickers are hidden
			methods.hide();

			// position the dropdown relative to the input
			list.show();
			var listOffset = {};

			if (settings.orientation.match(/r/)) {
				// right-align the dropdown
				listOffset.left = self.offset().left + self.outerWidth() - list.outerWidth() + parseInt(list.css('marginLeft').replace('px', ''), 10);
			} else {
				// left-align the dropdown
				listOffset.left = self.offset().left + parseInt(list.css('marginLeft').replace('px', ''), 10);
			}

			var verticalOrientation;
			if (settings.orientation.match(/t/)) {
				verticalOrientation = 't';
			} else if (settings.orientation.match(/b/)) {
				verticalOrientation = 'b';
			} else if ((self.offset().top + self.outerHeight(true) + list.outerHeight()) > $(window).height() + $(window).scrollTop()) {
				verticalOrientation = 't';
			} else {
				verticalOrientation = 'b';
			}

			if (verticalOrientation == 't') {
				// position the dropdown on top
				list.addClass('ui-timepicker-positioned-top');
				listOffset.top = self.offset().top - list.outerHeight() + parseInt(list.css('marginTop').replace('px', ''), 10);
			} else {
				// put it under the input
				list.removeClass('ui-timepicker-positioned-top');
				listOffset.top = self.offset().top + self.outerHeight() + parseInt(list.css('marginTop').replace('px', ''), 10);
			}

			list.offset(listOffset);

			// position scrolling
			var selected = list.find('.ui-timepicker-selected');

			if (!selected.length) {
				var timeInt = _time2int(_getTimeValue(self));
				if (timeInt !== null) {
					selected = _findRow(self, list, timeInt);
				} else if (settings.scrollDefault) {
					selected = _findRow(self, list, settings.scrollDefault());
				}
			}

			if (selected && selected.length) {
				var topOffset = list.scrollTop() + selected.position().top - selected.outerHeight();
				list.scrollTop(topOffset);
			} else {
				list.scrollTop(0);
			}

			// prevent scroll propagation
			if(settings.stopScrollPropagation) {
				$(document).on('wheel.ui-timepicker', '.ui-timepicker-wrapper', function(e){
					e.preventDefault();
					var currentScroll = $(this).scrollTop();
					$(this).scrollTop(currentScroll + e.originalEvent.deltaY);
				});
			}

			// attach close handlers
			$(document).on('touchstart.ui-timepicker mousedown.ui-timepicker', _closeHandler);
			$(window).on('resize.ui-timepicker', _closeHandler);
			if (settings.closeOnWindowScroll) {
				$(document).on('scroll.ui-timepicker', _closeHandler);
			}

			self.trigger('showTimepicker');

			return this;
		},

		hide: function(e)
		{
			var self = $(this);
			var settings = self.data('timepicker-settings');

			if (settings && settings.useSelect) {
				self.blur();
			}

			$('.ui-timepicker-wrapper').each(function() {
				var list = $(this);
				if (!_isVisible(list)) {
					return;
				}

				var self = list.data('timepicker-input');
				var settings = self.data('timepicker-settings');

				if (settings && settings.selectOnBlur) {
					_selectValue(self);
				}

				list.hide();
				self.trigger('hideTimepicker');
			});

			return this;
		},

		option: function(key, value)
		{
			if (typeof key == 'string' && typeof value == 'undefined') {
				return $(this).data('timepicker-settings')[key];
			}

			return this.each(function(){
				var self = $(this);
				var settings = self.data('timepicker-settings');
				var list = self.data('timepicker-list');

				if (typeof key == 'object') {
					settings = $.extend(settings, key);
				} else if (typeof key == 'string') {
					settings[key] = value;
				}

				settings = _parseSettings(settings);

				self.data('timepicker-settings', settings);

				if (list) {
					list.remove();
					self.data('timepicker-list', false);
				}

				if (settings.useSelect) {
					_render(self);
				}
			});
		},

		getSecondsFromMidnight: function()
		{
			return _time2int(_getTimeValue(this));
		},

		getTime: function(relative_date)
		{
			var self = this;

			var time_string = _getTimeValue(self);
			if (!time_string) {
				return null;
			}

			var offset = _time2int(time_string);
			if (offset === null) {
				return null;
			}

			if (!relative_date) {
				relative_date = new Date();
			}

			// construct a Date from relative date, and offset's time
			var time = new Date(relative_date);
			time.setHours(offset / 3600);
			time.setMinutes(offset % 3600 / 60);
			time.setSeconds(offset % 60);
			time.setMilliseconds(0);

			return time;
		},

		isVisible: function() {
			var self = this;
			var list = self.data('timepicker-list');
			return !!(list && _isVisible(list));
		},

		setTime: function(value)
		{
			var self = this;
			var settings = self.data('timepicker-settings');

			if (settings.forceRoundTime) {
				var prettyTime = _roundAndFormatTime(_time2int(value), settings)
			} else {
				var prettyTime = _int2time(_time2int(value), settings);
			}

			if (value && prettyTime === null && settings.noneOption) {
				prettyTime = value;
			}

			_setTimeValue(self, prettyTime);
			if (self.data('timepicker-list')) {
				_setSelected(self, self.data('timepicker-list'));
			}

			return this;
		},

		remove: function()
		{
			var self = this;

			// check if this element is a timepicker
			if (!self.hasClass('ui-timepicker-input')) {
				return;
			}

			var settings = self.data('timepicker-settings');
			self.removeAttr('autocomplete', 'off');
			self.removeClass('ui-timepicker-input');
			self.removeData('timepicker-settings');
			self.off('.timepicker');

			// timepicker-list won't be present unless the user has interacted with this timepicker
			if (self.data('timepicker-list')) {
				self.data('timepicker-list').remove();
			}

			if (settings.useSelect) {
				self.show();
			}

			self.removeData('timepicker-list');

			return this;
		}
	};

	// private methods

	function _isVisible(elem)
	{
		var el = elem[0];
		return el.offsetWidth > 0 && el.offsetHeight > 0;
	}

	function _parseSettings(settings)
	{
		if (settings.minTime) {
			settings.minTime = _time2int(settings.minTime);
		}

		if (settings.maxTime) {
			settings.maxTime = _time2int(settings.maxTime);
		}

		if (settings.durationTime && typeof settings.durationTime !== 'function') {
			settings.durationTime = _time2int(settings.durationTime);
		}

		if (settings.scrollDefault == 'now') {
			settings.scrollDefault = function() {
				return settings.roundingFunction(_time2int(new Date()), settings);
			}
		} else if (settings.scrollDefault && typeof settings.scrollDefault != 'function') {
			var val = settings.scrollDefault;
			settings.scrollDefault = function() {
				return settings.roundingFunction(_time2int(val), settings);
			}
		} else if (settings.minTime) {
			settings.scrollDefault = function() {
				return settings.roundingFunction(settings.minTime, settings);
			}
		}

		if ($.type(settings.timeFormat) === "string" && settings.timeFormat.match(/[gh]/)) {
			settings._twelveHourTime = true;
		}

		if (settings.showOnFocus === false && settings.showOn.indexOf('focus') != -1) {
			settings.showOn.splice(settings.showOn.indexOf('focus'), 1);
		}

		if (settings.disableTimeRanges.length > 0) {
			// convert string times to integers
			for (var i in settings.disableTimeRanges) {
				settings.disableTimeRanges[i] = [
					_time2int(settings.disableTimeRanges[i][0]),
					_time2int(settings.disableTimeRanges[i][1])
				];
			}

			// sort by starting time
			settings.disableTimeRanges = settings.disableTimeRanges.sort(function(a, b){
				return a[0] - b[0];
			});

			// merge any overlapping ranges
			for (var i = settings.disableTimeRanges.length-1; i > 0; i--) {
				if (settings.disableTimeRanges[i][0] <= settings.disableTimeRanges[i-1][1]) {
					settings.disableTimeRanges[i-1] = [
						Math.min(settings.disableTimeRanges[i][0], settings.disableTimeRanges[i-1][0]),
						Math.max(settings.disableTimeRanges[i][1], settings.disableTimeRanges[i-1][1])
					];
					settings.disableTimeRanges.splice(i, 1);
				}
			}
		}

		return settings;
	}

	function _render(self)
	{
		var settings = self.data('timepicker-settings');
		var list = self.data('timepicker-list');

		if (list && list.length) {
			list.remove();
			self.data('timepicker-list', false);
		}

		if (settings.useSelect) {
			list = $('<select />', { 'class': 'ui-timepicker-select' });
			var wrapped_list = list;
		} else {
			list = $('<ul />', { 'class': 'ui-timepicker-list' });

			var wrapped_list = $('<div />', { 'class': 'ui-timepicker-wrapper', 'tabindex': -1 });
			wrapped_list.css({'display':'none', 'position': 'absolute' }).append(list);
		}

		if (settings.noneOption) {
			if (settings.noneOption === true) {
				settings.noneOption = (settings.useSelect) ? 'Time...' : 'None';
			}

			if ($.isArray(settings.noneOption)) {
				for (var i in settings.noneOption) {
					if (parseInt(i, 10) == i){
						var noneElement = _generateNoneElement(settings.noneOption[i], settings.useSelect);
						list.append(noneElement);
					}
				}
			} else {
				var noneElement = _generateNoneElement(settings.noneOption, settings.useSelect);
				list.append(noneElement);
			}
		}

		if (settings.className) {
			wrapped_list.addClass(settings.className);
		}

		if ((settings.minTime !== null || settings.durationTime !== null) && settings.showDuration) {
			var stepval = typeof settings.step == 'function' ? 'function' : settings.step;
			wrapped_list.addClass('ui-timepicker-with-duration');
			wrapped_list.addClass('ui-timepicker-step-'+settings.step);
		}

		var durStart = settings.minTime;
		if (typeof settings.durationTime === 'function') {
			durStart = _time2int(settings.durationTime());
		} else if (settings.durationTime !== null) {
			durStart = settings.durationTime;
		}
		var start = (settings.minTime !== null) ? settings.minTime : 0;
		var end = (settings.maxTime !== null) ? settings.maxTime : (start + _ONE_DAY - 1);

		if (end < start) {
			// make sure the end time is greater than start time, otherwise there will be no list to show
			end += _ONE_DAY;
		}

		if (end === _ONE_DAY-1 && $.type(settings.timeFormat) === "string" && settings.show2400) {
			// show a 24:00 option when using military time
			end = _ONE_DAY;
		}

		var dr = settings.disableTimeRanges;
		var drCur = 0;
		var drLen = dr.length;

		var stepFunc = settings.step;
		if (typeof stepFunc != 'function') {
			stepFunc = function() {
				return settings.step;
			}
		}

		for (var i=start, j=0; i <= end; j++, i += stepFunc(j)*60) {
			var timeInt = i;
			var timeString = _int2time(timeInt, settings);

			if (settings.useSelect) {
				var row = $('<option />', { 'value': timeString });
				row.text(timeString);
			} else {
				var row = $('<li />');
				row.addClass(timeInt % 86400 < 43200 ? 'ui-timepicker-am' : 'ui-timepicker-pm');
				row.data('time', (timeInt <= 86400 ? timeInt : timeInt % 86400));
				row.text(timeString);
			}

			if ((settings.minTime !== null || settings.durationTime !== null) && settings.showDuration) {
				var durationString = _int2duration(i - durStart, settings.step);
				if (settings.useSelect) {
					row.text(row.text()+' ('+durationString+')');
				} else {
					var duration = $('<span />', { 'class': 'ui-timepicker-duration' });
					duration.text(' ('+durationString+')');
					row.append(duration);
				}
			}

			if (drCur < drLen) {
				if (timeInt >= dr[drCur][1]) {
					drCur += 1;
				}

				if (dr[drCur] && timeInt >= dr[drCur][0] && timeInt < dr[drCur][1]) {
					if (settings.useSelect) {
						row.prop('disabled', true);
					} else {
						row.addClass('ui-timepicker-disabled');
					}
				}
			}

			list.append(row);
		}

		wrapped_list.data('timepicker-input', self);
		self.data('timepicker-list', wrapped_list);

		if (settings.useSelect) {
			if (self.val()) {
				list.val(_roundAndFormatTime(_time2int(self.val()), settings));
			}

			list.on('focus', function(){
				$(this).data('timepicker-input').trigger('showTimepicker');
			});
			list.on('blur', function(){
				$(this).data('timepicker-input').trigger('hideTimepicker');
			});
			list.on('change', function(){
				_setTimeValue(self, $(this).val(), 'select');
			});

			_setTimeValue(self, list.val(), 'initial');
			self.hide().after(list);
		} else {
			var appendTo = settings.appendTo;
			if (typeof appendTo === 'string') {
				appendTo = $(appendTo);
			} else if (typeof appendTo === 'function') {
				appendTo = appendTo(self);
			}
			appendTo.append(wrapped_list);
			_setSelected(self, list);

			list.on('mousedown click', 'li', function(e) {

				// hack: temporarily disable the focus handler
				// to deal with the fact that IE fires 'focus'
				// events asynchronously
				self.off('focus.timepicker');
				self.on('focus.timepicker-ie-hack', function(){
					self.off('focus.timepicker-ie-hack');
					self.on('focus.timepicker', methods.show);
				});

				if (!_hideKeyboard(self)) {
					self[0].focus();
				}

				// make sure only the clicked row is selected
				list.find('li').removeClass('ui-timepicker-selected');
				$(this).addClass('ui-timepicker-selected');

				if (_selectValue(self)) {
					self.trigger('hideTimepicker');

					list.on('mouseup.timepicker click.timepicker', 'li', function(e) {
						list.off('mouseup.timepicker click.timepicker');
						wrapped_list.hide();
					});
				}
			});
		}
	}

	function _generateNoneElement(optionValue, useSelect)
	{
		var label, className, value;

		if (typeof optionValue == 'object') {
			label = optionValue.label;
			className = optionValue.className;
			value = optionValue.value;
		} else if (typeof optionValue == 'string') {
			label = optionValue;
		} else {
			$.error('Invalid noneOption value');
		}

		if (useSelect) {
			return $('<option />', {
					'value': value,
					'class': className,
					'text': label
				});
		} else {
			return $('<li />', {
					'class': className,
					'text': label
				}).data('time', String(value));
		}
	}

	function _roundAndFormatTime(seconds, settings)
	{
		seconds = settings.roundingFunction(seconds, settings);
		if (seconds !== null) {
			return _int2time(seconds, settings);
		}
	}

	// event handler to decide whether to close timepicker
	function _closeHandler(e)
	{
		if (e.target == window) {
			// mobile Chrome fires focus events against window for some reason
			return;
		}

		var target = $(e.target);

		if (target.closest('.ui-timepicker-input').length || target.closest('.ui-timepicker-wrapper').length) {
			// active timepicker was focused. ignore
			return;
		}

		methods.hide();
		$(document).unbind('.ui-timepicker');
		$(window).unbind('.ui-timepicker');
	}

	function _hideKeyboard(self)
	{
		var settings = self.data('timepicker-settings');
		return ((window.navigator.msMaxTouchPoints || 'ontouchstart' in document) && settings.disableTouchKeyboard);
	}

	function _findRow(self, list, value)
	{
		if (!value && value !== 0) {
			return false;
		}

		var settings = self.data('timepicker-settings');
		var out = false;
		var value = settings.roundingFunction(value, settings);

		// loop through the menu items
		list.find('li').each(function(i, obj) {
			var jObj = $(obj);
			if (typeof jObj.data('time') != 'number') {
				return;
			}

			if (jObj.data('time') == value) {
				out = jObj;
				return false;
			}
		});

		return out;
	}

	function _setSelected(self, list)
	{
		list.find('li').removeClass('ui-timepicker-selected');

		var timeValue = _time2int(_getTimeValue(self), self.data('timepicker-settings'));
		if (timeValue === null) {
			return;
		}

		var selected = _findRow(self, list, timeValue);
		if (selected) {

			var topDelta = selected.offset().top - list.offset().top;

			if (topDelta + selected.outerHeight() > list.outerHeight() || topDelta < 0) {
				list.scrollTop(list.scrollTop() + selected.position().top - selected.outerHeight());
			}

			selected.addClass('ui-timepicker-selected');
		}
	}


	function _formatValue(e, origin)
	{
		if (this.value === '' || origin == 'timepicker') {
			return;
		}

		var self = $(this);

		if (self.is(':focus') && (!e || e.type != 'change')) {
			return;
		}

		var settings = self.data('timepicker-settings');
		var seconds = _time2int(this.value, settings);

		if (seconds === null) {
			self.trigger('timeFormatError');
			return;
		}

		var rangeError = false;
		// check that the time in within bounds
		if ((settings.minTime !== null && settings.maxTime !== null)
			&& (seconds < settings.minTime || seconds > settings.maxTime)) {
			rangeError = true;
		}

		// check that time isn't within disabled time ranges
		$.each(settings.disableTimeRanges, function(){
			if (seconds >= this[0] && seconds < this[1]) {
				rangeError = true;
				return false;
			}
		});

		if (settings.forceRoundTime) {
			var roundSeconds = settings.roundingFunction(seconds, settings);
			if (roundSeconds != seconds) {
				seconds = roundSeconds;
				origin = null;
			}
		}

		var prettyTime = _int2time(seconds, settings);

		if (rangeError) {
			if (_setTimeValue(self, prettyTime, 'error')) {
				self.trigger('timeRangeError');
			}
		} else {
			_setTimeValue(self, prettyTime, origin);
		}
	}

	function _getTimeValue(self)
	{
		if (self.is('input')) {
			return self.val();
		} else {
			// use the element's data attributes to store values
			return self.data('ui-timepicker-value');
		}
	}

	function _setTimeValue(self, value, source)
	{
		if (self.is('input')) {
			self.val(value);

			var settings = self.data('timepicker-settings');
			if (settings.useSelect && source != 'select' && source != 'initial') {
				self.data('timepicker-list').val(_roundAndFormatTime(_time2int(value), settings));
			}
		}

		if (self.data('ui-timepicker-value') != value) {
			self.data('ui-timepicker-value', value);
			if (source == 'select') {
				self.trigger('selectTime').trigger('changeTime').trigger('change', 'timepicker');
			} else if (['error', 'initial'].indexOf(source) == -1) {
				self.trigger('changeTime');
			}

			return true;
		} else {
			self.trigger('selectTime');
			return false;
		}
	}

	/*
	*  Filter freeform input
	*/
	function _disableTextInputHandler(e)
	{
		switch (e.keyCode) {
			case 13: // return
			case 9: //tab
				return;

			default:
				e.preventDefault();
		}
	}

	/*
	*  Keyboard navigation via arrow keys
	*/
	function _keydownhandler(e)
	{
		var self = $(this);
		var list = self.data('timepicker-list');

		if (!list || !_isVisible(list)) {
			if (e.keyCode == 40) {
				// show the list!
				methods.show.call(self.get(0));
				list = self.data('timepicker-list');
				if (!_hideKeyboard(self)) {
					self.focus();
				}
			} else {
				return true;
			}
		}

		switch (e.keyCode) {

			case 13: // return
				if (_selectValue(self)) {
					_formatValue.call(self.get(0), {'type':'change'});
					methods.hide.apply(this);
				}

				e.preventDefault();
				return false;

			case 38: // up
				var selected = list.find('.ui-timepicker-selected');

				if (!selected.length) {
					list.find('li').each(function(i, obj) {
						if ($(obj).position().top > 0) {
							selected = $(obj);
							return false;
						}
					});
					selected.addClass('ui-timepicker-selected');

				} else if (!selected.is(':first-child')) {
					selected.removeClass('ui-timepicker-selected');
					selected.prev().addClass('ui-timepicker-selected');

					if (selected.prev().position().top < selected.outerHeight()) {
						list.scrollTop(list.scrollTop() - selected.outerHeight());
					}
				}

				return false;

			case 40: // down
				selected = list.find('.ui-timepicker-selected');

				if (selected.length === 0) {
					list.find('li').each(function(i, obj) {
						if ($(obj).position().top > 0) {
							selected = $(obj);
							return false;
						}
					});

					selected.addClass('ui-timepicker-selected');
				} else if (!selected.is(':last-child')) {
					selected.removeClass('ui-timepicker-selected');
					selected.next().addClass('ui-timepicker-selected');

					if (selected.next().position().top + 2*selected.outerHeight() > list.outerHeight()) {
						list.scrollTop(list.scrollTop() + selected.outerHeight());
					}
				}

				return false;

			case 27: // escape
				list.find('li').removeClass('ui-timepicker-selected');
				methods.hide();
				break;

			case 9: //tab
				methods.hide();
				break;

			default:
				return true;
		}
	}

	/*
	*	Time typeahead
	*/
	function _keyuphandler(e)
	{
		var self = $(this);
		var list = self.data('timepicker-list');
		var settings = self.data('timepicker-settings');

		if (!list || !_isVisible(list) || settings.disableTextInput) {
			return true;
		}

		switch (e.keyCode) {

			case 96: // numpad numerals
			case 97:
			case 98:
			case 99:
			case 100:
			case 101:
			case 102:
			case 103:
			case 104:
			case 105:
			case 48: // numerals
			case 49:
			case 50:
			case 51:
			case 52:
			case 53:
			case 54:
			case 55:
			case 56:
			case 57:
			case 65: // a
			case 77: // m
			case 80: // p
			case 186: // colon
			case 8: // backspace
			case 46: // delete
				if (settings.typeaheadHighlight) {
					_setSelected(self, list);
				} else {
					list.hide();
				}
				break;
		}
	}

	function _selectValue(self)
	{
		var settings = self.data('timepicker-settings');
		var list = self.data('timepicker-list');
		var timeValue = null;

		var cursor = list.find('.ui-timepicker-selected');

		if (cursor.hasClass('ui-timepicker-disabled')) {
			return false;
		}

		if (cursor.length) {
			// selected value found
			timeValue = cursor.data('time');
		}

		if (timeValue !== null) {
			if (typeof timeValue != 'string') {
				timeValue = _int2time(timeValue, settings);
			}

			_setTimeValue(self, timeValue, 'select');
		}

		return true;
	}

	function _int2duration(seconds, step)
	{
		seconds = Math.abs(seconds);
		var minutes = Math.round(seconds/60),
			duration = [],
			hours, mins;

		if (minutes < 60) {
			// Only show (x mins) under 1 hour
			duration = [minutes, _lang.mins];
		} else {
			hours = Math.floor(minutes/60);
			mins = minutes%60;

			// Show decimal notation (eg: 1.5 hrs) for 30 minute steps
			if (step == 30 && mins == 30) {
				hours += _lang.decimal + 5;
			}

			duration.push(hours);
			duration.push(hours == 1 ? _lang.hr : _lang.hrs);

			// Show remainder minutes notation (eg: 1 hr 15 mins) for non-30 minute steps
			// and only if there are remainder minutes to show
			if (step != 30 && mins) {
				duration.push(mins);
				duration.push(_lang.mins);
			}
		}

		return duration.join(' ');
	}

	function _int2time(timeInt, settings)
	{
		if (typeof timeInt != 'number') {
			return null;
		}

		var seconds = parseInt(timeInt%60)
			, minutes = parseInt((timeInt/60)%60)
			, hours = parseInt((timeInt/(60*60))%24);

		var time = new Date(1970, 0, 2, hours, minutes, seconds, 0);

		if (isNaN(time.getTime())) {
			return null;
		}

		if ($.type(settings.timeFormat) === "function") {
			return settings.timeFormat(time);
		}

		var output = '';
		var hour, code;
		for (var i=0; i<settings.timeFormat.length; i++) {

			code = settings.timeFormat.charAt(i);
			switch (code) {

				case 'a':
					output += (time.getHours() > 11) ? _lang.pm : _lang.am;
					break;

				case 'A':
					output += (time.getHours() > 11) ? _lang.PM : _lang.AM;
					break;

				case 'g':
					hour = time.getHours() % 12;
					output += (hour === 0) ? '12' : hour;
					break;

				case 'G':
					hour = time.getHours();
					if (timeInt === _ONE_DAY) hour = settings.show2400 ? 24 : 0;
					output += hour;
					break;

				case 'h':
					hour = time.getHours() % 12;

					if (hour !== 0 && hour < 10) {
						hour = '0'+hour;
					}

					output += (hour === 0) ? '12' : hour;
					break;

				case 'H':
					hour = time.getHours();
					if (timeInt === _ONE_DAY) hour = settings.show2400 ? 24 : 0;
					output += (hour > 9) ? hour : '0'+hour;
					break;

				case 'i':
					var minutes = time.getMinutes();
					output += (minutes > 9) ? minutes : '0'+minutes;
					break;

				case 's':
					seconds = time.getSeconds();
					output += (seconds > 9) ? seconds : '0'+seconds;
					break;

				case '\\':
					// escape character; add the next character and skip ahead
					i++;
					output += settings.timeFormat.charAt(i);
					break;

				default:
					output += code;
			}
		}

		return output;
	}

	function _time2int(timeString, settings)
	{
		if (timeString === '' || timeString === null) return null;
		if (typeof timeString == 'object') {
			return timeString.getHours()*3600 + timeString.getMinutes()*60 + timeString.getSeconds();
		}
		if (typeof timeString != 'string') {
			return timeString;
		}

		timeString = timeString.toLowerCase().replace(/[\s\.]/g, '');

		// if the last character is an "a" or "p", add the "m"
		if (timeString.slice(-1) == 'a' || timeString.slice(-1) == 'p') {
			timeString += 'm';
		}

		var ampmRegex = '(' +
			_lang.am.replace('.', '')+'|' +
			_lang.pm.replace('.', '')+'|' +
			_lang.AM.replace('.', '')+'|' +
			_lang.PM.replace('.', '')+')?';

		// try to parse time input
		var pattern = new RegExp('^'+ampmRegex+'([0-9]?[0-9])\\W?([0-5][0-9])?\\W?([0-5][0-9])?'+ampmRegex+'$');

		var time = timeString.match(pattern);
		if (!time) {
			return null;
		}

		var hour = parseInt(time[2]*1, 10);
		if (hour > 24) {
			if (settings && settings.wrapHours === false) {
				return null;
			} else {
				hour = hour % 24;
			}
		}

		var ampm = time[1] || time[5];
		var hours = hour;

		if (hour <= 12 && ampm) {
			var isPm = (ampm == _lang.pm || ampm == _lang.PM);

			if (hour == 12) {
				hours = isPm ? 12 : 0;
			} else {
				hours = (hour + (isPm ? 12 : 0));
			}
		}

		var minutes = ( time[3]*1 || 0 );
		var seconds = ( time[4]*1 || 0 );
		var timeInt = hours*3600 + minutes*60 + seconds;

		// if no am/pm provided, intelligently guess based on the scrollDefault
		if (hour < 12 && !ampm && settings && settings._twelveHourTime && settings.scrollDefault) {
			var delta = timeInt - settings.scrollDefault();
			if (delta < 0 && delta >= _ONE_DAY / -2) {
				timeInt = (timeInt + (_ONE_DAY / 2)) % _ONE_DAY;
			}
		}

		return timeInt;
	}

	function _pad2(n) {
		return ("0" + n).slice(-2);
	}

	// Plugin entry
	$.fn.timepicker = function(method)
	{
		if (!this.length) return this;
		if (methods[method]) {
			// check if this element is a timepicker
			if (!this.hasClass('ui-timepicker-input')) {
				return this;
			}
			return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
		}
		else if(typeof method === "object" || !method) { return methods.init.apply(this, arguments); }
		else { $.error("Method "+ method + " does not exist on jQuery.timepicker"); }
	};
	// Global defaults
	$.fn.timepicker.defaults = {
		appendTo: 'body',
		className: null,
		closeOnWindowScroll: false,
		disableTextInput: false,
		disableTimeRanges: [],
		disableTouchKeyboard: false,
		durationTime: null,
		forceRoundTime: false,
		maxTime: null,
		minTime: null,
		noneOption: false,
		orientation: 'l',
		roundingFunction: function(seconds, settings) {
			if (seconds === null) {
				return null;
			} else if (typeof settings.step !== "number") {
				// TODO: nearest fit irregular steps
				return seconds;
			} else {
				var offset = seconds % (settings.step*60); // step is in minutes

				if (offset >= settings.step*30) {
					// if offset is larger than a half step, round up
					seconds += (settings.step*60) - offset;
				} else {
					// round down
					seconds -= offset;
				}

				if (seconds == _ONE_DAY && settings.show2400) {
					return seconds;
				}

				return seconds%_ONE_DAY;
			}
		},
		scrollDefault: null,
		selectOnBlur: false,
		show2400: false,
		showDuration: false,
		showOn: ['click', 'focus'],
		showOnFocus: true,
		step: 30,
		stopScrollPropagation: false,
		timeFormat: 'g:ia',
		typeaheadHighlight: true,
		useSelect: false,
		wrapHours: true
	};
}));
/*
 * Catch any uncaught errors and report them to the server.
 *
 * This code is designed to have as few dependencies as possible; it now relies 
 * only on jQuery. It is placed at the top of this file in order to also catch
 * errors that occur in PA initialization.
 *
 * Everything is wrapped in a closure in order to avoid polluting the global
 * namespace and to insulate the code.
 */
var err_count = 0;
window.onerror = (function() {
  var MAX_COUNT = 2;
  var API_URL = '/logic/api?method=generic.report_js_error&aid=' +
    (new Date()).getTime().toString(36) + Math.round(Math.random() * 1679616).toString(36);

  var reportError = function(params) {
    err_count++;
    if(err_count > MAX_COUNT) {
      return;
    }
    if (params.message && typeof(params.message) == 'string' && params.message.indexOf("Error connecting to extension") >= 0) return; // we don't want these
    params.location = window.location.toString();
    var csrfToken = window.CSRF_TOKEN || "";
    if(PA && PA.user && PA.user.id) {
      params.uid = PA.user.id;
    }
    $.ajax({
      contentType: "application/json",
      url: API_URL,
      data: JSON.stringify({
        'method': 'generic.report_js_error', 
        'params': params
      }),
      type: 'POST',
      dataType: 'json',
      headers: {
        "CSRF-Token": csrfToken
      }
    });
  };

  // catch uncaught JS exceptions (the actual window.onerror)
  return function(message, url, line) {
    reportError({
      type: 'js_exception',
      message: message,
      url: url,
      line: line
    });
  };
})();
var dataLayer = [];
PA = {
  apiCache: {},
  eventsToLog: [],
  staticContent: false,
  cookie: false,
  users: {},
  user: {},
  othersId: 0,
  userQueue: [],         // all users I don't know, but need to get
  userCallback: [],
  logApiTimeData: [],
  callQueue: [],
  studentView: false,
  cacheUser: function(user) {
    if (user.config && user.config.endorser)
      user.endorser = user.config.endorser;
    //PA.users[user.id] = user;
  },

  getCached: function(method, params){
    var cacheKey = method + JSON.stringify(params);
    return PA.apiCache[cacheKey];
  },
  cache: function(method, params, result){
    var cacheKey = method + JSON.stringify(params);
    PA.apiCache[cacheKey] = result;
  },
  regularError: function(err) {
    if (err.indexOf("Session needed") >= 0 || err.indexOf("Not logged in") >= 0) {
      PEM.fire("user_logout");
    } else {
      PEM.fire("error", err);
    }
  },
  badError: function() {
    PEM.fire("timeout");
    if (typeof(console) != 'undefined') console.log("Cannot communicate with main Piazza server. Check your internet connection, or try again later.");
  },
  checkSession: function(err, method) {
    if (method === "user.check_session") return;

    /* When we get session-related errors, check that this client hasn't been logged out in another window. */
    if (err.indexOf("No permission") >= 0 || err.indexOf("Your session is not active") >= 0 || err.indexOf("Action not allowed for unknown users") >= 0) {
      PA.call_pj("user.check_session", {}, 1, function(data) {
        if (data.id !== PA.user.id) { /* Server and client do not match user IDs! */
          //PD.triggerLogoutWarning();
          PEM.fire("user_logout");
        }
      }, function(err) {
        if (err.indexOf("Your session is not active") >= 0) { /* No user logged in, trigger warning. */
          PEM.fire("user_logout");
          //PD.triggerLogoutWarning();
        }
      });
    }
  },

  call_pj: function(method, params, blockObject, callback, error, scope) {
    var start = new Date().getTime();
    //if (typeof(console) != 'undefined') console.log("PA.call_pj method:" + method + ", params:" + JSON.stringify(params));
    var cached = PA.getCached(method, params);
    if(callback && cached && !cached.error && cached.result){  //don't return cached errors
       callback.call(scope, cached.result, cached.aid);
       return;
    }
    if(!window.CSRF_TOKEN){
      PA.callQueue.push({method:"call_pj", args:[method, params, blockObject, callback, error, scope]});
      return;
    }
    if (PA.cookie)
      params.cookie = PA.cookie;
    var csrfToken = window.CSRF_TOKEN;
    var data;

    if (PA.eventsToLog.length > 0) {
      data = JSON.stringify({method:method, params:params, logdata:{logevents:PA.eventsToLog}});
      PA.eventsToLog = [];
    }
    else
      data = JSON.stringify({method:method, params:params});

    data = data.replace(/\\u000a/gi, "\\n");
    //data = data.replace(/\?/gi, "%3F"); // not sure why we needed this
    if (blockObject) {
      if (blockObject != 1 && blockObject.block) blockObject.block();
    } else
      $.blockUI();
    if (PA.staticContent && method != "network.search" && method != "network.filter_feed") {
      var path = "/static/" + PA.staticContent + "/" + method;
      if (params.cid)
        path += "/" + params.cid;
      path += "?t=" + (new Date()).getTime();
      $.ajax({
        contentType: "application/json",
        url: path,
        type: 'GET',
        headers: {
          "CSRF-Token": csrfToken
        },
        success: function(data) {
          if (blockObject) {
            if (blockObject != 1 && blockObject.unblock) blockObject.unblock();
          } else
            $.unblockUI();
          if (data.result && callback)
            callback.call(scope, data.result, "static");

          var end = new Date().getTime();
          var elapsedTime = end - start;
          PA.writeApiTimeData(method,elapsedTime,params);
        },
        error: function(req, status, error) {
          if (blockObject && blockObject != 1)
            if (blockObject.unblock) blockObject.unblock();
          else
            $.unblockUI();
        }
      });
    } else {
      $.ajax({
        contentType: "application/json",
        url: '/logic/api?method=' + method + '&aid=' + (new Date()).getTime().toString(36) + Math.round(Math.random() * 1679616).toString(36),
        data: data,
        contentType: "application/json; charset=utf-8",
        headers : {
          "CSRF-Token" : csrfToken
        },
        success: function(data) {
          if (blockObject) {
            if (blockObject != 1 && blockObject.unblock) blockObject.unblock();
          } else
            $.unblockUI();
          if ((data.result || data.result === 0) && callback)
            callback.call(scope, data.result, data.aid);
          if (data.error) {
            if (data.error == "Please authenticate") {
              data.error = "Your session is not active. Please log in to Piazza to continue.";
            }
            if (error)
              error.call(scope, data.error);
            else
              PA.regularError(data.error);

            PA.checkSession(data.error, method);
          }
          var end = new Date().getTime();
          var elapsedTime = end - start;
          PA.writeApiTimeData(method,elapsedTime,params,data.aid);
        },
        error: function(req, status, err) {
          if (req.status > 0 && req.status < 500) {
            if (error)
              error.call(scope, err);
            else
              PA.regularError(err);
            PA.checkSession(err, method);
            return;
          }
          // try again first
          setTimeout(function(){
            $.ajax({
              contentType: "application/json",
              url: '/logic/api?method=' + method + '&aid=' + (new Date()).getTime().toString(36) + Math.round(Math.random() * 1679616).toString(36),
              data: data,
              headers: {
                "CSRF-Token": csrfToken
              },
              success: function(data) {
                if (blockObject) {
                  if (blockObject != 1 && blockObject.unblock) blockObject.unblock();
                } else
                  $.unblockUI();
                if (data.result && callback)
                  callback.call(scope, data.result, data.aid);
                if (data.error) {
                  if (error)
                    error.call(scope, data.error);
                  else
                    PA.regularError(data.error);
                }
                var end = new Date().getTime();
                var elapsedTime = end - start;
                PA.writeApiTimeData(method,elapsedTime,params,data.aid);
              },
              error: function(req, status, error) {
                if (blockObject)
                  if (blockObject != 1 && blockObject.unblock) blockObject.unblock();
                else
                  $.unblockUI();
                PA.badError(error);
              }
            });
          }, 3000);
        }
      });
    }
  },

  call: function(method, params, blockObject, callback, error, scope) {
    //XXXXXXXXXXXX
    if(!window.CSRF_TOKEN){
      PA.callQueue.push({method:"call", args:[method, params, blockObject, callback, error, scope]});
      return;
    }
    var start = new Date().getTime();
    if (PA.cookie)
      params.cookie = PA.cookie;
    var csrfToken = window.CSRF_TOKEN;
    var data = JSON.stringify({method:method, params:params});
    data = data.replace(/\\u000a/gi, "\\n");
    //if (typeof(PD) != 'undefined' && PD.loading)
    //  blockObject = 1; // do not show any block objects while loading
    //if (PA.user && PA.user.config && PA.user.config.no_spinner)
    //  blockObject = 1;
    if (blockObject) {
      if (blockObject != 1 && blockObject.block) blockObject.block();
    } else
      $.blockUI();
    if (PA.staticContent && method != "network.search") {
      var path = "/static/" + PA.staticContent + "/" + method;
      if (params.cid)
        path += "/" + params.cid
      path += "?t=" + (new Date()).getTime();
      $.ajax({
        contentType: "application/json",
        url: path,
        type: 'GET',
        headers: {
          "CSRF-Token": csrfToken
        },
        success: function(data) {
          if (blockObject) {
            if (blockObject != 1 && blockObject.unblock) blockObject.unblock();
          } else
            $.unblockUI();
          if (data.result && callback)
            callback.call(scope, data.result, "static");

          var end = new Date().getTime();
          var elapsedTime = end - start;
          PA.writeApiTimeData(method,elapsedTime,params,data.aid);
        },
        error: function(req, status, error) {
          if (blockObject && blockObject != 1)
            if (blockObject != 1 && blockObject.unblock) blockObject.unblock();
          else
            $.unblockUI();
        }
      });
    } else {
      $.ajax({
        contentType: "application/json",
        data: data,
        headers: {
          "CSRF-Token": csrfToken
        },
        success: function(data) {
          if (blockObject) {
            if (blockObject != 1 && blockObject.unblock) blockObject.unblock();
          } else
            $.unblockUI();
          if (data.result && callback)
            callback.call(scope, data.result, data.aid);
          if (data.error) {
            if (error)
              error.call(scope, data.error);
            else
              PA.regularError(data.error);
          }
          var end = new Date().getTime();
          var elapsedTime = end - start;
          PA.writeApiTimeData(method,elapsedTime,params,data.aid);
        },
        error: function(req, status, error) {
          if (blockObject && blockObject != 1)
            blockObject.unblock();
          else
            $.unblockUI();
        }
      });
    }
  },
  writeApiTimeData: function(method,elapsedTime,params,aid) {
    if (method == "log.write_time_data")
      return;
    if (typeof(DO_LOG_BOOMERANG_DATA) == 'undefined' || DO_LOG_BOOMERANG_DATA == 0)
      return;
    PA.logApiTimeData.push([method,elapsedTime,params,aid]);
    if (PA.logApiTimeData.length >= 5) {
      var params = { 
        timeData: PA.logApiTimeData
      };
      PA.call_pj("log.write_time_data", params, 1);
      PA.logApiTimeData = [];
    }
  },
  writeBoomrData: function(boomrObj, params) {
    if (typeof(DO_LOG_BOOMERANG_DATA) == 'undefined' || DO_LOG_BOOMERANG_DATA == 0)
      return;
    var loadJsRegex = /,t_load_js\|(\d+),/;
    var loadJsTimeMatch = boomrObj["t_other"].match(loadJsRegex);
    var loadJsTime = "";
    if (loadJsTimeMatch && loadJsTimeMatch.length > 1) {
      loadJsTime = loadJsTimeMatch[1];
    }
    var params = {
      perceivedLoadTime: boomrObj["t_done"],
      pageReady: boomrObj["t_page"],
      url: boomrObj["u"],
      aid: params["aid"],
      method: params["method"],
      http_verb: params["http_verb"],
      loadJsTime: loadJsTime
    };
    PA.call_pj("log.write_boomerang_data", params, 1);
  },
  getOthersList: function(uids, othersAnon, replaceId, othersA) {
    // if we have info about all users, return now. Otherwise, get info and then return.
    PA.othersId += 1;
    var title = "";
    var missing = [];
    for (var i = 0; i < uids.length; i++) {
      var id = uids[i];
      if (PA.users[id]) {
        title += (title.length > 0 ? "<br>" : "") + PA.users[id].name.replace(/'/,"&apos;").replace(/"/,"&quot;");
        if (othersAnon && othersAnon[i] == "stud") {
          var atitle = "";
          if (P.note_view.content.anon_map && P.note_view.content.anon_map[id])
            atitle = " " + PA.getAnonymousIcon(P.note_view.content.anon_map[id]).title;
          title += ' (Anon.' + atitle + ' to classmates)';          
        }
      } else if (id == "undefined") {
        var iconTitle = "";
        if (othersA && othersA[i])
          iconTitle = " " + PA.getAnonymousIcon(othersA[i]).title;
        title += (title.length > 0 ? "<br>" : "") + "Anonymous" + iconTitle;
      } else if (id == "Instructors") {
        title += (title.length > 0 ? "<br>" : "") + "Instructors";
      } else {
        missing.push(id);
      }
    }
    if (missing.length > 0 && !replaceId) {
      // get missing users, and register callback
      var myId = PA.othersId;
      PA.loadUsers(missing, function() {
        PA.getOthersList(uids, othersAnon, 'others_' + myId, othersA);
      });
      return "<a href='#' data-pats='multiple_contributors_popover' onclick='return false;' class='others' title='loading...' id='others_" + myId + "'>" + uids.length + " others</a>";
    } else {
      var str = "<a href='#' data-pats='multiple_contributors_popover' onclick='return false;' class='others' id='" + replaceId + "' title='" + title + "'>" + uids.length + " others</a>";
      if (replaceId) {
        $('div.tooltip.in').remove();
        $('#' + replaceId).replaceWith(str);
        $('#' + replaceId).tooltip({placement: 'left', html: true});
      }
      return str;
    }
  },
  getUserName: function(id, anon, my_private_post, incognito_text, is_followup, anonId) {
    if (id == "Instructors")
      return '<span class="user_name">Instructors</span>';
    var html = '';
    html += '<div anon="' + anon + '" anonid="' + anonId + '" class="user_name user_name_' + id ;
    if (is_followup)
      html += " is_followup";
    if (anon == "me") {
      if (id == PA.user.id) {
        html += '">You' + PA.getUserBadge(PA.user) + '</div>';
        return html;
      }
      anon = "no";
    }
    if (id && (!anon || anon != "full" || id != PA.user.id ) && id != "undefined") {
      if (PA.users[id]) {
        var uname = PA.users[id].name.replace(/'/,"&apos;").replace(/"/,"&quot;")
        if (anon  == "stud"){
          var title = "";
          if (!anonId && P.note_view.content.anon_map && P.note_view.content.anon_map[id])
            anonId = P.note_view.content.anon_map[id];
          if (anonId) title = " " + PA.getAnonymousIcon(anonId).title;
          html += ' user_name_anon anon_box_color">' + uname + '</div><span class="smallText">&nbsp;(Anon.' + title + ' to classmates)</span>' + PA.getUserBadge(PA.users[id]);
        } else {
          if (PA.shouldAddProfPopover(PA.users[id])) { 
              //html += '"><a class="view-profile-link" href="#" onClick="PEM.fire(\'showUserProfile\', \'' + id + '\');return false;" target="_self">' + PA.users[id].name + '</a></span>';
              html += '"><span class="name_wrapper">' + uname + PA.getUserBadge(PA.users[id]) + '</span>';
              html += PA.getProfilePopoverHtml(PA.users[id], is_followup) + '</div>';
          } else {
            html +=  '">' + uname + PA.getUserBadge(PA.users[id]) + '</div>';
          }
        }
      } else {
        html += ' user_loading">Loading...</div>';
        PA.loadUser(id);
      }
    } else if (my_private_post && anon == "stud") {
      if (incognito_text) {
        html += ' user_name_anon anon_box_color" notutorial="anonymous to classmates">you' + PA.getUserBadge(PA.user) + '</div>';
      } else {
        html += ' user_name_anon anon_box_color" notutorial="anonymous to classmates">' + PA.user.name + PA.getUserBadge(PA.user) + '</div>';
      }
    } else {
      if (anonId && P.note_view.content) {
        var icon = PA.getAnonymousIcon(anonId);
        html += ' ">Anonymous ' + icon.title + '</div>';
      } else {
        html += ' ">Anonymous </div>';
      }
    }
    return html;
  },
  getProfilePopoverHtml: function(usr, is_followup) { //assumes id exists in PA.users[id]
    if (!usr.profile) return "";
    var popoverTemplate = PTM.getTemplate('student_classmate_popover');
    var popoverContext = PA.getPopoverContext(usr);
    var html = popoverTemplate(popoverContext);
    if(is_followup) html = html.replace("student_popover", "student_popover student_popover_right");
    return html;
  },
  getPopoverContext: function(usr) {
    var imagePath = 'https://dvngeac8rg9mb.cloudfront.net/images/dashboard/common/default_user.png';
    if (usr.photo_url){
      imagePath = usr.photo_url;
    }
    var academics = usr.profile.academics;
    if (!academics) academics = {};
    var classes = [];
    var workedAt = [];
    for (var nid in usr.profile.all_classes) {
      var c = usr.profile.all_classes[nid];
      classes.push({isTA:c.is_ta, isTS:c.is_top, number:c.num, name:c.name, term:c.term})
    }
    classes.sort(function(a,b){
      if (a.isTA && !b.isTA) return -1;
      if (b.isTA && !a.isTA) return 1;
      if (a.isTS && !b.isTS) return -1;
      if (b.isTS && !a.isTS) return 1;
      if (a.number > b.number) return 1;
      if (a.number < b.number) return -1;
      return 0;
    });
    var classesMore = 0;
    if (classes.length > 3) {
      classesMore = classes.length - 3;
      classes.splice(3, classesMore);
    }
    if (!usr.profile.work_experience) usr.profile.work_experience = [];
    for (var i = 0; i < usr.profile.work_experience.length; i++) {
      var exp = usr.profile.work_experience[i];
      workedAt.push(exp);
    }
    var workedMore = 0;
    if (workedAt.length > 2) {
      workedMore = workedAt.length - 2;
      workedAt.splice(2, workedMore);
    }
    return {
      name: usr.name,
      id: usr.id,
      nid: P.modules.network.id,
      studentStatus: academics.program,
      gradMonth: academics.grad_month_str,
      gradYear: academics.grad_year,
      major: academics.major,
      imgUrl: imagePath,
      classes: classes,
      classesMore: classesMore,
      workedAt: workedAt,
      workedMore: workedMore,
      canShow: PA.user.config.published
    }
  },
  getAnonymousIcon: function(id) {
    var nr = parseInt(id.replace("a_", "")) + 1;
    var rnd = P.note_view.content.id.charCodeAt(P.note_view.content.id.length - 1);
    var bigPrimes = [23, 29, 31, 37]; // 36 primes
    var idx = bigPrimes[rnd % bigPrimes.length] * nr + rnd;
    var names = ['anon_icon-01', 'anon_icon-02', 'anon_icon-03', 'anon_icon-04', 'anon_icon-05', 'anon_icon-06', 'anon_icon-07', 'anon_icon-08', 'anon_icon-09'];
    var namesC = ['Atom', 'Helix', 'Mouse', 'Beaker', 'Calc', 'Comp', 'Gear', 'Scale', 'Poet'];
    var level = parseInt((nr - 1) / names.length);
    var title = namesC[idx % names.length];
    if (level > 0) {
      title += " " + (level + 1);
    }
    return {icon:names[idx % names.length], title:title};
  },
  getUserPic: function(id, id_a) {
    var no_resize = false;
    var no_border = false;
    var resize = (no_resize) ? '' : 'onload="onImageLoad(event);"';
    var border = (no_border) ? 'no_border' : 'white_border';
    var html = '<div class="user_pic user_pic_' + id ;
    if (id && id != "0") {
      if (PA.users[id]) {
        var imagePath = 'https://dvngeac8rg9mb.cloudfront.net/images/dashboard/common/default_user.png';
        if (PA.users[id].email == 'admin') imagePath = 'https://dvngeac8rg9mb.cloudfront.net/images/dashboard/common/nerd_small.png';
        if(PA.users[id].photo_url){
          imagePath = PA.users[id].photo_url;
        } else if (PA.users[id].facebook_id){
          imagePath = 'https://graph.facebook.com/' + PA.users[id].facebook_id + '/picture?type=square';
        }
        html += '"><div class="' + border + '"><img title="' + PA.users[id].name.replace(/"/g, '&quot;') + '" src="' + imagePath + '" ' + resize + ' /></div>';
      } else {
        html += ' user_loading">&nbsp;';
        PA.loadUser(id);
      }
    } else {
      if (id_a && P.note_view.content) {
        var icon = PA.getAnonymousIcon(id_a);
        html += '"><div class="' + border + '"><img title="Anonymous ' + icon.title + '" src="/images/dashboard/common/anon_icons/' + icon.icon + '.jpg" ' + resize + ' /></div>';
      } else {
        html += '"><div class="' + border + '"><img title="Anonymous" src="https://dvngeac8rg9mb.cloudfront.net/images/dashboard/common/default_anonymous.png" ' + resize + ' /></div>';
      }
    }
    html += "</div>";
    return html;
  },
  getUserBadge: function(user) {
//
//        <span class="answer_badge piazza_badge"></span>
//        <span class="answer_badge class_badge"></span>
//
    var str = "";
    // verify that this user is not instructor in this class
    if (PA.profs && PA.profs[user.id]) return str;
    if (user.endorser && user.endorser.global)
      str += '<span class="answer_badge piazza_badge"></span>';
    if (user.endorser && user.endorser[P.modules.network.id])
      str += '<span class="answer_badge class_badge"></span>';
    return str;
  },
  setUserPic: function(usr) {
    $('.user_name_' + usr.id).each(function(){
      var is_followup = $(this).hasClass("is_followup");
      var userHtml = usr.name;
      if (PA.shouldAddProfPopover(usr)) {
        userHtml = '<span class="name_wrapper">' + usr.name+'</span>';
        userHtml += PA.getProfilePopoverHtml(usr, is_followup);
      }
      //if (P.modules.network.type != 'group'  && !P.modules.network.prof_hash[usr.id])
      //  userHtml = '<a class="view-profile-link" href="#" onClick="PEM.fire(\'showUserProfile\', \'' + usr.id + '\');return false;" target="_self">' + usr.name + '</a>';
      var anonId = $(this).attr("anonid");
      if ($(this).attr("anon") == "stud" && anonId) {
        var title = "";
        if (anonId) title = " " + PA.getAnonymousIcon(anonId).title;
        $(this).html(userHtml + " <span class=\"smallText\">(Anon." + title + " to classmates)</span>" + PA.getUserBadge(usr));
      } else {
        $(this).html(userHtml + PA.getUserBadge(usr));
      }
    });
    var imagePath = 'https://dvngeac8rg9mb.cloudfront.net/images/dashboard/common/default_user.png';
    if (usr.email == 'admin') imagePath = 'https://dvngeac8rg9mb.cloudfront.net/images/dashboard/common/nerd_small.png';
    if (usr.photo_url)
      imagePath = usr.photo_url;
    else if (usr.facebook_id)
      imagePath = 'https://graph.facebook.com/' + usr.facebook_id + '/picture?type=square';
    $('.user_pic_' + usr.id).html('<div class="white_border"><img title="'+usr.name.replace(/"/g, '&quot;')+'" src="' + imagePath + '" onload="onImageLoad(event);"/></div>');
    if (usr.id == PA.user.id)
      PA.user.photo = usr.photo;
    try {
      $('.user_name_' + usr.id + ' .class_badge').tooltip({
        'placement': 'left',
        'container': 'body',
        'title': 'Instructor-endorsed answerer in this class'
      });
      $('.user_name_' + usr.id + ' .piazza_badge').tooltip({
        'placement': 'left',
        'container': 'body',
        'title': 'Instructor-endorsed answerer on Piazza'
      });
    } catch (err) {}
  },
  shouldAddProfPopover: function(usr) {
    if (!usr.profile || !PA.user.showClassmates) return false;
    return P.modules.network.type != 'group' && !P.modules.network.prof_hash[usr.id] && !PA.user.isInst;
  },
  loadUsers: function(ids, callback) {
    if (callback)
      PA.userCallback.push(callback);
    for (var i = 0; i < ids.length; i++)
      PA.loadUser(ids[i]);
  },
  loadUser: function(id) {
    if (!PA.userQueue.exist(id))
      PA.userQueue.push(id);
    if (!PA.userTimeout)
      PA.userTimeout = setTimeout('PA.getQueuedUsers()', 100);
  },
  getQueuedUsers: function() {
    var data = {ids:PA.userQueue, nid:P.modules.network.id};
    if (typeof(ANONYMIZE) != "undefined" && ANONYMIZE) { data["anonymize"] = "true"; }
    PA.call_pj("network.get_users", data, 1, function(data){
      data.forEach(function(usr){
        PA.users[usr.id] = usr;
        PA.setUserPic(usr);
      });
      if (PA.userCallback.length > 0) {
        for (var i = 0; i < PA.userCallback.length; i++)
          PA.userCallback[i].call(window);
      }
      PA.userCallback = [];
      $('div.tooltip.in').remove() // remove old tipsy messages
      //if (typeof(PD) != 'undefined') $('.user_name_anon').tipsy({gravity: 'n', html: true});
    });
    PA.userQueue = [];
    PA.userTimeout = null;
  },
  isProfessor: function() {
    var networks = PA.user.networks;
    var adminMap = PA.user.can_admin || {};
    var profCount = 0;
    for (var nid in adminMap) {
      if (adminMap.hasOwnProperty(nid) && adminMap[nid] > 5) {
        profCount++;
      }
    }
    // if a user is a student in more classes than they're a prof, then we consider them a student
    return profCount >= networks.length/2;
  },
  hasPermission: function(name) {
    if (!PA.user.network_permissions) return false;
    return PA.user.network_permissions[name];
  },
  trackEvent: function() {
    // nothing
  },
  markSeenUnseen: function(message, unmark) {
    PA.call_pj("user." + (unmark ? "un" : "") + "mark_seen", {msg:message}, 1);
    if (!unmark) {
      if (!PA.user.config.seen_message) PA.user.config.seen_message = [];
      PA.user.config.seen_message.push(message);
    }
  },
  isSeenUser: function(msg) {
    return PA.user && PA.user.config && PA.user.config.seen_message && PA.user.config.seen_message.exist(msg);
  },
  isSeenCompany: function(msg) {
    if (typeof(MY_CONF) === 'undefined') return false;
    return MY_CONF && MY_CONF.seen && MY_CONF.seen.exist(msg);
  },
  markSeenCompany: function(message, unmark) {
    var params = {msg:message};
    if (unmark) params.unmark = 1;
    PA.call_pj("careers_company.mark_seen", params, 1);
    if (typeof(MY_CONF) === 'undefined' || !MY_CONF) MY_CONF = {};
    if (!MY_CONF.seen) MY_CONF.seen = [];
    if (!unmark) {
      MY_CONF.seen.push(message);
    }
  },
  markSeenNetwork: function(network, msg) {
    if(!network.config.seen_message) {
      network.config.seen_message = [];
    }
    // no need to mark as seen if it's already seen
    if(PA.isSeenNetwork(network, msg)) {
      return;
    }
    network.config.seen_message.push(msg);
    PA.call_pj("network.mark_seen", {
      nid: network.id,
      message: msg
    }, 1);
  },
  isSeenNetwork: function(network, msg) {
    return network.config && (network.config.seen_message instanceof Array) && network.config.seen_message.exist(msg);
  },
  load: function(path, blockObject, callback, error, scope) {
    if (PA.user && PA.user.config && PA.user.config.no_spinner)
      blockObject = 1;
    if (blockObject) {
      if (blockObject != 1 && blockObject.block) blockObject.block();
    } else
      $.blockUI();
    if (path.indexOf('?') < 0)
      path += "?t=" + (new Date()).getTime();
    else
      path += "&t=" + (new Date()).getTime();
    $.ajax({
      url: path,
      type: 'GET',
      dataType: 'html',
      success: function(data) {
        if (blockObject) {
          if (blockObject != 1 && blockObject.unblock) blockObject.unblock();
        } else
          $.unblockUI();
        if (data && callback)
          callback.call(scope, data);
      },
      error: function(req, status, err) {
        if (blockObject)
          if (blockObject != 1 && blockObject.unblock) blockObject.unblock();
        else
          $.unblockUI();
        if (error)
          error.call(scope, err);
      }
    });
  },
  // get network with the given nid out of PA.user.networks
  getNetwork: function(nid) {
    if(PA.user === null) {
      return undefined;
    }
    return PA.user.networks.findAll(function(network) {
      return network.id === nid;
    })[0];
  }

}

PEM.addListener("user", PA.cacheUser);

$.ajaxSetup({
    url: '/main/api',
    type: 'POST',
    dataType: 'json',
    timeout: 15 * 60 * 1000 // 15 minute timeout
});

$.blockUI.defaults.overlayCSS["z-index"] = "1000000";
$.blockUI.defaults.css["z-index"] = "1000001";
$.blockUI.defaults.css.border = 'none';
$.blockUI.defaults.css.cursor = 'default';
$.blockUI.defaults.overlayCSS.cursor = 'default';
$.blockUI.defaults.message = '';

window.CSRF_TOKEN = $('meta[name=csrf_token]').attr('content');

if(!window.CSRF_TOKEN){
  var script = document.createElement('script');
  script.src = "/main/csrf_token";
  script.onload = function(){
    if(PA.callQueue.length > 0){
      for(var i = 0; i < PA.callQueue.length; i++){
        var c = PA.callQueue[i];
        PA[c.method].call(null, c.args[0], c.args[1], c.args[2], c.args[3], c.args[4], c.args[5]);
      }
    }
  };
  document.head.appendChild(script);
}






/*@@version@@*/
(function(){var f=0,l=[],n={},j={},a={"<":"lt",">":"gt","&":"amp",'"':"quot","'":"#39"},m=/[<>&\"\']/g,b,c=window.setTimeout,d={},e;function h(){this.returnValue=false}function k(){this.cancelBubble=true}(function(o){var p=o.split(/,/),q,s,r;for(q=0;q<p.length;q+=2){r=p[q+1].split(/ /);for(s=0;s<r.length;s++){j[r[s]]=p[q]}}})("application/msword,doc dot,application/pdf,pdf,application/pgp-signature,pgp,application/postscript,ps ai eps,application/rtf,rtf,application/vnd.ms-excel,xls xlb,application/vnd.ms-powerpoint,ppt pps pot,application/zip,zip,application/x-shockwave-flash,swf swfl,application/vnd.openxmlformats-officedocument.wordprocessingml.document,docx,application/vnd.openxmlformats-officedocument.wordprocessingml.template,dotx,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,xlsx,application/vnd.openxmlformats-officedocument.presentationml.presentation,pptx,application/vnd.openxmlformats-officedocument.presentationml.template,potx,application/vnd.openxmlformats-officedocument.presentationml.slideshow,ppsx,application/x-javascript,js,application/json,json,audio/mpeg,mpga mpega mp2 mp3,audio/x-wav,wav,audio/mp4,m4a,image/bmp,bmp,image/gif,gif,image/jpeg,jpeg jpg jpe,image/photoshop,psd,image/png,png,image/svg+xml,svg svgz,image/tiff,tiff tif,text/plain,asc txt text diff log,text/html,htm html xhtml,text/css,css,text/csv,csv,text/rtf,rtf,video/mpeg,mpeg mpg mpe m2v,video/quicktime,qt mov,video/mp4,mp4,video/x-m4v,m4v,video/x-flv,flv,video/x-ms-wmv,wmv,video/avi,avi,video/webm,webm,video/3gpp,3gp,video/3gpp2,3g2,video/vnd.rn-realvideo,rv,application/vnd.oasis.opendocument.formula-template,otf,application/octet-stream,exe");var g={VERSION:"@@version@@",STOPPED:1,STARTED:2,QUEUED:1,UPLOADING:2,FAILED:4,DONE:5,GENERIC_ERROR:-100,HTTP_ERROR:-200,IO_ERROR:-300,SECURITY_ERROR:-400,INIT_ERROR:-500,FILE_SIZE_ERROR:-600,FILE_EXTENSION_ERROR:-601,IMAGE_FORMAT_ERROR:-700,IMAGE_MEMORY_ERROR:-701,IMAGE_DIMENSIONS_ERROR:-702,mimeTypes:j,ua:(function(){var s=navigator,r=s.userAgent,t=s.vendor,p,o,q;p=/WebKit/.test(r);q=p&&t.indexOf("Apple")!==-1;o=window.opera&&window.opera.buildNumber;return{windows:navigator.platform.indexOf("Win")!==-1,android:/Android/.test(r),ie:!p&&!o&&(/MSIE/gi).test(r)&&(/Explorer/gi).test(s.appName),webkit:p,gecko:!p&&/Gecko/.test(r),safari:q,opera:!!o}}()),typeOf:function(p){return({}).toString.call(p).match(/\s([a-z|A-Z]+)/)[1].toLowerCase()},extend:function(o){g.each(arguments,function(p,q){if(q>0){g.each(p,function(s,r){o[r]=s})}});return o},cleanName:function(o){var p,q;q=[/[\300-\306]/g,"A",/[\340-\346]/g,"a",/\307/g,"C",/\347/g,"c",/[\310-\313]/g,"E",/[\350-\353]/g,"e",/[\314-\317]/g,"I",/[\354-\357]/g,"i",/\321/g,"N",/\361/g,"n",/[\322-\330]/g,"O",/[\362-\370]/g,"o",/[\331-\334]/g,"U",/[\371-\374]/g,"u"];for(p=0;p<q.length;p+=2){o=o.replace(q[p],q[p+1])}o=o.replace(/\s+/g,"_");o=o.replace(/[^a-z0-9_\-\.]+/gi,"");return o},addRuntime:function(o,p){p.name=o;l[o]=p;l.push(p);return p},guid:function(){var o=new Date().getTime().toString(32),p;for(p=0;p<5;p++){o+=Math.floor(Math.random()*65535).toString(32)}return(g.guidPrefix||"p")+o+(f++).toString(32)},buildUrl:function(p,o){var q="";g.each(o,function(s,r){q+=(q?"&":"")+encodeURIComponent(r)+"="+encodeURIComponent(s)});if(q){p+=(p.indexOf("?")>0?"&":"?")+q}return p},each:function(r,s){var q,p,o;if(r){q=r.length;if(q===b){for(p in r){if(r.hasOwnProperty(p)){if(s(r[p],p)===false){return}}}}else{for(o=0;o<q;o++){if(s(r[o],o)===false){return}}}}},formatSize:function(o){if(o===b||/\D/.test(o)){return g.translate("N/A")}if(o>1073741824){return Math.round(o/1073741824,1)+" GB"}if(o>1048576){return Math.round(o/1048576,1)+" MB"}if(o>1024){return Math.round(o/1024,1)+" KB"}return o+" b"},getPos:function(p,t){var u=0,s=0,w,v=document,q,r;p=p;t=t||v.body;function o(C){var A,B,z=0,D=0;if(C){B=C.getBoundingClientRect();A=v.compatMode==="CSS1Compat"?v.documentElement:v.body;z=B.left+A.scrollLeft;D=B.top+A.scrollTop}return{x:z,y:D}}if(p&&p.getBoundingClientRect&&g.ua.ie&&(!v.documentMode||v.documentMode<8)){q=o(p);r=o(t);return{x:q.x-r.x,y:q.y-r.y}}w=p;while(w&&w!=t&&w.nodeType){u+=w.offsetLeft||0;s+=w.offsetTop||0;w=w.offsetParent}w=p.parentNode;while(w&&w!=t&&w.nodeType){u-=w.scrollLeft||0;s-=w.scrollTop||0;w=w.parentNode}return{x:u,y:s}},getSize:function(o){return{w:o.offsetWidth||o.clientWidth,h:o.offsetHeight||o.clientHeight}},parseSize:function(o){var p;if(typeof(o)=="string"){o=/^([0-9]+)([mgk]?)$/.exec(o.toLowerCase().replace(/[^0-9mkg]/g,""));p=o[2];o=+o[1];if(p=="g"){o*=1073741824}if(p=="m"){o*=1048576}if(p=="k"){o*=1024}}return o},xmlEncode:function(o){return o?(""+o).replace(m,function(p){return a[p]?"&"+a[p]+";":p}):o},toArray:function(q){var p,o=[];for(p=0;p<q.length;p++){o[p]=q[p]}return o},inArray:function(q,r){if(r){if(Array.prototype.indexOf){return Array.prototype.indexOf.call(r,q)}for(var o=0,p=r.length;o<p;o++){if(r[o]===q){return o}}}return -1},addI18n:function(o){return g.extend(n,o)},translate:function(o){return n[o]||o},isEmptyObj:function(o){if(o===b){return true}for(var p in o){return false}return true},hasClass:function(q,p){var o;if(q.className==""){return false}o=new RegExp("(^|\\s+)"+p+"(\\s+|$)");return o.test(q.className)},addClass:function(p,o){if(!g.hasClass(p,o)){p.className=p.className==""?o:p.className.replace(/\s+$/,"")+" "+o}},removeClass:function(q,p){var o=new RegExp("(^|\\s+)"+p+"(\\s+|$)");q.className=q.className.replace(o,function(s,r,t){return r===" "&&t===" "?" ":""})},getStyle:function(p,o){if(p.currentStyle){return p.currentStyle[o]}else{if(window.getComputedStyle){return window.getComputedStyle(p,null)[o]}}},addEvent:function(t,o,u){var s,r,q,p;p=arguments[3];o=o.toLowerCase();if(e===b){e="Plupload_"+g.guid()}if(t.addEventListener){s=u;t.addEventListener(o,s,false)}else{if(t.attachEvent){s=function(){var v=window.event;if(!v.target){v.target=v.srcElement}v.preventDefault=h;v.stopPropagation=k;u(v)};t.attachEvent("on"+o,s)}}if(t[e]===b){t[e]=g.guid()}if(!d.hasOwnProperty(t[e])){d[t[e]]={}}r=d[t[e]];if(!r.hasOwnProperty(o)){r[o]=[]}r[o].push({func:s,orig:u,key:p})},removeEvent:function(t,o){var r,u,q;if(typeof(arguments[2])=="function"){u=arguments[2]}else{q=arguments[2]}o=o.toLowerCase();if(t[e]&&d[t[e]]&&d[t[e]][o]){r=d[t[e]][o]}else{return}for(var p=r.length-1;p>=0;p--){if(r[p].key===q||r[p].orig===u){if(t.removeEventListener){t.removeEventListener(o,r[p].func,false)}else{if(t.detachEvent){t.detachEvent("on"+o,r[p].func)}}r[p].orig=null;r[p].func=null;r.splice(p,1);if(u!==b){break}}}if(!r.length){delete d[t[e]][o]}if(g.isEmptyObj(d[t[e]])){delete d[t[e]];try{delete t[e]}catch(s){t[e]=b}}},removeAllEvents:function(p){var o=arguments[1];if(p[e]===b||!p[e]){return}g.each(d[p[e]],function(r,q){g.removeEvent(p,q,o)})}};g.Uploader=function(s){var p={},v,u=[],r,q=false;v=new g.QueueProgress();s=g.extend({chunk_size:0,multipart:true,multi_selection:true,file_data_name:"file",filters:[]},s);function t(){var x,y=0,w;if(this.state==g.STARTED){for(w=0;w<u.length;w++){if(!x&&u[w].status==g.QUEUED){x=u[w];x.status=g.UPLOADING;if(this.trigger("BeforeUpload",x)){this.trigger("UploadFile",x)}}else{y++}}if(y==u.length){this.stop();this.trigger("UploadComplete",u)}}}function o(){var x,w;v.reset();for(x=0;x<u.length;x++){w=u[x];if(w.size!==b){v.size+=w.size;v.loaded+=w.loaded}else{v.size=b}if(w.status==g.DONE){v.uploaded++}else{if(w.status==g.FAILED){v.failed++}else{v.queued++}}}if(v.size===b){v.percent=u.length>0?Math.ceil(v.uploaded/u.length*100):0}else{v.bytesPerSec=Math.ceil(v.loaded/((+new Date()-r||1)/1000));v.percent=v.size>0?Math.ceil(v.loaded/v.size*100):0}}g.extend(this,{state:g.STOPPED,runtime:"",features:{},files:u,settings:s,total:v,id:g.guid(),init:function(){var B=this,C,y,x,A=0,z;if(typeof(s.preinit)=="function"){s.preinit(B)}else{g.each(s.preinit,function(E,D){B.bind(D,E)})}s.page_url=s.page_url||document.location.pathname.replace(/\/[^\/]+$/g,"/");if(!/^(\w+:\/\/|\/)/.test(s.url)){s.url=s.page_url+s.url}s.chunk_size=g.parseSize(s.chunk_size);s.max_file_size=g.parseSize(s.max_file_size);B.bind("FilesAdded",function(D,G){var F,E,I=0,J,H=s.filters;if(H&&H.length){J=[];g.each(H,function(K){g.each(K.extensions.split(/,/),function(L){if(/^\s*\*\s*$/.test(L)){J.push("\\.*")}else{J.push("\\."+L.replace(new RegExp("["+("/^$.*+?|()[]{}\\".replace(/./g,"\\$&"))+"]","g"),"\\$&"))}})});J=new RegExp(J.join("|")+"$","i")}for(F=0;F<G.length;F++){E=G[F];E.loaded=0;E.percent=0;E.status=g.QUEUED;if(J&&!J.test(E.name)){D.trigger("Error",{code:g.FILE_EXTENSION_ERROR,message:g.translate("File extension error."),file:E});continue}if(E.size!==b&&E.size>s.max_file_size){D.trigger("Error",{code:g.FILE_SIZE_ERROR,message:g.translate("File size error."),file:E});continue}u.push(E);I++}if(I){c(function(){B.trigger("QueueChanged");B.refresh()},1)}else{return false}});if(s.unique_names){B.bind("UploadFile",function(D,E){var G=E.name.match(/\.([^.]+)$/),F="tmp";if(G){F=G[1]}E.target_name=E.id+"."+F})}B.bind("UploadProgress",function(D,E){E.percent=E.size>0?Math.ceil(E.loaded/E.size*100):100;o()});B.bind("StateChanged",function(D){if(D.state==g.STARTED){r=(+new Date())}else{if(D.state==g.STOPPED){for(C=D.files.length-1;C>=0;C--){if(D.files[C].status==g.UPLOADING){D.files[C].status=g.QUEUED;o()}}}}});B.bind("QueueChanged",o);B.bind("Error",function(D,E){if(E.file){E.file.status=g.FAILED;o();if(D.state==g.STARTED){c(function(){t.call(B)},1)}}});B.bind("FileUploaded",function(D,E){E.status=g.DONE;E.loaded=E.size;D.trigger("UploadProgress",E);c(function(){t.call(B)},1)});if(s.runtimes){y=[];z=s.runtimes.split(/\s?,\s?/);for(C=0;C<z.length;C++){if(l[z[C]]){y.push(l[z[C]])}}}else{y=l}function w(){var G=y[A++],F,D,E;if(G){F=G.getFeatures();D=B.settings.required_features;if(D){D=D.split(",");for(E=0;E<D.length;E++){if(!F[D[E]]){w();return}}}G.init(B,function(H){if(H&&H.success){B.features=F;B.runtime=G.name;B.trigger("Init",{runtime:G.name});B.trigger("PostInit");B.refresh()}else{w()}})}else{B.trigger("Error",{code:g.INIT_ERROR,message:g.translate("Init error.")})}}w();if(typeof(s.init)=="function"){s.init(B)}else{g.each(s.init,function(E,D){B.bind(D,E)})}},refresh:function(){this.trigger("Refresh")},start:function(){if(u.length&&this.state!=g.STARTED){this.state=g.STARTED;this.trigger("StateChanged");t.call(this)}},stop:function(){if(this.state!=g.STOPPED){this.state=g.STOPPED;this.trigger("CancelUpload");this.trigger("StateChanged")}},disableBrowse:function(){q=arguments[0]!==b?arguments[0]:true;this.trigger("DisableBrowse",q)},getFile:function(x){var w;for(w=u.length-1;w>=0;w--){if(u[w].id===x){return u[w]}}},removeFile:function(x){var w;for(w=u.length-1;w>=0;w--){if(u[w].id===x.id){return this.splice(w,1)[0]}}},splice:function(y,w){var x;x=u.splice(y===b?0:y,w===b?u.length:w);this.trigger("FilesRemoved",x);this.trigger("QueueChanged");return x},trigger:function(x){var z=p[x.toLowerCase()],y,w;if(z){w=Array.prototype.slice.call(arguments);w[0]=this;for(y=0;y<z.length;y++){if(z[y].func.apply(z[y].scope,w)===false){return false}}}return true},hasEventListener:function(w){return !!p[w.toLowerCase()]},bind:function(w,y,x){var z;w=w.toLowerCase();z=p[w]||[];z.push({func:y,scope:x||this});p[w]=z},unbind:function(w){w=w.toLowerCase();var z=p[w],x,y=arguments[1];if(z){if(y!==b){for(x=z.length-1;x>=0;x--){if(z[x].func===y){z.splice(x,1);break}}}else{z=[]}if(!z.length){delete p[w]}}},unbindAll:function(){var w=this;g.each(p,function(y,x){w.unbind(x)})},destroy:function(){this.stop();this.trigger("Destroy");this.unbindAll()}})};g.File=function(r,p,q){var o=this;o.id=r;o.name=p;o.size=q;o.loaded=0;o.percent=0;o.status=0};g.Runtime=function(){this.getFeatures=function(){};this.init=function(o,p){}};g.QueueProgress=function(){var o=this;o.size=0;o.loaded=0;o.uploaded=0;o.failed=0;o.queued=0;o.percent=0;o.bytesPerSec=0;o.reset=function(){o.size=o.loaded=o.uploaded=o.failed=o.queued=o.percent=o.bytesPerSec=0}};g.runtimes={};window.plupload=g})();(function(){if(window.google&&google.gears){return}var a=null;if(typeof GearsFactory!="undefined"){a=new GearsFactory()}else{try{a=new ActiveXObject("Gears.Factory");if(a.getBuildInfo().indexOf("ie_mobile")!=-1){a.privateSetGlobalObject(this)}}catch(b){if((typeof navigator.mimeTypes!="undefined")&&navigator.mimeTypes["application/x-googlegears"]){a=document.createElement("object");a.style.display="none";a.width=0;a.height=0;a.type="application/x-googlegears";document.documentElement.appendChild(a)}}}if(!a){return}if(!window.google){window.google={}}if(!google.gears){google.gears={factory:a}}})();(function(e,b,c,d){var f={};function a(h,k,m){var g,j,l,o;j=google.gears.factory.create("beta.canvas");try{j.decode(h);if(!k.width){k.width=j.width}if(!k.height){k.height=j.height}o=Math.min(k.width/j.width,k.height/j.height);if(o<1){j.resize(Math.round(j.width*o),Math.round(j.height*o))}else{if(!k.quality||m!=="image/jpeg"){return h}}if(k.quality){return j.encode(m,{quality:k.quality/100})}return j.encode(m)}catch(n){}return h}c.runtimes.Gears=c.addRuntime("gears",{getFeatures:function(){return{dragdrop:true,jpgresize:true,pngresize:true,chunks:true,progress:true,multipart:true,multi_selection:true}},init:function(l,n){var m,h,g=false;if(!e.google||!google.gears){return n({success:false})}try{m=google.gears.factory.create("beta.desktop")}catch(k){return n({success:false})}function j(q){var p,o,r=[],s;for(o=0;o<q.length;o++){p=q[o];s=c.guid();f[s]=p.blob;r.push(new c.File(s,p.name,p.blob.length))}l.trigger("FilesAdded",r)}l.bind("PostInit",function(){var p=l.settings,o=b.getElementById(p.drop_element);if(o){c.addEvent(o,"dragover",function(q){m.setDropEffect(q,"copy");q.preventDefault()},l.id);c.addEvent(o,"drop",function(r){var q=m.getDragData(r,"application/x-gears-files");if(q){j(q.files)}r.preventDefault()},l.id);o=0}c.addEvent(b.getElementById(p.browse_button),"click",function(u){var t=[],r,q,s;u.preventDefault();if(g){return}no_type_restriction:for(r=0;r<p.filters.length;r++){s=p.filters[r].extensions.split(",");for(q=0;q<s.length;q++){if(s[q]==="*"){t=[];break no_type_restriction}t.push("."+s[q])}}m.openFiles(j,{singleFile:!p.multi_selection,filter:t})},l.id)});l.bind("CancelUpload",function(){if(h.abort){h.abort()}});l.bind("UploadFile",function(u,r){var w=0,v,s,t=0,q=u.settings.resize,o;if(q&&/\.(png|jpg|jpeg)$/i.test(r.name)){f[r.id]=a(f[r.id],q,/\.png$/i.test(r.name)?"image/png":"image/jpeg")}r.size=f[r.id].length;s=u.settings.chunk_size;o=s>0;v=Math.ceil(r.size/s);if(!o){s=r.size;v=1}function p(){var C,y=u.settings.multipart,x=0,B={name:r.target_name||r.name},z=u.settings.url;function A(E){var D,J="----pluploadboundary"+c.guid(),G="--",I="\r\n",F,H;if(y){h.setRequestHeader("Content-Type","multipart/form-data; boundary="+J);D=google.gears.factory.create("beta.blobbuilder");c.each(c.extend(B,u.settings.multipart_params),function(L,K){D.append(G+J+I+'Content-Disposition: form-data; name="'+K+'"'+I+I);D.append(L+I)});H=c.mimeTypes[r.name.replace(/^.+\.([^.]+)/,"$1").toLowerCase()]||"application/octet-stream";D.append(G+J+I+'Content-Disposition: form-data; name="'+u.settings.file_data_name+'"; filename="'+r.name+'"'+I+"Content-Type: "+H+I+I);D.append(E);D.append(I+G+J+G+I);F=D.getAsBlob();x=F.length-E.length;E=F}h.send(E)}if(r.status==c.DONE||r.status==c.FAILED||u.state==c.STOPPED){return}if(o){B.chunk=w;B.chunks=v}C=Math.min(s,r.size-(w*s));if(!y){z=c.buildUrl(u.settings.url,B)}h=google.gears.factory.create("beta.httprequest");h.open("POST",z);if(!y){h.setRequestHeader("Content-Disposition",'attachment; filename="'+r.name+'"');h.setRequestHeader("Content-Type","application/octet-stream")}c.each(u.settings.headers,function(E,D){h.setRequestHeader(D,E)});h.upload.onprogress=function(D){r.loaded=t+D.loaded-x;u.trigger("UploadProgress",r)};h.onreadystatechange=function(){var D;if(h.readyState==4&&u.state!==c.STOPPED){if(h.status==200){D={chunk:w,chunks:v,response:h.responseText,status:h.status};u.trigger("ChunkUploaded",r,D);if(D.cancelled){r.status=c.FAILED;return}t+=C;if(++w>=v){r.status=c.DONE;u.trigger("FileUploaded",r,{response:h.responseText,status:h.status})}else{p()}}else{u.trigger("Error",{code:c.HTTP_ERROR,message:c.translate("HTTP Error."),file:r,chunk:w,chunks:v,status:h.status})}}};if(w<v){A(f[r.id].slice(w*s,C))}}p()});l.bind("DisableBrowse",function(o,p){g=p});l.bind("Destroy",function(o){var p,q,r={browseButton:o.settings.browse_button,dropElm:o.settings.drop_element};for(p in r){q=b.getElementById(r[p]);if(q){c.removeAllEvents(q,o.id)}}});n({success:true})}})})(window,document,plupload);(function(g,b,d,e){var a={},h={};function c(o){var n,m=typeof o,j,l,k;if(o===e||o===null){return"null"}if(m==="string"){n="\bb\tt\nn\ff\rr\"\"''\\\\";return'"'+o.replace(/([\u0080-\uFFFF\x00-\x1f\"])/g,function(r,q){var p=n.indexOf(q);if(p+1){return"\\"+n.charAt(p+1)}r=q.charCodeAt().toString(16);return"\\u"+"0000".substring(r.length)+r})+'"'}if(m=="object"){j=o.length!==e;n="";if(j){for(l=0;l<o.length;l++){if(n){n+=","}n+=c(o[l])}n="["+n+"]"}else{for(k in o){if(o.hasOwnProperty(k)){if(n){n+=","}n+=c(k)+":"+c(o[k])}}n="{"+n+"}"}return n}return""+o}function f(s){var v=false,j=null,o=null,k,l,m,u,n,q=0;try{try{o=new ActiveXObject("AgControl.AgControl");if(o.IsVersionSupported(s)){v=true}o=null}catch(r){var p=navigator.plugins["Silverlight Plug-In"];if(p){k=p.description;if(k==="1.0.30226.2"){k="2.0.30226.2"}l=k.split(".");while(l.length>3){l.pop()}while(l.length<4){l.push(0)}m=s.split(".");while(m.length>4){m.pop()}do{u=parseInt(m[q],10);n=parseInt(l[q],10);q++}while(q<m.length&&u===n);if(u<=n&&!isNaN(u)){v=true}}}}catch(t){v=false}return v}d.silverlight={trigger:function(n,k){var m=a[n],l,j;if(m){j=d.toArray(arguments).slice(1);j[0]="Silverlight:"+k;setTimeout(function(){m.trigger.apply(m,j)},0)}}};d.runtimes.Silverlight=d.addRuntime("silverlight",{getFeatures:function(){return{jpgresize:true,pngresize:true,chunks:true,progress:true,multipart:true,multi_selection:true}},init:function(p,q){var o,m="",n=p.settings.filters,l,k=b.body;if(!f("2.0.31005.0")||(g.opera&&g.opera.buildNumber)){q({success:false});return}h[p.id]=false;a[p.id]=p;o=b.createElement("div");o.id=p.id+"_silverlight_container";d.extend(o.style,{position:"absolute",top:"0px",background:p.settings.shim_bgcolor||"transparent",zIndex:99999,width:"100px",height:"100px",overflow:"hidden",opacity:p.settings.shim_bgcolor||b.documentMode>8?"":0.01});o.className="plupload silverlight";if(p.settings.container){k=b.getElementById(p.settings.container);if(d.getStyle(k,"position")==="static"){k.style.position="relative"}}k.appendChild(o);for(l=0;l<n.length;l++){m+=(m!=""?"|":"")+n[l].title+" | *."+n[l].extensions.replace(/,/g,";*.")}o.innerHTML='<object id="'+p.id+'_silverlight" data="data:application/x-silverlight," type="application/x-silverlight-2" style="outline:none;" width="1024" height="1024"><param name="source" value="'+p.settings.silverlight_xap_url+'"/><param name="background" value="Transparent"/><param name="windowless" value="true"/><param name="enablehtmlaccess" value="true"/><param name="initParams" value="id='+p.id+",filter="+m+",multiselect="+p.settings.multi_selection+'"/></object>';function j(){return b.getElementById(p.id+"_silverlight").content.Upload}p.bind("Silverlight:Init",function(){var r,s={};if(h[p.id]){return}h[p.id]=true;p.bind("Silverlight:StartSelectFiles",function(t){r=[]});p.bind("Silverlight:SelectFile",function(t,w,u,v){var x;x=d.guid();s[x]=w;s[w]=x;r.push(new d.File(x,u,v))});p.bind("Silverlight:SelectSuccessful",function(){if(r.length){p.trigger("FilesAdded",r)}});p.bind("Silverlight:UploadChunkError",function(t,w,u,x,v){p.trigger("Error",{code:d.IO_ERROR,message:"IO Error.",details:v,file:t.getFile(s[w])})});p.bind("Silverlight:UploadFileProgress",function(t,x,u,w){var v=t.getFile(s[x]);if(v.status!=d.FAILED){v.size=w;v.loaded=u;t.trigger("UploadProgress",v)}});p.bind("Refresh",function(t){var u,v,w;u=b.getElementById(t.settings.browse_button);if(u){v=d.getPos(u,b.getElementById(t.settings.container));w=d.getSize(u);d.extend(b.getElementById(t.id+"_silverlight_container").style,{top:v.y+"px",left:v.x+"px",width:w.w+"px",height:w.h+"px"})}});p.bind("Silverlight:UploadChunkSuccessful",function(t,w,u,z,y){var x,v=t.getFile(s[w]);x={chunk:u,chunks:z,response:y};t.trigger("ChunkUploaded",v,x);if(v.status!=d.FAILED&&t.state!==d.STOPPED){j().UploadNextChunk()}if(u==z-1){v.status=d.DONE;t.trigger("FileUploaded",v,{response:y})}});p.bind("Silverlight:UploadSuccessful",function(t,w,u){var v=t.getFile(s[w]);v.status=d.DONE;t.trigger("FileUploaded",v,{response:u})});p.bind("FilesRemoved",function(t,v){var u;for(u=0;u<v.length;u++){j().RemoveFile(s[v[u].id])}});p.bind("UploadFile",function(t,v){var w=t.settings,u=w.resize||{};j().UploadFile(s[v.id],t.settings.url,c({name:v.target_name||v.name,mime:d.mimeTypes[v.name.replace(/^.+\.([^.]+)/,"$1").toLowerCase()]||"application/octet-stream",chunk_size:w.chunk_size,image_width:u.width,image_height:u.height,image_quality:u.quality,multipart:!!w.multipart,multipart_params:w.multipart_params||{},file_data_name:w.file_data_name,headers:w.headers}))});p.bind("CancelUpload",function(){j().CancelUpload()});p.bind("Silverlight:MouseEnter",function(t){var u,v;u=b.getElementById(p.settings.browse_button);v=t.settings.browse_button_hover;if(u&&v){d.addClass(u,v)}});p.bind("Silverlight:MouseLeave",function(t){var u,v;u=b.getElementById(p.settings.browse_button);v=t.settings.browse_button_hover;if(u&&v){d.removeClass(u,v)}});p.bind("Silverlight:MouseLeftButtonDown",function(t){var u,v;u=b.getElementById(p.settings.browse_button);v=t.settings.browse_button_active;if(u&&v){d.addClass(u,v);d.addEvent(b.body,"mouseup",function(){d.removeClass(u,v)})}});p.bind("Sliverlight:StartSelectFiles",function(t){var u,v;u=b.getElementById(p.settings.browse_button);v=t.settings.browse_button_active;if(u&&v){d.removeClass(u,v)}});p.bind("DisableBrowse",function(t,u){j().DisableBrowse(u)});p.bind("Destroy",function(t){var u;d.removeAllEvents(b.body,t.id);delete h[t.id];delete a[t.id];u=b.getElementById(t.id+"_silverlight_container");if(u){u.parentNode.removeChild(u)}});q({success:true})})}})})(window,document,plupload);(function(f,b,d,e){var a={},g={};function c(){var h;try{h=navigator.plugins["Shockwave Flash"];h=h.description}catch(k){try{h=new ActiveXObject("ShockwaveFlash.ShockwaveFlash").GetVariable("$version")}catch(j){h="0.0"}}h=h.match(/\d+/g);return parseFloat(h[0]+"."+h[1])}d.flash={trigger:function(k,h,j){setTimeout(function(){var n=a[k],m,l;if(n){n.trigger("Flash:"+h,j)}},0)}};d.runtimes.Flash=d.addRuntime("flash",{getFeatures:function(){return{jpgresize:true,pngresize:true,maxWidth:8091,maxHeight:8091,chunks:true,progress:true,multipart:true,multi_selection:true}},init:function(n,p){var l,m,h=0,j=b.body;if(c()<10){p({success:false});return}g[n.id]=false;a[n.id]=n;l=b.getElementById(n.settings.browse_button);m=b.createElement("div");m.id=n.id+"_flash_container";d.extend(m.style,{position:"absolute",top:"0px",background:n.settings.shim_bgcolor||"transparent",zIndex:99999,width:"100%",height:"100%"});m.className="plupload flash";if(n.settings.container){j=b.getElementById(n.settings.container);if(d.getStyle(j,"position")==="static"){j.style.position="relative"}}j.appendChild(m);(function(){var q,r;q='<object id="'+n.id+'_flash" type="application/x-shockwave-flash" data="'+n.settings.flash_swf_url+'" ';if(d.ua.ie){q+='classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" '}q+='width="100%" height="100%" style="outline:0"><param name="movie" value="'+n.settings.flash_swf_url+'" /><param name="flashvars" value="id='+escape(n.id)+'" /><param name="wmode" value="transparent" /><param name="allowscriptaccess" value="always" /></object>';if(d.ua.ie){r=b.createElement("div");m.appendChild(r);r.outerHTML=q;r=null}else{m.innerHTML=q}}());function o(){return b.getElementById(n.id+"_flash")}function k(){if(h++>5000){p({success:false});return}if(g[n.id]===false){setTimeout(k,1)}}k();l=m=null;n.bind("Destroy",function(q){var r;d.removeAllEvents(b.body,q.id);delete g[q.id];delete a[q.id];r=b.getElementById(q.id+"_flash_container");if(r){r.parentNode.removeChild(r)}});n.bind("Flash:Init",function(){var s={},r;try{o().setFileFilters(n.settings.filters,n.settings.multi_selection)}catch(q){p({success:false});return}if(g[n.id]){return}g[n.id]=true;n.bind("UploadFile",function(t,v){var w=t.settings,u=n.settings.resize||{};o().uploadFile(s[v.id],w.url,{name:v.target_name||v.name,mime:d.mimeTypes[v.name.replace(/^.+\.([^.]+)/,"$1").toLowerCase()]||"application/octet-stream",chunk_size:w.chunk_size,width:u.width,height:u.height,quality:u.quality,multipart:w.multipart,multipart_params:w.multipart_params||{},file_data_name:w.file_data_name,format:/\.(jpg|jpeg)$/i.test(v.name)?"jpg":"png",headers:w.headers,urlstream_upload:w.urlstream_upload})});n.bind("CancelUpload",function(){o().cancelUpload()});n.bind("Flash:UploadProcess",function(u,t){var v=u.getFile(s[t.id]);if(v.status!=d.FAILED){v.loaded=t.loaded;v.size=t.size;u.trigger("UploadProgress",v)}});n.bind("Flash:UploadChunkComplete",function(t,v){var w,u=t.getFile(s[v.id]);w={chunk:v.chunk,chunks:v.chunks,response:v.text};t.trigger("ChunkUploaded",u,w);if(u.status!==d.FAILED&&t.state!==d.STOPPED){o().uploadNextChunk()}if(v.chunk==v.chunks-1){u.status=d.DONE;t.trigger("FileUploaded",u,{response:v.text})}});n.bind("Flash:SelectFiles",function(t,w){var v,u,x=[],y;for(u=0;u<w.length;u++){v=w[u];y=d.guid();s[y]=v.id;s[v.id]=y;x.push(new d.File(y,v.name,v.size))}if(x.length){n.trigger("FilesAdded",x)}});n.bind("Flash:SecurityError",function(t,u){n.trigger("Error",{code:d.SECURITY_ERROR,message:d.translate("Security error."),details:u.message,file:n.getFile(s[u.id])})});n.bind("Flash:GenericError",function(t,u){n.trigger("Error",{code:d.GENERIC_ERROR,message:d.translate("Generic error."),details:u.message,file:n.getFile(s[u.id])})});n.bind("Flash:IOError",function(t,u){n.trigger("Error",{code:d.IO_ERROR,message:d.translate("IO error."),details:u.message,file:n.getFile(s[u.id])})});n.bind("Flash:ImageError",function(t,u){n.trigger("Error",{code:parseInt(u.code,10),message:d.translate("Image error."),file:n.getFile(s[u.id])})});n.bind("Flash:StageEvent:rollOver",function(t){var u,v;u=b.getElementById(n.settings.browse_button);v=t.settings.browse_button_hover;if(u&&v){d.addClass(u,v)}});n.bind("Flash:StageEvent:rollOut",function(t){var u,v;u=b.getElementById(n.settings.browse_button);v=t.settings.browse_button_hover;if(u&&v){d.removeClass(u,v)}});n.bind("Flash:StageEvent:mouseDown",function(t){var u,v;u=b.getElementById(n.settings.browse_button);v=t.settings.browse_button_active;if(u&&v){d.addClass(u,v);d.addEvent(b.body,"mouseup",function(){d.removeClass(u,v)},t.id)}});n.bind("Flash:StageEvent:mouseUp",function(t){var u,v;u=b.getElementById(n.settings.browse_button);v=t.settings.browse_button_active;if(u&&v){d.removeClass(u,v)}});n.bind("Flash:ExifData",function(t,u){n.trigger("ExifData",n.getFile(s[u.id]),u.data)});n.bind("Flash:GpsData",function(t,u){n.trigger("GpsData",n.getFile(s[u.id]),u.data)});n.bind("QueueChanged",function(t){n.refresh()});n.bind("FilesRemoved",function(t,v){var u;for(u=0;u<v.length;u++){o().removeFile(s[v[u].id])}});n.bind("StateChanged",function(t){n.refresh()});n.bind("Refresh",function(t){var u,v,w;o().setFileFilters(n.settings.filters,n.settings.multi_selection);u=b.getElementById(t.settings.browse_button);if(u){v=d.getPos(u,b.getElementById(t.settings.container));w=d.getSize(u);d.extend(b.getElementById(t.id+"_flash_container").style,{top:v.y+"px",left:v.x+"px",width:w.w+"px",height:w.h+"px"})}});n.bind("DisableBrowse",function(t,u){o().disableBrowse(u)});p({success:true})})}})})(window,document,plupload);(function(a){a.runtimes.BrowserPlus=a.addRuntime("browserplus",{getFeatures:function(){return{dragdrop:true,jpgresize:true,pngresize:true,chunks:true,progress:true,multipart:true,multi_selection:true}},init:function(g,j){var e=window.BrowserPlus,h={},d=g.settings,c=d.resize;function f(o){var n,m,k=[],l,p;for(m=0;m<o.length;m++){l=o[m];p=a.guid();h[p]=l;k.push(new a.File(p,l.name,l.size))}if(m){g.trigger("FilesAdded",k)}}function b(){var k=false;g.bind("PostInit",function(){var o,m=d.drop_element,q=g.id+"_droptarget",l=document.getElementById(m),n;function r(t,s){e.DragAndDrop.AddDropTarget({id:t},function(u){e.DragAndDrop.AttachCallbacks({id:t,hover:function(v){if(!v&&s){s()}},drop:function(v){if(s){s()}f(v)}},function(){})})}function p(){document.getElementById(q).style.top="-1000px"}if(l){if(document.attachEvent&&(/MSIE/gi).test(navigator.userAgent)){o=document.createElement("div");o.setAttribute("id",q);a.extend(o.style,{position:"absolute",top:"-1000px",background:"red",filter:"alpha(opacity=0)",opacity:0});document.body.appendChild(o);a.addEvent(l,"dragenter",function(t){var s,u;s=document.getElementById(m);u=a.getPos(s);a.extend(document.getElementById(q).style,{top:u.y+"px",left:u.x+"px",width:s.offsetWidth+"px",height:s.offsetHeight+"px"})});r(q,p)}else{r(m)}}a.addEvent(document.getElementById(d.browse_button),"click",function(y){var s=[],u,t,x=d.filters,w,v;y.preventDefault();if(k){return}no_type_restriction:for(u=0;u<x.length;u++){w=x[u].extensions.split(",");for(t=0;t<w.length;t++){if(w[t]==="*"){s=[];break no_type_restriction}v=a.mimeTypes[w[t]];if(v&&a.inArray(v,s)===-1){s.push(a.mimeTypes[w[t]])}}}e.FileBrowse.OpenBrowseDialog({mimeTypes:s},function(z){if(z.success){f(z.value)}})});l=o=null});g.bind("CancelUpload",function(){e.Uploader.cancel({},function(){})});g.bind("DisableBrowse",function(l,m){k=m});g.bind("UploadFile",function(o,l){var n=h[l.id],t={},m=o.settings.chunk_size,p,q=[];function s(u,w){var v;if(l.status==a.FAILED){return}t.name=l.target_name||l.name;if(m){t.chunk=""+u;t.chunks=""+w}v=q.shift();e.Uploader.upload({url:o.settings.url,files:{file:v},cookies:document.cookies,postvars:a.extend(t,o.settings.multipart_params),progressCallback:function(z){var y,x=0;p[u]=parseInt(z.filePercent*v.size/100,10);for(y=0;y<p.length;y++){x+=p[y]}l.loaded=x;o.trigger("UploadProgress",l)}},function(y){var x,z;if(y.success){x=y.value.statusCode;if(m){o.trigger("ChunkUploaded",l,{chunk:u,chunks:w,response:y.value.body,status:x})}if(q.length>0){s(++u,w)}else{l.status=a.DONE;o.trigger("FileUploaded",l,{response:y.value.body,status:x});if(x>=400){o.trigger("Error",{code:a.HTTP_ERROR,message:a.translate("HTTP Error."),file:l,status:x})}}}else{o.trigger("Error",{code:a.GENERIC_ERROR,message:a.translate("Generic Error."),file:l,details:y.error})}})}function r(u){l.size=u.size;if(m){e.FileAccess.chunk({file:u,chunkSize:m},function(x){if(x.success){var y=x.value,v=y.length;p=Array(v);for(var w=0;w<v;w++){p[w]=0;q.push(y[w])}s(0,v)}})}else{p=Array(1);q.push(u);s(0,1)}}if(c&&/\.(png|jpg|jpeg)$/i.test(l.name)){BrowserPlus.ImageAlter.transform({file:n,quality:c.quality||90,actions:[{scale:{maxwidth:c.width,maxheight:c.height}}]},function(u){if(u.success){r(u.value.file)}})}else{r(n)}});j({success:true})}if(e){e.init(function(l){var k=[{service:"Uploader",version:"3"},{service:"DragAndDrop",version:"1"},{service:"FileBrowse",version:"1"},{service:"FileAccess",version:"2"}];if(c){k.push({service:"ImageAlter",version:"4"})}if(l.success){e.require({services:k},function(m){if(m.success){b()}else{j()}})}else{j()}})}else{j()}}})})(plupload);(function(k,m,l,g){var d={},j;function c(s){var r=s.naturalWidth,u=s.naturalHeight;if(r*u>1024*1024){var t=m.createElement("canvas");t.width=t.height=1;var q=t.getContext("2d");q.drawImage(s,-r+1,0);return q.getImageData(0,0,1,1).data[3]===0}else{return false}}function f(u,r,z){var q=m.createElement("canvas");q.width=1;q.height=z;var A=q.getContext("2d");A.drawImage(u,0,0);var t=A.getImageData(0,0,1,z).data;var x=0;var v=z;var y=z;while(y>x){var s=t[(y-1)*4+3];if(s===0){v=y}else{x=y}y=(v+x)>>1}var w=(y/z);return(w===0)?1:w}function o(K,s,t){var v=K.naturalWidth,z=K.naturalHeight;var E=t.width,B=t.height;var F=s.getContext("2d");F.save();var r=c(K);if(r){v/=2;z/=2}var I=1024;var q=m.createElement("canvas");q.width=q.height=I;var u=q.getContext("2d");var G=f(K,v,z);var A=0;while(A<z){var J=A+I>z?z-A:I;var C=0;while(C<v){var D=C+I>v?v-C:I;u.clearRect(0,0,I,I);u.drawImage(K,-C,-A);var x=(C*E/v)<<0;var y=Math.ceil(D*E/v);var w=(A*B/z/G)<<0;var H=Math.ceil(J*B/z/G);F.drawImage(q,0,0,D,J,x,w,y,H);C+=I}A+=I}F.restore();q=u=null}function p(r,s){var q;if("FileReader" in k){q=new FileReader();q.readAsDataURL(r);q.onload=function(){s(q.result)}}else{return s(r.getAsDataURL())}}function n(r,s){var q;if("FileReader" in k){q=new FileReader();q.readAsBinaryString(r);q.onload=function(){s(q.result)}}else{return s(r.getAsBinary())}}function e(u,s,q,y){var t,r,x,v,w=this;p(d[u.id],function(z){t=m.createElement("canvas");t.style.display="none";m.body.appendChild(t);x=new Image();x.onerror=x.onabort=function(){y({success:false})};x.onload=function(){var F,A,C,B,E;if(!s.width){s.width=x.width}if(!s.height){s.height=x.height}v=Math.min(s.width/x.width,s.height/x.height);if(v<1){F=Math.round(x.width*v);A=Math.round(x.height*v)}else{if(s.quality&&q==="image/jpeg"){F=x.width;A=x.height}else{y({success:false});return}}t.width=F;t.height=A;o(x,t,{width:F,height:A});if(q==="image/jpeg"){B=new h(atob(z.substring(z.indexOf("base64,")+7)));if(B.headers&&B.headers.length){E=new a();if(E.init(B.get("exif")[0])){E.setExif("PixelXDimension",F);E.setExif("PixelYDimension",A);B.set("exif",E.getBinary());if(w.hasEventListener("ExifData")){w.trigger("ExifData",u,E.EXIF())}if(w.hasEventListener("GpsData")){w.trigger("GpsData",u,E.GPS())}}}}if(s.quality&&q==="image/jpeg"){try{z=t.toDataURL(q,s.quality/100)}catch(D){z=t.toDataURL(q)}}else{z=t.toDataURL(q)}z=z.substring(z.indexOf("base64,")+7);z=atob(z);if(B&&B.headers&&B.headers.length){z=B.restore(z);B.purge()}t.parentNode.removeChild(t);y({success:true,data:z})};x.src=z})}l.runtimes.Html5=l.addRuntime("html5",{getFeatures:function(){var v,r,u,t,s,q;r=u=s=q=false;if(k.XMLHttpRequest){v=new XMLHttpRequest();u=!!v.upload;r=!!(v.sendAsBinary||v.upload)}if(r){t=!!(v.sendAsBinary||(k.Uint8Array&&k.ArrayBuffer));s=!!(File&&(File.prototype.getAsDataURL||k.FileReader)&&t);q=!!(File&&(File.prototype.mozSlice||File.prototype.webkitSlice||File.prototype.slice))}j=l.ua.safari&&l.ua.windows;return{html5:r,dragdrop:(function(){var w=m.createElement("div");return("draggable" in w)||("ondragstart" in w&&"ondrop" in w)}()),jpgresize:s,pngresize:s,multipart:s||!!k.FileReader||!!k.FormData,canSendBinary:t,cantSendBlobInFormData:!!(l.ua.gecko&&k.FormData&&k.FileReader&&!FileReader.prototype.readAsArrayBuffer)||l.ua.android,progress:u,chunks:q,multi_selection:!(l.ua.safari&&l.ua.windows),triggerDialog:(l.ua.gecko&&k.FormData||l.ua.webkit)}},init:function(s,u){var q,t;function r(z){var x,w,y=[],A,v={};for(w=0;w<z.length;w++){x=z[w];if(v[x.name]&&l.ua.safari&&l.ua.windows){continue}v[x.name]=true;A=l.guid();d[A]=x;y.push(new l.File(A,x.fileName||x.name,x.fileSize||x.size))}if(y.length){s.trigger("FilesAdded",y)}}q=this.getFeatures();if(!q.html5){u({success:false});return}s.bind("Init",function(A){var K,J,G=[],z,H,w=A.settings.filters,x,F,v=m.body,I;K=m.createElement("div");K.id=A.id+"_html5_container";l.extend(K.style,{position:"absolute",background:s.settings.shim_bgcolor||"transparent",width:"100px",height:"100px",overflow:"hidden",zIndex:99999,opacity:s.settings.shim_bgcolor?"":0});K.className="plupload html5";if(s.settings.container){v=m.getElementById(s.settings.container);if(l.getStyle(v,"position")==="static"){v.style.position="relative"}}v.appendChild(K);no_type_restriction:for(z=0;z<w.length;z++){x=w[z].extensions.split(/,/);for(H=0;H<x.length;H++){if(x[H]==="*"){G=[];break no_type_restriction}F=l.mimeTypes[x[H]];if(F&&l.inArray(F,G)===-1){G.push(F)}}}K.innerHTML='<input id="'+s.id+'_html5"  style="font-size:999px" type="file" accept="'+G.join(",")+'" '+(s.settings.multi_selection&&s.features.multi_selection?'multiple="multiple"':"")+" />";K.scrollTop=100;I=m.getElementById(s.id+"_html5");if(A.features.triggerDialog){l.extend(I.style,{position:"absolute",width:"100%",height:"100%"})}else{l.extend(I.style,{cssFloat:"right",styleFloat:"right"})}I.onchange=function D(){r(this.files);if(!l.ua.ie){this.value=""}else{var y=this.cloneNode(true);this.parentNode.replaceChild(y,this);y.onchange=D;y=null}};J=m.getElementById(A.settings.browse_button);if(J){var C=A.settings.browse_button_hover,E=A.settings.browse_button_active,B=A.features.triggerDialog?J:K;if(C){l.addEvent(B,"mouseover",function(){l.addClass(J,C)},A.id);l.addEvent(B,"mouseout",function(){l.removeClass(J,C)},A.id)}if(E){l.addEvent(B,"mousedown",function(){l.addClass(J,E)},A.id);l.addEvent(m.body,"mouseup",function(){l.removeClass(J,E)},A.id)}if(A.features.triggerDialog){l.addEvent(J,"click",function(L){var y=m.getElementById(A.id+"_html5");if(y&&!y.disabled){y.click()}L.preventDefault()},A.id)}}});s.bind("PostInit",function(){var v=m.getElementById(s.settings.drop_element);if(v){if(j){l.addEvent(v,"dragenter",function(z){var y,w,x;y=m.getElementById(s.id+"_drop");if(!y){y=m.createElement("input");y.setAttribute("type","file");y.setAttribute("id",s.id+"_drop");y.setAttribute("multiple","multiple");l.addEvent(y,"change",function(){r(this.files);l.removeEvent(y,"change",s.id);y.parentNode.removeChild(y)},s.id);l.addEvent(y,"dragover",function(A){A.stopPropagation()},s.id);v.appendChild(y)}w=l.getPos(v,m.getElementById(s.settings.container));x=l.getSize(v);if(l.getStyle(v,"position")==="static"){l.extend(v.style,{position:"relative"})}l.extend(y.style,{position:"absolute",display:"block",top:0,left:0,width:x.w+"px",height:x.h+"px",opacity:0})},s.id);return}l.addEvent(v,"dragover",function(w){w.preventDefault()},s.id);l.addEvent(v,"drop",function(x){var w=x.dataTransfer;if(w&&w.files){r(w.files)}x.preventDefault()},s.id)}});s.bind("Refresh",function(v){var w,x,y,A,z;w=m.getElementById(s.settings.browse_button);if(w){x=l.getPos(w,m.getElementById(v.settings.container));y=l.getSize(w);A=m.getElementById(s.id+"_html5_container");l.extend(A.style,{top:x.y+"px",left:x.x+"px",width:y.w+"px",height:y.h+"px"});if(s.features.triggerDialog){if(l.getStyle(w,"position")==="static"){l.extend(w.style,{position:"relative"})}z=parseInt(l.getStyle(w,"zIndex"),10);if(isNaN(z)){z=0}l.extend(w.style,{zIndex:z});l.extend(A.style,{zIndex:z-1})}}});s.bind("DisableBrowse",function(v,x){var w=m.getElementById(v.id+"_html5");if(w){w.disabled=x}});s.bind("CancelUpload",function(){if(t&&t.abort){t.abort()}});s.bind("UploadFile",function(v,x){var y=v.settings,B,w;function A(D,G,C){var E;if(File.prototype.slice){try{D.slice();return D.slice(G,C)}catch(F){return D.slice(G,C-G)}}else{if(E=File.prototype.webkitSlice||File.prototype.mozSlice){return E.call(D,G,C)}else{return null}}}function z(C){var F=0,E=0;function D(){var L,P,N=1,O,K,M,H,G=v.settings.url;function J(S){if(t.sendAsBinary){t.sendAsBinary(S)}else{if(v.features.canSendBinary){var Q=new Uint8Array(S.length);for(var R=0;R<S.length;R++){Q[R]=(S.charCodeAt(R)&255)}t.send(Q.buffer)}}}function I(R){var V=0,W="----pluploadboundary"+l.guid(),T,S="--",U="\r\n",Q="";t=new XMLHttpRequest;if(t.upload){t.upload.onprogress=function(X){x.loaded=Math.min(x.size,E+X.loaded-V);v.trigger("UploadProgress",x)}}t.onreadystatechange=function(){var X,Z;if(t.readyState==4&&v.state!==l.STOPPED){try{X=t.status}catch(Y){X=0}if(X>=400){v.trigger("Error",{code:l.HTTP_ERROR,message:l.translate("HTTP Error."),file:x,status:X,response:t.responseText})}else{if(N){Z={chunk:F,chunks:N,response:t.responseText,status:X};v.trigger("ChunkUploaded",x,Z);E+=M;if(Z.cancelled){x.status=l.FAILED;return}x.loaded=Math.min(x.size,(F+1)*K)}else{x.loaded=x.size}v.trigger("UploadProgress",x);R=L=T=Q=null;if(!N||++F>=N){x.status=l.DONE;v.trigger("FileUploaded",x,{response:t.responseText,status:X})}else{D()}}}};if(v.settings.multipart&&q.multipart){O.name=x.target_name||x.name;t.open("post",G,true);l.each(v.settings.headers,function(Y,X){t.setRequestHeader(X,Y)});if(typeof(R)!=="string"&&!!k.FormData){T=new FormData();l.each(l.extend(O,v.settings.multipart_params),function(Y,X){T.append(X,Y)});T.append(v.settings.file_data_name,R);t.send(T);return}if(typeof(R)==="string"){t.setRequestHeader("Content-Type","multipart/form-data; boundary="+W);l.each(l.extend(O,v.settings.multipart_params),function(Y,X){Q+=S+W+U+'Content-Disposition: form-data; name="'+X+'"'+U+U;Q+=unescape(encodeURIComponent(Y))+U});H=l.mimeTypes[x.name.replace(/^.+\.([^.]+)/,"$1").toLowerCase()]||"application/octet-stream";Q+=S+W+U+'Content-Disposition: form-data; name="'+v.settings.file_data_name+'"; filename="'+unescape(encodeURIComponent(x.name))+'"'+U+"Content-Type: "+H+U+U+R+U+S+W+S+U;V=Q.length-R.length;R=Q;J(R);return}}G=l.buildUrl(v.settings.url,l.extend(O,v.settings.multipart_params));t.open("post",G,true);t.setRequestHeader("Content-Type","application/octet-stream");l.each(v.settings.headers,function(Y,X){t.setRequestHeader(X,Y)});if(typeof(R)==="string"){J(R)}else{t.send(R)}}if(x.status==l.DONE||x.status==l.FAILED||v.state==l.STOPPED){return}O={name:x.target_name||x.name};if(y.chunk_size&&x.size>y.chunk_size&&(q.chunks||typeof(C)=="string")){K=y.chunk_size;N=Math.ceil(x.size/K);M=Math.min(K,x.size-(F*K));if(typeof(C)=="string"){L=C.substring(F*K,F*K+M)}else{L=A(C,F*K,F*K+M)}}else{M=x.size;L=C}if(y.chunk_size&&q.chunks){O.chunk=F;O.chunks=N}if(v.settings.multipart&&q.multipart&&typeof(L)!=="string"&&k.FileReader&&q.cantSendBlobInFormData&&q.chunks&&v.settings.chunk_size){(function(){var Q=new FileReader();Q.onload=function(){I(Q.result);Q=null};Q.readAsBinaryString(L)}())}else{I(L)}}D()}B=d[x.id];if(q.jpgresize&&v.settings.resize&&/\.(png|jpg|jpeg)$/i.test(x.name)){e.call(v,x,v.settings.resize,/\.png$/i.test(x.name)?"image/png":"image/jpeg",function(C){if(C.success){x.size=C.data.length;z(C.data)}else{if(q.chunks){z(B)}else{n(B,z)}}})}else{if(!q.chunks&&q.jpgresize){n(B,z)}else{z(B)}}});s.bind("Destroy",function(v){var x,y,w=m.body,z={inputContainer:v.id+"_html5_container",inputFile:v.id+"_html5",browseButton:v.settings.browse_button,dropElm:v.settings.drop_element};for(x in z){y=m.getElementById(z[x]);if(y){l.removeAllEvents(y,v.id)}}l.removeAllEvents(m.body,v.id);if(v.settings.container){w=m.getElementById(v.settings.container)}w.removeChild(m.getElementById(z.inputContainer))});u({success:true})}});function b(){var t=false,r;function u(w,y){var v=t?0:-8*(y-1),z=0,x;for(x=0;x<y;x++){z|=(r.charCodeAt(w+x)<<Math.abs(v+x*8))}return z}function q(x,v,w){var w=arguments.length===3?w:r.length-v-1;r=r.substr(0,v)+x+r.substr(w+v)}function s(w,x,z){var A="",v=t?0:-8*(z-1),y;for(y=0;y<z;y++){A+=String.fromCharCode((x>>Math.abs(v+y*8))&255)}q(A,w,z)}return{II:function(v){if(v===g){return t}else{t=v}},init:function(v){t=false;r=v},SEGMENT:function(v,x,w){switch(arguments.length){case 1:return r.substr(v,r.length-v-1);case 2:return r.substr(v,x);case 3:q(w,v,x);break;default:return r}},BYTE:function(v){return u(v,1)},SHORT:function(v){return u(v,2)},LONG:function(v,w){if(w===g){return u(v,4)}else{s(v,w,4)}},SLONG:function(v){var w=u(v,4);return(w>2147483647?w-4294967296:w)},STRING:function(v,w){var x="";for(w+=v;v<w;v++){x+=String.fromCharCode(u(v,1))}return x}}}function h(v){var x={65505:{app:"EXIF",name:"APP1",signature:"Exif\0"},65506:{app:"ICC",name:"APP2",signature:"ICC_PROFILE\0"},65517:{app:"IPTC",name:"APP13",signature:"Photoshop 3.0\0"}},w=[],u,q,s=g,t=0,r;u=new b();u.init(v);if(u.SHORT(0)!==65496){return}q=2;r=Math.min(1048576,v.length);while(q<=r){s=u.SHORT(q);if(s>=65488&&s<=65495){q+=2;continue}if(s===65498||s===65497){break}t=u.SHORT(q+2)+2;if(x[s]&&u.STRING(q+4,x[s].signature.length)===x[s].signature){w.push({hex:s,app:x[s].app.toUpperCase(),name:x[s].name.toUpperCase(),start:q,length:t,segment:u.SEGMENT(q,t)})}q+=t}u.init(null);return{headers:w,restore:function(B){u.init(B);var z=new h(B);if(!z.headers){return false}for(var A=z.headers.length;A>0;A--){var C=z.headers[A-1];u.SEGMENT(C.start,C.length,"")}z.purge();q=u.SHORT(2)==65504?4+u.SHORT(4):2;for(var A=0,y=w.length;A<y;A++){u.SEGMENT(q,0,w[A].segment);q+=w[A].length}return u.SEGMENT()},get:function(A){var B=[];for(var z=0,y=w.length;z<y;z++){if(w[z].app===A.toUpperCase()){B.push(w[z].segment)}}return B},set:function(B,A){var C=[];if(typeof(A)==="string"){C.push(A)}else{C=A}for(var z=ii=0,y=w.length;z<y;z++){if(w[z].app===B.toUpperCase()){w[z].segment=C[ii];w[z].length=C[ii].length;ii++}if(ii>=C.length){break}}},purge:function(){w=[];u.init(null)}}}function a(){var t,q,r={},w;t=new b();q={tiff:{274:"Orientation",34665:"ExifIFDPointer",34853:"GPSInfoIFDPointer"},exif:{36864:"ExifVersion",40961:"ColorSpace",40962:"PixelXDimension",40963:"PixelYDimension",36867:"DateTimeOriginal",33434:"ExposureTime",33437:"FNumber",34855:"ISOSpeedRatings",37377:"ShutterSpeedValue",37378:"ApertureValue",37383:"MeteringMode",37384:"LightSource",37385:"Flash",41986:"ExposureMode",41987:"WhiteBalance",41990:"SceneCaptureType",41988:"DigitalZoomRatio",41992:"Contrast",41993:"Saturation",41994:"Sharpness"},gps:{0:"GPSVersionID",1:"GPSLatitudeRef",2:"GPSLatitude",3:"GPSLongitudeRef",4:"GPSLongitude"}};w={ColorSpace:{1:"sRGB",0:"Uncalibrated"},MeteringMode:{0:"Unknown",1:"Average",2:"CenterWeightedAverage",3:"Spot",4:"MultiSpot",5:"Pattern",6:"Partial",255:"Other"},LightSource:{1:"Daylight",2:"Fliorescent",3:"Tungsten",4:"Flash",9:"Fine weather",10:"Cloudy weather",11:"Shade",12:"Daylight fluorescent (D 5700 - 7100K)",13:"Day white fluorescent (N 4600 -5400K)",14:"Cool white fluorescent (W 3900 - 4500K)",15:"White fluorescent (WW 3200 - 3700K)",17:"Standard light A",18:"Standard light B",19:"Standard light C",20:"D55",21:"D65",22:"D75",23:"D50",24:"ISO studio tungsten",255:"Other"},Flash:{0:"Flash did not fire.",1:"Flash fired.",5:"Strobe return light not detected.",7:"Strobe return light detected.",9:"Flash fired, compulsory flash mode",13:"Flash fired, compulsory flash mode, return light not detected",15:"Flash fired, compulsory flash mode, return light detected",16:"Flash did not fire, compulsory flash mode",24:"Flash did not fire, auto mode",25:"Flash fired, auto mode",29:"Flash fired, auto mode, return light not detected",31:"Flash fired, auto mode, return light detected",32:"No flash function",65:"Flash fired, red-eye reduction mode",69:"Flash fired, red-eye reduction mode, return light not detected",71:"Flash fired, red-eye reduction mode, return light detected",73:"Flash fired, compulsory flash mode, red-eye reduction mode",77:"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected",79:"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected",89:"Flash fired, auto mode, red-eye reduction mode",93:"Flash fired, auto mode, return light not detected, red-eye reduction mode",95:"Flash fired, auto mode, return light detected, red-eye reduction mode"},ExposureMode:{0:"Auto exposure",1:"Manual exposure",2:"Auto bracket"},WhiteBalance:{0:"Auto white balance",1:"Manual white balance"},SceneCaptureType:{0:"Standard",1:"Landscape",2:"Portrait",3:"Night scene"},Contrast:{0:"Normal",1:"Soft",2:"Hard"},Saturation:{0:"Normal",1:"Low saturation",2:"High saturation"},Sharpness:{0:"Normal",1:"Soft",2:"Hard"},GPSLatitudeRef:{N:"North latitude",S:"South latitude"},GPSLongitudeRef:{E:"East longitude",W:"West longitude"}};function s(x,F){var z=t.SHORT(x),C,I,J,E,D,y,A,G,H=[],B={};for(C=0;C<z;C++){A=y=x+12*C+2;J=F[t.SHORT(A)];if(J===g){continue}E=t.SHORT(A+=2);D=t.LONG(A+=2);A+=4;H=[];switch(E){case 1:case 7:if(D>4){A=t.LONG(A)+r.tiffHeader}for(I=0;I<D;I++){H[I]=t.BYTE(A+I)}break;case 2:if(D>4){A=t.LONG(A)+r.tiffHeader}B[J]=t.STRING(A,D-1);continue;case 3:if(D>2){A=t.LONG(A)+r.tiffHeader}for(I=0;I<D;I++){H[I]=t.SHORT(A+I*2)}break;case 4:if(D>1){A=t.LONG(A)+r.tiffHeader}for(I=0;I<D;I++){H[I]=t.LONG(A+I*4)}break;case 5:A=t.LONG(A)+r.tiffHeader;for(I=0;I<D;I++){H[I]=t.LONG(A+I*4)/t.LONG(A+I*4+4)}break;case 9:A=t.LONG(A)+r.tiffHeader;for(I=0;I<D;I++){H[I]=t.SLONG(A+I*4)}break;case 10:A=t.LONG(A)+r.tiffHeader;for(I=0;I<D;I++){H[I]=t.SLONG(A+I*4)/t.SLONG(A+I*4+4)}break;default:continue}G=(D==1?H[0]:H);if(w.hasOwnProperty(J)&&typeof G!="object"){B[J]=w[J][G]}else{B[J]=G}}return B}function v(){var y=g,x=r.tiffHeader;t.II(t.SHORT(x)==18761);if(t.SHORT(x+=2)!==42){return false}r.IFD0=r.tiffHeader+t.LONG(x+=2);y=s(r.IFD0,q.tiff);r.exifIFD=("ExifIFDPointer" in y?r.tiffHeader+y.ExifIFDPointer:g);r.gpsIFD=("GPSInfoIFDPointer" in y?r.tiffHeader+y.GPSInfoIFDPointer:g);return true}function u(z,x,C){var E,B,A,D=0;if(typeof(x)==="string"){var y=q[z.toLowerCase()];for(hex in y){if(y[hex]===x){x=hex;break}}}E=r[z.toLowerCase()+"IFD"];B=t.SHORT(E);for(i=0;i<B;i++){A=E+12*i+2;if(t.SHORT(A)==x){D=A+8;break}}if(!D){return false}t.LONG(D,C);return true}return{init:function(x){r={tiffHeader:10};if(x===g||!x.length){return false}t.init(x);if(t.SHORT(0)===65505&&t.STRING(4,5).toUpperCase()==="EXIF\0"){return v()}return false},EXIF:function(){var y;y=s(r.exifIFD,q.exif);if(y.ExifVersion&&l.typeOf(y.ExifVersion)==="array"){for(var z=0,x="";z<y.ExifVersion.length;z++){x+=String.fromCharCode(y.ExifVersion[z])}y.ExifVersion=x}return y},GPS:function(){var x;x=s(r.gpsIFD,q.gps);if(x.GPSVersionID){x.GPSVersionID=x.GPSVersionID.join(".")}return x},setExif:function(x,y){if(x!=="PixelXDimension"&&x!=="PixelYDimension"){return false}return u("exif",x,y)},getBinary:function(){return t.SEGMENT()}}}})(window,document,plupload);(function(d,a,b,c){function e(f){return a.getElementById(f)}b.runtimes.Html4=b.addRuntime("html4",{getFeatures:function(){return{multipart:true,triggerDialog:(b.ua.gecko&&d.FormData||b.ua.webkit)}},init:function(f,g){f.bind("Init",function(p){var j=a.body,n,h="javascript",k,x,q,z=[],r=/MSIE/.test(navigator.userAgent),t=[],m=p.settings.filters,o,l,s,w;no_type_restriction:for(o=0;o<m.length;o++){l=m[o].extensions.split(/,/);for(w=0;w<l.length;w++){if(l[w]==="*"){t=[];break no_type_restriction}s=b.mimeTypes[l[w]];if(s&&b.inArray(s,t)===-1){t.push(s)}}}t=t.join(",");function v(){var C,A,y,B;q=b.guid();z.push(q);C=a.createElement("form");C.setAttribute("id","form_"+q);C.setAttribute("method","post");C.setAttribute("enctype","multipart/form-data");C.setAttribute("encoding","multipart/form-data");C.setAttribute("target",p.id+"_iframe");C.style.position="absolute";A=a.createElement("input");A.setAttribute("id","input_"+q);A.setAttribute("type","file");A.setAttribute("accept",t);A.setAttribute("size",1);B=e(p.settings.browse_button);if(p.features.triggerDialog&&B){b.addEvent(e(p.settings.browse_button),"click",function(D){if(!A.disabled){A.click()}D.preventDefault()},p.id)}b.extend(A.style,{width:"100%",height:"100%",opacity:0,fontSize:"99px",cursor:"pointer"});b.extend(C.style,{overflow:"hidden"});y=p.settings.shim_bgcolor;if(y){C.style.background=y}if(r){b.extend(A.style,{filter:"alpha(opacity=0)"})}b.addEvent(A,"change",function(G){var E=G.target,D,F=[],H;if(E.value){e("form_"+q).style.top=-1048575+"px";D=E.value.replace(/\\/g,"/");D=D.substring(D.length,D.lastIndexOf("/")+1);F.push(new b.File(q,D));if(!p.features.triggerDialog){b.removeAllEvents(C,p.id)}else{b.removeEvent(B,"click",p.id)}b.removeEvent(A,"change",p.id);v();if(F.length){f.trigger("FilesAdded",F)}}},p.id);C.appendChild(A);j.appendChild(C);p.refresh()}function u(){var y=a.createElement("div");y.innerHTML='<iframe id="'+p.id+'_iframe" name="'+p.id+'_iframe" src="'+h+':&quot;&quot;" style="display:none"></iframe>';n=y.firstChild;j.appendChild(n);b.addEvent(n,"load",function(D){var E=D.target,C,A;if(!k){return}try{C=E.contentWindow.document||E.contentDocument||d.frames[E.id].document}catch(B){p.trigger("Error",{code:b.SECURITY_ERROR,message:b.translate("Security error."),file:k});return}A=C.documentElement.innerText||C.documentElement.textContent;if(A){k.status=b.DONE;k.loaded=1025;k.percent=100;p.trigger("UploadProgress",k);p.trigger("FileUploaded",k,{response:A})}},p.id)}if(p.settings.container){j=e(p.settings.container);if(b.getStyle(j,"position")==="static"){j.style.position="relative"}}p.bind("UploadFile",function(y,B){var C,A;if(B.status==b.DONE||B.status==b.FAILED||y.state==b.STOPPED){return}C=e("form_"+B.id);A=e("input_"+B.id);A.setAttribute("name",y.settings.file_data_name);C.setAttribute("action",y.settings.url);b.each(b.extend({name:B.target_name||B.name},y.settings.multipart_params),function(F,D){var E=a.createElement("input");b.extend(E,{type:"hidden",name:D,value:F});C.insertBefore(E,C.firstChild)});k=B;e("form_"+q).style.top=-1048575+"px";C.submit()});p.bind("FileUploaded",function(y){y.refresh()});p.bind("StateChanged",function(y){if(y.state==b.STARTED){u()}else{if(y.state==b.STOPPED){d.setTimeout(function(){b.removeEvent(n,"load",y.id);if(n.parentNode){n.parentNode.removeChild(n)}},0)}}b.each(y.files,function(B,A){if(B.status===b.DONE||B.status===b.FAILED){var C=e("form_"+B.id);if(C){C.parentNode.removeChild(C)}}})});p.bind("Refresh",function(A){var G,B,C,D,y,H,I,F,E;G=e(A.settings.browse_button);if(G){y=b.getPos(G,e(A.settings.container));H=b.getSize(G);I=e("form_"+q);F=e("input_"+q);b.extend(I.style,{top:y.y+"px",left:y.x+"px",width:H.w+"px",height:H.h+"px"});if(A.features.triggerDialog){if(b.getStyle(G,"position")==="static"){b.extend(G.style,{position:"relative"})}E=parseInt(G.style.zIndex,10);if(isNaN(E)){E=0}b.extend(G.style,{zIndex:E});b.extend(I.style,{zIndex:E-1})}C=A.settings.browse_button_hover;D=A.settings.browse_button_active;B=A.features.triggerDialog?G:I;if(C){b.addEvent(B,"mouseover",function(){b.addClass(G,C)},A.id);b.addEvent(B,"mouseout",function(){b.removeClass(G,C)},A.id)}if(D){b.addEvent(B,"mousedown",function(){b.addClass(G,D)},A.id);b.addEvent(a.body,"mouseup",function(){b.removeClass(G,D)},A.id)}}});f.bind("FilesRemoved",function(y,B){var A,C;for(A=0;A<B.length;A++){C=e("form_"+B[A].id);if(C){C.parentNode.removeChild(C)}}});f.bind("DisableBrowse",function(y,B){var A=a.getElementById("input_"+q);if(A){A.disabled=B}});f.bind("Destroy",function(y){var A,B,C,D={inputContainer:"form_"+q,inputFile:"input_"+q,browseButton:y.settings.browse_button};for(A in D){B=e(D[A]);if(B){b.removeAllEvents(B,y.id)}}b.removeAllEvents(a.body,y.id);b.each(z,function(F,E){C=e("form_"+F);if(C){C.parentNode.removeChild(C)}})});v()});g({success:true})}})})(window,document,plupload);
(function($){$.fn.jqm=function(o){var p={overlay:50,overlayClass:'jqmOverlay',closeClass:'jqmClose',trigger:'.jqModal',ajax:F,ajaxText:'',target:F,modal:true,toTop:F,onShow:F,onHide:F,onLoad:F};return this.each(function(){if(this._jqm)return H[this._jqm].c=$.extend({},H[this._jqm].c,o);s++;this._jqm=s;H[s]={c:$.extend(p,$.jqm.params,o),a:F,w:$(this).addClass('jqmID'+s),s:s};if(p.trigger)$(this).jqmAddTrigger(p.trigger);});};$.fn.jqmAddClose=function(e){return hs(this,e,'jqmHide');};$.fn.jqmAddTrigger=function(e){return hs(this,e,'jqmShow');};$.fn.jqmShow=function(t){return this.each(function(){t=t||window.event;$.jqm.open(this._jqm,t);});};$.fn.jqmHide=function(t){return this.each(function(){t=t||window.event;$.jqm.close(this._jqm,t)});};$.jqm={hash:{},open:function(s,t){var h=H[s],c=h.c,cc='.'+c.closeClass,z=(parseInt(h.w.css('z-index'))),z=(z>0)?z:3000,o=$('<div></div>').css({height:'100%',width:'100%',position:'fixed',left:0,top:0,'z-index':z-1,opacity:c.overlay/100});if(h.a)return F;h.t=t;h.a=true;h.w.css('z-index',z);if(c.modal){if(!A[0])L('bind');A.push(s);}
else if(c.overlay>0)h.w.jqmAddClose(o);else o=F;h.o=(o)?o.addClass(c.overlayClass).prependTo('body'):F;if(ie6){$('html,body').css({height:'100%',width:'100%'});if(o){o=o.css({position:'absolute'})[0];for(var y in{Top:1,Left:1})o.style.setExpression(y.toLowerCase(),"(_=(document.documentElement.scroll"+y+" || document.body.scroll"+y+"))+'px'");}}
if(c.ajax){var r=c.target||h.w,u=c.ajax,r=(typeof r=='string')?$(r,h.w):$(r),u=(u.substr(0,1)=='@')?$(t).attr(u.substring(1)):u;r.html(c.ajaxText).load(u,function(){if(c.onLoad)c.onLoad.call(this,h);if(cc)h.w.jqmAddClose($(cc,h.w));e(h);});}
else if(cc)h.w.jqmAddClose($(cc,h.w));if(c.toTop&&h.o)h.w.before('<span id="jqmP'+h.w[0]._jqm+'"></span>').insertAfter(h.o);(c.onShow)?c.onShow(h):h.w.show();e(h);return F;},close:function(s){var h=H[s];if(!h.a)return F;h.a=F;if(A[0]){A.pop();if(!A[0])L('unbind');}
if(h.c.toTop&&h.o)$('#jqmP'+h.w[0]._jqm).after(h.w).remove();if(h.c.onHide)h.c.onHide(h);else{h.w.hide();if(h.o)h.o.remove();}
return F;},params:{}};var s=0,H=$.jqm.hash,A=[],ie6=$.browser.msie&&($.browser.version=="6.0"),F=false,i=$('<iframe src="javascript:false;document.write(\'\');" class="jqm"></iframe>').css({opacity:0}),e=function(h){if(ie6)if(h.o)h.o.html('<p style="width:100%;height:100%"/>').prepend(i);else if(!$('iframe.jqm',h.w)[0])h.w.prepend(i);f(h);},f=function(h){try{$(':input:visible',h.w)[0].focus();}catch(_){}},L=function(t){$()[t]("keypress",m)[t]("keydown",m)[t]("mousedown",m);},m=function(e){var h=H[A[A.length-1]],r=(!$(e.target).parents('.jqmID'+h.s)[0]);if(r)f(h);return!r;},hs=function(w,t,c){return w.each(function(){var s=this._jqm;$(t).each(function(){if(!this[c]){this[c]=[];$(this).click(function(){for(var i in{jqmShow:1,jqmHide:1})for(var s in this[i])if(H[this[i][s]])H[this[i][s]].w[i](this);return F;});}
this[c].push(s);});});};})(jQuery);
/*
 * jQuery Plugin: Tokenizing Autocomplete Text Entry
 * Version 1.6.0
 *
 * Copyright (c) 2009 James Smith (http://loopj.com)
 * Licensed jointly under the GPL and MIT licenses,
 * choose which one suits your project best!
 *
 */

(function ($) {
// Default settings
var DEFAULT_SETTINGS = {
	// Search settings
    method: "GET",
    contentType: "json",
    queryParam: "q",
    searchDelay: 300,
    minChars: 1,
    propertyToSearch: "name",
    jsonContainer: null,

	// Display settings
    hintText: "Type in a search term",
    noResultsText: "No results",
    searchingText: "Searching...",
    deleteText: "&times;",
    animateDropdown: true,

	// Tokenization settings
    tokenLimit: null,
    tokenDelimiter: ",",
    preventDuplicates: false,

	// Output settings
    tokenValue: "id",

	// Prepopulation settings
    prePopulate: null,
    processPrePopulate: false,

	// Manipulation settings
    idPrefix: "token-input-",

	// Formatters
    resultsFormatter: function(item){ return "<li>" + item[this.propertyToSearch]+ "</li>" },
    tokenFormatter: function(item) { return "<li><p>" + item[this.propertyToSearch] + "</p></li>" },

	// Callbacks
    onResult: null,
    onAdd: null,
    onDelete: null,
    onReady: null
};

// Default classes to use when theming
var DEFAULT_CLASSES = {
    tokenList: "token-input-list",
    token: "token-input-token",
    tokenDelete: "token-input-delete-token",
    selectedToken: "token-input-selected-token",
    highlightedToken: "token-input-highlighted-token",
    dropdown: "token-input-dropdown",
    dropdownItem: "token-input-dropdown-item",
    dropdownItem2: "token-input-dropdown-item2",
    selectedDropdownItem: "token-input-selected-dropdown-item",
    inputToken: "token-input-input-token"
};

// Input box position "enum"
var POSITION = {
    BEFORE: 0,
    AFTER: 1,
    END: 2
};

// Keys "enum"
var KEY = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    ESCAPE: 27,
    SPACE: 32,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    END: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    NUMPAD_ENTER: 108,
    COMMA: 188
};

// Additional public (exposed) methods
var methods = {
    init: function(url_or_data_or_function, options) {
        var settings = $.extend({}, DEFAULT_SETTINGS, options || {});

        return this.each(function () {
            $(this).data("tokenInputObject", new $.TokenList(this, url_or_data_or_function, settings));
        });
    },
    clear: function() {
        this.data("tokenInputObject").clear();
        return this;
    },
    add: function(item) {
        this.data("tokenInputObject").add(item);
        return this;
    },
    remove: function(item) {
        this.data("tokenInputObject").remove(item);
        return this;
    },
    get: function() {
    	return this.data("tokenInputObject").getTokens();
   	}
}

// Expose the .tokenInput function to jQuery as a plugin
$.fn.tokenInput = function (method) {
    // Method calling and initialization logic
    if(methods[method]) {
        return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
        return methods.init.apply(this, arguments);
    }
};

// TokenList class for each input
$.TokenList = function (input, url_or_data, settings) {
    //
    // Initialization
    //

    // Configure the data source
    if($.type(url_or_data) === "string" || $.type(url_or_data) === "function") {
        // Set the url to query against
        settings.url = url_or_data;

        // If the URL is a function, evaluate it here to do our initalization work
        var url = computeURL();

        // Make a smart guess about cross-domain if it wasn't explicitly specified
        if(settings.crossDomain === undefined) {
            if(url.indexOf("://") === -1) {
                settings.crossDomain = false;
            } else {
                settings.crossDomain = (location.href.split(/\/+/g)[1] !== url.split(/\/+/g)[1]);
            }
        }
    } else if(typeof(url_or_data) === "object") {
        // Set the local data to search through
        settings.local_data = url_or_data;
    }

    // Build class names
    if(settings.classes) {
        // Use custom class names
        settings.classes = $.extend({}, DEFAULT_CLASSES, settings.classes);
    } else if(settings.theme) {
        // Use theme-suffixed default class names
        settings.classes = {};
        $.each(DEFAULT_CLASSES, function(key, value) {
            settings.classes[key] = value + "-" + settings.theme;
        });
    } else {
        settings.classes = DEFAULT_CLASSES;
    }


    // Save the tokens
    var saved_tokens = [];

    // Keep track of the number of tokens in the list
    var token_count = 0;

    // Basic cache to save on db hits
    var cache = new $.TokenList.Cache();

    // Keep track of the timeout, old vals
    var timeout;
    var input_val;

    // Create a new text input an attach keyup events
    var input_box = $("<input type=\"text\"  autocomplete=\"off\">")
        .css({
            outline: "none"
        })
        .attr("id", settings.idPrefix + input.id)
        .focus(function () {
            if (settings.tokenLimit === null || settings.tokenLimit !== token_count) {
                show_dropdown_hint();
            }
        })
        .blur(function () {
            hide_dropdown();
            $(this).val("");
        })
        .bind("keyup keydown blur update", resize_input)
        .keydown(function (event) {
            var previous_token;
            var next_token;

            switch(event.keyCode) {
                case KEY.LEFT:
                case KEY.RIGHT:
                case KEY.UP:
                case KEY.DOWN:
                    if(!$(this).val()) {
                        previous_token = input_token.prev();
                        next_token = input_token.next();

                        if((previous_token.length && previous_token.get(0) === selected_token) || (next_token.length && next_token.get(0) === selected_token)) {
                            // Check if there is a previous/next token and it is selected
                            if(event.keyCode === KEY.LEFT || event.keyCode === KEY.UP) {
                                deselect_token($(selected_token), POSITION.BEFORE);
                            } else {
                                deselect_token($(selected_token), POSITION.AFTER);
                            }
                        } else if((event.keyCode === KEY.LEFT || event.keyCode === KEY.UP) && previous_token.length) {
                            // We are moving left, select the previous token if it exists
                            select_token($(previous_token.get(0)));
                        } else if((event.keyCode === KEY.RIGHT || event.keyCode === KEY.DOWN) && next_token.length) {
                            // We are moving right, select the next token if it exists
                            select_token($(next_token.get(0)));
                        }
                    } else {
                        var dropdown_item = null;

                        if(event.keyCode === KEY.DOWN || event.keyCode === KEY.RIGHT) {
                            dropdown_item = $(selected_dropdown_item).next();
                        } else {
                            dropdown_item = $(selected_dropdown_item).prev();
                        }

                        if(dropdown_item.length) {
                            select_dropdown_item(dropdown_item);
                        }
                        return false;
                    }
                    break;

                case KEY.BACKSPACE:
                    previous_token = input_token.prev();

                    if(!$(this).val().length) {
                        if(selected_token) {
                            delete_token($(selected_token));
                            hidden_input.change();
                        } else if(previous_token.length) {
                            select_token($(previous_token.get(0)));
                        }

                        return false;
                    } else if($(this).val().length === 1) {
                        hide_dropdown();
                    } else {
                        // set a timeout just long enough to let this function finish.
                        setTimeout(function(){do_search();}, 5);
                    }
                    break;

                case KEY.TAB:
                case KEY.ENTER:
                case KEY.NUMPAD_ENTER:
                case KEY.COMMA:
                  if(selected_dropdown_item) {
                    add_token($(selected_dropdown_item).data("tokeninput"));
                    hidden_input.change();
                    return false;
                  }
                  break;

                case KEY.ESCAPE:
                  hide_dropdown();
                  return true;

                default:
                    if(String.fromCharCode(event.which)) {
                        // set a timeout just long enough to let this function finish.
                        setTimeout(function(){do_search();}, 5);
                    }
                    break;
            }
        });

    // Keep a reference to the original input box
    var hidden_input = $(input)
                           .hide()
                           .val("")
                           .focus(function () {
                               input_box.focus();
                           })
                           .blur(function () {
                               input_box.blur();
                           });

    // Keep a reference to the selected token and dropdown item
    var selected_token = null;
    var selected_token_index = 0;
    var selected_dropdown_item = null;

    // The list to store the token items in
    var token_list = $("<ul />")
        .addClass(settings.classes.tokenList)
        .click(function (event) {
            var li = $(event.target).closest("li");
            if(li && li.get(0) && $.data(li.get(0), "tokeninput")) {
                toggle_select_token(li);
            } else {
                // Deselect selected token
                if(selected_token) {
                    deselect_token($(selected_token), POSITION.END);
                }

                // Focus input box
                input_box.focus();
            }
        })
        .mouseover(function (event) {
            var li = $(event.target).closest("li");
            if(li && selected_token !== this) {
                li.addClass(settings.classes.highlightedToken);
            }
        })
        .mouseout(function (event) {
            var li = $(event.target).closest("li");
            if(li && selected_token !== this) {
                li.removeClass(settings.classes.highlightedToken);
            }
        })
        .insertBefore(hidden_input);

    // The token holding the input box
    var input_token = $("<li />")
        .addClass(settings.classes.inputToken)
        .appendTo(token_list)
        .append(input_box);

    // The list to store the dropdown items in
    var dropdown = $("<div>")
        .addClass(settings.classes.dropdown)
        .appendTo("body")
        .hide();

    // Magic element to help us resize the text input
    var input_resizer = $("<tester/>")
        .insertAfter(input_box)
        .css({
            position: "absolute",
            top: -9999,
            left: -9999,
            width: "auto",
            fontSize: input_box.css("fontSize"),
            fontFamily: input_box.css("fontFamily"),
            fontWeight: input_box.css("fontWeight"),
            letterSpacing: input_box.css("letterSpacing"),
            whiteSpace: "nowrap"
        });

    // Pre-populate list if items exist
    hidden_input.val("");
    var li_data = settings.prePopulate || hidden_input.data("pre");
    if(settings.processPrePopulate && $.isFunction(settings.onResult)) {
        li_data = settings.onResult.call(hidden_input, li_data);
    }
    if(li_data && li_data.length) {
        $.each(li_data, function (index, value) {
            insert_token(value);
            checkTokenLimit();
        });
    }

    // Initialization is done
    if($.isFunction(settings.onReady)) {
        settings.onReady.call();
    }

    //
    // Public functions
    //

    this.clear = function() {
        token_list.children("li").each(function() {
            if ($(this).children("input").length === 0) {
                delete_token($(this));
            }
        });
    }

    this.add = function(item) {
        add_token(item);
    }

    this.remove = function(item) {
        token_list.children("li").each(function() {
            if ($(this).children("input").length === 0) {
                var currToken = $(this).data("tokeninput");
                var match = true;
                for (var prop in item) {
                    if (item[prop] !== currToken[prop]) {
                        match = false;
                        break;
                    }
                }
                if (match) {
                    delete_token($(this));
                }
            }
        });
    }

    this.getTokens = function() {
   		return saved_tokens;
   	}

    //
    // Private functions
    //

    function checkTokenLimit() {
        if(settings.tokenLimit !== null && token_count >= settings.tokenLimit) {
            input_box.hide();
            hide_dropdown();
            return;
        }
    }

    function resize_input() {
        if(input_val === (input_val = input_box.val())) {return;}

        // Enter new content into resizer and resize input accordingly
        var escaped = input_val.replace(/&/g, '&amp;').replace(/\s/g,' ').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        input_resizer.html(escaped);
        input_box.width(input_resizer.width() + 30);
    }

    function is_printable_character(keycode) {
        return ((keycode >= 48 && keycode <= 90) ||     // 0-1a-z
                (keycode >= 96 && keycode <= 111) ||    // numpad 0-9 + - / * .
                (keycode >= 186 && keycode <= 192) ||   // ; = , - . / ^
                (keycode >= 219 && keycode <= 222));    // ( \ ) '
    }

    // Inner function to a token to the list
    function insert_token(item) {
        var this_token = settings.tokenFormatter(item);
        this_token = $(this_token)
          .addClass(settings.classes.token)
          .insertBefore(input_token);

        // The 'delete token' button
        $("<span>" + settings.deleteText + "</span>")
            .addClass(settings.classes.tokenDelete)
            .appendTo(this_token)
            .click(function () {
                delete_token($(this).parent());
                hidden_input.change();
                return false;
            });

        // Store data on the token
        var token_data = {"id": item.id};
        token_data[settings.propertyToSearch] = item[settings.propertyToSearch];
        $.data(this_token.get(0), "tokeninput", item);

        // Save this token for duplicate checking
        saved_tokens = saved_tokens.slice(0,selected_token_index).concat([token_data]).concat(saved_tokens.slice(selected_token_index));
        selected_token_index++;

        // Update the hidden input
        update_hidden_input(saved_tokens, hidden_input);

        token_count += 1;

        // Check the token limit
        if(settings.tokenLimit !== null && token_count >= settings.tokenLimit) {
            input_box.hide();
            hide_dropdown();
        }

        return this_token;
    }

    // Add a token to the token list based on user input
    function add_token (item) {
        var callback = settings.onAdd;

        // See if the token already exists and select it if we don't want duplicates
        if(token_count > 0 && settings.preventDuplicates) {
            var found_existing_token = null;
            token_list.children().each(function () {
                var existing_token = $(this);
                var existing_data = $.data(existing_token.get(0), "tokeninput");
                if(existing_data && existing_data.id === item.id) {
                    found_existing_token = existing_token;
                    return false;
                }
            });

            if(found_existing_token) {
                select_token(found_existing_token);
                input_token.insertAfter(found_existing_token);
                input_box.focus();
                return;
            }
        }

        // Insert the new tokens
        if(settings.tokenLimit == null || token_count < settings.tokenLimit) {
            insert_token(item);
            checkTokenLimit();
        }

        // Clear input box
        input_box.val("");

        // Don't show the help dropdown, they've got the idea
        hide_dropdown();

        // Execute the onAdd callback if defined
        if($.isFunction(callback)) {
            callback.call(hidden_input,item);
        }
    }

    // Select a token in the token list
    function select_token (token) {
        token.addClass(settings.classes.selectedToken);
        selected_token = token.get(0);

        // Hide input box
        input_box.val("");

        // Hide dropdown if it is visible (eg if we clicked to select token)
        hide_dropdown();
    }

    // Deselect a token in the token list
    function deselect_token (token, position) {
        token.removeClass(settings.classes.selectedToken);
        selected_token = null;

        if(position === POSITION.BEFORE) {
            input_token.insertBefore(token);
            selected_token_index--;
        } else if(position === POSITION.AFTER) {
            input_token.insertAfter(token);
            selected_token_index++;
        } else {
            input_token.appendTo(token_list);
            selected_token_index = token_count;
        }

        // Show the input box and give it focus again
        input_box.focus();
    }

    // Toggle selection of a token in the token list
    function toggle_select_token(token) {
        var previous_selected_token = selected_token;

        if(selected_token) {
            deselect_token($(selected_token), POSITION.END);
        }

        if(previous_selected_token === token.get(0)) {
            deselect_token(token, POSITION.END);
        } else {
            select_token(token);
        }
    }

    // Delete a token from the token list
    function delete_token (token) {
        // Remove the id from the saved list
        var token_data = $.data(token.get(0), "tokeninput");
        var callback = settings.onDelete;

        var index = token.prevAll().length;
        if(index > selected_token_index) index--;

        // Delete the token
        token.remove();
        selected_token = null;

        // Show the input box and give it focus again
        input_box.focus();

        // Remove this token from the saved list
        saved_tokens = saved_tokens.slice(0,index).concat(saved_tokens.slice(index+1));
        if(index < selected_token_index) selected_token_index--;

        // Update the hidden input
        update_hidden_input(saved_tokens, hidden_input);

        token_count -= 1;

        if(settings.tokenLimit !== null) {
            input_box
                .show()
                .val("")
                .focus();
        }

        // Execute the onDelete callback if defined
        if($.isFunction(callback)) {
            callback.call(hidden_input,token_data);
        }
    }

    // Update the hidden input box value
    function update_hidden_input(saved_tokens, hidden_input) {
        var token_values = $.map(saved_tokens, function (el) {
            return el[settings.tokenValue];
        });
        hidden_input.val(token_values.join(settings.tokenDelimiter));

    }

    // Hide and clear the results dropdown
    function hide_dropdown () {
        dropdown.hide().empty();
        selected_dropdown_item = null;
    }

    function show_dropdown() {
        dropdown
            .css({
                position: "absolute",
                top: $(token_list).offset().top + $(token_list).outerHeight(),
                left: $(token_list).offset().left,
                zindex: 999
            })
            .show();
    }

    function show_dropdown_searching () {
        if(settings.searchingText) {
            dropdown.html("<p>"+settings.searchingText+"</p>");
            show_dropdown();
        }
    }

    function show_dropdown_hint () {
        if(settings.hintText) {
            dropdown.html("<p>"+settings.hintText+"</p>");
            show_dropdown();
        }
    }

    // Highlight the query part of the search term
    function highlight_term(value, term) {
        value = value.replace(/\\/g, "");
        return value.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + term + ")(?![^<>]*>)(?![^&;]+;)", "gi"), "<b>$1</b>");
    }

    function find_value_and_highlight_term(template, value, term) {
        value = value.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
        return template.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + value + ")(?![^<>]*>)(?![^&;]+;)", "g"), highlight_term(value, term));
    }

    // Populate the results dropdown with some results
    function populate_dropdown (query, results) {
        if(results && results.length) {
            dropdown.empty();
            var dropdown_ul = $("<ul>")
                .appendTo(dropdown)
                .mouseover(function (event) {
                    select_dropdown_item($(event.target).closest("li"));
                })
                .mousedown(function (event) {
                    add_token($(event.target).closest("li").data("tokeninput"));
                    hidden_input.change();
                    return false;
                })
                .hide();

            $.each(results, function(index, value) {
                var this_li = settings.resultsFormatter(value);

                this_li = find_value_and_highlight_term(this_li ,value[settings.propertyToSearch], query);

                this_li = $(this_li).appendTo(dropdown_ul);

                if(index % 2) {
                    this_li.addClass(settings.classes.dropdownItem);
                } else {
                    this_li.addClass(settings.classes.dropdownItem2);
                }

                if(index === 0) {
                    select_dropdown_item(this_li);
                }

                $.data(this_li.get(0), "tokeninput", value);
            });

            show_dropdown();

            if(settings.animateDropdown) {
                dropdown_ul.slideDown("fast");
            } else {
                dropdown_ul.show();
            }
        } else {
            if(settings.noResultsText) {
                dropdown.html("<p>"+settings.noResultsText+"</p>");
                show_dropdown();
            }
        }
    }

    // Highlight an item in the results dropdown
    function select_dropdown_item (item) {
        if(item) {
            if(selected_dropdown_item) {
                deselect_dropdown_item($(selected_dropdown_item));
            }

            item.addClass(settings.classes.selectedDropdownItem);
            selected_dropdown_item = item.get(0);
        }
    }

    // Remove highlighting from an item in the results dropdown
    function deselect_dropdown_item (item) {
        item.removeClass(settings.classes.selectedDropdownItem);
        selected_dropdown_item = null;
    }

    // Do a search and show the "searching" dropdown if the input is longer
    // than settings.minChars
    function do_search() {
        var query = input_box.val().toLowerCase();

        if(query && query.length) {
            if(selected_token) {
                deselect_token($(selected_token), POSITION.AFTER);
            }

            if(query.length >= settings.minChars) {
                show_dropdown_searching();
                clearTimeout(timeout);

                timeout = setTimeout(function(){
                    run_search(query);
                }, settings.searchDelay);
            } else {
                hide_dropdown();
            }
        }
    }

    // Do the actual search
    function run_search(query) {
        var cache_key = query + computeURL();
        var cached_results = cache.get(cache_key);
        if(cached_results) {
            populate_dropdown(query, cached_results);
        } else {
            // Are we doing an ajax search or local data search?
            if(settings.url) {
                var url = computeURL();
                // Extract exisiting get params
                var ajax_params = {};
                ajax_params.data = {};
                if(url.indexOf("?") > -1) {
                    var parts = url.split("?");
                    ajax_params.url = parts[0];

                    var param_array = parts[1].split("&");
                    $.each(param_array, function (index, value) {
                        var kv = value.split("=");
                        ajax_params.data[kv[0]] = kv[1];
                    });
                } else {
                    ajax_params.url = url;
                }

                // Prepare the request
                ajax_params.data[settings.queryParam] = query;
                ajax_params.type = settings.method;
                ajax_params.dataType = settings.contentType;
                if(settings.crossDomain) {
                    ajax_params.dataType = "jsonp";
                }

                // Attach the success callback
                ajax_params.success = function(results) {
                  if($.isFunction(settings.onResult)) {
                      results = settings.onResult.call(hidden_input, results);
                  }
                  cache.add(cache_key, settings.jsonContainer ? results[settings.jsonContainer] : results);

                  // only populate the dropdown if the results are associated with the active search query
                  if(input_box.val().toLowerCase() === query) {
                      populate_dropdown(query, settings.jsonContainer ? results[settings.jsonContainer] : results);
                  }
                };

                // Make the request
                $.ajax(ajax_params);
            } else if(settings.local_data) {
                // Do the search through local data
                var results = $.grep(settings.local_data, function (row) {
                    return row[settings.propertyToSearch].toLowerCase().indexOf(query.toLowerCase()) > -1;
                });

                if($.isFunction(settings.onResult)) {
                    results = settings.onResult.call(hidden_input, results);
                }
                cache.add(cache_key, results);
                populate_dropdown(query, results);
            }
        }
    }

    // compute the dynamic URL
    function computeURL() {
        var url = settings.url;
        if(typeof settings.url == 'function') {
            url = settings.url.call();
        }
        return url;
    }
};

// Really basic cache for the results
$.TokenList.Cache = function (options) {
    var settings = $.extend({
        max_size: 500
    }, options);

    var data = {};
    var size = 0;

    var flush = function () {
        data = {};
        size = 0;
    };

    this.add = function (query, results) {
        if(size > settings.max_size) {
            flush();
        }

        if(!data[query]) {
            size += 1;
        }

        data[query] = results;
    };

    this.get = function (query) {
        return data[query];
    };
};
}(jQuery));
//! moment.js
//! version : 2.8.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
(function(a){function b(a,b,c){switch(arguments.length){case 2:return null!=a?a:b;case 3:return null!=a?a:null!=b?b:c;default:throw new Error("Implement me")}}function c(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function d(a){rb.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+a)}function e(a,b){var c=!0;return l(function(){return c&&(d(a),c=!1),b.apply(this,arguments)},b)}function f(a,b){nc[a]||(d(b),nc[a]=!0)}function g(a,b){return function(c){return o(a.call(this,c),b)}}function h(a,b){return function(c){return this.localeData().ordinal(a.call(this,c),b)}}function i(){}function j(a,b){b!==!1&&E(a),m(this,a),this._d=new Date(+a._d)}function k(a){var b=x(a),c=b.year||0,d=b.quarter||0,e=b.month||0,f=b.week||0,g=b.day||0,h=b.hour||0,i=b.minute||0,j=b.second||0,k=b.millisecond||0;this._milliseconds=+k+1e3*j+6e4*i+36e5*h,this._days=+g+7*f,this._months=+e+3*d+12*c,this._data={},this._locale=rb.localeData(),this._bubble()}function l(a,b){for(var c in b)b.hasOwnProperty(c)&&(a[c]=b[c]);return b.hasOwnProperty("toString")&&(a.toString=b.toString),b.hasOwnProperty("valueOf")&&(a.valueOf=b.valueOf),a}function m(a,b){var c,d,e;if("undefined"!=typeof b._isAMomentObject&&(a._isAMomentObject=b._isAMomentObject),"undefined"!=typeof b._i&&(a._i=b._i),"undefined"!=typeof b._f&&(a._f=b._f),"undefined"!=typeof b._l&&(a._l=b._l),"undefined"!=typeof b._strict&&(a._strict=b._strict),"undefined"!=typeof b._tzm&&(a._tzm=b._tzm),"undefined"!=typeof b._isUTC&&(a._isUTC=b._isUTC),"undefined"!=typeof b._offset&&(a._offset=b._offset),"undefined"!=typeof b._pf&&(a._pf=b._pf),"undefined"!=typeof b._locale&&(a._locale=b._locale),Fb.length>0)for(c in Fb)d=Fb[c],e=b[d],"undefined"!=typeof e&&(a[d]=e);return a}function n(a){return 0>a?Math.ceil(a):Math.floor(a)}function o(a,b,c){for(var d=""+Math.abs(a),e=a>=0;d.length<b;)d="0"+d;return(e?c?"+":"":"-")+d}function p(a,b){var c={milliseconds:0,months:0};return c.months=b.month()-a.month()+12*(b.year()-a.year()),a.clone().add(c.months,"M").isAfter(b)&&--c.months,c.milliseconds=+b-+a.clone().add(c.months,"M"),c}function q(a,b){var c;return b=J(b,a),a.isBefore(b)?c=p(a,b):(c=p(b,a),c.milliseconds=-c.milliseconds,c.months=-c.months),c}function r(a,b){return function(c,d){var e,g;return null===d||isNaN(+d)||(f(b,"moment()."+b+"(period, number) is deprecated. Please use moment()."+b+"(number, period)."),g=c,c=d,d=g),c="string"==typeof c?+c:c,e=rb.duration(c,d),s(this,e,a),this}}function s(a,b,c,d){var e=b._milliseconds,f=b._days,g=b._months;d=null==d?!0:d,e&&a._d.setTime(+a._d+e*c),f&&lb(a,"Date",kb(a,"Date")+f*c),g&&jb(a,kb(a,"Month")+g*c),d&&rb.updateOffset(a,f||g)}function t(a){return"[object Array]"===Object.prototype.toString.call(a)}function u(a){return"[object Date]"===Object.prototype.toString.call(a)||a instanceof Date}function v(a,b,c){var d,e=Math.min(a.length,b.length),f=Math.abs(a.length-b.length),g=0;for(d=0;e>d;d++)(c&&a[d]!==b[d]||!c&&z(a[d])!==z(b[d]))&&g++;return g+f}function w(a){if(a){var b=a.toLowerCase().replace(/(.)s$/,"$1");a=gc[a]||hc[b]||b}return a}function x(a){var b,c,d={};for(c in a)a.hasOwnProperty(c)&&(b=w(c),b&&(d[b]=a[c]));return d}function y(b){var c,d;if(0===b.indexOf("week"))c=7,d="day";else{if(0!==b.indexOf("month"))return;c=12,d="month"}rb[b]=function(e,f){var g,h,i=rb._locale[b],j=[];if("number"==typeof e&&(f=e,e=a),h=function(a){var b=rb().utc().set(d,a);return i.call(rb._locale,b,e||"")},null!=f)return h(f);for(g=0;c>g;g++)j.push(h(g));return j}}function z(a){var b=+a,c=0;return 0!==b&&isFinite(b)&&(c=b>=0?Math.floor(b):Math.ceil(b)),c}function A(a,b){return new Date(Date.UTC(a,b+1,0)).getUTCDate()}function B(a,b,c){return fb(rb([a,11,31+b-c]),b,c).week}function C(a){return D(a)?366:365}function D(a){return a%4===0&&a%100!==0||a%400===0}function E(a){var b;a._a&&-2===a._pf.overflow&&(b=a._a[yb]<0||a._a[yb]>11?yb:a._a[zb]<1||a._a[zb]>A(a._a[xb],a._a[yb])?zb:a._a[Ab]<0||a._a[Ab]>23?Ab:a._a[Bb]<0||a._a[Bb]>59?Bb:a._a[Cb]<0||a._a[Cb]>59?Cb:a._a[Db]<0||a._a[Db]>999?Db:-1,a._pf._overflowDayOfYear&&(xb>b||b>zb)&&(b=zb),a._pf.overflow=b)}function F(a){return null==a._isValid&&(a._isValid=!isNaN(a._d.getTime())&&a._pf.overflow<0&&!a._pf.empty&&!a._pf.invalidMonth&&!a._pf.nullInput&&!a._pf.invalidFormat&&!a._pf.userInvalidated,a._strict&&(a._isValid=a._isValid&&0===a._pf.charsLeftOver&&0===a._pf.unusedTokens.length)),a._isValid}function G(a){return a?a.toLowerCase().replace("_","-"):a}function H(a){for(var b,c,d,e,f=0;f<a.length;){for(e=G(a[f]).split("-"),b=e.length,c=G(a[f+1]),c=c?c.split("-"):null;b>0;){if(d=I(e.slice(0,b).join("-")))return d;if(c&&c.length>=b&&v(e,c,!0)>=b-1)break;b--}f++}return null}function I(a){var b=null;if(!Eb[a]&&Gb)try{b=rb.locale(),require("./locale/"+a),rb.locale(b)}catch(c){}return Eb[a]}function J(a,b){return b._isUTC?rb(a).zone(b._offset||0):rb(a).local()}function K(a){return a.match(/\[[\s\S]/)?a.replace(/^\[|\]$/g,""):a.replace(/\\/g,"")}function L(a){var b,c,d=a.match(Kb);for(b=0,c=d.length;c>b;b++)d[b]=mc[d[b]]?mc[d[b]]:K(d[b]);return function(e){var f="";for(b=0;c>b;b++)f+=d[b]instanceof Function?d[b].call(e,a):d[b];return f}}function M(a,b){return a.isValid()?(b=N(b,a.localeData()),ic[b]||(ic[b]=L(b)),ic[b](a)):a.localeData().invalidDate()}function N(a,b){function c(a){return b.longDateFormat(a)||a}var d=5;for(Lb.lastIndex=0;d>=0&&Lb.test(a);)a=a.replace(Lb,c),Lb.lastIndex=0,d-=1;return a}function O(a,b){var c,d=b._strict;switch(a){case"Q":return Wb;case"DDDD":return Yb;case"YYYY":case"GGGG":case"gggg":return d?Zb:Ob;case"Y":case"G":case"g":return _b;case"YYYYYY":case"YYYYY":case"GGGGG":case"ggggg":return d?$b:Pb;case"S":if(d)return Wb;case"SS":if(d)return Xb;case"SSS":if(d)return Yb;case"DDD":return Nb;case"MMM":case"MMMM":case"dd":case"ddd":case"dddd":return Rb;case"a":case"A":return b._locale._meridiemParse;case"X":return Ub;case"Z":case"ZZ":return Sb;case"T":return Tb;case"SSSS":return Qb;case"MM":case"DD":case"YY":case"GG":case"gg":case"HH":case"hh":case"mm":case"ss":case"ww":case"WW":return d?Xb:Mb;case"M":case"D":case"d":case"H":case"h":case"m":case"s":case"w":case"W":case"e":case"E":return Mb;case"Do":return Vb;default:return c=new RegExp(X(W(a.replace("\\","")),"i"))}}function P(a){a=a||"";var b=a.match(Sb)||[],c=b[b.length-1]||[],d=(c+"").match(ec)||["-",0,0],e=+(60*d[1])+z(d[2]);return"+"===d[0]?-e:e}function Q(a,b,c){var d,e=c._a;switch(a){case"Q":null!=b&&(e[yb]=3*(z(b)-1));break;case"M":case"MM":null!=b&&(e[yb]=z(b)-1);break;case"MMM":case"MMMM":d=c._locale.monthsParse(b),null!=d?e[yb]=d:c._pf.invalidMonth=b;break;case"D":case"DD":null!=b&&(e[zb]=z(b));break;case"Do":null!=b&&(e[zb]=z(parseInt(b,10)));break;case"DDD":case"DDDD":null!=b&&(c._dayOfYear=z(b));break;case"YY":e[xb]=rb.parseTwoDigitYear(b);break;case"YYYY":case"YYYYY":case"YYYYYY":e[xb]=z(b);break;case"a":case"A":c._isPm=c._locale.isPM(b);break;case"H":case"HH":case"h":case"hh":e[Ab]=z(b);break;case"m":case"mm":e[Bb]=z(b);break;case"s":case"ss":e[Cb]=z(b);break;case"S":case"SS":case"SSS":case"SSSS":e[Db]=z(1e3*("0."+b));break;case"X":c._d=new Date(1e3*parseFloat(b));break;case"Z":case"ZZ":c._useUTC=!0,c._tzm=P(b);break;case"dd":case"ddd":case"dddd":d=c._locale.weekdaysParse(b),null!=d?(c._w=c._w||{},c._w.d=d):c._pf.invalidWeekday=b;break;case"w":case"ww":case"W":case"WW":case"d":case"e":case"E":a=a.substr(0,1);case"gggg":case"GGGG":case"GGGGG":a=a.substr(0,2),b&&(c._w=c._w||{},c._w[a]=z(b));break;case"gg":case"GG":c._w=c._w||{},c._w[a]=rb.parseTwoDigitYear(b)}}function R(a){var c,d,e,f,g,h,i;c=a._w,null!=c.GG||null!=c.W||null!=c.E?(g=1,h=4,d=b(c.GG,a._a[xb],fb(rb(),1,4).year),e=b(c.W,1),f=b(c.E,1)):(g=a._locale._week.dow,h=a._locale._week.doy,d=b(c.gg,a._a[xb],fb(rb(),g,h).year),e=b(c.w,1),null!=c.d?(f=c.d,g>f&&++e):f=null!=c.e?c.e+g:g),i=gb(d,e,f,h,g),a._a[xb]=i.year,a._dayOfYear=i.dayOfYear}function S(a){var c,d,e,f,g=[];if(!a._d){for(e=U(a),a._w&&null==a._a[zb]&&null==a._a[yb]&&R(a),a._dayOfYear&&(f=b(a._a[xb],e[xb]),a._dayOfYear>C(f)&&(a._pf._overflowDayOfYear=!0),d=bb(f,0,a._dayOfYear),a._a[yb]=d.getUTCMonth(),a._a[zb]=d.getUTCDate()),c=0;3>c&&null==a._a[c];++c)a._a[c]=g[c]=e[c];for(;7>c;c++)a._a[c]=g[c]=null==a._a[c]?2===c?1:0:a._a[c];a._d=(a._useUTC?bb:ab).apply(null,g),null!=a._tzm&&a._d.setUTCMinutes(a._d.getUTCMinutes()+a._tzm)}}function T(a){var b;a._d||(b=x(a._i),a._a=[b.year,b.month,b.day,b.hour,b.minute,b.second,b.millisecond],S(a))}function U(a){var b=new Date;return a._useUTC?[b.getUTCFullYear(),b.getUTCMonth(),b.getUTCDate()]:[b.getFullYear(),b.getMonth(),b.getDate()]}function V(a){if(a._f===rb.ISO_8601)return void Z(a);a._a=[],a._pf.empty=!0;var b,c,d,e,f,g=""+a._i,h=g.length,i=0;for(d=N(a._f,a._locale).match(Kb)||[],b=0;b<d.length;b++)e=d[b],c=(g.match(O(e,a))||[])[0],c&&(f=g.substr(0,g.indexOf(c)),f.length>0&&a._pf.unusedInput.push(f),g=g.slice(g.indexOf(c)+c.length),i+=c.length),mc[e]?(c?a._pf.empty=!1:a._pf.unusedTokens.push(e),Q(e,c,a)):a._strict&&!c&&a._pf.unusedTokens.push(e);a._pf.charsLeftOver=h-i,g.length>0&&a._pf.unusedInput.push(g),a._isPm&&a._a[Ab]<12&&(a._a[Ab]+=12),a._isPm===!1&&12===a._a[Ab]&&(a._a[Ab]=0),S(a),E(a)}function W(a){return a.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(a,b,c,d,e){return b||c||d||e})}function X(a){return a.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function Y(a){var b,d,e,f,g;if(0===a._f.length)return a._pf.invalidFormat=!0,void(a._d=new Date(0/0));for(f=0;f<a._f.length;f++)g=0,b=m({},a),b._pf=c(),b._f=a._f[f],V(b),F(b)&&(g+=b._pf.charsLeftOver,g+=10*b._pf.unusedTokens.length,b._pf.score=g,(null==e||e>g)&&(e=g,d=b));l(a,d||b)}function Z(a){var b,c,d=a._i,e=ac.exec(d);if(e){for(a._pf.iso=!0,b=0,c=cc.length;c>b;b++)if(cc[b][1].exec(d)){a._f=cc[b][0]+(e[6]||" ");break}for(b=0,c=dc.length;c>b;b++)if(dc[b][1].exec(d)){a._f+=dc[b][0];break}d.match(Sb)&&(a._f+="Z"),V(a)}else a._isValid=!1}function $(a){Z(a),a._isValid===!1&&(delete a._isValid,rb.createFromInputFallback(a))}function _(b){var c,d=b._i;d===a?b._d=new Date:u(d)?b._d=new Date(+d):null!==(c=Hb.exec(d))?b._d=new Date(+c[1]):"string"==typeof d?$(b):t(d)?(b._a=d.slice(0),S(b)):"object"==typeof d?T(b):"number"==typeof d?b._d=new Date(d):rb.createFromInputFallback(b)}function ab(a,b,c,d,e,f,g){var h=new Date(a,b,c,d,e,f,g);return 1970>a&&h.setFullYear(a),h}function bb(a){var b=new Date(Date.UTC.apply(null,arguments));return 1970>a&&b.setUTCFullYear(a),b}function cb(a,b){if("string"==typeof a)if(isNaN(a)){if(a=b.weekdaysParse(a),"number"!=typeof a)return null}else a=parseInt(a,10);return a}function db(a,b,c,d,e){return e.relativeTime(b||1,!!c,a,d)}function eb(a,b,c){var d=rb.duration(a).abs(),e=wb(d.as("s")),f=wb(d.as("m")),g=wb(d.as("h")),h=wb(d.as("d")),i=wb(d.as("M")),j=wb(d.as("y")),k=e<jc.s&&["s",e]||1===f&&["m"]||f<jc.m&&["mm",f]||1===g&&["h"]||g<jc.h&&["hh",g]||1===h&&["d"]||h<jc.d&&["dd",h]||1===i&&["M"]||i<jc.M&&["MM",i]||1===j&&["y"]||["yy",j];return k[2]=b,k[3]=+a>0,k[4]=c,db.apply({},k)}function fb(a,b,c){var d,e=c-b,f=c-a.day();return f>e&&(f-=7),e-7>f&&(f+=7),d=rb(a).add(f,"d"),{week:Math.ceil(d.dayOfYear()/7),year:d.year()}}function gb(a,b,c,d,e){var f,g,h=bb(a,0,1).getUTCDay();return h=0===h?7:h,c=null!=c?c:e,f=e-h+(h>d?7:0)-(e>h?7:0),g=7*(b-1)+(c-e)+f+1,{year:g>0?a:a-1,dayOfYear:g>0?g:C(a-1)+g}}function hb(b){var c=b._i,d=b._f;return b._locale=b._locale||rb.localeData(b._l),null===c||d===a&&""===c?rb.invalid({nullInput:!0}):("string"==typeof c&&(b._i=c=b._locale.preparse(c)),rb.isMoment(c)?new j(c,!0):(d?t(d)?Y(b):V(b):_(b),new j(b)))}function ib(a,b){var c,d;if(1===b.length&&t(b[0])&&(b=b[0]),!b.length)return rb();for(c=b[0],d=1;d<b.length;++d)b[d][a](c)&&(c=b[d]);return c}function jb(a,b){var c;return"string"==typeof b&&(b=a.localeData().monthsParse(b),"number"!=typeof b)?a:(c=Math.min(a.date(),A(a.year(),b)),a._d["set"+(a._isUTC?"UTC":"")+"Month"](b,c),a)}function kb(a,b){return a._d["get"+(a._isUTC?"UTC":"")+b]()}function lb(a,b,c){return"Month"===b?jb(a,c):a._d["set"+(a._isUTC?"UTC":"")+b](c)}function mb(a,b){return function(c){return null!=c?(lb(this,a,c),rb.updateOffset(this,b),this):kb(this,a)}}function nb(a){return 400*a/146097}function ob(a){return 146097*a/400}function pb(a){rb.duration.fn[a]=function(){return this._data[a]}}function qb(a){"undefined"==typeof ender&&(sb=vb.moment,vb.moment=a?e("Accessing Moment through the global scope is deprecated, and will be removed in an upcoming release.",rb):rb)}for(var rb,sb,tb,ub="2.8.1",vb="undefined"!=typeof global?global:this,wb=Math.round,xb=0,yb=1,zb=2,Ab=3,Bb=4,Cb=5,Db=6,Eb={},Fb=[],Gb="undefined"!=typeof module&&module.exports,Hb=/^\/?Date\((\-?\d+)/i,Ib=/(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,Jb=/^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,Kb=/(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,Lb=/(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,Mb=/\d\d?/,Nb=/\d{1,3}/,Ob=/\d{1,4}/,Pb=/[+\-]?\d{1,6}/,Qb=/\d+/,Rb=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Sb=/Z|[\+\-]\d\d:?\d\d/gi,Tb=/T/i,Ub=/[\+\-]?\d+(\.\d{1,3})?/,Vb=/\d{1,2}/,Wb=/\d/,Xb=/\d\d/,Yb=/\d{3}/,Zb=/\d{4}/,$b=/[+-]?\d{6}/,_b=/[+-]?\d+/,ac=/^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,bc="YYYY-MM-DDTHH:mm:ssZ",cc=[["YYYYYY-MM-DD",/[+-]\d{6}-\d{2}-\d{2}/],["YYYY-MM-DD",/\d{4}-\d{2}-\d{2}/],["GGGG-[W]WW-E",/\d{4}-W\d{2}-\d/],["GGGG-[W]WW",/\d{4}-W\d{2}/],["YYYY-DDD",/\d{4}-\d{3}/]],dc=[["HH:mm:ss.SSSS",/(T| )\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss",/(T| )\d\d:\d\d:\d\d/],["HH:mm",/(T| )\d\d:\d\d/],["HH",/(T| )\d\d/]],ec=/([\+\-]|\d\d)/gi,fc=("Date|Hours|Minutes|Seconds|Milliseconds".split("|"),{Milliseconds:1,Seconds:1e3,Minutes:6e4,Hours:36e5,Days:864e5,Months:2592e6,Years:31536e6}),gc={ms:"millisecond",s:"second",m:"minute",h:"hour",d:"day",D:"date",w:"week",W:"isoWeek",M:"month",Q:"quarter",y:"year",DDD:"dayOfYear",e:"weekday",E:"isoWeekday",gg:"weekYear",GG:"isoWeekYear"},hc={dayofyear:"dayOfYear",isoweekday:"isoWeekday",isoweek:"isoWeek",weekyear:"weekYear",isoweekyear:"isoWeekYear"},ic={},jc={s:45,m:45,h:22,d:26,M:11},kc="DDD w W M D d".split(" "),lc="M D H h m s w W".split(" "),mc={M:function(){return this.month()+1},MMM:function(a){return this.localeData().monthsShort(this,a)},MMMM:function(a){return this.localeData().months(this,a)},D:function(){return this.date()},DDD:function(){return this.dayOfYear()},d:function(){return this.day()},dd:function(a){return this.localeData().weekdaysMin(this,a)},ddd:function(a){return this.localeData().weekdaysShort(this,a)},dddd:function(a){return this.localeData().weekdays(this,a)},w:function(){return this.week()},W:function(){return this.isoWeek()},YY:function(){return o(this.year()%100,2)},YYYY:function(){return o(this.year(),4)},YYYYY:function(){return o(this.year(),5)},YYYYYY:function(){var a=this.year(),b=a>=0?"+":"-";return b+o(Math.abs(a),6)},gg:function(){return o(this.weekYear()%100,2)},gggg:function(){return o(this.weekYear(),4)},ggggg:function(){return o(this.weekYear(),5)},GG:function(){return o(this.isoWeekYear()%100,2)},GGGG:function(){return o(this.isoWeekYear(),4)},GGGGG:function(){return o(this.isoWeekYear(),5)},e:function(){return this.weekday()},E:function(){return this.isoWeekday()},a:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!0)},A:function(){return this.localeData().meridiem(this.hours(),this.minutes(),!1)},H:function(){return this.hours()},h:function(){return this.hours()%12||12},m:function(){return this.minutes()},s:function(){return this.seconds()},S:function(){return z(this.milliseconds()/100)},SS:function(){return o(z(this.milliseconds()/10),2)},SSS:function(){return o(this.milliseconds(),3)},SSSS:function(){return o(this.milliseconds(),3)},Z:function(){var a=-this.zone(),b="+";return 0>a&&(a=-a,b="-"),b+o(z(a/60),2)+":"+o(z(a)%60,2)},ZZ:function(){var a=-this.zone(),b="+";return 0>a&&(a=-a,b="-"),b+o(z(a/60),2)+o(z(a)%60,2)},z:function(){return this.zoneAbbr()},zz:function(){return this.zoneName()},X:function(){return this.unix()},Q:function(){return this.quarter()}},nc={},oc=["months","monthsShort","weekdays","weekdaysShort","weekdaysMin"];kc.length;)tb=kc.pop(),mc[tb+"o"]=h(mc[tb],tb);for(;lc.length;)tb=lc.pop(),mc[tb+tb]=g(mc[tb],2);mc.DDDD=g(mc.DDD,3),l(i.prototype,{set:function(a){var b,c;for(c in a)b=a[c],"function"==typeof b?this[c]=b:this["_"+c]=b},_months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),months:function(a){return this._months[a.month()]},_monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),monthsShort:function(a){return this._monthsShort[a.month()]},monthsParse:function(a){var b,c,d;for(this._monthsParse||(this._monthsParse=[]),b=0;12>b;b++)if(this._monthsParse[b]||(c=rb.utc([2e3,b]),d="^"+this.months(c,"")+"|^"+this.monthsShort(c,""),this._monthsParse[b]=new RegExp(d.replace(".",""),"i")),this._monthsParse[b].test(a))return b},_weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdays:function(a){return this._weekdays[a.day()]},_weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysShort:function(a){return this._weekdaysShort[a.day()]},_weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),weekdaysMin:function(a){return this._weekdaysMin[a.day()]},weekdaysParse:function(a){var b,c,d;for(this._weekdaysParse||(this._weekdaysParse=[]),b=0;7>b;b++)if(this._weekdaysParse[b]||(c=rb([2e3,1]).day(b),d="^"+this.weekdays(c,"")+"|^"+this.weekdaysShort(c,"")+"|^"+this.weekdaysMin(c,""),this._weekdaysParse[b]=new RegExp(d.replace(".",""),"i")),this._weekdaysParse[b].test(a))return b},_longDateFormat:{LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY LT",LLLL:"dddd, MMMM D, YYYY LT"},longDateFormat:function(a){var b=this._longDateFormat[a];return!b&&this._longDateFormat[a.toUpperCase()]&&(b=this._longDateFormat[a.toUpperCase()].replace(/MMMM|MM|DD|dddd/g,function(a){return a.slice(1)}),this._longDateFormat[a]=b),b},isPM:function(a){return"p"===(a+"").toLowerCase().charAt(0)},_meridiemParse:/[ap]\.?m?\.?/i,meridiem:function(a,b,c){return a>11?c?"pm":"PM":c?"am":"AM"},_calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},calendar:function(a,b){var c=this._calendar[a];return"function"==typeof c?c.apply(b):c},_relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},relativeTime:function(a,b,c,d){var e=this._relativeTime[c];return"function"==typeof e?e(a,b,c,d):e.replace(/%d/i,a)},pastFuture:function(a,b){var c=this._relativeTime[a>0?"future":"past"];return"function"==typeof c?c(b):c.replace(/%s/i,b)},ordinal:function(a){return this._ordinal.replace("%d",a)},_ordinal:"%d",preparse:function(a){return a},postformat:function(a){return a},week:function(a){return fb(a,this._week.dow,this._week.doy).week},_week:{dow:0,doy:6},_invalidDate:"Invalid date",invalidDate:function(){return this._invalidDate}}),rb=function(b,d,e,f){var g;return"boolean"==typeof e&&(f=e,e=a),g={},g._isAMomentObject=!0,g._i=b,g._f=d,g._l=e,g._strict=f,g._isUTC=!1,g._pf=c(),hb(g)},rb.suppressDeprecationWarnings=!1,rb.createFromInputFallback=e("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(a){a._d=new Date(a._i)}),rb.min=function(){var a=[].slice.call(arguments,0);return ib("isBefore",a)},rb.max=function(){var a=[].slice.call(arguments,0);return ib("isAfter",a)},rb.utc=function(b,d,e,f){var g;return"boolean"==typeof e&&(f=e,e=a),g={},g._isAMomentObject=!0,g._useUTC=!0,g._isUTC=!0,g._l=e,g._i=b,g._f=d,g._strict=f,g._pf=c(),hb(g).utc()},rb.unix=function(a){return rb(1e3*a)},rb.duration=function(a,b){var c,d,e,f,g=a,h=null;return rb.isDuration(a)?g={ms:a._milliseconds,d:a._days,M:a._months}:"number"==typeof a?(g={},b?g[b]=a:g.milliseconds=a):(h=Ib.exec(a))?(c="-"===h[1]?-1:1,g={y:0,d:z(h[zb])*c,h:z(h[Ab])*c,m:z(h[Bb])*c,s:z(h[Cb])*c,ms:z(h[Db])*c}):(h=Jb.exec(a))?(c="-"===h[1]?-1:1,e=function(a){var b=a&&parseFloat(a.replace(",","."));return(isNaN(b)?0:b)*c},g={y:e(h[2]),M:e(h[3]),d:e(h[4]),h:e(h[5]),m:e(h[6]),s:e(h[7]),w:e(h[8])}):"object"==typeof g&&("from"in g||"to"in g)&&(f=q(rb(g.from),rb(g.to)),g={},g.ms=f.milliseconds,g.M=f.months),d=new k(g),rb.isDuration(a)&&a.hasOwnProperty("_locale")&&(d._locale=a._locale),d},rb.version=ub,rb.defaultFormat=bc,rb.ISO_8601=function(){},rb.momentProperties=Fb,rb.updateOffset=function(){},rb.relativeTimeThreshold=function(b,c){return jc[b]===a?!1:c===a?jc[b]:(jc[b]=c,!0)},rb.lang=e("moment.lang is deprecated. Use moment.locale instead.",function(a,b){return rb.locale(a,b)}),rb.locale=function(a,b){var c;return a&&(c="undefined"!=typeof b?rb.defineLocale(a,b):rb.localeData(a),c&&(rb.duration._locale=rb._locale=c)),rb._locale._abbr},rb.defineLocale=function(a,b){return null!==b?(b.abbr=a,Eb[a]||(Eb[a]=new i),Eb[a].set(b),rb.locale(a),Eb[a]):(delete Eb[a],null)},rb.langData=e("moment.langData is deprecated. Use moment.localeData instead.",function(a){return rb.localeData(a)}),rb.localeData=function(a){var b;if(a&&a._locale&&a._locale._abbr&&(a=a._locale._abbr),!a)return rb._locale;if(!t(a)){if(b=I(a))return b;a=[a]}return H(a)},rb.isMoment=function(a){return a instanceof j||null!=a&&a.hasOwnProperty("_isAMomentObject")},rb.isDuration=function(a){return a instanceof k};for(tb=oc.length-1;tb>=0;--tb)y(oc[tb]);rb.normalizeUnits=function(a){return w(a)},rb.invalid=function(a){var b=rb.utc(0/0);return null!=a?l(b._pf,a):b._pf.userInvalidated=!0,b},rb.parseZone=function(){return rb.apply(null,arguments).parseZone()},rb.parseTwoDigitYear=function(a){return z(a)+(z(a)>68?1900:2e3)},l(rb.fn=j.prototype,{clone:function(){return rb(this)},valueOf:function(){return+this._d+6e4*(this._offset||0)},unix:function(){return Math.floor(+this/1e3)},toString:function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},toDate:function(){return this._offset?new Date(+this):this._d},toISOString:function(){var a=rb(this).utc();return 0<a.year()&&a.year()<=9999?M(a,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):M(a,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")},toArray:function(){var a=this;return[a.year(),a.month(),a.date(),a.hours(),a.minutes(),a.seconds(),a.milliseconds()]},isValid:function(){return F(this)},isDSTShifted:function(){return this._a?this.isValid()&&v(this._a,(this._isUTC?rb.utc(this._a):rb(this._a)).toArray())>0:!1},parsingFlags:function(){return l({},this._pf)},invalidAt:function(){return this._pf.overflow},utc:function(a){return this.zone(0,a)},local:function(a){return this._isUTC&&(this.zone(0,a),this._isUTC=!1,a&&this.add(this._d.getTimezoneOffset(),"m")),this},format:function(a){var b=M(this,a||rb.defaultFormat);return this.localeData().postformat(b)},add:r(1,"add"),subtract:r(-1,"subtract"),diff:function(a,b,c){var d,e,f=J(a,this),g=6e4*(this.zone()-f.zone());return b=w(b),"year"===b||"month"===b?(d=432e5*(this.daysInMonth()+f.daysInMonth()),e=12*(this.year()-f.year())+(this.month()-f.month()),e+=(this-rb(this).startOf("month")-(f-rb(f).startOf("month")))/d,e-=6e4*(this.zone()-rb(this).startOf("month").zone()-(f.zone()-rb(f).startOf("month").zone()))/d,"year"===b&&(e/=12)):(d=this-f,e="second"===b?d/1e3:"minute"===b?d/6e4:"hour"===b?d/36e5:"day"===b?(d-g)/864e5:"week"===b?(d-g)/6048e5:d),c?e:n(e)},from:function(a,b){return rb.duration({to:this,from:a}).locale(this.locale()).humanize(!b)},fromNow:function(a){return this.from(rb(),a)},calendar:function(a){var b=a||rb(),c=J(b,this).startOf("day"),d=this.diff(c,"days",!0),e=-6>d?"sameElse":-1>d?"lastWeek":0>d?"lastDay":1>d?"sameDay":2>d?"nextDay":7>d?"nextWeek":"sameElse";return this.format(this.localeData().calendar(e,this))},isLeapYear:function(){return D(this.year())},isDST:function(){return this.zone()<this.clone().month(0).zone()||this.zone()<this.clone().month(5).zone()},day:function(a){var b=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=a?(a=cb(a,this.localeData()),this.add(a-b,"d")):b},month:mb("Month",!0),startOf:function(a){switch(a=w(a)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===a?this.weekday(0):"isoWeek"===a&&this.isoWeekday(1),"quarter"===a&&this.month(3*Math.floor(this.month()/3)),this},endOf:function(a){return a=w(a),this.startOf(a).add(1,"isoWeek"===a?"week":a).subtract(1,"ms")},isAfter:function(a,b){return b="undefined"!=typeof b?b:"millisecond",+this.clone().startOf(b)>+rb(a).startOf(b)},isBefore:function(a,b){return b="undefined"!=typeof b?b:"millisecond",+this.clone().startOf(b)<+rb(a).startOf(b)},isSame:function(a,b){return b=b||"ms",+this.clone().startOf(b)===+J(a,this).startOf(b)},min:e("moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(a){return a=rb.apply(null,arguments),this>a?this:a}),max:e("moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(a){return a=rb.apply(null,arguments),a>this?this:a}),zone:function(a,b){var c,d=this._offset||0;return null==a?this._isUTC?d:this._d.getTimezoneOffset():("string"==typeof a&&(a=P(a)),Math.abs(a)<16&&(a=60*a),!this._isUTC&&b&&(c=this._d.getTimezoneOffset()),this._offset=a,this._isUTC=!0,null!=c&&this.subtract(c,"m"),d!==a&&(!b||this._changeInProgress?s(this,rb.duration(d-a,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,rb.updateOffset(this,!0),this._changeInProgress=null)),this)},zoneAbbr:function(){return this._isUTC?"UTC":""},zoneName:function(){return this._isUTC?"Coordinated Universal Time":""},parseZone:function(){return this._tzm?this.zone(this._tzm):"string"==typeof this._i&&this.zone(this._i),this},hasAlignedHourOffset:function(a){return a=a?rb(a).zone():0,(this.zone()-a)%60===0},daysInMonth:function(){return A(this.year(),this.month())},dayOfYear:function(a){var b=wb((rb(this).startOf("day")-rb(this).startOf("year"))/864e5)+1;return null==a?b:this.add(a-b,"d")},quarter:function(a){return null==a?Math.ceil((this.month()+1)/3):this.month(3*(a-1)+this.month()%3)},weekYear:function(a){var b=fb(this,this.localeData()._week.dow,this.localeData()._week.doy).year;return null==a?b:this.add(a-b,"y")},isoWeekYear:function(a){var b=fb(this,1,4).year;return null==a?b:this.add(a-b,"y")},week:function(a){var b=this.localeData().week(this);return null==a?b:this.add(7*(a-b),"d")},isoWeek:function(a){var b=fb(this,1,4).week;return null==a?b:this.add(7*(a-b),"d")},weekday:function(a){var b=(this.day()+7-this.localeData()._week.dow)%7;return null==a?b:this.add(a-b,"d")},isoWeekday:function(a){return null==a?this.day()||7:this.day(this.day()%7?a:a-7)},isoWeeksInYear:function(){return B(this.year(),1,4)},weeksInYear:function(){var a=this.localeData()._week;return B(this.year(),a.dow,a.doy)},get:function(a){return a=w(a),this[a]()},set:function(a,b){return a=w(a),"function"==typeof this[a]&&this[a](b),this},locale:function(b){return b===a?this._locale._abbr:(this._locale=rb.localeData(b),this)},lang:e("moment().lang() is deprecated. Use moment().localeData() instead.",function(b){return b===a?this.localeData():(this._locale=rb.localeData(b),this)}),localeData:function(){return this._locale}}),rb.fn.millisecond=rb.fn.milliseconds=mb("Milliseconds",!1),rb.fn.second=rb.fn.seconds=mb("Seconds",!1),rb.fn.minute=rb.fn.minutes=mb("Minutes",!1),rb.fn.hour=rb.fn.hours=mb("Hours",!0),rb.fn.date=mb("Date",!0),rb.fn.dates=e("dates accessor is deprecated. Use date instead.",mb("Date",!0)),rb.fn.year=mb("FullYear",!0),rb.fn.years=e("years accessor is deprecated. Use year instead.",mb("FullYear",!0)),rb.fn.days=rb.fn.day,rb.fn.months=rb.fn.month,rb.fn.weeks=rb.fn.week,rb.fn.isoWeeks=rb.fn.isoWeek,rb.fn.quarters=rb.fn.quarter,rb.fn.toJSON=rb.fn.toISOString,l(rb.duration.fn=k.prototype,{_bubble:function(){var a,b,c,d=this._milliseconds,e=this._days,f=this._months,g=this._data,h=0;g.milliseconds=d%1e3,a=n(d/1e3),g.seconds=a%60,b=n(a/60),g.minutes=b%60,c=n(b/60),g.hours=c%24,e+=n(c/24),h=n(nb(e)),e-=n(ob(h)),f+=n(e/30),e%=30,h+=n(f/12),f%=12,g.days=e,g.months=f,g.years=h},abs:function(){return this._milliseconds=Math.abs(this._milliseconds),this._days=Math.abs(this._days),this._months=Math.abs(this._months),this._data.milliseconds=Math.abs(this._data.milliseconds),this._data.seconds=Math.abs(this._data.seconds),this._data.minutes=Math.abs(this._data.minutes),this._data.hours=Math.abs(this._data.hours),this._data.months=Math.abs(this._data.months),this._data.years=Math.abs(this._data.years),this},weeks:function(){return n(this.days()/7)},valueOf:function(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*z(this._months/12)},humanize:function(a){var b=eb(this,!a,this.localeData());return a&&(b=this.localeData().pastFuture(+this,b)),this.localeData().postformat(b)},add:function(a,b){var c=rb.duration(a,b);return this._milliseconds+=c._milliseconds,this._days+=c._days,this._months+=c._months,this._bubble(),this},subtract:function(a,b){var c=rb.duration(a,b);return this._milliseconds-=c._milliseconds,this._days-=c._days,this._months-=c._months,this._bubble(),this},get:function(a){return a=w(a),this[a.toLowerCase()+"s"]()},as:function(a){var b,c;if(a=w(a),b=this._days+this._milliseconds/864e5,"month"===a||"year"===a)return c=this._months+12*nb(b),"month"===a?c:c/12;switch(b+=ob(this._months/12),a){case"week":return b/7;case"day":return b;case"hour":return 24*b;case"minute":return 24*b*60;case"second":return 24*b*60*60;case"millisecond":return 24*b*60*60*1e3;default:throw new Error("Unknown unit "+a)}},lang:rb.fn.lang,locale:rb.fn.locale,toIsoString:e("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",function(){return this.toISOString()}),toISOString:function(){var a=Math.abs(this.years()),b=Math.abs(this.months()),c=Math.abs(this.days()),d=Math.abs(this.hours()),e=Math.abs(this.minutes()),f=Math.abs(this.seconds()+this.milliseconds()/1e3);return this.asSeconds()?(this.asSeconds()<0?"-":"")+"P"+(a?a+"Y":"")+(b?b+"M":"")+(c?c+"D":"")+(d||e||f?"T":"")+(d?d+"H":"")+(e?e+"M":"")+(f?f+"S":""):"P0D"},localeData:function(){return this._locale}});for(tb in fc)fc.hasOwnProperty(tb)&&pb(tb.toLowerCase());rb.duration.fn.asMilliseconds=function(){return this.as("ms")},rb.duration.fn.asSeconds=function(){return this.as("s")},rb.duration.fn.asMinutes=function(){return this.as("m")},rb.duration.fn.asHours=function(){return this.as("h")},rb.duration.fn.asDays=function(){return this.as("d")},rb.duration.fn.asWeeks=function(){return this.as("weeks")},rb.duration.fn.asMonths=function(){return this.as("M")},rb.duration.fn.asYears=function(){return this.as("y")},rb.locale("en",{ordinal:function(a){var b=a%10,c=1===z(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th";return a+c}}),Gb?module.exports=rb:"function"==typeof define&&define.amd?(define("moment",function(a,b,c){return c.config&&c.config()&&c.config().noGlobal===!0&&(vb.moment=sb),rb}),qb(!0)):qb()}).call(this);
/*! showdown v 1.9.1 - 02-11-2019 */
(function(){function e(e){"use strict";var r={omitExtraWLInCodeBlocks:{defaultValue:!1,describe:"Omit the default extra whiteline added to code blocks",type:"boolean"},noHeaderId:{defaultValue:!1,describe:"Turn on/off generated header id",type:"boolean"},prefixHeaderId:{defaultValue:!1,describe:"Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic 'section-' prefix",type:"string"},rawPrefixHeaderId:{defaultValue:!1,describe:'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',type:"boolean"},ghCompatibleHeaderId:{defaultValue:!1,describe:"Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)",type:"boolean"},rawHeaderId:{defaultValue:!1,describe:"Remove only spaces, ' and \" from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids",type:"boolean"},headerLevelStart:{defaultValue:!1,describe:"The header blocks level start",type:"integer"},parseImgDimensions:{defaultValue:!1,describe:"Turn on/off image dimension parsing",type:"boolean"},simplifiedAutoLink:{defaultValue:!1,describe:"Turn on/off GFM autolink style",type:"boolean"},excludeTrailingPunctuationFromURLs:{defaultValue:!1,describe:"Excludes trailing punctuation from links generated with autoLinking",type:"boolean"},literalMidWordUnderscores:{defaultValue:!1,describe:"Parse midword underscores as literal underscores",type:"boolean"},literalMidWordAsterisks:{defaultValue:!1,describe:"Parse midword asterisks as literal asterisks",type:"boolean"},strikethrough:{defaultValue:!1,describe:"Turn on/off strikethrough support",type:"boolean"},tables:{defaultValue:!1,describe:"Turn on/off tables support",type:"boolean"},tablesHeaderId:{defaultValue:!1,describe:"Add an id to table headers",type:"boolean"},ghCodeBlocks:{defaultValue:!0,describe:"Turn on/off GFM fenced code blocks support",type:"boolean"},tasklists:{defaultValue:!1,describe:"Turn on/off GFM tasklist support",type:"boolean"},smoothLivePreview:{defaultValue:!1,describe:"Prevents weird effects in live previews due to incomplete input",type:"boolean"},smartIndentationFix:{defaultValue:!1,description:"Tries to smartly fix indentation in es6 strings",type:"boolean"},disableForced4SpacesIndentedSublists:{defaultValue:!1,description:"Disables the requirement of indenting nested sublists by 4 spaces",type:"boolean"},simpleLineBreaks:{defaultValue:!1,description:"Parses simple line breaks as <br> (GFM Style)",type:"boolean"},requireSpaceBeforeHeadingText:{defaultValue:!1,description:"Makes adding a space between `#` and the header text mandatory (GFM Style)",type:"boolean"},ghMentions:{defaultValue:!1,description:"Enables github @mentions",type:"boolean"},ghMentionsLink:{defaultValue:"https://github.com/{u}",description:"Changes the link generated by @mentions. Only applies if ghMentions option is enabled.",type:"string"},encodeEmails:{defaultValue:!0,description:"Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities",type:"boolean"},openLinksInNewWindow:{defaultValue:!1,description:"Open all links in new windows",type:"boolean"},backslashEscapesHTMLTags:{defaultValue:!1,description:"Support for HTML Tag escaping. ex: <div>foo</div>",type:"boolean"},emoji:{defaultValue:!1,description:"Enable emoji support. Ex: `this is a :smile: emoji`",type:"boolean"},underline:{defaultValue:!1,description:"Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`",type:"boolean"},completeHTMLDocument:{defaultValue:!1,description:"Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags",type:"boolean"},metadata:{defaultValue:!1,description:"Enable support for document metadata (defined at the top of the document between `«««` and `»»»` or between `---` and `---`).",type:"boolean"},splitAdjacentBlockquotes:{defaultValue:!1,description:"Split adjacent blockquote blocks",type:"boolean"}};if(!1===e)return JSON.parse(JSON.stringify(r));var t={};for(var a in r)r.hasOwnProperty(a)&&(t[a]=r[a].defaultValue);return t}function r(e,r){"use strict";var t=r?"Error in "+r+" extension->":"Error in unnamed extension",n={valid:!0,error:""};a.helper.isArray(e)||(e=[e]);for(var s=0;s<e.length;++s){var o=t+" sub-extension "+s+": ",i=e[s];if("object"!=typeof i)return n.valid=!1,n.error=o+"must be an object, but "+typeof i+" given",n;if(!a.helper.isString(i.type))return n.valid=!1,n.error=o+'property "type" must be a string, but '+typeof i.type+" given",n;var l=i.type=i.type.toLowerCase();if("language"===l&&(l=i.type="lang"),"html"===l&&(l=i.type="output"),"lang"!==l&&"output"!==l&&"listener"!==l)return n.valid=!1,n.error=o+"type "+l+' is not recognized. Valid values: "lang/language", "output/html" or "listener"',n;if("listener"===l){if(a.helper.isUndefined(i.listeners))return n.valid=!1,n.error=o+'. Extensions of type "listener" must have a property called "listeners"',n}else if(a.helper.isUndefined(i.filter)&&a.helper.isUndefined(i.regex))return n.valid=!1,n.error=o+l+' extensions must define either a "regex" property or a "filter" method',n;if(i.listeners){if("object"!=typeof i.listeners)return n.valid=!1,n.error=o+'"listeners" property must be an object but '+typeof i.listeners+" given",n;for(var c in i.listeners)if(i.listeners.hasOwnProperty(c)&&"function"!=typeof i.listeners[c])return n.valid=!1,n.error=o+'"listeners" property must be an hash of [event name]: [callback]. listeners.'+c+" must be a function but "+typeof i.listeners[c]+" given",n}if(i.filter){if("function"!=typeof i.filter)return n.valid=!1,n.error=o+'"filter" must be a function, but '+typeof i.filter+" given",n}else if(i.regex){if(a.helper.isString(i.regex)&&(i.regex=new RegExp(i.regex,"g")),!(i.regex instanceof RegExp))return n.valid=!1,n.error=o+'"regex" property must either be a string or a RegExp object, but '+typeof i.regex+" given",n;if(a.helper.isUndefined(i.replace))return n.valid=!1,n.error=o+'"regex" extensions must implement a replace string or function',n}}return n}function t(e,r){"use strict";return"¨E"+r.charCodeAt(0)+"E"}var a={},n={},s={},o=e(!0),i="vanilla",l={github:{omitExtraWLInCodeBlocks:!0,simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,disableForced4SpacesIndentedSublists:!0,simpleLineBreaks:!0,requireSpaceBeforeHeadingText:!0,ghCompatibleHeaderId:!0,ghMentions:!0,backslashEscapesHTMLTags:!0,emoji:!0,splitAdjacentBlockquotes:!0},original:{noHeaderId:!0,ghCodeBlocks:!1},ghost:{omitExtraWLInCodeBlocks:!0,parseImgDimensions:!0,simplifiedAutoLink:!0,excludeTrailingPunctuationFromURLs:!0,literalMidWordUnderscores:!0,strikethrough:!0,tables:!0,tablesHeaderId:!0,ghCodeBlocks:!0,tasklists:!0,smoothLivePreview:!0,simpleLineBreaks:!0,requireSpaceBeforeHeadingText:!0,ghMentions:!1,encodeEmails:!0},vanilla:e(!0),allOn:function(){"use strict";var r=e(!0),t={};for(var a in r)r.hasOwnProperty(a)&&(t[a]=!0);return t}()};a.helper={},a.extensions={},a.setOption=function(e,r){"use strict";return o[e]=r,this},a.getOption=function(e){"use strict";return o[e]},a.getOptions=function(){"use strict";return o},a.resetOptions=function(){"use strict";o=e(!0)},a.setFlavor=function(e){"use strict";if(!l.hasOwnProperty(e))throw Error(e+" flavor was not found");a.resetOptions();var r=l[e];i=e;for(var t in r)r.hasOwnProperty(t)&&(o[t]=r[t])},a.getFlavor=function(){"use strict";return i},a.getFlavorOptions=function(e){"use strict";if(l.hasOwnProperty(e))return l[e]},a.getDefaultOptions=function(r){"use strict";return e(r)},a.subParser=function(e,r){"use strict";if(a.helper.isString(e)){if(void 0===r){if(n.hasOwnProperty(e))return n[e];throw Error("SubParser named "+e+" not registered!")}n[e]=r}},a.extension=function(e,t){"use strict";if(!a.helper.isString(e))throw Error("Extension 'name' must be a string");if(e=a.helper.stdExtName(e),a.helper.isUndefined(t)){if(!s.hasOwnProperty(e))throw Error("Extension named "+e+" is not registered!");return s[e]}"function"==typeof t&&(t=t()),a.helper.isArray(t)||(t=[t]);var n=r(t,e);if(!n.valid)throw Error(n.error);s[e]=t},a.getAllExtensions=function(){"use strict";return s},a.removeExtension=function(e){"use strict";delete s[e]},a.resetExtensions=function(){"use strict";s={}},a.validateExtension=function(e){"use strict";var t=r(e,null);return!!t.valid||(console.warn(t.error),!1)},a.hasOwnProperty("helper")||(a.helper={}),a.helper.isString=function(e){"use strict";return"string"==typeof e||e instanceof String},a.helper.isFunction=function(e){"use strict";return e&&"[object Function]"==={}.toString.call(e)},a.helper.isArray=function(e){"use strict";return Array.isArray(e)},a.helper.isUndefined=function(e){"use strict";return void 0===e},a.helper.forEach=function(e,r){"use strict";if(a.helper.isUndefined(e))throw new Error("obj param is required");if(a.helper.isUndefined(r))throw new Error("callback param is required");if(!a.helper.isFunction(r))throw new Error("callback param must be a function/closure");if("function"==typeof e.forEach)e.forEach(r);else if(a.helper.isArray(e))for(var t=0;t<e.length;t++)r(e[t],t,e);else{if("object"!=typeof e)throw new Error("obj does not seem to be an array or an iterable object");for(var n in e)e.hasOwnProperty(n)&&r(e[n],n,e)}},a.helper.stdExtName=function(e){"use strict";return e.replace(/[_?*+\/\\.^-]/g,"").replace(/\s/g,"").toLowerCase()},a.helper.escapeCharactersCallback=t,a.helper.escapeCharacters=function(e,r,a){"use strict";var n="(["+r.replace(/([\[\]\\])/g,"\\$1")+"])";a&&(n="\\\\"+n);var s=new RegExp(n,"g");return e=e.replace(s,t)},a.helper.unescapeHTMLEntities=function(e){"use strict";return e.replace(/&quot;/g,'"').replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&")};var c=function(e,r,t,a){"use strict";var n,s,o,i,l,c=a||"",u=c.indexOf("g")>-1,d=new RegExp(r+"|"+t,"g"+c.replace(/g/g,"")),p=new RegExp(r,c.replace(/g/g,"")),h=[];do{for(n=0;o=d.exec(e);)if(p.test(o[0]))n++||(i=(s=d.lastIndex)-o[0].length);else if(n&&!--n){l=o.index+o[0].length;var _={left:{start:i,end:s},match:{start:s,end:o.index},right:{start:o.index,end:l},wholeMatch:{start:i,end:l}};if(h.push(_),!u)return h}}while(n&&(d.lastIndex=s));return h};a.helper.matchRecursiveRegExp=function(e,r,t,a){"use strict";for(var n=c(e,r,t,a),s=[],o=0;o<n.length;++o)s.push([e.slice(n[o].wholeMatch.start,n[o].wholeMatch.end),e.slice(n[o].match.start,n[o].match.end),e.slice(n[o].left.start,n[o].left.end),e.slice(n[o].right.start,n[o].right.end)]);return s},a.helper.replaceRecursiveRegExp=function(e,r,t,n,s){"use strict";if(!a.helper.isFunction(r)){var o=r;r=function(){return o}}var i=c(e,t,n,s),l=e,u=i.length;if(u>0){var d=[];0!==i[0].wholeMatch.start&&d.push(e.slice(0,i[0].wholeMatch.start));for(var p=0;p<u;++p)d.push(r(e.slice(i[p].wholeMatch.start,i[p].wholeMatch.end),e.slice(i[p].match.start,i[p].match.end),e.slice(i[p].left.start,i[p].left.end),e.slice(i[p].right.start,i[p].right.end))),p<u-1&&d.push(e.slice(i[p].wholeMatch.end,i[p+1].wholeMatch.start));i[u-1].wholeMatch.end<e.length&&d.push(e.slice(i[u-1].wholeMatch.end)),l=d.join("")}return l},a.helper.regexIndexOf=function(e,r,t){"use strict";if(!a.helper.isString(e))throw"InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";if(r instanceof RegExp==!1)throw"InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp";var n=e.substring(t||0).search(r);return n>=0?n+(t||0):n},a.helper.splitAtIndex=function(e,r){"use strict";if(!a.helper.isString(e))throw"InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";return[e.substring(0,r),e.substring(r)]},a.helper.encodeEmailAddress=function(e){"use strict";var r=[function(e){return"&#"+e.charCodeAt(0)+";"},function(e){return"&#x"+e.charCodeAt(0).toString(16)+";"},function(e){return e}];return e=e.replace(/./g,function(e){if("@"===e)e=r[Math.floor(2*Math.random())](e);else{var t=Math.random();e=t>.9?r[2](e):t>.45?r[1](e):r[0](e)}return e})},a.helper.padEnd=function(e,r,t){"use strict";return r>>=0,t=String(t||" "),e.length>r?String(e):((r-=e.length)>t.length&&(t+=t.repeat(r/t.length)),String(e)+t.slice(0,r))},"undefined"==typeof console&&(console={warn:function(e){"use strict";alert(e)},log:function(e){"use strict";alert(e)},error:function(e){"use strict";throw e}}),a.helper.regexes={asteriskDashAndColon:/([*_:~])/g},a.helper.emojis={"+1":"👍","-1":"👎",100:"💯",1234:"🔢","1st_place_medal":"🥇","2nd_place_medal":"🥈","3rd_place_medal":"🥉","8ball":"🎱",a:"🅰️",ab:"🆎",abc:"🔤",abcd:"🔡",accept:"🉑",aerial_tramway:"🚡",airplane:"✈️",alarm_clock:"⏰",alembic:"⚗️",alien:"👽",ambulance:"🚑",amphora:"🏺",anchor:"⚓️",angel:"👼",anger:"💢",angry:"😠",anguished:"😧",ant:"🐜",apple:"🍎",aquarius:"♒️",aries:"♈️",arrow_backward:"◀️",arrow_double_down:"⏬",arrow_double_up:"⏫",arrow_down:"⬇️",arrow_down_small:"🔽",arrow_forward:"▶️",arrow_heading_down:"⤵️",arrow_heading_up:"⤴️",arrow_left:"⬅️",arrow_lower_left:"↙️",arrow_lower_right:"↘️",arrow_right:"➡️",arrow_right_hook:"↪️",arrow_up:"⬆️",arrow_up_down:"↕️",arrow_up_small:"🔼",arrow_upper_left:"↖️",arrow_upper_right:"↗️",arrows_clockwise:"🔃",arrows_counterclockwise:"🔄",art:"🎨",articulated_lorry:"🚛",artificial_satellite:"🛰",astonished:"😲",athletic_shoe:"👟",atm:"🏧",atom_symbol:"⚛️",avocado:"🥑",b:"🅱️",baby:"👶",baby_bottle:"🍼",baby_chick:"🐤",baby_symbol:"🚼",back:"🔙",bacon:"🥓",badminton:"🏸",baggage_claim:"🛄",baguette_bread:"🥖",balance_scale:"⚖️",balloon:"🎈",ballot_box:"🗳",ballot_box_with_check:"☑️",bamboo:"🎍",banana:"🍌",bangbang:"‼️",bank:"🏦",bar_chart:"📊",barber:"💈",baseball:"⚾️",basketball:"🏀",basketball_man:"⛹️",basketball_woman:"⛹️&zwj;♀️",bat:"🦇",bath:"🛀",bathtub:"🛁",battery:"🔋",beach_umbrella:"🏖",bear:"🐻",bed:"🛏",bee:"🐝",beer:"🍺",beers:"🍻",beetle:"🐞",beginner:"🔰",bell:"🔔",bellhop_bell:"🛎",bento:"🍱",biking_man:"🚴",bike:"🚲",biking_woman:"🚴&zwj;♀️",bikini:"👙",biohazard:"☣️",bird:"🐦",birthday:"🎂",black_circle:"⚫️",black_flag:"🏴",black_heart:"🖤",black_joker:"🃏",black_large_square:"⬛️",black_medium_small_square:"◾️",black_medium_square:"◼️",black_nib:"✒️",black_small_square:"▪️",black_square_button:"🔲",blonde_man:"👱",blonde_woman:"👱&zwj;♀️",blossom:"🌼",blowfish:"🐡",blue_book:"📘",blue_car:"🚙",blue_heart:"💙",blush:"😊",boar:"🐗",boat:"⛵️",bomb:"💣",book:"📖",bookmark:"🔖",bookmark_tabs:"📑",books:"📚",boom:"💥",boot:"👢",bouquet:"💐",bowing_man:"🙇",bow_and_arrow:"🏹",bowing_woman:"🙇&zwj;♀️",bowling:"🎳",boxing_glove:"🥊",boy:"👦",bread:"🍞",bride_with_veil:"👰",bridge_at_night:"🌉",briefcase:"💼",broken_heart:"💔",bug:"🐛",building_construction:"🏗",bulb:"💡",bullettrain_front:"🚅",bullettrain_side:"🚄",burrito:"🌯",bus:"🚌",business_suit_levitating:"🕴",busstop:"🚏",bust_in_silhouette:"👤",busts_in_silhouette:"👥",butterfly:"🦋",cactus:"🌵",cake:"🍰",calendar:"📆",call_me_hand:"🤙",calling:"📲",camel:"🐫",camera:"📷",camera_flash:"📸",camping:"🏕",cancer:"♋️",candle:"🕯",candy:"🍬",canoe:"🛶",capital_abcd:"🔠",capricorn:"♑️",car:"🚗",card_file_box:"🗃",card_index:"📇",card_index_dividers:"🗂",carousel_horse:"🎠",carrot:"🥕",cat:"🐱",cat2:"🐈",cd:"💿",chains:"⛓",champagne:"🍾",chart:"💹",chart_with_downwards_trend:"📉",chart_with_upwards_trend:"📈",checkered_flag:"🏁",cheese:"🧀",cherries:"🍒",cherry_blossom:"🌸",chestnut:"🌰",chicken:"🐔",children_crossing:"🚸",chipmunk:"🐿",chocolate_bar:"🍫",christmas_tree:"🎄",church:"⛪️",cinema:"🎦",circus_tent:"🎪",city_sunrise:"🌇",city_sunset:"🌆",cityscape:"🏙",cl:"🆑",clamp:"🗜",clap:"👏",clapper:"🎬",classical_building:"🏛",clinking_glasses:"🥂",clipboard:"📋",clock1:"🕐",clock10:"🕙",clock1030:"🕥",clock11:"🕚",clock1130:"🕦",clock12:"🕛",clock1230:"🕧",clock130:"🕜",clock2:"🕑",clock230:"🕝",clock3:"🕒",clock330:"🕞",clock4:"🕓",clock430:"🕟",clock5:"🕔",clock530:"🕠",clock6:"🕕",clock630:"🕡",clock7:"🕖",clock730:"🕢",clock8:"🕗",clock830:"🕣",clock9:"🕘",clock930:"🕤",closed_book:"📕",closed_lock_with_key:"🔐",closed_umbrella:"🌂",cloud:"☁️",cloud_with_lightning:"🌩",cloud_with_lightning_and_rain:"⛈",cloud_with_rain:"🌧",cloud_with_snow:"🌨",clown_face:"🤡",clubs:"♣️",cocktail:"🍸",coffee:"☕️",coffin:"⚰️",cold_sweat:"😰",comet:"☄️",computer:"💻",computer_mouse:"🖱",confetti_ball:"🎊",confounded:"😖",confused:"😕",congratulations:"㊗️",construction:"🚧",construction_worker_man:"👷",construction_worker_woman:"👷&zwj;♀️",control_knobs:"🎛",convenience_store:"🏪",cookie:"🍪",cool:"🆒",policeman:"👮",copyright:"©️",corn:"🌽",couch_and_lamp:"🛋",couple:"👫",couple_with_heart_woman_man:"💑",couple_with_heart_man_man:"👨&zwj;❤️&zwj;👨",couple_with_heart_woman_woman:"👩&zwj;❤️&zwj;👩",couplekiss_man_man:"👨&zwj;❤️&zwj;💋&zwj;👨",couplekiss_man_woman:"💏",couplekiss_woman_woman:"👩&zwj;❤️&zwj;💋&zwj;👩",cow:"🐮",cow2:"🐄",cowboy_hat_face:"🤠",crab:"🦀",crayon:"🖍",credit_card:"💳",crescent_moon:"🌙",cricket:"🏏",crocodile:"🐊",croissant:"🥐",crossed_fingers:"🤞",crossed_flags:"🎌",crossed_swords:"⚔️",crown:"👑",cry:"😢",crying_cat_face:"😿",crystal_ball:"🔮",cucumber:"🥒",cupid:"💘",curly_loop:"➰",currency_exchange:"💱",curry:"🍛",custard:"🍮",customs:"🛃",cyclone:"🌀",dagger:"🗡",dancer:"💃",dancing_women:"👯",dancing_men:"👯&zwj;♂️",dango:"🍡",dark_sunglasses:"🕶",dart:"🎯",dash:"💨",date:"📅",deciduous_tree:"🌳",deer:"🦌",department_store:"🏬",derelict_house:"🏚",desert:"🏜",desert_island:"🏝",desktop_computer:"🖥",male_detective:"🕵️",diamond_shape_with_a_dot_inside:"💠",diamonds:"♦️",disappointed:"😞",disappointed_relieved:"😥",dizzy:"💫",dizzy_face:"😵",do_not_litter:"🚯",dog:"🐶",dog2:"🐕",dollar:"💵",dolls:"🎎",dolphin:"🐬",door:"🚪",doughnut:"🍩",dove:"🕊",dragon:"🐉",dragon_face:"🐲",dress:"👗",dromedary_camel:"🐪",drooling_face:"🤤",droplet:"💧",drum:"🥁",duck:"🦆",dvd:"📀","e-mail":"📧",eagle:"🦅",ear:"👂",ear_of_rice:"🌾",earth_africa:"🌍",earth_americas:"🌎",earth_asia:"🌏",egg:"🥚",eggplant:"🍆",eight_pointed_black_star:"✴️",eight_spoked_asterisk:"✳️",electric_plug:"🔌",elephant:"🐘",email:"✉️",end:"🔚",envelope_with_arrow:"📩",euro:"💶",european_castle:"🏰",european_post_office:"🏤",evergreen_tree:"🌲",exclamation:"❗️",expressionless:"😑",eye:"👁",eye_speech_bubble:"👁&zwj;🗨",eyeglasses:"👓",eyes:"👀",face_with_head_bandage:"🤕",face_with_thermometer:"🤒",fist_oncoming:"👊",factory:"🏭",fallen_leaf:"🍂",family_man_woman_boy:"👪",family_man_boy:"👨&zwj;👦",family_man_boy_boy:"👨&zwj;👦&zwj;👦",family_man_girl:"👨&zwj;👧",family_man_girl_boy:"👨&zwj;👧&zwj;👦",family_man_girl_girl:"👨&zwj;👧&zwj;👧",family_man_man_boy:"👨&zwj;👨&zwj;👦",family_man_man_boy_boy:"👨&zwj;👨&zwj;👦&zwj;👦",family_man_man_girl:"👨&zwj;👨&zwj;👧",family_man_man_girl_boy:"👨&zwj;👨&zwj;👧&zwj;👦",family_man_man_girl_girl:"👨&zwj;👨&zwj;👧&zwj;👧",family_man_woman_boy_boy:"👨&zwj;👩&zwj;👦&zwj;👦",family_man_woman_girl:"👨&zwj;👩&zwj;👧",family_man_woman_girl_boy:"👨&zwj;👩&zwj;👧&zwj;👦",family_man_woman_girl_girl:"👨&zwj;👩&zwj;👧&zwj;👧",family_woman_boy:"👩&zwj;👦",family_woman_boy_boy:"👩&zwj;👦&zwj;👦",family_woman_girl:"👩&zwj;👧",family_woman_girl_boy:"👩&zwj;👧&zwj;👦",family_woman_girl_girl:"👩&zwj;👧&zwj;👧",family_woman_woman_boy:"👩&zwj;👩&zwj;👦",family_woman_woman_boy_boy:"👩&zwj;👩&zwj;👦&zwj;👦",family_woman_woman_girl:"👩&zwj;👩&zwj;👧",family_woman_woman_girl_boy:"👩&zwj;👩&zwj;👧&zwj;👦",family_woman_woman_girl_girl:"👩&zwj;👩&zwj;👧&zwj;👧",fast_forward:"⏩",fax:"📠",fearful:"😨",feet:"🐾",female_detective:"🕵️&zwj;♀️",ferris_wheel:"🎡",ferry:"⛴",field_hockey:"🏑",file_cabinet:"🗄",file_folder:"📁",film_projector:"📽",film_strip:"🎞",fire:"🔥",fire_engine:"🚒",fireworks:"🎆",first_quarter_moon:"🌓",first_quarter_moon_with_face:"🌛",fish:"🐟",fish_cake:"🍥",fishing_pole_and_fish:"🎣",fist_raised:"✊",fist_left:"🤛",fist_right:"🤜",flags:"🎏",flashlight:"🔦",fleur_de_lis:"⚜️",flight_arrival:"🛬",flight_departure:"🛫",floppy_disk:"💾",flower_playing_cards:"🎴",flushed:"😳",fog:"🌫",foggy:"🌁",football:"🏈",footprints:"👣",fork_and_knife:"🍴",fountain:"⛲️",fountain_pen:"🖋",four_leaf_clover:"🍀",fox_face:"🦊",framed_picture:"🖼",free:"🆓",fried_egg:"🍳",fried_shrimp:"🍤",fries:"🍟",frog:"🐸",frowning:"😦",frowning_face:"☹️",frowning_man:"🙍&zwj;♂️",frowning_woman:"🙍",middle_finger:"🖕",fuelpump:"⛽️",full_moon:"🌕",full_moon_with_face:"🌝",funeral_urn:"⚱️",game_die:"🎲",gear:"⚙️",gem:"💎",gemini:"♊️",ghost:"👻",gift:"🎁",gift_heart:"💝",girl:"👧",globe_with_meridians:"🌐",goal_net:"🥅",goat:"🐐",golf:"⛳️",golfing_man:"🏌️",golfing_woman:"🏌️&zwj;♀️",gorilla:"🦍",grapes:"🍇",green_apple:"🍏",green_book:"📗",green_heart:"💚",green_salad:"🥗",grey_exclamation:"❕",grey_question:"❔",grimacing:"😬",grin:"😁",grinning:"😀",guardsman:"💂",guardswoman:"💂&zwj;♀️",guitar:"🎸",gun:"🔫",haircut_woman:"💇",haircut_man:"💇&zwj;♂️",hamburger:"🍔",hammer:"🔨",hammer_and_pick:"⚒",hammer_and_wrench:"🛠",hamster:"🐹",hand:"✋",handbag:"👜",handshake:"🤝",hankey:"💩",hatched_chick:"🐥",hatching_chick:"🐣",headphones:"🎧",hear_no_evil:"🙉",heart:"❤️",heart_decoration:"💟",heart_eyes:"😍",heart_eyes_cat:"😻",heartbeat:"💓",heartpulse:"💗",hearts:"♥️",heavy_check_mark:"✔️",heavy_division_sign:"➗",heavy_dollar_sign:"💲",heavy_heart_exclamation:"❣️",heavy_minus_sign:"➖",heavy_multiplication_x:"✖️",heavy_plus_sign:"➕",helicopter:"🚁",herb:"🌿",hibiscus:"🌺",high_brightness:"🔆",high_heel:"👠",hocho:"🔪",hole:"🕳",honey_pot:"🍯",horse:"🐴",horse_racing:"🏇",hospital:"🏥",hot_pepper:"🌶",hotdog:"🌭",hotel:"🏨",hotsprings:"♨️",hourglass:"⌛️",hourglass_flowing_sand:"⏳",house:"🏠",house_with_garden:"🏡",houses:"🏘",hugs:"🤗",hushed:"😯",ice_cream:"🍨",ice_hockey:"🏒",ice_skate:"⛸",icecream:"🍦",id:"🆔",ideograph_advantage:"🉐",imp:"👿",inbox_tray:"📥",incoming_envelope:"📨",tipping_hand_woman:"💁",information_source:"ℹ️",innocent:"😇",interrobang:"⁉️",iphone:"📱",izakaya_lantern:"🏮",jack_o_lantern:"🎃",japan:"🗾",japanese_castle:"🏯",japanese_goblin:"👺",japanese_ogre:"👹",jeans:"👖",joy:"😂",joy_cat:"😹",joystick:"🕹",kaaba:"🕋",key:"🔑",keyboard:"⌨️",keycap_ten:"🔟",kick_scooter:"🛴",kimono:"👘",kiss:"💋",kissing:"😗",kissing_cat:"😽",kissing_closed_eyes:"😚",kissing_heart:"😘",kissing_smiling_eyes:"😙",kiwi_fruit:"🥝",koala:"🐨",koko:"🈁",label:"🏷",large_blue_circle:"🔵",large_blue_diamond:"🔷",large_orange_diamond:"🔶",last_quarter_moon:"🌗",last_quarter_moon_with_face:"🌜",latin_cross:"✝️",laughing:"😆",leaves:"🍃",ledger:"📒",left_luggage:"🛅",left_right_arrow:"↔️",leftwards_arrow_with_hook:"↩️",lemon:"🍋",leo:"♌️",leopard:"🐆",level_slider:"🎚",libra:"♎️",light_rail:"🚈",link:"🔗",lion:"🦁",lips:"👄",lipstick:"💄",lizard:"🦎",lock:"🔒",lock_with_ink_pen:"🔏",lollipop:"🍭",loop:"➿",loud_sound:"🔊",loudspeaker:"📢",love_hotel:"🏩",love_letter:"💌",low_brightness:"🔅",lying_face:"🤥",m:"Ⓜ️",mag:"🔍",mag_right:"🔎",mahjong:"🀄️",mailbox:"📫",mailbox_closed:"📪",mailbox_with_mail:"📬",mailbox_with_no_mail:"📭",man:"👨",man_artist:"👨&zwj;🎨",man_astronaut:"👨&zwj;🚀",man_cartwheeling:"🤸&zwj;♂️",man_cook:"👨&zwj;🍳",man_dancing:"🕺",man_facepalming:"🤦&zwj;♂️",man_factory_worker:"👨&zwj;🏭",man_farmer:"👨&zwj;🌾",man_firefighter:"👨&zwj;🚒",man_health_worker:"👨&zwj;⚕️",man_in_tuxedo:"🤵",man_judge:"👨&zwj;⚖️",man_juggling:"🤹&zwj;♂️",man_mechanic:"👨&zwj;🔧",man_office_worker:"👨&zwj;💼",man_pilot:"👨&zwj;✈️",man_playing_handball:"🤾&zwj;♂️",man_playing_water_polo:"🤽&zwj;♂️",man_scientist:"👨&zwj;🔬",man_shrugging:"🤷&zwj;♂️",man_singer:"👨&zwj;🎤",man_student:"👨&zwj;🎓",man_teacher:"👨&zwj;🏫",man_technologist:"👨&zwj;💻",man_with_gua_pi_mao:"👲",man_with_turban:"👳",tangerine:"🍊",mans_shoe:"👞",mantelpiece_clock:"🕰",maple_leaf:"🍁",martial_arts_uniform:"🥋",mask:"😷",massage_woman:"💆",massage_man:"💆&zwj;♂️",meat_on_bone:"🍖",medal_military:"🎖",medal_sports:"🏅",mega:"📣",melon:"🍈",memo:"📝",men_wrestling:"🤼&zwj;♂️",menorah:"🕎",mens:"🚹",metal:"🤘",metro:"🚇",microphone:"🎤",microscope:"🔬",milk_glass:"🥛",milky_way:"🌌",minibus:"🚐",minidisc:"💽",mobile_phone_off:"📴",money_mouth_face:"🤑",money_with_wings:"💸",moneybag:"💰",monkey:"🐒",monkey_face:"🐵",monorail:"🚝",moon:"🌔",mortar_board:"🎓",mosque:"🕌",motor_boat:"🛥",motor_scooter:"🛵",motorcycle:"🏍",motorway:"🛣",mount_fuji:"🗻",mountain:"⛰",mountain_biking_man:"🚵",mountain_biking_woman:"🚵&zwj;♀️",mountain_cableway:"🚠",mountain_railway:"🚞",mountain_snow:"🏔",mouse:"🐭",mouse2:"🐁",movie_camera:"🎥",moyai:"🗿",mrs_claus:"🤶",muscle:"💪",mushroom:"🍄",musical_keyboard:"🎹",musical_note:"🎵",musical_score:"🎼",mute:"🔇",nail_care:"💅",name_badge:"📛",national_park:"🏞",nauseated_face:"🤢",necktie:"👔",negative_squared_cross_mark:"❎",nerd_face:"🤓",neutral_face:"😐",new:"🆕",new_moon:"🌑",new_moon_with_face:"🌚",newspaper:"📰",newspaper_roll:"🗞",next_track_button:"⏭",ng:"🆖",no_good_man:"🙅&zwj;♂️",no_good_woman:"🙅",night_with_stars:"🌃",no_bell:"🔕",no_bicycles:"🚳",no_entry:"⛔️",no_entry_sign:"🚫",no_mobile_phones:"📵",no_mouth:"😶",no_pedestrians:"🚷",no_smoking:"🚭","non-potable_water":"🚱",nose:"👃",notebook:"📓",notebook_with_decorative_cover:"📔",notes:"🎶",nut_and_bolt:"🔩",o:"⭕️",o2:"🅾️",ocean:"🌊",octopus:"🐙",oden:"🍢",office:"🏢",oil_drum:"🛢",ok:"🆗",ok_hand:"👌",ok_man:"🙆&zwj;♂️",ok_woman:"🙆",old_key:"🗝",older_man:"👴",older_woman:"👵",om:"🕉",on:"🔛",oncoming_automobile:"🚘",oncoming_bus:"🚍",oncoming_police_car:"🚔",oncoming_taxi:"🚖",open_file_folder:"📂",open_hands:"👐",open_mouth:"😮",open_umbrella:"☂️",ophiuchus:"⛎",orange_book:"📙",orthodox_cross:"☦️",outbox_tray:"📤",owl:"🦉",ox:"🐂",package:"📦",page_facing_up:"📄",page_with_curl:"📃",pager:"📟",paintbrush:"🖌",palm_tree:"🌴",pancakes:"🥞",panda_face:"🐼",paperclip:"📎",paperclips:"🖇",parasol_on_ground:"⛱",parking:"🅿️",part_alternation_mark:"〽️",partly_sunny:"⛅️",passenger_ship:"🛳",passport_control:"🛂",pause_button:"⏸",peace_symbol:"☮️",peach:"🍑",peanuts:"🥜",pear:"🍐",pen:"🖊",pencil2:"✏️",penguin:"🐧",pensive:"😔",performing_arts:"🎭",persevere:"😣",person_fencing:"🤺",pouting_woman:"🙎",phone:"☎️",pick:"⛏",pig:"🐷",pig2:"🐖",pig_nose:"🐽",pill:"💊",pineapple:"🍍",ping_pong:"🏓",pisces:"♓️",pizza:"🍕",place_of_worship:"🛐",plate_with_cutlery:"🍽",play_or_pause_button:"⏯",point_down:"👇",point_left:"👈",point_right:"👉",point_up:"☝️",point_up_2:"👆",police_car:"🚓",policewoman:"👮&zwj;♀️",poodle:"🐩",popcorn:"🍿",post_office:"🏣",postal_horn:"📯",postbox:"📮",potable_water:"🚰",potato:"🥔",pouch:"👝",poultry_leg:"🍗",pound:"💷",rage:"😡",pouting_cat:"😾",pouting_man:"🙎&zwj;♂️",pray:"🙏",prayer_beads:"📿",pregnant_woman:"🤰",previous_track_button:"⏮",prince:"🤴",princess:"👸",printer:"🖨",purple_heart:"💜",purse:"👛",pushpin:"📌",put_litter_in_its_place:"🚮",question:"❓",rabbit:"🐰",rabbit2:"🐇",racehorse:"🐎",racing_car:"🏎",radio:"📻",radio_button:"🔘",radioactive:"☢️",railway_car:"🚃",railway_track:"🛤",rainbow:"🌈",rainbow_flag:"🏳️&zwj;🌈",raised_back_of_hand:"🤚",raised_hand_with_fingers_splayed:"🖐",raised_hands:"🙌",raising_hand_woman:"🙋",raising_hand_man:"🙋&zwj;♂️",ram:"🐏",ramen:"🍜",rat:"🐀",record_button:"⏺",recycle:"♻️",red_circle:"🔴",registered:"®️",relaxed:"☺️",relieved:"😌",reminder_ribbon:"🎗",repeat:"🔁",repeat_one:"🔂",rescue_worker_helmet:"⛑",restroom:"🚻",revolving_hearts:"💞",rewind:"⏪",rhinoceros:"🦏",ribbon:"🎀",rice:"🍚",rice_ball:"🍙",rice_cracker:"🍘",rice_scene:"🎑",right_anger_bubble:"🗯",ring:"💍",robot:"🤖",rocket:"🚀",rofl:"🤣",roll_eyes:"🙄",roller_coaster:"🎢",rooster:"🐓",rose:"🌹",rosette:"🏵",rotating_light:"🚨",round_pushpin:"📍",rowing_man:"🚣",rowing_woman:"🚣&zwj;♀️",rugby_football:"🏉",running_man:"🏃",running_shirt_with_sash:"🎽",running_woman:"🏃&zwj;♀️",sa:"🈂️",sagittarius:"♐️",sake:"🍶",sandal:"👡",santa:"🎅",satellite:"📡",saxophone:"🎷",school:"🏫",school_satchel:"🎒",scissors:"✂️",scorpion:"🦂",scorpius:"♏️",scream:"😱",scream_cat:"🙀",scroll:"📜",seat:"💺",secret:"㊙️",see_no_evil:"🙈",seedling:"🌱",selfie:"🤳",shallow_pan_of_food:"🥘",shamrock:"☘️",shark:"🦈",shaved_ice:"🍧",sheep:"🐑",shell:"🐚",shield:"🛡",shinto_shrine:"⛩",ship:"🚢",shirt:"👕",shopping:"🛍",shopping_cart:"🛒",shower:"🚿",shrimp:"🦐",signal_strength:"📶",six_pointed_star:"🔯",ski:"🎿",skier:"⛷",skull:"💀",skull_and_crossbones:"☠️",sleeping:"😴",sleeping_bed:"🛌",sleepy:"😪",slightly_frowning_face:"🙁",slightly_smiling_face:"🙂",slot_machine:"🎰",small_airplane:"🛩",small_blue_diamond:"🔹",small_orange_diamond:"🔸",small_red_triangle:"🔺",small_red_triangle_down:"🔻",smile:"😄",smile_cat:"😸",smiley:"😃",smiley_cat:"😺",smiling_imp:"😈",smirk:"😏",smirk_cat:"😼",smoking:"🚬",snail:"🐌",snake:"🐍",sneezing_face:"🤧",snowboarder:"🏂",snowflake:"❄️",snowman:"⛄️",snowman_with_snow:"☃️",sob:"😭",soccer:"⚽️",soon:"🔜",sos:"🆘",sound:"🔉",space_invader:"👾",spades:"♠️",spaghetti:"🍝",sparkle:"❇️",sparkler:"🎇",sparkles:"✨",sparkling_heart:"💖",speak_no_evil:"🙊",speaker:"🔈",speaking_head:"🗣",speech_balloon:"💬",speedboat:"🚤",spider:"🕷",spider_web:"🕸",spiral_calendar:"🗓",spiral_notepad:"🗒",spoon:"🥄",squid:"🦑",stadium:"🏟",star:"⭐️",star2:"🌟",star_and_crescent:"☪️",star_of_david:"✡️",stars:"🌠",station:"🚉",statue_of_liberty:"🗽",steam_locomotive:"🚂",stew:"🍲",stop_button:"⏹",stop_sign:"🛑",stopwatch:"⏱",straight_ruler:"📏",strawberry:"🍓",stuck_out_tongue:"😛",stuck_out_tongue_closed_eyes:"😝",stuck_out_tongue_winking_eye:"😜",studio_microphone:"🎙",stuffed_flatbread:"🥙",sun_behind_large_cloud:"🌥",sun_behind_rain_cloud:"🌦",sun_behind_small_cloud:"🌤",sun_with_face:"🌞",sunflower:"🌻",sunglasses:"😎",sunny:"☀️",sunrise:"🌅",sunrise_over_mountains:"🌄",surfing_man:"🏄",surfing_woman:"🏄&zwj;♀️",sushi:"🍣",suspension_railway:"🚟",sweat:"😓",sweat_drops:"💦",sweat_smile:"😅",sweet_potato:"🍠",swimming_man:"🏊",swimming_woman:"🏊&zwj;♀️",symbols:"🔣",synagogue:"🕍",syringe:"💉",taco:"🌮",tada:"🎉",tanabata_tree:"🎋",taurus:"♉️",taxi:"🚕",tea:"🍵",telephone_receiver:"📞",telescope:"🔭",tennis:"🎾",tent:"⛺️",thermometer:"🌡",thinking:"🤔",thought_balloon:"💭",ticket:"🎫",tickets:"🎟",tiger:"🐯",tiger2:"🐅",timer_clock:"⏲",tipping_hand_man:"💁&zwj;♂️",tired_face:"😫",tm:"™️",toilet:"🚽",tokyo_tower:"🗼",tomato:"🍅",tongue:"👅",top:"🔝",tophat:"🎩",tornado:"🌪",trackball:"🖲",tractor:"🚜",traffic_light:"🚥",train:"🚋",train2:"🚆",tram:"🚊",triangular_flag_on_post:"🚩",triangular_ruler:"📐",trident:"🔱",triumph:"😤",trolleybus:"🚎",trophy:"🏆",tropical_drink:"🍹",tropical_fish:"🐠",truck:"🚚",trumpet:"🎺",tulip:"🌷",tumbler_glass:"🥃",turkey:"🦃",turtle:"🐢",tv:"📺",twisted_rightwards_arrows:"🔀",two_hearts:"💕",two_men_holding_hands:"👬",two_women_holding_hands:"👭",u5272:"🈹",u5408:"🈴",u55b6:"🈺",u6307:"🈯️",u6708:"🈷️",u6709:"🈶",u6e80:"🈵",u7121:"🈚️",u7533:"🈸",u7981:"🈲",u7a7a:"🈳",umbrella:"☔️",unamused:"😒",underage:"🔞",unicorn:"🦄",unlock:"🔓",up:"🆙",upside_down_face:"🙃",v:"✌️",vertical_traffic_light:"🚦",vhs:"📼",vibration_mode:"📳",video_camera:"📹",video_game:"🎮",violin:"🎻",virgo:"♍️",volcano:"🌋",volleyball:"🏐",vs:"🆚",vulcan_salute:"🖖",walking_man:"🚶",walking_woman:"🚶&zwj;♀️",waning_crescent_moon:"🌘",waning_gibbous_moon:"🌖",warning:"⚠️",wastebasket:"🗑",watch:"⌚️",water_buffalo:"🐃",watermelon:"🍉",wave:"👋",wavy_dash:"〰️",waxing_crescent_moon:"🌒",wc:"🚾",weary:"😩",wedding:"💒",weight_lifting_man:"🏋️",weight_lifting_woman:"🏋️&zwj;♀️",whale:"🐳",whale2:"🐋",wheel_of_dharma:"☸️",wheelchair:"♿️",white_check_mark:"✅",white_circle:"⚪️",white_flag:"🏳️",white_flower:"💮",white_large_square:"⬜️",white_medium_small_square:"◽️",white_medium_square:"◻️",white_small_square:"▫️",white_square_button:"🔳",wilted_flower:"🥀",wind_chime:"🎐",wind_face:"🌬",wine_glass:"🍷",wink:"😉",wolf:"🐺",woman:"👩",woman_artist:"👩&zwj;🎨",woman_astronaut:"👩&zwj;🚀",woman_cartwheeling:"🤸&zwj;♀️",woman_cook:"👩&zwj;🍳",woman_facepalming:"🤦&zwj;♀️",woman_factory_worker:"👩&zwj;🏭",woman_farmer:"👩&zwj;🌾",woman_firefighter:"👩&zwj;🚒",woman_health_worker:"👩&zwj;⚕️",woman_judge:"👩&zwj;⚖️",woman_juggling:"🤹&zwj;♀️",woman_mechanic:"👩&zwj;🔧",woman_office_worker:"👩&zwj;💼",woman_pilot:"👩&zwj;✈️",woman_playing_handball:"🤾&zwj;♀️",woman_playing_water_polo:"🤽&zwj;♀️",woman_scientist:"👩&zwj;🔬",woman_shrugging:"🤷&zwj;♀️",woman_singer:"👩&zwj;🎤",woman_student:"👩&zwj;🎓",woman_teacher:"👩&zwj;🏫",woman_technologist:"👩&zwj;💻",woman_with_turban:"👳&zwj;♀️",womans_clothes:"👚",womans_hat:"👒",women_wrestling:"🤼&zwj;♀️",womens:"🚺",world_map:"🗺",worried:"😟",wrench:"🔧",writing_hand:"✍️",x:"❌",yellow_heart:"💛",yen:"💴",yin_yang:"☯️",yum:"😋",zap:"⚡️",zipper_mouth_face:"🤐",zzz:"💤",octocat:'<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">',showdown:"<span style=\"font-family: 'Anonymous Pro', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;\">S</span>"},a.Converter=function(e){"use strict";function t(e,t){if(t=t||null,a.helper.isString(e)){if(e=a.helper.stdExtName(e),t=e,a.extensions[e])return console.warn("DEPRECATION WARNING: "+e+" is an old extension that uses a deprecated loading method.Please inform the developer that the extension should be updated!"),void function(e,t){"function"==typeof e&&(e=e(new a.Converter));a.helper.isArray(e)||(e=[e]);var n=r(e,t);if(!n.valid)throw Error(n.error);for(var s=0;s<e.length;++s)switch(e[s].type){case"lang":u.push(e[s]);break;case"output":d.push(e[s]);break;default:throw Error("Extension loader error: Type unrecognized!!!")}}(a.extensions[e],e);if(a.helper.isUndefined(s[e]))throw Error('Extension "'+e+'" could not be loaded. It was either not found or is not a valid extension.');e=s[e]}"function"==typeof e&&(e=e()),a.helper.isArray(e)||(e=[e]);var o=r(e,t);if(!o.valid)throw Error(o.error);for(var i=0;i<e.length;++i){switch(e[i].type){case"lang":u.push(e[i]);break;case"output":d.push(e[i])}if(e[i].hasOwnProperty("listeners"))for(var l in e[i].listeners)e[i].listeners.hasOwnProperty(l)&&n(l,e[i].listeners[l])}}function n(e,r){if(!a.helper.isString(e))throw Error("Invalid argument in converter.listen() method: name must be a string, but "+typeof e+" given");if("function"!=typeof r)throw Error("Invalid argument in converter.listen() method: callback must be a function, but "+typeof r+" given");p.hasOwnProperty(e)||(p[e]=[]),p[e].push(r)}var c={},u=[],d=[],p={},h=i,_={parsed:{},raw:"",format:""};!function(){e=e||{};for(var r in o)o.hasOwnProperty(r)&&(c[r]=o[r]);if("object"!=typeof e)throw Error("Converter expects the passed parameter to be an object, but "+typeof e+" was passed instead.");for(var n in e)e.hasOwnProperty(n)&&(c[n]=e[n]);c.extensions&&a.helper.forEach(c.extensions,t)}(),this._dispatch=function(e,r,t,a){if(p.hasOwnProperty(e))for(var n=0;n<p[e].length;++n){var s=p[e][n](e,r,this,t,a);s&&void 0!==s&&(r=s)}return r},this.listen=function(e,r){return n(e,r),this},this.makeHtml=function(e){if(!e)return e;var r={gHtmlBlocks:[],gHtmlMdBlocks:[],gHtmlSpans:[],gUrls:{},gTitles:{},gDimensions:{},gListLevel:0,hashLinkCounts:{},langExtensions:u,outputModifiers:d,converter:this,ghCodeBlocks:[],metadata:{parsed:{},raw:"",format:""}};return e=e.replace(/¨/g,"¨T"),e=e.replace(/\$/g,"¨D"),e=e.replace(/\r\n/g,"\n"),e=e.replace(/\r/g,"\n"),e=e.replace(/\u00A0/g,"&nbsp;"),c.smartIndentationFix&&(e=function(e){var r=e.match(/^\s*/)[0].length,t=new RegExp("^\\s{0,"+r+"}","gm");return e.replace(t,"")}(e)),e="\n\n"+e+"\n\n",e=a.subParser("detab")(e,c,r),e=e.replace(/^[ \t]+$/gm,""),a.helper.forEach(u,function(t){e=a.subParser("runExtension")(t,e,c,r)}),e=a.subParser("metadata")(e,c,r),e=a.subParser("hashPreCodeTags")(e,c,r),e=a.subParser("githubCodeBlocks")(e,c,r),e=a.subParser("hashHTMLBlocks")(e,c,r),e=a.subParser("hashCodeTags")(e,c,r),e=a.subParser("stripLinkDefinitions")(e,c,r),e=a.subParser("blockGamut")(e,c,r),e=a.subParser("unhashHTMLSpans")(e,c,r),e=a.subParser("unescapeSpecialChars")(e,c,r),e=e.replace(/¨D/g,"$$"),e=e.replace(/¨T/g,"¨"),e=a.subParser("completeHTMLDocument")(e,c,r),a.helper.forEach(d,function(t){e=a.subParser("runExtension")(t,e,c,r)}),_=r.metadata,e},this.makeMarkdown=this.makeMd=function(e,r){function t(e){for(var r=0;r<e.childNodes.length;++r){var a=e.childNodes[r];3===a.nodeType?/\S/.test(a.nodeValue)?(a.nodeValue=a.nodeValue.split("\n").join(" "),a.nodeValue=a.nodeValue.replace(/(\s)+/g,"$1")):(e.removeChild(a),--r):1===a.nodeType&&t(a)}}if(e=e.replace(/\r\n/g,"\n"),e=e.replace(/\r/g,"\n"),e=e.replace(/>[ \t]+</,">¨NBSP;<"),!r){if(!window||!window.document)throw new Error("HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM");r=window.document}var n=r.createElement("div");n.innerHTML=e;var s={preList:function(e){for(var r=e.querySelectorAll("pre"),t=[],n=0;n<r.length;++n)if(1===r[n].childElementCount&&"code"===r[n].firstChild.tagName.toLowerCase()){var s=r[n].firstChild.innerHTML.trim(),o=r[n].firstChild.getAttribute("data-language")||"";if(""===o)for(var i=r[n].firstChild.className.split(" "),l=0;l<i.length;++l){var c=i[l].match(/^language-(.+)$/);if(null!==c){o=c[1];break}}s=a.helper.unescapeHTMLEntities(s),t.push(s),r[n].outerHTML='<precode language="'+o+'" precodenum="'+n.toString()+'"></precode>'}else t.push(r[n].innerHTML),r[n].innerHTML="",r[n].setAttribute("prenum",n.toString());return t}(n)};t(n);for(var o=n.childNodes,i="",l=0;l<o.length;l++)i+=a.subParser("makeMarkdown.node")(o[l],s);return i},this.setOption=function(e,r){c[e]=r},this.getOption=function(e){return c[e]},this.getOptions=function(){return c},this.addExtension=function(e,r){t(e,r=r||null)},this.useExtension=function(e){t(e)},this.setFlavor=function(e){if(!l.hasOwnProperty(e))throw Error(e+" flavor was not found");var r=l[e];h=e;for(var t in r)r.hasOwnProperty(t)&&(c[t]=r[t])},this.getFlavor=function(){return h},this.removeExtension=function(e){a.helper.isArray(e)||(e=[e]);for(var r=0;r<e.length;++r){for(var t=e[r],n=0;n<u.length;++n)u[n]===t&&u[n].splice(n,1);for(;0<d.length;++n)d[0]===t&&d[0].splice(n,1)}},this.getAllExtensions=function(){return{language:u,output:d}},this.getMetadata=function(e){return e?_.raw:_.parsed},this.getMetadataFormat=function(){return _.format},this._setMetadataPair=function(e,r){_.parsed[e]=r},this._setMetadataFormat=function(e){_.format=e},this._setMetadataRaw=function(e){_.raw=e}},a.subParser("anchors",function(e,r,t){"use strict";var n=function(e,n,s,o,i,l,c){if(a.helper.isUndefined(c)&&(c=""),s=s.toLowerCase(),e.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)>-1)o="";else if(!o){if(s||(s=n.toLowerCase().replace(/ ?\n/g," ")),o="#"+s,a.helper.isUndefined(t.gUrls[s]))return e;o=t.gUrls[s],a.helper.isUndefined(t.gTitles[s])||(c=t.gTitles[s])}var u='<a href="'+(o=o.replace(a.helper.regexes.asteriskDashAndColon,a.helper.escapeCharactersCallback))+'"';return""!==c&&null!==c&&(u+=' title="'+(c=(c=c.replace(/"/g,"&quot;")).replace(a.helper.regexes.asteriskDashAndColon,a.helper.escapeCharactersCallback))+'"'),r.openLinksInNewWindow&&!/^#/.test(o)&&(u+=' rel="noopener noreferrer" target="¨E95Eblank"'),u+=">"+n+"</a>"};return e=(e=t.converter._dispatch("anchors.before",e,r,t)).replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g,n),e=e.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,n),e=e.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,n),e=e.replace(/\[([^\[\]]+)]()()()()()/g,n),r.ghMentions&&(e=e.replace(/(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gim,function(e,t,n,s,o){if("\\"===n)return t+s;if(!a.helper.isString(r.ghMentionsLink))throw new Error("ghMentionsLink option must be a string");var i=r.ghMentionsLink.replace(/\{u}/g,o),l="";return r.openLinksInNewWindow&&(l=' rel="noopener noreferrer" target="¨E95Eblank"'),t+'<a href="'+i+'"'+l+">"+s+"</a>"})),e=t.converter._dispatch("anchors.after",e,r,t)});var u=/([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi,d=/([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi,p=/()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi,h=/(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gim,_=/<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi,g=function(e){"use strict";return function(r,t,n,s,o,i,l){var c=n=n.replace(a.helper.regexes.asteriskDashAndColon,a.helper.escapeCharactersCallback),u="",d="",p=t||"",h=l||"";return/^www\./i.test(n)&&(n=n.replace(/^www\./i,"http://www.")),e.excludeTrailingPunctuationFromURLs&&i&&(u=i),e.openLinksInNewWindow&&(d=' rel="noopener noreferrer" target="¨E95Eblank"'),p+'<a href="'+n+'"'+d+">"+c+"</a>"+u+h}},m=function(e,r){"use strict";return function(t,n,s){var o="mailto:";return n=n||"",s=a.subParser("unescapeSpecialChars")(s,e,r),e.encodeEmails?(o=a.helper.encodeEmailAddress(o+s),s=a.helper.encodeEmailAddress(s)):o+=s,n+'<a href="'+o+'">'+s+"</a>"}};a.subParser("autoLinks",function(e,r,t){"use strict";return e=t.converter._dispatch("autoLinks.before",e,r,t),e=e.replace(p,g(r)),e=e.replace(_,m(r,t)),e=t.converter._dispatch("autoLinks.after",e,r,t)}),a.subParser("simplifiedAutoLinks",function(e,r,t){"use strict";return r.simplifiedAutoLink?(e=t.converter._dispatch("simplifiedAutoLinks.before",e,r,t),e=r.excludeTrailingPunctuationFromURLs?e.replace(d,g(r)):e.replace(u,g(r)),e=e.replace(h,m(r,t)),e=t.converter._dispatch("simplifiedAutoLinks.after",e,r,t)):e}),a.subParser("blockGamut",function(e,r,t){"use strict";return e=t.converter._dispatch("blockGamut.before",e,r,t),e=a.subParser("blockQuotes")(e,r,t),e=a.subParser("headers")(e,r,t),e=a.subParser("horizontalRule")(e,r,t),e=a.subParser("lists")(e,r,t),e=a.subParser("codeBlocks")(e,r,t),e=a.subParser("tables")(e,r,t),e=a.subParser("hashHTMLBlocks")(e,r,t),e=a.subParser("paragraphs")(e,r,t),e=t.converter._dispatch("blockGamut.after",e,r,t)}),a.subParser("blockQuotes",function(e,r,t){"use strict";e=t.converter._dispatch("blockQuotes.before",e,r,t),e+="\n\n";var n=/(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm;return r.splitAdjacentBlockquotes&&(n=/^ {0,3}>[\s\S]*?(?:\n\n)/gm),e=e.replace(n,function(e){return e=e.replace(/^[ \t]*>[ \t]?/gm,""),e=e.replace(/¨0/g,""),e=e.replace(/^[ \t]+$/gm,""),e=a.subParser("githubCodeBlocks")(e,r,t),e=a.subParser("blockGamut")(e,r,t),e=e.replace(/(^|\n)/g,"$1  "),e=e.replace(/(\s*<pre>[^\r]+?<\/pre>)/gm,function(e,r){var t=r;return t=t.replace(/^  /gm,"¨0"),t=t.replace(/¨0/g,"")}),a.subParser("hashBlock")("<blockquote>\n"+e+"\n</blockquote>",r,t)}),e=t.converter._dispatch("blockQuotes.after",e,r,t)}),a.subParser("codeBlocks",function(e,r,t){"use strict";e=t.converter._dispatch("codeBlocks.before",e,r,t);return e=(e+="¨0").replace(/(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=¨0))/g,function(e,n,s){var o=n,i=s,l="\n";return o=a.subParser("outdent")(o,r,t),o=a.subParser("encodeCode")(o,r,t),o=a.subParser("detab")(o,r,t),o=o.replace(/^\n+/g,""),o=o.replace(/\n+$/g,""),r.omitExtraWLInCodeBlocks&&(l=""),o="<pre><code>"+o+l+"</code></pre>",a.subParser("hashBlock")(o,r,t)+i}),e=e.replace(/¨0/,""),e=t.converter._dispatch("codeBlocks.after",e,r,t)}),a.subParser("codeSpans",function(e,r,t){"use strict";return void 0===(e=t.converter._dispatch("codeSpans.before",e,r,t))&&(e=""),e=e.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,function(e,n,s,o){var i=o;return i=i.replace(/^([ \t]*)/g,""),i=i.replace(/[ \t]*$/g,""),i=a.subParser("encodeCode")(i,r,t),i=n+"<code>"+i+"</code>",i=a.subParser("hashHTMLSpans")(i,r,t)}),e=t.converter._dispatch("codeSpans.after",e,r,t)}),a.subParser("completeHTMLDocument",function(e,r,t){"use strict";if(!r.completeHTMLDocument)return e;e=t.converter._dispatch("completeHTMLDocument.before",e,r,t);var a="html",n="<!DOCTYPE HTML>\n",s="",o='<meta charset="utf-8">\n',i="",l="";void 0!==t.metadata.parsed.doctype&&(n="<!DOCTYPE "+t.metadata.parsed.doctype+">\n","html"!==(a=t.metadata.parsed.doctype.toString().toLowerCase())&&"html5"!==a||(o='<meta charset="utf-8">'));for(var c in t.metadata.parsed)if(t.metadata.parsed.hasOwnProperty(c))switch(c.toLowerCase()){case"doctype":break;case"title":s="<title>"+t.metadata.parsed.title+"</title>\n";break;case"charset":o="html"===a||"html5"===a?'<meta charset="'+t.metadata.parsed.charset+'">\n':'<meta name="charset" content="'+t.metadata.parsed.charset+'">\n';break;case"language":case"lang":i=' lang="'+t.metadata.parsed[c]+'"',l+='<meta name="'+c+'" content="'+t.metadata.parsed[c]+'">\n';break;default:l+='<meta name="'+c+'" content="'+t.metadata.parsed[c]+'">\n'}return e=n+"<html"+i+">\n<head>\n"+s+o+l+"</head>\n<body>\n"+e.trim()+"\n</body>\n</html>",e=t.converter._dispatch("completeHTMLDocument.after",e,r,t)}),a.subParser("detab",function(e,r,t){"use strict";return e=t.converter._dispatch("detab.before",e,r,t),e=e.replace(/\t(?=\t)/g,"    "),e=e.replace(/\t/g,"¨A¨B"),e=e.replace(/¨B(.+?)¨A/g,function(e,r){for(var t=r,a=4-t.length%4,n=0;n<a;n++)t+=" ";return t}),e=e.replace(/¨A/g,"    "),e=e.replace(/¨B/g,""),e=t.converter._dispatch("detab.after",e,r,t)}),a.subParser("ellipsis",function(e,r,t){"use strict";return e=t.converter._dispatch("ellipsis.before",e,r,t),e=e.replace(/\.\.\./g,"…"),e=t.converter._dispatch("ellipsis.after",e,r,t)}),a.subParser("emoji",function(e,r,t){"use strict";if(!r.emoji)return e;return e=(e=t.converter._dispatch("emoji.before",e,r,t)).replace(/:([\S]+?):/g,function(e,r){return a.helper.emojis.hasOwnProperty(r)?a.helper.emojis[r]:e}),e=t.converter._dispatch("emoji.after",e,r,t)}),a.subParser("encodeAmpsAndAngles",function(e,r,t){"use strict";return e=t.converter._dispatch("encodeAmpsAndAngles.before",e,r,t),e=e.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g,"&amp;"),e=e.replace(/<(?![a-z\/?$!])/gi,"&lt;"),e=e.replace(/</g,"&lt;"),e=e.replace(/>/g,"&gt;"),e=t.converter._dispatch("encodeAmpsAndAngles.after",e,r,t)}),a.subParser("encodeBackslashEscapes",function(e,r,t){"use strict";return e=t.converter._dispatch("encodeBackslashEscapes.before",e,r,t),e=e.replace(/\\(\\)/g,a.helper.escapeCharactersCallback),e=e.replace(/\\([`*_{}\[\]()>#+.!~=|-])/g,a.helper.escapeCharactersCallback),e=t.converter._dispatch("encodeBackslashEscapes.after",e,r,t)}),a.subParser("encodeCode",function(e,r,t){"use strict";return e=t.converter._dispatch("encodeCode.before",e,r,t),e=e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/([*_{}\[\]\\=~-])/g,a.helper.escapeCharactersCallback),e=t.converter._dispatch("encodeCode.after",e,r,t)}),a.subParser("escapeSpecialCharsWithinTagAttributes",function(e,r,t){"use strict";return e=(e=t.converter._dispatch("escapeSpecialCharsWithinTagAttributes.before",e,r,t)).replace(/<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi,function(e){return e.replace(/(.)<\/?code>(?=.)/g,"$1`").replace(/([\\`*_~=|])/g,a.helper.escapeCharactersCallback)}),e=e.replace(/<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi,function(e){return e.replace(/([\\`*_~=|])/g,a.helper.escapeCharactersCallback)}),e=t.converter._dispatch("escapeSpecialCharsWithinTagAttributes.after",e,r,t)}),a.subParser("githubCodeBlocks",function(e,r,t){"use strict";return r.ghCodeBlocks?(e=t.converter._dispatch("githubCodeBlocks.before",e,r,t),e+="¨0",e=e.replace(/(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g,function(e,n,s,o){var i=r.omitExtraWLInCodeBlocks?"":"\n";return o=a.subParser("encodeCode")(o,r,t),o=a.subParser("detab")(o,r,t),o=o.replace(/^\n+/g,""),o=o.replace(/\n+$/g,""),o="<pre><code"+(s?' class="'+s+" language-"+s+'"':"")+">"+o+i+"</code></pre>",o=a.subParser("hashBlock")(o,r,t),"\n\n¨G"+(t.ghCodeBlocks.push({text:e,codeblock:o})-1)+"G\n\n"}),e=e.replace(/¨0/,""),t.converter._dispatch("githubCodeBlocks.after",e,r,t)):e}),a.subParser("hashBlock",function(e,r,t){"use strict";return e=t.converter._dispatch("hashBlock.before",e,r,t),e=e.replace(/(^\n+|\n+$)/g,""),e="\n\n¨K"+(t.gHtmlBlocks.push(e)-1)+"K\n\n",e=t.converter._dispatch("hashBlock.after",e,r,t)}),a.subParser("hashCodeTags",function(e,r,t){"use strict";e=t.converter._dispatch("hashCodeTags.before",e,r,t);return e=a.helper.replaceRecursiveRegExp(e,function(e,n,s,o){var i=s+a.subParser("encodeCode")(n,r,t)+o;return"¨C"+(t.gHtmlSpans.push(i)-1)+"C"},"<code\\b[^>]*>","</code>","gim"),e=t.converter._dispatch("hashCodeTags.after",e,r,t)}),a.subParser("hashElement",function(e,r,t){"use strict";return function(e,r){var a=r;return a=a.replace(/\n\n/g,"\n"),a=a.replace(/^\n/,""),a=a.replace(/\n+$/g,""),a="\n\n¨K"+(t.gHtmlBlocks.push(a)-1)+"K\n\n"}}),a.subParser("hashHTMLBlocks",function(e,r,t){"use strict";e=t.converter._dispatch("hashHTMLBlocks.before",e,r,t);var n=["pre","div","h1","h2","h3","h4","h5","h6","blockquote","table","dl","ol","ul","script","noscript","form","fieldset","iframe","math","style","section","header","footer","nav","article","aside","address","audio","canvas","figure","hgroup","output","video","p"],s=function(e,r,a,n){var s=e;return-1!==a.search(/\bmarkdown\b/)&&(s=a+t.converter.makeHtml(r)+n),"\n\n¨K"+(t.gHtmlBlocks.push(s)-1)+"K\n\n"};r.backslashEscapesHTMLTags&&(e=e.replace(/\\<(\/?[^>]+?)>/g,function(e,r){return"&lt;"+r+"&gt;"}));for(var o=0;o<n.length;++o)for(var i,l=new RegExp("^ {0,3}(<"+n[o]+"\\b[^>]*>)","im"),c="<"+n[o]+"\\b[^>]*>",u="</"+n[o]+">";-1!==(i=a.helper.regexIndexOf(e,l));){var d=a.helper.splitAtIndex(e,i),p=a.helper.replaceRecursiveRegExp(d[1],s,c,u,"im");if(p===d[1])break;e=d[0].concat(p)}return e=e.replace(/(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,a.subParser("hashElement")(e,r,t)),e=a.helper.replaceRecursiveRegExp(e,function(e){return"\n\n¨K"+(t.gHtmlBlocks.push(e)-1)+"K\n\n"},"^ {0,3}\x3c!--","--\x3e","gm"),e=e.replace(/(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,a.subParser("hashElement")(e,r,t)),e=t.converter._dispatch("hashHTMLBlocks.after",e,r,t)}),a.subParser("hashHTMLSpans",function(e,r,t){"use strict";function a(e){return"¨C"+(t.gHtmlSpans.push(e)-1)+"C"}return e=t.converter._dispatch("hashHTMLSpans.before",e,r,t),e=e.replace(/<[^>]+?\/>/gi,function(e){return a(e)}),e=e.replace(/<([^>]+?)>[\s\S]*?<\/\1>/g,function(e){return a(e)}),e=e.replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g,function(e){return a(e)}),e=e.replace(/<[^>]+?>/gi,function(e){return a(e)}),e=t.converter._dispatch("hashHTMLSpans.after",e,r,t)}),a.subParser("unhashHTMLSpans",function(e,r,t){"use strict";e=t.converter._dispatch("unhashHTMLSpans.before",e,r,t);for(var a=0;a<t.gHtmlSpans.length;++a){for(var n=t.gHtmlSpans[a],s=0;/¨C(\d+)C/.test(n);){var o=RegExp.$1;if(n=n.replace("¨C"+o+"C",t.gHtmlSpans[o]),10===s){console.error("maximum nesting of 10 spans reached!!!");break}++s}e=e.replace("¨C"+a+"C",n)}return e=t.converter._dispatch("unhashHTMLSpans.after",e,r,t)}),a.subParser("hashPreCodeTags",function(e,r,t){"use strict";e=t.converter._dispatch("hashPreCodeTags.before",e,r,t);return e=a.helper.replaceRecursiveRegExp(e,function(e,n,s,o){var i=s+a.subParser("encodeCode")(n,r,t)+o;return"\n\n¨G"+(t.ghCodeBlocks.push({text:e,codeblock:i})-1)+"G\n\n"},"^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>","^ {0,3}</code>\\s*</pre>","gim"),e=t.converter._dispatch("hashPreCodeTags.after",e,r,t)}),a.subParser("headers",function(e,r,t){"use strict";function n(e){var n,s;if(r.customizedHeaderId){var o=e.match(/\{([^{]+?)}\s*$/);o&&o[1]&&(e=o[1])}return n=e,s=a.helper.isString(r.prefixHeaderId)?r.prefixHeaderId:!0===r.prefixHeaderId?"section-":"",r.rawPrefixHeaderId||(n=s+n),n=r.ghCompatibleHeaderId?n.replace(/ /g,"-").replace(/&amp;/g,"").replace(/¨T/g,"").replace(/¨D/g,"").replace(/[&+$,\/:;=?@"#{}|^¨~\[\]`\\*)(%.!'<>]/g,"").toLowerCase():r.rawHeaderId?n.replace(/ /g,"-").replace(/&amp;/g,"&").replace(/¨T/g,"¨").replace(/¨D/g,"$").replace(/["']/g,"-").toLowerCase():n.replace(/[^\w]/g,"").toLowerCase(),r.rawPrefixHeaderId&&(n=s+n),t.hashLinkCounts[n]?n=n+"-"+t.hashLinkCounts[n]++:t.hashLinkCounts[n]=1,n}e=t.converter._dispatch("headers.before",e,r,t);var s=isNaN(parseInt(r.headerLevelStart))?1:parseInt(r.headerLevelStart),o=r.smoothLivePreview?/^(.+)[ \t]*\n={2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n=+[ \t]*\n+/gm,i=r.smoothLivePreview?/^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm:/^(.+)[ \t]*\n-+[ \t]*\n+/gm;e=(e=e.replace(o,function(e,o){var i=a.subParser("spanGamut")(o,r,t),l=r.noHeaderId?"":' id="'+n(o)+'"',c="<h"+s+l+">"+i+"</h"+s+">";return a.subParser("hashBlock")(c,r,t)})).replace(i,function(e,o){var i=a.subParser("spanGamut")(o,r,t),l=r.noHeaderId?"":' id="'+n(o)+'"',c=s+1,u="<h"+c+l+">"+i+"</h"+c+">";return a.subParser("hashBlock")(u,r,t)});var l=r.requireSpaceBeforeHeadingText?/^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm:/^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm;return e=e.replace(l,function(e,o,i){var l=i;r.customizedHeaderId&&(l=i.replace(/\s?\{([^{]+?)}\s*$/,""));var c=a.subParser("spanGamut")(l,r,t),u=r.noHeaderId?"":' id="'+n(i)+'"',d=s-1+o.length,p="<h"+d+u+">"+c+"</h"+d+">";return a.subParser("hashBlock")(p,r,t)}),e=t.converter._dispatch("headers.after",e,r,t)}),a.subParser("horizontalRule",function(e,r,t){"use strict";e=t.converter._dispatch("horizontalRule.before",e,r,t);var n=a.subParser("hashBlock")("<hr />",r,t);return e=e.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm,n),e=e.replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm,n),e=e.replace(/^ {0,2}( ?_){3,}[ \t]*$/gm,n),e=t.converter._dispatch("horizontalRule.after",e,r,t)}),a.subParser("images",function(e,r,t){"use strict";function n(e,r,n,s,o,i,l,c){var u=t.gUrls,d=t.gTitles,p=t.gDimensions;if(n=n.toLowerCase(),c||(c=""),e.search(/\(<?\s*>? ?(['"].*['"])?\)$/m)>-1)s="";else if(""===s||null===s){if(""!==n&&null!==n||(n=r.toLowerCase().replace(/ ?\n/g," ")),s="#"+n,a.helper.isUndefined(u[n]))return e;s=u[n],a.helper.isUndefined(d[n])||(c=d[n]),a.helper.isUndefined(p[n])||(o=p[n].width,i=p[n].height)}r=r.replace(/"/g,"&quot;").replace(a.helper.regexes.asteriskDashAndColon,a.helper.escapeCharactersCallback);var h='<img src="'+(s=s.replace(a.helper.regexes.asteriskDashAndColon,a.helper.escapeCharactersCallback))+'" alt="'+r+'"';return c&&a.helper.isString(c)&&(h+=' title="'+(c=c.replace(/"/g,"&quot;").replace(a.helper.regexes.asteriskDashAndColon,a.helper.escapeCharactersCallback))+'"'),o&&i&&(h+=' width="'+(o="*"===o?"auto":o)+'"',h+=' height="'+(i="*"===i?"auto":i)+'"'),h+=" />"}return e=(e=t.converter._dispatch("images.before",e,r,t)).replace(/!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g,n),e=e.replace(/!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,function(e,r,t,a,s,o,i,l){return a=a.replace(/\s/g,""),n(e,r,t,a,s,o,0,l)}),e=e.replace(/!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g,n),e=e.replace(/!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,n),e=e.replace(/!\[([^\[\]]+)]()()()()()/g,n),e=t.converter._dispatch("images.after",e,r,t)}),a.subParser("italicsAndBold",function(e,r,t){"use strict";function a(e,r,t){return r+e+t}return e=t.converter._dispatch("italicsAndBold.before",e,r,t),e=r.literalMidWordUnderscores?(e=(e=e.replace(/\b___(\S[\s\S]*?)___\b/g,function(e,r){return a(r,"<strong><em>","</em></strong>")})).replace(/\b__(\S[\s\S]*?)__\b/g,function(e,r){return a(r,"<strong>","</strong>")})).replace(/\b_(\S[\s\S]*?)_\b/g,function(e,r){return a(r,"<em>","</em>")}):(e=(e=e.replace(/___(\S[\s\S]*?)___/g,function(e,r){return/\S$/.test(r)?a(r,"<strong><em>","</em></strong>"):e})).replace(/__(\S[\s\S]*?)__/g,function(e,r){return/\S$/.test(r)?a(r,"<strong>","</strong>"):e})).replace(/_([^\s_][\s\S]*?)_/g,function(e,r){return/\S$/.test(r)?a(r,"<em>","</em>"):e}),e=r.literalMidWordAsterisks?(e=(e=e.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g,function(e,r,t){return a(t,r+"<strong><em>","</em></strong>")})).replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g,function(e,r,t){return a(t,r+"<strong>","</strong>")})).replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g,function(e,r,t){return a(t,r+"<em>","</em>")}):(e=(e=e.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g,function(e,r){return/\S$/.test(r)?a(r,"<strong><em>","</em></strong>"):e})).replace(/\*\*(\S[\s\S]*?)\*\*/g,function(e,r){return/\S$/.test(r)?a(r,"<strong>","</strong>"):e})).replace(/\*([^\s*][\s\S]*?)\*/g,function(e,r){return/\S$/.test(r)?a(r,"<em>","</em>"):e}),e=t.converter._dispatch("italicsAndBold.after",e,r,t)}),a.subParser("lists",function(e,r,t){"use strict";function n(e,n){t.gListLevel++,e=e.replace(/\n{2,}$/,"\n");var s=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0| {0,3}([*+-]|\d+[.])[ \t]+))/gm,o=/\n[ \t]*\n(?!¨0)/.test(e+="¨0");return r.disableForced4SpacesIndentedSublists&&(s=/(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0|\2([*+-]|\d+[.])[ \t]+))/gm),e=e.replace(s,function(e,n,s,i,l,c,u){u=u&&""!==u.trim();var d=a.subParser("outdent")(l,r,t),p="";return c&&r.tasklists&&(p=' class="task-list-item" style="list-style-type: none;"',d=d.replace(/^[ \t]*\[(x|X| )?]/m,function(){var e='<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';return u&&(e+=" checked"),e+=">"})),d=d.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g,function(e){return"¨A"+e}),n||d.search(/\n{2,}/)>-1?(d=a.subParser("githubCodeBlocks")(d,r,t),d=a.subParser("blockGamut")(d,r,t)):(d=(d=a.subParser("lists")(d,r,t)).replace(/\n$/,""),d=(d=a.subParser("hashHTMLBlocks")(d,r,t)).replace(/\n\n+/g,"\n\n"),d=o?a.subParser("paragraphs")(d,r,t):a.subParser("spanGamut")(d,r,t)),d=d.replace("¨A",""),d="<li"+p+">"+d+"</li>\n"}),e=e.replace(/¨0/g,""),t.gListLevel--,n&&(e=e.replace(/\s+$/,"")),e}function s(e,r){if("ol"===r){var t=e.match(/^ *(\d+)\./);if(t&&"1"!==t[1])return' start="'+t[1]+'"'}return""}function o(e,t,a){var o=r.disableForced4SpacesIndentedSublists?/^ ?\d+\.[ \t]/gm:/^ {0,3}\d+\.[ \t]/gm,i=r.disableForced4SpacesIndentedSublists?/^ ?[*+-][ \t]/gm:/^ {0,3}[*+-][ \t]/gm,l="ul"===t?o:i,c="";if(-1!==e.search(l))!function r(u){var d=u.search(l),p=s(e,t);-1!==d?(c+="\n\n<"+t+p+">\n"+n(u.slice(0,d),!!a)+"</"+t+">\n",l="ul"===(t="ul"===t?"ol":"ul")?o:i,r(u.slice(d))):c+="\n\n<"+t+p+">\n"+n(u,!!a)+"</"+t+">\n"}(e);else{var u=s(e,t);c="\n\n<"+t+u+">\n"+n(e,!!a)+"</"+t+">\n"}return c}return e=t.converter._dispatch("lists.before",e,r,t),e+="¨0",e=t.gListLevel?e.replace(/^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,function(e,r,t){return o(r,t.search(/[*+-]/g)>-1?"ul":"ol",!0)}):e.replace(/(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,function(e,r,t,a){return o(t,a.search(/[*+-]/g)>-1?"ul":"ol",!1)}),e=e.replace(/¨0/,""),e=t.converter._dispatch("lists.after",e,r,t)}),a.subParser("metadata",function(e,r,t){"use strict";function a(e){t.metadata.raw=e,(e=(e=e.replace(/&/g,"&amp;").replace(/"/g,"&quot;")).replace(/\n {4}/g," ")).replace(/^([\S ]+): +([\s\S]+?)$/gm,function(e,r,a){return t.metadata.parsed[r]=a,""})}return r.metadata?(e=t.converter._dispatch("metadata.before",e,r,t),e=e.replace(/^\s*«««+(\S*?)\n([\s\S]+?)\n»»»+\n/,function(e,r,t){return a(t),"¨M"}),e=e.replace(/^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/,function(e,r,n){return r&&(t.metadata.format=r),a(n),"¨M"}),e=e.replace(/¨M/g,""),e=t.converter._dispatch("metadata.after",e,r,t)):e}),a.subParser("outdent",function(e,r,t){"use strict";return e=t.converter._dispatch("outdent.before",e,r,t),e=e.replace(/^(\t|[ ]{1,4})/gm,"¨0"),e=e.replace(/¨0/g,""),e=t.converter._dispatch("outdent.after",e,r,t)}),a.subParser("paragraphs",function(e,r,t){"use strict";for(var n=(e=(e=(e=t.converter._dispatch("paragraphs.before",e,r,t)).replace(/^\n+/g,"")).replace(/\n+$/g,"")).split(/\n{2,}/g),s=[],o=n.length,i=0;i<o;i++){var l=n[i];l.search(/¨(K|G)(\d+)\1/g)>=0?s.push(l):l.search(/\S/)>=0&&(l=(l=a.subParser("spanGamut")(l,r,t)).replace(/^([ \t]*)/g,"<p>"),l+="</p>",s.push(l))}for(o=s.length,i=0;i<o;i++){for(var c="",u=s[i],d=!1;/¨(K|G)(\d+)\1/.test(u);){var p=RegExp.$1,h=RegExp.$2;c=(c="K"===p?t.gHtmlBlocks[h]:d?a.subParser("encodeCode")(t.ghCodeBlocks[h].text,r,t):t.ghCodeBlocks[h].codeblock).replace(/\$/g,"$$$$"),u=u.replace(/(\n\n)?¨(K|G)\d+\2(\n\n)?/,c),/^<pre\b[^>]*>\s*<code\b[^>]*>/.test(u)&&(d=!0)}s[i]=u}return e=s.join("\n"),e=e.replace(/^\n+/g,""),e=e.replace(/\n+$/g,""),t.converter._dispatch("paragraphs.after",e,r,t)}),a.subParser("runExtension",function(e,r,t,a){"use strict";if(e.filter)r=e.filter(r,a.converter,t);else if(e.regex){var n=e.regex;n instanceof RegExp||(n=new RegExp(n,"g")),r=r.replace(n,e.replace)}return r}),a.subParser("spanGamut",function(e,r,t){"use strict";return e=t.converter._dispatch("spanGamut.before",e,r,t),e=a.subParser("codeSpans")(e,r,t),e=a.subParser("escapeSpecialCharsWithinTagAttributes")(e,r,t),e=a.subParser("encodeBackslashEscapes")(e,r,t),e=a.subParser("images")(e,r,t),e=a.subParser("anchors")(e,r,t),e=a.subParser("autoLinks")(e,r,t),e=a.subParser("simplifiedAutoLinks")(e,r,t),e=a.subParser("emoji")(e,r,t),e=a.subParser("underline")(e,r,t),e=a.subParser("italicsAndBold")(e,r,t),e=a.subParser("strikethrough")(e,r,t),e=a.subParser("ellipsis")(e,r,t),e=a.subParser("hashHTMLSpans")(e,r,t),e=a.subParser("encodeAmpsAndAngles")(e,r,t),r.simpleLineBreaks?/\n\n¨K/.test(e)||(e=e.replace(/\n+/g,"<br />\n")):e=e.replace(/  +\n/g,"<br />\n"),e=t.converter._dispatch("spanGamut.after",e,r,t)}),a.subParser("strikethrough",function(e,r,t){"use strict";return r.strikethrough&&(e=(e=t.converter._dispatch("strikethrough.before",e,r,t)).replace(/(?:~){2}([\s\S]+?)(?:~){2}/g,function(e,n){return function(e){return r.simplifiedAutoLink&&(e=a.subParser("simplifiedAutoLinks")(e,r,t)),"<del>"+e+"</del>"}(n)}),e=t.converter._dispatch("strikethrough.after",e,r,t)),e}),a.subParser("stripLinkDefinitions",function(e,r,t){"use strict";var n=function(e,n,s,o,i,l,c){return n=n.toLowerCase(),s.match(/^data:.+?\/.+?;base64,/)?t.gUrls[n]=s.replace(/\s/g,""):t.gUrls[n]=a.subParser("encodeAmpsAndAngles")(s,r,t),l?l+c:(c&&(t.gTitles[n]=c.replace(/"|'/g,"&quot;")),r.parseImgDimensions&&o&&i&&(t.gDimensions[n]={width:o,height:i}),"")};return e=(e+="¨0").replace(/^ {0,3}\[(.+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=¨0)|(?=\n\[))/gm,n),e=e.replace(/^ {0,3}\[(.+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=¨0))/gm,n),e=e.replace(/¨0/,"")}),a.subParser("tables",function(e,r,t){"use strict";function n(e){return/^:[ \t]*--*$/.test(e)?' style="text-align:left;"':/^--*[ \t]*:[ \t]*$/.test(e)?' style="text-align:right;"':/^:[ \t]*--*[ \t]*:$/.test(e)?' style="text-align:center;"':""}function s(e,n){var s="";return e=e.trim(),(r.tablesHeaderId||r.tableHeaderId)&&(s=' id="'+e.replace(/ /g,"_").toLowerCase()+'"'),e=a.subParser("spanGamut")(e,r,t),"<th"+s+n+">"+e+"</th>\n"}function o(e,n){return"<td"+n+">"+a.subParser("spanGamut")(e,r,t)+"</td>\n"}function i(e){var i,l=e.split("\n");for(i=0;i<l.length;++i)/^ {0,3}\|/.test(l[i])&&(l[i]=l[i].replace(/^ {0,3}\|/,"")),/\|[ \t]*$/.test(l[i])&&(l[i]=l[i].replace(/\|[ \t]*$/,"")),l[i]=a.subParser("codeSpans")(l[i],r,t);var c=l[0].split("|").map(function(e){return e.trim()}),u=l[1].split("|").map(function(e){return e.trim()}),d=[],p=[],h=[],_=[];for(l.shift(),l.shift(),i=0;i<l.length;++i)""!==l[i].trim()&&d.push(l[i].split("|").map(function(e){return e.trim()}));if(c.length<u.length)return e;for(i=0;i<u.length;++i)h.push(n(u[i]));for(i=0;i<c.length;++i)a.helper.isUndefined(h[i])&&(h[i]=""),p.push(s(c[i],h[i]));for(i=0;i<d.length;++i){for(var g=[],m=0;m<p.length;++m)a.helper.isUndefined(d[i][m]),g.push(o(d[i][m],h[m]));_.push(g)}return function(e,r){for(var t="<table>\n<thead>\n<tr>\n",a=e.length,n=0;n<a;++n)t+=e[n];for(t+="</tr>\n</thead>\n<tbody>\n",n=0;n<r.length;++n){t+="<tr>\n";for(var s=0;s<a;++s)t+=r[n][s];t+="</tr>\n"}return t+="</tbody>\n</table>\n"}(p,_)}if(!r.tables)return e;return e=t.converter._dispatch("tables.before",e,r,t),e=e.replace(/\\(\|)/g,a.helper.escapeCharactersCallback),e=e.replace(/^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|¨0)/gm,i),e=e.replace(/^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|¨0)/gm,i),e=t.converter._dispatch("tables.after",e,r,t)}),a.subParser("underline",function(e,r,t){"use strict";return r.underline?(e=t.converter._dispatch("underline.before",e,r,t),e=r.literalMidWordUnderscores?(e=e.replace(/\b___(\S[\s\S]*?)___\b/g,function(e,r){return"<u>"+r+"</u>"})).replace(/\b__(\S[\s\S]*?)__\b/g,function(e,r){return"<u>"+r+"</u>"}):(e=e.replace(/___(\S[\s\S]*?)___/g,function(e,r){return/\S$/.test(r)?"<u>"+r+"</u>":e})).replace(/__(\S[\s\S]*?)__/g,function(e,r){return/\S$/.test(r)?"<u>"+r+"</u>":e}),e=e.replace(/(_)/g,a.helper.escapeCharactersCallback),e=t.converter._dispatch("underline.after",e,r,t)):e}),a.subParser("unescapeSpecialChars",function(e,r,t){"use strict";return e=t.converter._dispatch("unescapeSpecialChars.before",e,r,t),e=e.replace(/¨E(\d+)E/g,function(e,r){var t=parseInt(r);return String.fromCharCode(t)}),e=t.converter._dispatch("unescapeSpecialChars.after",e,r,t)}),a.subParser("makeMarkdown.blockquote",function(e,r){"use strict";var t="";if(e.hasChildNodes())for(var n=e.childNodes,s=n.length,o=0;o<s;++o){var i=a.subParser("makeMarkdown.node")(n[o],r);""!==i&&(t+=i)}return t=t.trim(),t="> "+t.split("\n").join("\n> ")}),a.subParser("makeMarkdown.codeBlock",function(e,r){"use strict";var t=e.getAttribute("language"),a=e.getAttribute("precodenum");return"```"+t+"\n"+r.preList[a]+"\n```"}),a.subParser("makeMarkdown.codeSpan",function(e){"use strict";return"`"+e.innerHTML+"`"}),a.subParser("makeMarkdown.emphasis",function(e,r){"use strict";var t="";if(e.hasChildNodes()){t+="*";for(var n=e.childNodes,s=n.length,o=0;o<s;++o)t+=a.subParser("makeMarkdown.node")(n[o],r);t+="*"}return t}),a.subParser("makeMarkdown.header",function(e,r,t){"use strict";var n=new Array(t+1).join("#"),s="";if(e.hasChildNodes()){s=n+" ";for(var o=e.childNodes,i=o.length,l=0;l<i;++l)s+=a.subParser("makeMarkdown.node")(o[l],r)}return s}),a.subParser("makeMarkdown.hr",function(){"use strict";return"---"}),a.subParser("makeMarkdown.image",function(e){"use strict";var r="";return e.hasAttribute("src")&&(r+="!["+e.getAttribute("alt")+"](",r+="<"+e.getAttribute("src")+">",e.hasAttribute("width")&&e.hasAttribute("height")&&(r+=" ="+e.getAttribute("width")+"x"+e.getAttribute("height")),e.hasAttribute("title")&&(r+=' "'+e.getAttribute("title")+'"'),r+=")"),r}),a.subParser("makeMarkdown.links",function(e,r){"use strict";var t="";if(e.hasChildNodes()&&e.hasAttribute("href")){var n=e.childNodes,s=n.length;t="[";for(var o=0;o<s;++o)t+=a.subParser("makeMarkdown.node")(n[o],r);t+="](",t+="<"+e.getAttribute("href")+">",e.hasAttribute("title")&&(t+=' "'+e.getAttribute("title")+'"'),t+=")"}return t}),a.subParser("makeMarkdown.list",function(e,r,t){"use strict";var n="";if(!e.hasChildNodes())return"";for(var s=e.childNodes,o=s.length,i=e.getAttribute("start")||1,l=0;l<o;++l)if(void 0!==s[l].tagName&&"li"===s[l].tagName.toLowerCase()){n+=("ol"===t?i.toString()+". ":"- ")+a.subParser("makeMarkdown.listItem")(s[l],r),++i}return(n+="\n\x3c!-- --\x3e\n").trim()}),a.subParser("makeMarkdown.listItem",function(e,r){"use strict";for(var t="",n=e.childNodes,s=n.length,o=0;o<s;++o)t+=a.subParser("makeMarkdown.node")(n[o],r);return/\n$/.test(t)?t=t.split("\n").join("\n    ").replace(/^ {4}$/gm,"").replace(/\n\n+/g,"\n\n"):t+="\n",t}),a.subParser("makeMarkdown.node",function(e,r,t){"use strict";t=t||!1;var n="";if(3===e.nodeType)return a.subParser("makeMarkdown.txt")(e,r);if(8===e.nodeType)return"\x3c!--"+e.data+"--\x3e\n\n";if(1!==e.nodeType)return"";switch(e.tagName.toLowerCase()){case"h1":t||(n=a.subParser("makeMarkdown.header")(e,r,1)+"\n\n");break;case"h2":t||(n=a.subParser("makeMarkdown.header")(e,r,2)+"\n\n");break;case"h3":t||(n=a.subParser("makeMarkdown.header")(e,r,3)+"\n\n");break;case"h4":t||(n=a.subParser("makeMarkdown.header")(e,r,4)+"\n\n");break;case"h5":t||(n=a.subParser("makeMarkdown.header")(e,r,5)+"\n\n");break;case"h6":t||(n=a.subParser("makeMarkdown.header")(e,r,6)+"\n\n");break;case"p":t||(n=a.subParser("makeMarkdown.paragraph")(e,r)+"\n\n");break;case"blockquote":t||(n=a.subParser("makeMarkdown.blockquote")(e,r)+"\n\n");break;case"hr":t||(n=a.subParser("makeMarkdown.hr")(e,r)+"\n\n");break;case"ol":t||(n=a.subParser("makeMarkdown.list")(e,r,"ol")+"\n\n");break;case"ul":t||(n=a.subParser("makeMarkdown.list")(e,r,"ul")+"\n\n");break;case"precode":t||(n=a.subParser("makeMarkdown.codeBlock")(e,r)+"\n\n");break;case"pre":t||(n=a.subParser("makeMarkdown.pre")(e,r)+"\n\n");break;case"table":t||(n=a.subParser("makeMarkdown.table")(e,r)+"\n\n");break;case"code":n=a.subParser("makeMarkdown.codeSpan")(e,r);break;case"em":case"i":n=a.subParser("makeMarkdown.emphasis")(e,r);break;case"strong":case"b":n=a.subParser("makeMarkdown.strong")(e,r);break;case"del":n=a.subParser("makeMarkdown.strikethrough")(e,r);break;case"a":n=a.subParser("makeMarkdown.links")(e,r);break;case"img":n=a.subParser("makeMarkdown.image")(e,r);break;default:n=e.outerHTML+"\n\n"}return n}),a.subParser("makeMarkdown.paragraph",function(e,r){"use strict";var t="";if(e.hasChildNodes())for(var n=e.childNodes,s=n.length,o=0;o<s;++o)t+=a.subParser("makeMarkdown.node")(n[o],r);return t=t.trim()}),a.subParser("makeMarkdown.pre",function(e,r){"use strict";var t=e.getAttribute("prenum");return"<pre>"+r.preList[t]+"</pre>"}),a.subParser("makeMarkdown.strikethrough",function(e,r){"use strict";var t="";if(e.hasChildNodes()){t+="~~";for(var n=e.childNodes,s=n.length,o=0;o<s;++o)t+=a.subParser("makeMarkdown.node")(n[o],r);t+="~~"}return t}),a.subParser("makeMarkdown.strong",function(e,r){"use strict";var t="";if(e.hasChildNodes()){t+="**";for(var n=e.childNodes,s=n.length,o=0;o<s;++o)t+=a.subParser("makeMarkdown.node")(n[o],r);t+="**"}return t}),a.subParser("makeMarkdown.table",function(e,r){"use strict";var t,n,s="",o=[[],[]],i=e.querySelectorAll("thead>tr>th"),l=e.querySelectorAll("tbody>tr");for(t=0;t<i.length;++t){var c=a.subParser("makeMarkdown.tableCell")(i[t],r),u="---";if(i[t].hasAttribute("style")){switch(i[t].getAttribute("style").toLowerCase().replace(/\s/g,"")){case"text-align:left;":u=":---";break;case"text-align:right;":u="---:";break;case"text-align:center;":u=":---:"}}o[0][t]=c.trim(),o[1][t]=u}for(t=0;t<l.length;++t){var d=o.push([])-1,p=l[t].getElementsByTagName("td");for(n=0;n<i.length;++n){var h=" ";void 0!==p[n]&&(h=a.subParser("makeMarkdown.tableCell")(p[n],r)),o[d].push(h)}}var _=3;for(t=0;t<o.length;++t)for(n=0;n<o[t].length;++n){var g=o[t][n].length;g>_&&(_=g)}for(t=0;t<o.length;++t){for(n=0;n<o[t].length;++n)1===t?":"===o[t][n].slice(-1)?o[t][n]=a.helper.padEnd(o[t][n].slice(-1),_-1,"-")+":":o[t][n]=a.helper.padEnd(o[t][n],_,"-"):o[t][n]=a.helper.padEnd(o[t][n],_);s+="| "+o[t].join(" | ")+" |\n"}return s.trim()}),a.subParser("makeMarkdown.tableCell",function(e,r){"use strict";var t="";if(!e.hasChildNodes())return"";for(var n=e.childNodes,s=n.length,o=0;o<s;++o)t+=a.subParser("makeMarkdown.node")(n[o],r,!0);return t.trim()}),a.subParser("makeMarkdown.txt",function(e){"use strict";var r=e.nodeValue;return r=r.replace(/ +/g," "),r=r.replace(/¨NBSP;/g," "),r=a.helper.unescapeHTMLEntities(r),r=r.replace(/([*_~|`])/g,"\\$1"),r=r.replace(/^(\s*)>/g,"\\$1>"),r=r.replace(/^#/gm,"\\#"),r=r.replace(/^(\s*)([-=]{3,})(\s*)$/,"$1\\$2$3"),r=r.replace(/^( {0,3}\d+)\./gm,"$1\\."),r=r.replace(/^( {0,3})([+-])/gm,"$1\\$2"),r=r.replace(/]([\s]*)\(/g,"\\]$1\\("),r=r.replace(/^ {0,3}\[([\S \t]*?)]:/gm,"\\[$1]:")});"function"==typeof define&&define.amd?define(function(){"use strict";return a}):"undefined"!=typeof module&&module.exports?module.exports=a:this.showdown=a}).call(this);
//# sourceMappingURL=showdown.min.js.map
//! moment-timezone.js
//! version : 0.5.3
//! author : Tim Wood
//! license : MIT
//! github.com/moment/moment-timezone
!function(a,b){"use strict";"function"==typeof define&&define.amd?define(["moment"],b):"object"==typeof module&&module.exports?module.exports=b(require("moment")):b(a.moment)}(this,function(a){"use strict";function b(a){return a>96?a-87:a>64?a-29:a-48}function c(a){var c,d=0,e=a.split("."),f=e[0],g=e[1]||"",h=1,i=0,j=1;for(45===a.charCodeAt(0)&&(d=1,j=-1),d;d<f.length;d++)c=b(f.charCodeAt(d)),i=60*i+c;for(d=0;d<g.length;d++)h/=60,c=b(g.charCodeAt(d)),i+=c*h;return i*j}function d(a){for(var b=0;b<a.length;b++)a[b]=c(a[b])}function e(a,b){for(var c=0;b>c;c++)a[c]=Math.round((a[c-1]||0)+6e4*a[c]);a[b-1]=1/0}function f(a,b){var c,d=[];for(c=0;c<b.length;c++)d[c]=a[b[c]];return d}function g(a){var b=a.split("|"),c=b[2].split(" "),g=b[3].split(""),h=b[4].split(" ");return d(c),d(g),d(h),e(h,g.length),{name:b[0],abbrs:f(b[1].split(" "),g),offsets:f(c,g),untils:h,population:0|b[5]}}function h(a){a&&this._set(g(a))}function i(a){var b=a.toTimeString(),c=b.match(/\([a-z ]+\)/i);c&&c[0]?(c=c[0].match(/[A-Z]/g),c=c?c.join(""):void 0):(c=b.match(/[A-Z]{3,5}/g),c=c?c[0]:void 0),"GMT"===c&&(c=void 0),this.at=+a,this.abbr=c,this.offset=a.getTimezoneOffset()}function j(a){this.zone=a,this.offsetScore=0,this.abbrScore=0}function k(a,b){for(var c,d;d=6e4*((b.at-a.at)/12e4|0);)c=new i(new Date(a.at+d)),c.offset===a.offset?a=c:b=c;return a}function l(){var a,b,c,d=(new Date).getFullYear()-2,e=new i(new Date(d,0,1)),f=[e];for(c=1;48>c;c++)b=new i(new Date(d,c,1)),b.offset!==e.offset&&(a=k(e,b),f.push(a),f.push(new i(new Date(a.at+6e4)))),e=b;for(c=0;4>c;c++)f.push(new i(new Date(d+c,0,1))),f.push(new i(new Date(d+c,6,1)));return f}function m(a,b){return a.offsetScore!==b.offsetScore?a.offsetScore-b.offsetScore:a.abbrScore!==b.abbrScore?a.abbrScore-b.abbrScore:b.zone.population-a.zone.population}function n(a,b){var c,e;for(d(b),c=0;c<b.length;c++)e=b[c],I[e]=I[e]||{},I[e][a]=!0}function o(a){var b,c,d,e=a.length,f={},g=[];for(b=0;e>b;b++){d=I[a[b].offset]||{};for(c in d)d.hasOwnProperty(c)&&(f[c]=!0)}for(b in f)f.hasOwnProperty(b)&&g.push(H[b]);return g}function p(){try{var a=Intl.DateTimeFormat().resolvedOptions().timeZone,b=H[r(a)];if(b)return b;z("Moment Timezone found "+a+" from the Intl api, but did not have that data loaded.")}catch(c){}var d,e,f,g=l(),h=g.length,i=o(g),k=[];for(e=0;e<i.length;e++){for(d=new j(t(i[e]),h),f=0;h>f;f++)d.scoreOffsetAt(g[f]);k.push(d)}return k.sort(m),k.length>0?k[0].zone.name:void 0}function q(a){return D&&!a||(D=p()),D}function r(a){return(a||"").toLowerCase().replace(/\//g,"_")}function s(a){var b,c,d,e;for("string"==typeof a&&(a=[a]),b=0;b<a.length;b++)d=a[b].split("|"),c=d[0],e=r(c),F[e]=a[b],H[e]=c,d[5]&&n(e,d[2].split(" "))}function t(a,b){a=r(a);var c,d=F[a];return d instanceof h?d:"string"==typeof d?(d=new h(d),F[a]=d,d):G[a]&&b!==t&&(c=t(G[a],t))?(d=F[a]=new h,d._set(c),d.name=H[a],d):null}function u(){var a,b=[];for(a in H)H.hasOwnProperty(a)&&(F[a]||F[G[a]])&&H[a]&&b.push(H[a]);return b.sort()}function v(a){var b,c,d,e;for("string"==typeof a&&(a=[a]),b=0;b<a.length;b++)c=a[b].split("|"),d=r(c[0]),e=r(c[1]),G[d]=e,H[d]=c[0],G[e]=d,H[e]=c[1]}function w(a){s(a.zones),v(a.links),A.dataVersion=a.version}function x(a){return x.didShowError||(x.didShowError=!0,z("moment.tz.zoneExists('"+a+"') has been deprecated in favor of !moment.tz.zone('"+a+"')")),!!t(a)}function y(a){return!(!a._a||void 0!==a._tzm)}function z(a){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(a)}function A(b){var c=Array.prototype.slice.call(arguments,0,-1),d=arguments[arguments.length-1],e=t(d),f=a.utc.apply(null,c);return e&&!a.isMoment(b)&&y(f)&&f.add(e.parse(f),"minutes"),f.tz(d),f}function B(a){return function(){return this._z?this._z.abbr(this):a.call(this)}}function C(a){return function(){return this._z=null,a.apply(this,arguments)}}if(void 0!==a.tz)return z("Moment Timezone "+a.tz.version+" was already loaded "+(a.tz.dataVersion?"with data from ":"without any data")+a.tz.dataVersion),a;var D,E="0.5.3",F={},G={},H={},I={},J=a.version.split("."),K=+J[0],L=+J[1];(2>K||2===K&&6>L)&&z("Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js "+a.version+". See momentjs.com"),h.prototype={_set:function(a){this.name=a.name,this.abbrs=a.abbrs,this.untils=a.untils,this.offsets=a.offsets,this.population=a.population},_index:function(a){var b,c=+a,d=this.untils;for(b=0;b<d.length;b++)if(c<d[b])return b},parse:function(a){var b,c,d,e,f=+a,g=this.offsets,h=this.untils,i=h.length-1;for(e=0;i>e;e++)if(b=g[e],c=g[e+1],d=g[e?e-1:e],c>b&&A.moveAmbiguousForward?b=c:b>d&&A.moveInvalidForward&&(b=d),f<h[e]-6e4*b)return g[e];return g[i]},abbr:function(a){return this.abbrs[this._index(a)]},offset:function(a){return this.offsets[this._index(a)]}},j.prototype.scoreOffsetAt=function(a){this.offsetScore+=Math.abs(this.zone.offset(a.at)-a.offset),this.zone.abbr(a.at).match(/[A-Z]/g).join("")!==a.abbr&&this.abbrScore++},A.version=E,A.dataVersion="",A._zones=F,A._links=G,A._names=H,A.add=s,A.link=v,A.load=w,A.zone=t,A.zoneExists=x,A.guess=q,A.names=u,A.Zone=h,A.unpack=g,A.unpackBase60=c,A.needsOffset=y,A.moveInvalidForward=!0,A.moveAmbiguousForward=!1;var M=a.fn;a.tz=A,a.defaultZone=null,a.updateOffset=function(b,c){var d,e=a.defaultZone;void 0===b._z&&(e&&y(b)&&!b._isUTC&&(b._d=a.utc(b._a)._d,b.utc().add(e.parse(b),"minutes")),b._z=e),b._z&&(d=b._z.offset(b),Math.abs(d)<16&&(d/=60),void 0!==b.utcOffset?b.utcOffset(-d,c):b.zone(d,c))},M.tz=function(b){return b?(this._z=t(b),this._z?a.updateOffset(this):z("Moment Timezone has no data for "+b+". See http://momentjs.com/timezone/docs/#/data-loading/."),this):this._z?this._z.name:void 0},M.zoneName=B(M.zoneName),M.zoneAbbr=B(M.zoneAbbr),M.utc=C(M.utc),a.tz.setDefault=function(b){return(2>K||2===K&&9>L)&&z("Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js "+a.version+"."),a.defaultZone=b?t(b):null,a};var N=a.momentProperties;return"[object Array]"===Object.prototype.toString.call(N)?(N.push("_z"),N.push("_a")):N&&(N._z=null),w({version:"2016c",zones:["Africa/Abidjan|GMT|0|0||48e5","Africa/Khartoum|EAT|-30|0||51e5","Africa/Algiers|CET|-10|0||26e5","Africa/Lagos|WAT|-10|0||17e6","Africa/Maputo|CAT|-20|0||26e5","Africa/Cairo|EET EEST|-20 -30|010101010|1Cby0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0|15e6","Africa/Casablanca|WET WEST|0 -10|01010101010101010101010101010101010101010|1Cco0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 Rc0 11A0 e00 e00 U00 11A0 8o0 e00 11A0|32e5","Europe/Paris|CET CEST|-10 -20|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e6","Africa/Johannesburg|SAST|-20|0||84e5","Africa/Tripoli|EET CET CEST|-20 -10 -20|0120|1IlA0 TA0 1o00|11e5","Africa/Windhoek|WAST WAT|-20 -10|01010101010101010101010|1C1c0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0|32e4","America/Adak|HST HDT|a0 90|01010101010101010101010|1BR00 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|326","America/Anchorage|AKST AKDT|90 80|01010101010101010101010|1BQX0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|30e4","America/Santo_Domingo|AST|40|0||29e5","America/Araguaina|BRT BRST|30 20|010|1IdD0 Lz0|14e4","America/Argentina/Buenos_Aires|ART|30|0|","America/Asuncion|PYST PYT|30 40|01010101010101010101010|1C430 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0|28e5","America/Panama|EST|50|0||15e5","America/Bahia|BRT BRST|30 20|010|1FJf0 Rb0|27e5","America/Bahia_Banderas|MST CDT CST|70 50 60|01212121212121212121212|1C1l0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|84e3","America/Fortaleza|BRT|30|0||34e5","America/Managua|CST|60|0||22e5","America/Manaus|AMT|40|0||19e5","America/Bogota|COT|50|0||90e5","America/Denver|MST MDT|70 60|01010101010101010101010|1BQV0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e5","America/Campo_Grande|AMST AMT|30 40|01010101010101010101010|1BIr0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10|77e4","America/Cancun|CST CDT EST|60 50 50|010101010102|1C1k0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 Dd0|63e4","America/Caracas|VET|4u|0||29e5","America/Cayenne|GFT|30|0||58e3","America/Chicago|CST CDT|60 50|01010101010101010101010|1BQU0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|92e5","America/Chihuahua|MST MDT|70 60|01010101010101010101010|1C1l0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|81e4","America/Phoenix|MST|70|0||42e5","America/Los_Angeles|PST PDT|80 70|01010101010101010101010|1BQW0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e6","America/New_York|EST EDT|50 40|01010101010101010101010|1BQT0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e6","America/Rio_Branco|AMT ACT|40 50|01|1KLE0|31e4","America/Fort_Nelson|PST PDT MST|80 70 70|010101010102|1BQW0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|39e2","America/Halifax|AST ADT|40 30|01010101010101010101010|1BQS0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|39e4","America/Godthab|WGT WGST|30 20|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e3","America/Goose_Bay|AST ADT|40 30|01010101010101010101010|1BQQ1 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|76e2","America/Grand_Turk|EST EDT AST|50 40 40|0101010101012|1BQT0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e2","America/Guayaquil|ECT|50|0||27e5","America/Guyana|GYT|40|0||80e4","America/Havana|CST CDT|50 40|01010101010101010101010|1BQR0 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0|21e5","America/La_Paz|BOT|40|0||19e5","America/Lima|PET|50|0||11e6","America/Mexico_City|CST CDT|60 50|01010101010101010101010|1C1k0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|20e6","America/Metlakatla|PST AKST AKDT|80 90 80|012121212121|1PAa0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2","America/Miquelon|PMST PMDT|30 20|01010101010101010101010|1BQR0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|61e2","America/Montevideo|UYST UYT|20 30|010101010101|1BQQ0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0|17e5","America/Noronha|FNT|20|0||30e2","America/North_Dakota/Beulah|MST MDT CST CDT|70 60 60 50|01232323232323232323232|1BQV0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0","America/Paramaribo|SRT|30|0||24e4","America/Port-au-Prince|EST EDT|50 40|010101010|1GI70 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5","America/Santiago|CLST CLT|30 40|010101010101010101010|1C1f0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0|62e5","America/Sao_Paulo|BRST BRT|20 30|01010101010101010101010|1BIq0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10|20e6","America/Scoresbysund|EGT EGST|10 0|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|452","America/St_Johns|NST NDT|3u 2u|01010101010101010101010|1BQPv 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4","Antarctica/Casey|CAST AWST|-b0 -80|0101|1BN30 40P0 KL0|10","Antarctica/Davis|DAVT DAVT|-50 -70|0101|1BPw0 3Wn0 KN0|70","Antarctica/DumontDUrville|DDUT|-a0|0||80","Antarctica/Macquarie|AEDT MIST|-b0 -b0|01|1C140|1","Antarctica/Mawson|MAWT|-50|0||60","Pacific/Auckland|NZDT NZST|-d0 -c0|01010101010101010101010|1C120 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|14e5","Antarctica/Rothera|ROTT|30|0||130","Antarctica/Syowa|SYOT|-30|0||20","Antarctica/Troll|UTC CEST|0 -20|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|40","Antarctica/Vostok|VOST|-60|0||25","Asia/Baghdad|AST|-30|0||66e5","Asia/Almaty|ALMT|-60|0||15e5","Asia/Amman|EET EEST|-20 -30|010101010101010101010|1BVy0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0|25e5","Asia/Anadyr|ANAT ANAST ANAT|-c0 -c0 -b0|0120|1BWe0 1qN0 WM0|13e3","Asia/Aqtobe|AQTT|-50|0||27e4","Asia/Ashgabat|TMT|-50|0||41e4","Asia/Baku|AZT AZST|-40 -50|0101010101010|1BWo0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00|27e5","Asia/Bangkok|ICT|-70|0||15e6","Asia/Barnaul|+06 +07|-60 -70|010101|1BWk0 1qM0 WM0 8Hz0 3rd0","Asia/Beirut|EET EEST|-20 -30|01010101010101010101010|1BWm0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0|22e5","Asia/Bishkek|KGT|-60|0||87e4","Asia/Brunei|BNT|-80|0||42e4","Asia/Kolkata|IST|-5u|0||15e6","Asia/Chita|YAKT YAKST YAKT IRKT|-90 -a0 -a0 -80|010230|1BWh0 1qM0 WM0 8Hz0 3re0|33e4","Asia/Choibalsan|CHOT CHOST|-80 -90|0101010101010|1O8G0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0|38e3","Asia/Shanghai|CST|-80|0||23e6","Asia/Dhaka|BDT|-60|0||16e6","Asia/Damascus|EET EEST|-20 -30|01010101010101010101010|1C0m0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0|26e5","Asia/Dili|TLT|-90|0||19e4","Asia/Dubai|GST|-40|0||39e5","Asia/Dushanbe|TJT|-50|0||76e4","Asia/Gaza|EET EEST|-20 -30|01010101010101010101010|1BVW1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1ny0 1220 1qm0 1220 1ny0 1220 1ny0 1220 1ny0|18e5","Asia/Hebron|EET EEST|-20 -30|0101010101010101010101010|1BVy0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1ny0 1220 1qm0 1220 1ny0 1220 1ny0 1220 1ny0|25e4","Asia/Hong_Kong|HKT|-80|0||73e5","Asia/Hovd|HOVT HOVST|-70 -80|0101010101010|1O8H0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0|81e3","Asia/Irkutsk|IRKT IRKST IRKT|-80 -90 -90|01020|1BWi0 1qM0 WM0 8Hz0|60e4","Europe/Istanbul|EET EEST|-20 -30|01010101010101010101010|1BWp0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|13e6","Asia/Jakarta|WIB|-70|0||31e6","Asia/Jayapura|WIT|-90|0||26e4","Asia/Jerusalem|IST IDT|-20 -30|01010101010101010101010|1BVA0 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0|81e4","Asia/Kabul|AFT|-4u|0||46e5","Asia/Kamchatka|PETT PETST PETT|-c0 -c0 -b0|0120|1BWe0 1qN0 WM0|18e4","Asia/Karachi|PKT|-50|0||24e6","Asia/Urumqi|XJT|-60|0||32e5","Asia/Kathmandu|NPT|-5J|0||12e5","Asia/Khandyga|VLAT VLAST VLAT YAKT YAKT|-a0 -b0 -b0 -a0 -90|010234|1BWg0 1qM0 WM0 17V0 7zD0|66e2","Asia/Krasnoyarsk|KRAT KRAST KRAT|-70 -80 -80|01020|1BWj0 1qM0 WM0 8Hz0|10e5","Asia/Kuala_Lumpur|MYT|-80|0||71e5","Asia/Magadan|MAGT MAGST MAGT MAGT|-b0 -c0 -c0 -a0|01023|1BWf0 1qM0 WM0 8Hz0|95e3","Asia/Makassar|WITA|-80|0||15e5","Asia/Manila|PHT|-80|0||24e6","Europe/Athens|EET EEST|-20 -30|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|35e5","Asia/Novokuznetsk|KRAT NOVST NOVT NOVT|-70 -70 -60 -70|01230|1BWj0 1qN0 WM0 8Hz0|55e4","Asia/Novosibirsk|NOVT NOVST NOVT|-60 -70 -70|01020|1BWk0 1qM0 WM0 8Hz0|15e5","Asia/Omsk|OMST OMSST OMST|-60 -70 -70|01020|1BWk0 1qM0 WM0 8Hz0|12e5","Asia/Oral|ORAT|-50|0||27e4","Asia/Pyongyang|KST KST|-90 -8u|01|1P4D0|29e5","Asia/Qyzylorda|QYZT|-60|0||73e4","Asia/Rangoon|MMT|-6u|0||48e5","Asia/Sakhalin|SAKT SAKST SAKT|-a0 -b0 -b0|010202|1BWg0 1qM0 WM0 8Hz0 3rd0|58e4","Asia/Tashkent|UZT|-50|0||23e5","Asia/Seoul|KST|-90|0||23e6","Asia/Singapore|SGT|-80|0||56e5","Asia/Srednekolymsk|MAGT MAGST MAGT SRET|-b0 -c0 -c0 -b0|01023|1BWf0 1qM0 WM0 8Hz0|35e2","Asia/Tbilisi|GET|-40|0||11e5","Asia/Tehran|IRST IRDT|-3u -4u|01010101010101010101010|1BTUu 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0|14e6","Asia/Thimphu|BTT|-60|0||79e3","Asia/Tokyo|JST|-90|0||38e6","Asia/Ulaanbaatar|ULAT ULAST|-80 -90|0101010101010|1O8G0 1cJ0 1cP0 1cJ0 1cP0 1fx0 1cP0 1cJ0 1cP0 1cJ0 1cP0 1cJ0|12e5","Asia/Ust-Nera|MAGT MAGST MAGT VLAT VLAT|-b0 -c0 -c0 -b0 -a0|010234|1BWf0 1qM0 WM0 17V0 7zD0|65e2","Asia/Vladivostok|VLAT VLAST VLAT|-a0 -b0 -b0|01020|1BWg0 1qM0 WM0 8Hz0|60e4","Asia/Yakutsk|YAKT YAKST YAKT|-90 -a0 -a0|01020|1BWh0 1qM0 WM0 8Hz0|28e4","Asia/Yekaterinburg|YEKT YEKST YEKT|-50 -60 -60|01020|1BWl0 1qM0 WM0 8Hz0|14e5","Asia/Yerevan|AMT AMST|-40 -50|01010|1BWm0 1qM0 WM0 1qM0|13e5","Atlantic/Azores|AZOT AZOST|10 0|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|25e4","Europe/Lisbon|WET WEST|0 -10|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e5","Atlantic/Cape_Verde|CVT|10|0||50e4","Atlantic/South_Georgia|GST|20|0||30","Atlantic/Stanley|FKST FKT|30 40|010|1C6R0 U10|21e2","Australia/Sydney|AEDT AEST|-b0 -a0|01010101010101010101010|1C140 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|40e5","Australia/Adelaide|ACDT ACST|-au -9u|01010101010101010101010|1C14u 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|11e5","Australia/Brisbane|AEST|-a0|0||20e5","Australia/Darwin|ACST|-9u|0||12e4","Australia/Eucla|ACWST|-8J|0||368","Australia/Lord_Howe|LHDT LHST|-b0 -au|01010101010101010101010|1C130 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu|347","Australia/Perth|AWST|-80|0||18e5","Pacific/Easter|EASST EAST|50 60|010101010101010101010|1C1f0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1Nb0 Ap0|30e2","Europe/Dublin|GMT IST|0 -10|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5","Etc/GMT+1|GMT+1|10|0|","Etc/GMT+10|GMT+10|a0|0|","Etc/GMT+11|GMT+11|b0|0|","Etc/GMT+12|GMT+12|c0|0|","Etc/GMT+2|GMT+2|20|0|","Etc/GMT+3|GMT+3|30|0|","Etc/GMT+4|GMT+4|40|0|","Etc/GMT+5|GMT+5|50|0|","Etc/GMT+6|GMT+6|60|0|","Etc/GMT+7|GMT+7|70|0|","Etc/GMT+8|GMT+8|80|0|","Etc/GMT+9|GMT+9|90|0|","Etc/GMT-1|GMT-1|-10|0|","Etc/GMT-10|GMT-10|-a0|0|","Etc/GMT-11|GMT-11|-b0|0|","Etc/GMT-12|GMT-12|-c0|0|","Etc/GMT-13|GMT-13|-d0|0|","Etc/GMT-14|GMT-14|-e0|0|","Etc/GMT-2|GMT-2|-20|0|","Etc/GMT-3|GMT-3|-30|0|","Etc/GMT-4|GMT-4|-40|0|","Etc/GMT-5|GMT-5|-50|0|","Etc/GMT-6|GMT-6|-60|0|","Etc/GMT-7|GMT-7|-70|0|","Etc/GMT-8|GMT-8|-80|0|","Etc/GMT-9|GMT-9|-90|0|","Etc/UCT|UCT|0|0|","Etc/UTC|UTC|0|0|","Europe/Astrakhan|+03 +04|-30 -40|010101|1BWn0 1qM0 WM0 8Hz0 3rd0","Europe/London|GMT BST|0 -10|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|10e6","Europe/Chisinau|EET EEST|-20 -30|01010101010101010101010|1BWo0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|67e4","Europe/Kaliningrad|EET EEST FET|-20 -30 -30|01020|1BWo0 1qM0 WM0 8Hz0|44e4","Europe/Minsk|EET EEST FET MSK|-20 -30 -30 -30|01023|1BWo0 1qM0 WM0 8Hy0|19e5","Europe/Moscow|MSK MSD MSK|-30 -40 -40|01020|1BWn0 1qM0 WM0 8Hz0|16e6","Europe/Samara|SAMT SAMST SAMT|-40 -40 -30|0120|1BWm0 1qN0 WM0|12e5","Europe/Simferopol|EET EEST MSK MSK|-20 -30 -40 -30|01010101023|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0|33e4","Pacific/Honolulu|HST|a0|0||37e4","Indian/Chagos|IOT|-60|0||30e2","Indian/Christmas|CXT|-70|0||21e2","Indian/Cocos|CCT|-6u|0||596","Indian/Kerguelen|TFT|-50|0||130","Indian/Mahe|SCT|-40|0||79e3","Indian/Maldives|MVT|-50|0||35e4","Indian/Mauritius|MUT|-40|0||15e4","Indian/Reunion|RET|-40|0||84e4","Pacific/Majuro|MHT|-c0|0||28e3","MET|MET MEST|-10 -20|01010101010101010101010|1BWp0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00","Pacific/Chatham|CHADT CHAST|-dJ -cJ|01010101010101010101010|1C120 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|600","Pacific/Apia|SST SDT WSDT WSST|b0 a0 -e0 -d0|01012323232323232323232|1Dbn0 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|37e3","Pacific/Bougainville|PGT BST|-a0 -b0|01|1NwE0|18e4","Pacific/Chuuk|CHUT|-a0|0||49e3","Pacific/Efate|VUT|-b0|0||66e3","Pacific/Enderbury|PHOT|-d0|0||1","Pacific/Fakaofo|TKT TKT|b0 -d0|01|1Gfn0|483","Pacific/Fiji|FJST FJT|-d0 -c0|01010101010101010101010|1BWe0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 uM0 1SM0 uM0 1SM0 uM0 1SM0|88e4","Pacific/Funafuti|TVT|-c0|0||45e2","Pacific/Galapagos|GALT|60|0||25e3","Pacific/Gambier|GAMT|90|0||125","Pacific/Guadalcanal|SBT|-b0|0||11e4","Pacific/Guam|ChST|-a0|0||17e4","Pacific/Kiritimati|LINT|-e0|0||51e2","Pacific/Kosrae|KOST|-b0|0||66e2","Pacific/Marquesas|MART|9u|0||86e2","Pacific/Pago_Pago|SST|b0|0||37e2","Pacific/Nauru|NRT|-c0|0||10e3","Pacific/Niue|NUT|b0|0||12e2","Pacific/Norfolk|NFT NFT|-bu -b0|01|1PoCu|25e4","Pacific/Noumea|NCT|-b0|0||98e3","Pacific/Palau|PWT|-90|0||21e3","Pacific/Pitcairn|PST|80|0||56","Pacific/Pohnpei|PONT|-b0|0||34e3","Pacific/Port_Moresby|PGT|-a0|0||25e4","Pacific/Rarotonga|CKT|a0|0||13e3","Pacific/Tahiti|TAHT|a0|0||18e4","Pacific/Tarawa|GILT|-c0|0||29e3","Pacific/Tongatapu|TOT|-d0|0||75e3","Pacific/Wake|WAKT|-c0|0||16e3","Pacific/Wallis|WFT|-c0|0||94"],links:["Africa/Abidjan|Africa/Accra","Africa/Abidjan|Africa/Bamako","Africa/Abidjan|Africa/Banjul","Africa/Abidjan|Africa/Bissau","Africa/Abidjan|Africa/Conakry","Africa/Abidjan|Africa/Dakar","Africa/Abidjan|Africa/Freetown","Africa/Abidjan|Africa/Lome","Africa/Abidjan|Africa/Monrovia","Africa/Abidjan|Africa/Nouakchott","Africa/Abidjan|Africa/Ouagadougou","Africa/Abidjan|Africa/Sao_Tome","Africa/Abidjan|Africa/Timbuktu","Africa/Abidjan|America/Danmarkshavn","Africa/Abidjan|Atlantic/Reykjavik","Africa/Abidjan|Atlantic/St_Helena","Africa/Abidjan|Etc/GMT","Africa/Abidjan|Etc/GMT+0","Africa/Abidjan|Etc/GMT-0","Africa/Abidjan|Etc/GMT0","Africa/Abidjan|Etc/Greenwich","Africa/Abidjan|GMT","Africa/Abidjan|GMT+0","Africa/Abidjan|GMT-0","Africa/Abidjan|GMT0","Africa/Abidjan|Greenwich","Africa/Abidjan|Iceland","Africa/Algiers|Africa/Tunis","Africa/Cairo|Egypt","Africa/Casablanca|Africa/El_Aaiun","Africa/Johannesburg|Africa/Maseru","Africa/Johannesburg|Africa/Mbabane","Africa/Khartoum|Africa/Addis_Ababa","Africa/Khartoum|Africa/Asmara","Africa/Khartoum|Africa/Asmera","Africa/Khartoum|Africa/Dar_es_Salaam","Africa/Khartoum|Africa/Djibouti","Africa/Khartoum|Africa/Juba","Africa/Khartoum|Africa/Kampala","Africa/Khartoum|Africa/Mogadishu","Africa/Khartoum|Africa/Nairobi","Africa/Khartoum|Indian/Antananarivo","Africa/Khartoum|Indian/Comoro","Africa/Khartoum|Indian/Mayotte","Africa/Lagos|Africa/Bangui","Africa/Lagos|Africa/Brazzaville","Africa/Lagos|Africa/Douala","Africa/Lagos|Africa/Kinshasa","Africa/Lagos|Africa/Libreville","Africa/Lagos|Africa/Luanda","Africa/Lagos|Africa/Malabo","Africa/Lagos|Africa/Ndjamena","Africa/Lagos|Africa/Niamey","Africa/Lagos|Africa/Porto-Novo","Africa/Maputo|Africa/Blantyre","Africa/Maputo|Africa/Bujumbura","Africa/Maputo|Africa/Gaborone","Africa/Maputo|Africa/Harare","Africa/Maputo|Africa/Kigali","Africa/Maputo|Africa/Lubumbashi","Africa/Maputo|Africa/Lusaka","Africa/Tripoli|Libya","America/Adak|America/Atka","America/Adak|US/Aleutian","America/Anchorage|America/Juneau","America/Anchorage|America/Nome","America/Anchorage|America/Sitka","America/Anchorage|America/Yakutat","America/Anchorage|US/Alaska","America/Argentina/Buenos_Aires|America/Argentina/Catamarca","America/Argentina/Buenos_Aires|America/Argentina/ComodRivadavia","America/Argentina/Buenos_Aires|America/Argentina/Cordoba","America/Argentina/Buenos_Aires|America/Argentina/Jujuy","America/Argentina/Buenos_Aires|America/Argentina/La_Rioja","America/Argentina/Buenos_Aires|America/Argentina/Mendoza","America/Argentina/Buenos_Aires|America/Argentina/Rio_Gallegos","America/Argentina/Buenos_Aires|America/Argentina/Salta","America/Argentina/Buenos_Aires|America/Argentina/San_Juan","America/Argentina/Buenos_Aires|America/Argentina/San_Luis","America/Argentina/Buenos_Aires|America/Argentina/Tucuman","America/Argentina/Buenos_Aires|America/Argentina/Ushuaia","America/Argentina/Buenos_Aires|America/Buenos_Aires","America/Argentina/Buenos_Aires|America/Catamarca","America/Argentina/Buenos_Aires|America/Cordoba","America/Argentina/Buenos_Aires|America/Jujuy","America/Argentina/Buenos_Aires|America/Mendoza","America/Argentina/Buenos_Aires|America/Rosario","America/Campo_Grande|America/Cuiaba","America/Chicago|America/Indiana/Knox","America/Chicago|America/Indiana/Tell_City","America/Chicago|America/Knox_IN","America/Chicago|America/Matamoros","America/Chicago|America/Menominee","America/Chicago|America/North_Dakota/Center","America/Chicago|America/North_Dakota/New_Salem","America/Chicago|America/Rainy_River","America/Chicago|America/Rankin_Inlet","America/Chicago|America/Resolute","America/Chicago|America/Winnipeg","America/Chicago|CST6CDT","America/Chicago|Canada/Central","America/Chicago|US/Central","America/Chicago|US/Indiana-Starke","America/Chihuahua|America/Mazatlan","America/Chihuahua|Mexico/BajaSur","America/Denver|America/Boise","America/Denver|America/Cambridge_Bay","America/Denver|America/Edmonton","America/Denver|America/Inuvik","America/Denver|America/Ojinaga","America/Denver|America/Shiprock","America/Denver|America/Yellowknife","America/Denver|Canada/Mountain","America/Denver|MST7MDT","America/Denver|Navajo","America/Denver|US/Mountain","America/Fortaleza|America/Belem","America/Fortaleza|America/Maceio","America/Fortaleza|America/Recife","America/Fortaleza|America/Santarem","America/Halifax|America/Glace_Bay","America/Halifax|America/Moncton","America/Halifax|America/Thule","America/Halifax|Atlantic/Bermuda","America/Halifax|Canada/Atlantic","America/Havana|Cuba","America/Los_Angeles|America/Dawson","America/Los_Angeles|America/Ensenada","America/Los_Angeles|America/Santa_Isabel","America/Los_Angeles|America/Tijuana","America/Los_Angeles|America/Vancouver","America/Los_Angeles|America/Whitehorse","America/Los_Angeles|Canada/Pacific","America/Los_Angeles|Canada/Yukon","America/Los_Angeles|Mexico/BajaNorte","America/Los_Angeles|PST8PDT","America/Los_Angeles|US/Pacific","America/Los_Angeles|US/Pacific-New","America/Managua|America/Belize","America/Managua|America/Costa_Rica","America/Managua|America/El_Salvador","America/Managua|America/Guatemala","America/Managua|America/Regina","America/Managua|America/Swift_Current","America/Managua|America/Tegucigalpa","America/Managua|Canada/East-Saskatchewan","America/Managua|Canada/Saskatchewan","America/Manaus|America/Boa_Vista","America/Manaus|America/Porto_Velho","America/Manaus|Brazil/West","America/Mexico_City|America/Merida","America/Mexico_City|America/Monterrey","America/Mexico_City|Mexico/General","America/New_York|America/Detroit","America/New_York|America/Fort_Wayne","America/New_York|America/Indiana/Indianapolis","America/New_York|America/Indiana/Marengo","America/New_York|America/Indiana/Petersburg","America/New_York|America/Indiana/Vevay","America/New_York|America/Indiana/Vincennes","America/New_York|America/Indiana/Winamac","America/New_York|America/Indianapolis","America/New_York|America/Iqaluit","America/New_York|America/Kentucky/Louisville","America/New_York|America/Kentucky/Monticello","America/New_York|America/Louisville","America/New_York|America/Montreal","America/New_York|America/Nassau","America/New_York|America/Nipigon","America/New_York|America/Pangnirtung","America/New_York|America/Thunder_Bay","America/New_York|America/Toronto","America/New_York|Canada/Eastern","America/New_York|EST5EDT","America/New_York|US/East-Indiana","America/New_York|US/Eastern","America/New_York|US/Michigan","America/Noronha|Brazil/DeNoronha","America/Panama|America/Atikokan","America/Panama|America/Cayman","America/Panama|America/Coral_Harbour","America/Panama|America/Jamaica","America/Panama|EST","America/Panama|Jamaica","America/Phoenix|America/Creston","America/Phoenix|America/Dawson_Creek","America/Phoenix|America/Hermosillo","America/Phoenix|MST","America/Phoenix|US/Arizona","America/Rio_Branco|America/Eirunepe","America/Rio_Branco|America/Porto_Acre","America/Rio_Branco|Brazil/Acre","America/Santiago|Antarctica/Palmer","America/Santiago|Chile/Continental","America/Santo_Domingo|America/Anguilla","America/Santo_Domingo|America/Antigua","America/Santo_Domingo|America/Aruba","America/Santo_Domingo|America/Barbados","America/Santo_Domingo|America/Blanc-Sablon","America/Santo_Domingo|America/Curacao","America/Santo_Domingo|America/Dominica","America/Santo_Domingo|America/Grenada","America/Santo_Domingo|America/Guadeloupe","America/Santo_Domingo|America/Kralendijk","America/Santo_Domingo|America/Lower_Princes","America/Santo_Domingo|America/Marigot","America/Santo_Domingo|America/Martinique","America/Santo_Domingo|America/Montserrat","America/Santo_Domingo|America/Port_of_Spain","America/Santo_Domingo|America/Puerto_Rico","America/Santo_Domingo|America/St_Barthelemy","America/Santo_Domingo|America/St_Kitts","America/Santo_Domingo|America/St_Lucia","America/Santo_Domingo|America/St_Thomas","America/Santo_Domingo|America/St_Vincent","America/Santo_Domingo|America/Tortola","America/Santo_Domingo|America/Virgin","America/Sao_Paulo|Brazil/East","America/St_Johns|Canada/Newfoundland","Asia/Aqtobe|Asia/Aqtau","Asia/Ashgabat|Asia/Ashkhabad","Asia/Baghdad|Asia/Aden","Asia/Baghdad|Asia/Bahrain","Asia/Baghdad|Asia/Kuwait","Asia/Baghdad|Asia/Qatar","Asia/Baghdad|Asia/Riyadh","Asia/Bangkok|Asia/Ho_Chi_Minh","Asia/Bangkok|Asia/Phnom_Penh","Asia/Bangkok|Asia/Saigon","Asia/Bangkok|Asia/Vientiane","Asia/Dhaka|Asia/Dacca","Asia/Dubai|Asia/Muscat","Asia/Hong_Kong|Hongkong","Asia/Jakarta|Asia/Pontianak","Asia/Jerusalem|Asia/Tel_Aviv","Asia/Jerusalem|Israel","Asia/Kathmandu|Asia/Katmandu","Asia/Kolkata|Asia/Calcutta","Asia/Kolkata|Asia/Colombo","Asia/Kuala_Lumpur|Asia/Kuching","Asia/Makassar|Asia/Ujung_Pandang","Asia/Seoul|ROK","Asia/Shanghai|Asia/Chongqing","Asia/Shanghai|Asia/Chungking","Asia/Shanghai|Asia/Harbin","Asia/Shanghai|Asia/Macao","Asia/Shanghai|Asia/Macau","Asia/Shanghai|Asia/Taipei","Asia/Shanghai|PRC","Asia/Shanghai|ROC","Asia/Singapore|Singapore","Asia/Tashkent|Asia/Samarkand","Asia/Tehran|Iran","Asia/Thimphu|Asia/Thimbu","Asia/Tokyo|Japan","Asia/Ulaanbaatar|Asia/Ulan_Bator","Asia/Urumqi|Asia/Kashgar","Australia/Adelaide|Australia/Broken_Hill","Australia/Adelaide|Australia/South","Australia/Adelaide|Australia/Yancowinna","Australia/Brisbane|Australia/Lindeman","Australia/Brisbane|Australia/Queensland","Australia/Darwin|Australia/North","Australia/Lord_Howe|Australia/LHI","Australia/Perth|Australia/West","Australia/Sydney|Australia/ACT","Australia/Sydney|Australia/Canberra","Australia/Sydney|Australia/Currie","Australia/Sydney|Australia/Hobart","Australia/Sydney|Australia/Melbourne","Australia/Sydney|Australia/NSW","Australia/Sydney|Australia/Tasmania","Australia/Sydney|Australia/Victoria","Etc/UCT|UCT","Etc/UTC|Etc/Universal","Etc/UTC|Etc/Zulu","Etc/UTC|UTC","Etc/UTC|Universal","Etc/UTC|Zulu","Europe/Astrakhan|Europe/Ulyanovsk","Europe/Athens|Asia/Nicosia","Europe/Athens|EET","Europe/Athens|Europe/Bucharest","Europe/Athens|Europe/Helsinki","Europe/Athens|Europe/Kiev","Europe/Athens|Europe/Mariehamn","Europe/Athens|Europe/Nicosia","Europe/Athens|Europe/Riga","Europe/Athens|Europe/Sofia","Europe/Athens|Europe/Tallinn","Europe/Athens|Europe/Uzhgorod","Europe/Athens|Europe/Vilnius","Europe/Athens|Europe/Zaporozhye","Europe/Chisinau|Europe/Tiraspol","Europe/Dublin|Eire","Europe/Istanbul|Asia/Istanbul","Europe/Istanbul|Turkey","Europe/Lisbon|Atlantic/Canary","Europe/Lisbon|Atlantic/Faeroe","Europe/Lisbon|Atlantic/Faroe","Europe/Lisbon|Atlantic/Madeira","Europe/Lisbon|Portugal","Europe/Lisbon|WET","Europe/London|Europe/Belfast","Europe/London|Europe/Guernsey","Europe/London|Europe/Isle_of_Man","Europe/London|Europe/Jersey","Europe/London|GB","Europe/London|GB-Eire","Europe/Moscow|Europe/Volgograd","Europe/Moscow|W-SU","Europe/Paris|Africa/Ceuta","Europe/Paris|Arctic/Longyearbyen","Europe/Paris|Atlantic/Jan_Mayen","Europe/Paris|CET","Europe/Paris|Europe/Amsterdam","Europe/Paris|Europe/Andorra","Europe/Paris|Europe/Belgrade","Europe/Paris|Europe/Berlin","Europe/Paris|Europe/Bratislava","Europe/Paris|Europe/Brussels","Europe/Paris|Europe/Budapest","Europe/Paris|Europe/Busingen","Europe/Paris|Europe/Copenhagen","Europe/Paris|Europe/Gibraltar","Europe/Paris|Europe/Ljubljana","Europe/Paris|Europe/Luxembourg","Europe/Paris|Europe/Madrid","Europe/Paris|Europe/Malta","Europe/Paris|Europe/Monaco","Europe/Paris|Europe/Oslo","Europe/Paris|Europe/Podgorica","Europe/Paris|Europe/Prague","Europe/Paris|Europe/Rome","Europe/Paris|Europe/San_Marino","Europe/Paris|Europe/Sarajevo","Europe/Paris|Europe/Skopje","Europe/Paris|Europe/Stockholm","Europe/Paris|Europe/Tirane","Europe/Paris|Europe/Vaduz","Europe/Paris|Europe/Vatican","Europe/Paris|Europe/Vienna","Europe/Paris|Europe/Warsaw","Europe/Paris|Europe/Zagreb","Europe/Paris|Europe/Zurich","Europe/Paris|Poland","Pacific/Auckland|Antarctica/McMurdo","Pacific/Auckland|Antarctica/South_Pole","Pacific/Auckland|NZ","Pacific/Chatham|NZ-CHAT","Pacific/Chuuk|Pacific/Truk","Pacific/Chuuk|Pacific/Yap","Pacific/Easter|Chile/EasterIsland","Pacific/Guam|Pacific/Saipan","Pacific/Honolulu|HST","Pacific/Honolulu|Pacific/Johnston","Pacific/Honolulu|US/Hawaii","Pacific/Majuro|Kwajalein","Pacific/Majuro|Pacific/Kwajalein","Pacific/Pago_Pago|Pacific/Midway","Pacific/Pago_Pago|Pacific/Samoa","Pacific/Pago_Pago|US/Samoa","Pacific/Pohnpei|Pacific/Ponape"]
}),a});
P.top_bar = {
  changeUrl: false,  // if topbar should change URL of the site; only for dashboard
  nid: "",
  user: {},
  template: {},
  globalNotifications: 0,
  isDashboard: false,
  showingInactive: false,
  manageView: false,
  onWhatPage: false,
  careersNotifications: [],
  jobStatusClicked: false,
  waitListLoadingInfo: {loading: false, loaded: false, which_modal: null},
  
  // Note: there are some other constants related to the survey module located in 
  // company_survey.js
  // constants related to the select company survey modal:
  SELECT_COMPANY_MODAL_CONSTANTS : {
    // the message indicating whether this user has seen this year's select company modal or not:
    SEEN_MESSAGE_SELECT_MODAL_THIS_YEAR: "select_company_2019",
    // events logged to vertica:
    EVENT_SHOW_SELECT_MODAL : 'show_select_company_modal',
    EVENT_DISMISS_SELECT_MODAL : 'dismiss_select_company_modal',
    EVENT_DONE_SELECT_MODAL : 'done_select_company_modal'
  },

  // toggleModal: function() {
  //   $('.modal_background').toggle();
  // },
  
  showWaitlistModal: function() {
    $('#waitlist_modal_with_image').show();
  },

  showWaitlistModal2: function() {
    $('#waitlist_modal_without_image').show();
  },
  
  clickJobStatus: function() {
    P.top_bar.jobStatusClicked = true;
    $('#job_status_timer').hide();
    PA.call_pj("generic.event_to_requests", {event: "careers.clicked_job_dropdown"}, 1);
  },
  companies: ['21 Inc', '2U, Inc.', '3M', '42Floors', '451 Research', '500px', '50onRed', '6fusion', '6Wunderkinder', 'A.T. Kearney', 'A3 Communications', 'A9', 'Abalta Technologies', 'ABB Group', 'Abbott', 'About.com', 'Academia.edu', 'Accel Partners', 'Accenture', 'Accompani', 'Achieve Internet', 'Acquia', 'Acronis', 'Actiance', 'Actifio', 'Activate', 'Activehours', 'Acuity', 'Acumen', 'Acxiom Corporation', 'Adaptive Insights', 'Adaptly', 'ADATAO, Inc.', 'Addepar', 'Adecco Group', 'Adobe', 'AdParlor', 'Adroll', 'Adyen', 'Aetna', 'Affirm', 'Affirmed Networks', 'Aflac', 'Agilent Technologies', 'AgilOne', 'Airbnb', 'Airhop Communications', 'Airtime', 'AirVM', 'Airware', 'AirWatch', 'Akamai', 'Akuna Capital', 'Alcoa', 'AllianceBernstein', 'Allianz', 'Allstate', 'Allston Trading', 'Altschool', 'Amazon', 'Amazon', 'AMD', 'American Express', 'American Megatrends, Inc', 'American Specialty Health', 'AMI', 'Amplitude Analytics', 'Analytica', 'Anaplan', 'Andreessen Horrowitz', 'Anheuser-Busch InBev', 'Anki', 'ANSYS', 'Anzalone Liszt Grove Research', 'Aon Corporation', 'Aon Risk Solutions', 'Apigee', 'App Annie', 'AppDynamics', 'AppFolio', 'Appirio', 'Applause', 'Apple', 'Applied Predictive Technologies', 'Applovin', 'AppNexus', 'Apportable', 'AppSense', 'Apptio', 'Aptare', 'APX Labs', 'Arcadia Data, Inc.', 'Archer Daniels Midland', 'Artsy', 'Aruba Networks', 'ASK Consulting', 'AT&T', 'athenahealth', 'Atos', 'AudaExplore', 'August', 'Autodesk', 'AutoGrid Systems', 'Automattic', 'Avande Inc.', 'Avant Credit', 'Avatar Securities', 'Avegant', 'Aviso', 'Avnet Technology Solutions', 'Avvo', 'Awake Networks', 'Ayasdi', 'Azure Capital Partners', 'Backplane', 'Bae Systems', 'Bank of America Corp.', 'Bank of America Merrill Lynch', 'Bank of Nova Scotia', 'Barclays', 'Bazaarvoice', 'BDNA Corporation', 'Beats Electronics', 'Beibei', 'Bentley Systems', 'Berkshire Hathaway', 'Bessemer Venture Partners', 'Best Buy', 'Betable', 'Better Finance', 'BetterCloud', 'Betterment', 'Bidgely', 'Big Fish Games', 'Biovia', 'Birst', 'BitGo', 'BitPay', 'BlaBlaCar', 'Blackbaud', 'Blend Labs', 'Bloom Energy', 'BloomReach', 'Blue Apron', 'Blue Jeans Network', 'BlueData', 'Bluefin Trading', 'BlueVine', 'BMW', 'BNP Paribas', 'Boeing', 'Booyah', 'Booz Allen Hamilton', 'Bop.FM', 'Bose', 'Boston Consulting Group', 'Boundary', 'Boundless Learning', 'Box', 'Boxed', 'BP', 'Braintree', 'Brammo', 'Bread', 'Bridgepoint Education', 'Bridgewater', 'Bridgewell Resources', 'BrightEdge', 'Brillio', 'Broadcom', 'Brocade', 'Bromium', 'Brown Bag Marketing', 'Bugcrowd', 'Bulldog Solutions', 'Buzzfeed', 'CA Technologies', 'Cadence', 'CallidusCloud', 'Cambrian Innovation', 'Campaign Monitor', 'Canon', 'Canonical', 'Capital One', 'Capriza', 'Captricity', 'Carbon3D', 'CarbonLighthouse', 'Cardinal Health', 'Carpathia Hosting', 'Carrefour', 'Caterpillar', 'Centrify', 'Centro', 'Cerner', 'CGI', 'Charles Schwab', 'Checkr', 'Chevron', 'China National Petroleum', 'China North Industries Group', 'China Telecommunications', 'CipherCloud', 'Cirba', 'Cisco Systems', 'Citigroup', 'Citrix', 'Clarabridge', 'Clarizen', 'ClassPass', 'Classy', 'ClearSlide', 'CliQr', 'Cloudability', 'Cloudera', 'CloudFlare', 'Cloudgenix', 'CloudPhysics', 'ClusterHQ', 'Cobham', 'Coca-Cola', 'Code42', 'Codecademy', 'Cognizant Technology', 'Coho Data', 'Coinbase', 'CollabNet', 'Comcast', 'CommonBond', 'Commonwealth Bank of Australia', 'CommVault', 'Compuware', 'Concur Technologies', 'Confide', 'ConocoPhillips', 'Constant Contact', 'Contently', 'Continental', 'CoreOS', 'Cotap', 'Couchbase', 'Counsyl', 'Coupa', 'Coupang', 'Coupons.com', 'Coursera', 'CoverHound', 'Covestor', 'Cratejoy', 'Credit Karma', 'Credit Suisse Group', 'Crittercism', 'CrowdFlower', 'CrowdStrike', 'CrowdSurge', 'CruiseCritic', 'Crunchyroll', 'Cummins Inc.', 'Cumulus Networks', 'CustomMade', 'CVRx', 'CVS Caremark', 'Cyanogen', 'Cybereason', 'Cybersource (Owned by Visa)', 'D.E. Shaw', 'D2L', 'Dassault Systemes', 'Data Dynamics', 'Data-Gravity', 'Databricks', 'DataCore Software', 'DataFox', 'DataGravity', 'Datameer', 'DataRobot', 'Dato', 'Datto', 'DC Devices', 'DDN Storage', 'Declara', 'Deem', 'Deliveroo', 'Delivery Hero', 'Dell', 'Deloitte', 'Delphix', 'Delta Air Lines', 'Dermira', 'Deutsche Bank', "Dick's Sporting Goods", 'DigitalOcean', 'DIRECTV', 'Discover (Financial Services)', 'Disqus', 'DivX', 'Docker', 'Docusign', 'DogVacay', 'Dolby Laboratories', 'Domo', 'DoorDash', 'Dow Chemical', 'Dow Jones', 'Draft Kings', 'Drawbridge', 'drchrono', 'Dropbox', 'Dropcam', 'Druva', 'Duetto', 'Duo Security', 'Duolingo', 'DuPont', 'Dynamic Signal', 'E la Carte, Inc', 'Earnest', 'EAT Club', 'eBay/Paypal', 'Ebix', 'Edgecase', 'Edmodo', 'Elastic', 'ElasticBox', 'Electric Cloud', 'Electronic Arts', 'Elemental Technologies', 'EMC', 'Emdeon', 'Engility', 'Enjoy', 'Enjoy Inc', 'Equifax', 'Equifax Personal Solutions', 'Equinix', 'Ericsson', 'Ernst & Young', 'ESPN', 'Esri', 'Eta Devices', 'Eventbrite', 'Evernote', 'EverTrue', 'Evntlive', 'Expensify', 'Extreme Networks', 'Exxon Mobil', 'Eyefluence', 'F5 Networks', 'Fab', 'Facebook', 'Factual', 'Famo.us', 'Fanatics', 'Fannie Mae', 'Farfetch', 'FedEx Express', 'FICO', 'Fidelity Investments', 'FiftyThree', 'Fiksu', 'Financial Engines', 'Fireeye', 'FiscalNote', 'Fisker Automotive', 'Fitbit', 'FitBOLD', 'Fitch Ratings', 'Fiverr', 'flaregames', 'Flatiron Health', 'Flipboard', 'Flipkart', 'Ford Motor', 'ForgeRock', 'FormLabs', 'Formswift', 'Fortinet', 'Forward Networks', 'FoundationDB', 'Foursquare', 'Freddie Mac', 'FreeWheel', 'Freshdesk', 'Fujifilm Holdings', 'FullScreen, Inc.', 'Fundbox', 'Funding Circle', 'Fuze', 'Gainsight', 'Gartner', 'Gazprom', 'Genentech', 'General Dynamics', 'General Electric', 'General Motors Corporation', 'Genesys', 'Gengo', 'Genius', 'Getaround', 'Gigamon', 'Gigya', 'Gilt Groupe', 'Glassdoor', 'GlaxoSmithKline', 'Glencore International', 'Global Media (Sample)', 'Glow', 'Glue Networks', 'GMT Capital', 'Go Pro', 'GoDaddy', 'Goldman Sachs', 'Good Technology', 'GoodData', 'Google', 'GoPro', 'Grabcad', 'Grabtaxi', 'Greenroad', 'Greylock', 'Groupon', 'Grovo', 'Guardant Health', 'Guidespark', 'Hailo', 'Halliburton', 'Hallmark eCards', 'Hampton Creek', 'Handy', 'Hanhua Financial', 'HarperCollins', 'hCentive', 'HealthTap', 'Hearsay Social', 'HelloFresh', 'Hewlett-Packard', 'HiBot', 'Highfive', 'Highwinds', 'Hilcorp', 'Hipmunk', 'Hirenetics', 'HireVue', 'Hitachi Data Systems', 'Hoffmann-La Roche', 'Hola', 'Home Depot', 'Home24', 'Honda Motor', 'Honest', 'Honest Co.', 'Honeywell International', 'Hootsuite', 'Hortonworks', 'HotelTonight', 'House Trip', 'Houzz', 'HSBC Holdings', 'Huawei Investment & Holding', 'Hubspot', 'Hudl', 'Human Longevity Inc', 'Humana', 'Humble Bundle', 'Hyland', 'Hyundai Motor', 'IAC', 'IBM', 'iControl Networks', 'iCracked', 'Identiv', 'if(we)', 'IFTTT', 'Illumina', 'Illumio', 'ImageShack', 'Imgur', 'Indiegogo', 'Industrial & Commercial Bank of China', 'Industrial Toys', 'Infer, Inc.', 'Infinidat', 'Infinio', 'Inflection', 'Infoblox', 'Informatica', 'Infusionsoft', 'ING Group', 'Inkling', 'InMobi', 'InsideSales.com', 'InsightSquared', 'Instacart', 'Instart Logic', 'Instructure', 'Intarcia Therapeutics', 'Intel', 'Intentional Software', 'Interactions Corporation', 'Interactive Intelligence', 'Interana', 'International Airlines Group', 'InterSystems Corp.', 'Intuit', 'InVision', 'Invodo', 'Ionic Security', 'iRobot', 'IronSource', 'iSight Partners', 'ITC Holdings Corp.', 'J.P. Morgan Chase & Co.', 'Jane Street', 'Japan Post Holdings', 'Jasper Technologies', 'JauntVR', 'Jawbone', 'JD.com', 'Jet Propulsion Laboratory', 'Jibo', 'Jinfonet Software', 'Jive Software', 'Johnson & Johnson', 'Johnson Controls', 'Julep', 'Juniper Networks', 'JustFab', 'Jut', 'JX Holdings', 'Kabam', 'Kaggle', 'Kahuna', 'Kasisto, Inc', 'Kaspersky', 'Kaspersky Lab', 'kCura', 'Kensho', 'Kenshoo', 'Khan Academy', 'Kia Motors', 'King Street Capital Management, L.P.', 'Kiwi', 'Knewton', 'Komatsu', 'Kony', 'Koudai Shopping', 'KPMG', 'Kraft Foods', 'Kroger', 'Kronos', 'Krux', 'Kuaidi Dache', "L'Oreal", 'Lab126 (Amazon)', 'LanzaTech', 'Laserfiche', 'LaShou', 'Laurel & Wolf', 'LeadQual', 'Leap Motion', 'LearnVest', 'Legendary Entertainment', 'Lending Club', 'Lenovo', 'Lenovo Group', 'LG Electronics', 'LGS Innovations', 'Liberty Mutual', 'Liberty Mutual Insurance Group', 'Life360', 'Lifesize (division of Logitech)', 'LightCyber', 'Lightspeed POS', 'Lightspeed Venture Partners', 'Limelight Networks', 'Lithium Technologies', 'Livefyre', 'LiveRamp', 'Location Labs', 'Lockheed Martin', 'Looker', 'Lookout', "Lowe's", 'Lufthansa Group', 'Lukoil', 'Lyft', 'Lynda.com', 'Lytro', 'MACOM', "Macy's", 'MagCanica', 'Magic Leap', 'Maginatics, Inc', 'Main Street Hub', 'MangoHealth', 'MapR Technologies', 'Marin Software', 'MarkLogic', 'MathWorks', 'Mattermark', 'Maxthon', 'Maxwell Health', "McDonald's", 'McKesson', 'McKinsey & Company', 'MCSG Technologies', 'Medallia', 'Mellanox Technologies', 'MemSQL', 'Mentor Graphics', 'Merck', 'Mesosphere', 'Metamarkets', 'Metanautix', 'MetLife', 'MetraTech', 'Metromile', 'Michelin', 'Microsoft', 'Mimosa', 'Mindbody', 'Minted', 'Mirantis', 'Misfit Wearables', 'Mission Motors', 'Mitsubishi', 'Mixpanel', 'Mobileye', 'Mocana Corporation', 'Moderna', 'Modria', 'MongoDB', 'Monticello Consulting Group', 'Moog', 'Morgan Stanley', 'MSCI Inc.', 'Munchery', 'Music Messenger', 'MyFitnessPal', 'Myntra', 'Nanotronics Imaging', 'Nantero', 'Narrative', 'NASA', 'National Instruments', 'NerdWallet', 'Nest', 'Nest Labs', 'NetApp', 'NetBurner', 'Netezza', 'Netflix', 'Netskope', 'Neusoft', 'Neustar, Inc.', 'New Relic', 'New York Life Insurance', 'NewLight Technologies', 'News Corp.', 'Nexius', 'Nextdoor', 'NextNav', 'Niara, Inc.', 'Nielsen', 'Nimble Storage', 'Nissan Motor', 'NodePrime', 'Nokia', 'NoRedInk', 'Northrop Grumman', 'Northwestern Mutual', 'Novartis', 'Novetta', 'NovoEd', 'Nuage Networks', 'Nutanix', 'Nutmeg', 'Nutrimatix', 'Nvidia', 'oDesk', 'Okta', 'Omada Health', 'Omaze', 'OnDeck', 'OneCloud Software', 'OneLogin', 'Open English', 'OpenDNS', 'OpenX', 'Opower', 'Optaros', 'Optimizely', 'Oracle', 'Orbital ATK', 'Orbital Insight', 'Orbitz Worldwide', 'Originate', 'Oscar', 'Oscar Health Insurance', 'Osmo', 'Oyster', 'PagerDuty', 'Palantir', 'Pantheon', 'Panzura', 'Path', 'Patreon', 'Patterson + Sheridan, LLP', 'PayScale, Inc.', 'Pebble', "People's Insurance Co. of China", 'PepsiCo', 'Percolate', 'PernixData', 'Pfizer', 'Philip Morris International', 'Piazza', 'PillPack', 'PIMCO', 'Pindrop Security', 'Ping Identity Corporation', 'Pinterest', 'Piston Cloud Computing, Inc.', 'Pixar', 'Pixar Animation Studios', 'Plain Vanilla Games', 'Planet Labs', 'Plex', 'Plex Systems', 'PLUMgrid Inc.', 'Pluralsight', 'Pluribus Networks', 'Poachable', 'Pocket', 'Pocket Gems', 'Polyvore', 'Pond5', 'POPSUGAR', 'Postmates', 'Prezi', 'Primary Data', 'PrimeRevenue', 'Privalia', 'Procter & Gamble', 'Propser', 'Prosper', 'Prosper Marketplace', 'Proterra', 'Proteus Digital Health', 'Prudential Financial', 'PubMatic', 'PunchTab', 'Puppet Labs, Inc.', 'Pure Storage', 'QLogic Corporation', 'Qualcomm', 'Qualtrics', 'Quantcast', 'Quanttus', 'Qubit', 'Qubole', 'Quickr', 'Quid', 'Quirky', 'Quizlet', 'Quora', 'Rackspace', 'Raise Marketplace', 'Rally.org', 'Randstad Holding', 'ravello systems', 'Raytheon', 'Razer', 'Razorfish', 'ReachLocal', 'Realm', 'Recurly', 'Red Hat', 'Redfin', 'RelateIQ', 'Relcy', 'Reliance Industries', 'Remind', 'Reonomy', 'RES Software', 'Rethink Robotics', 'RIA IN A BOX', 'Rinse', 'Riot Games', 'Rite Aid', 'Riverbed Technology', 'Robert Bosch', 'Robinhood', 'Roche Group', 'Rocket Fuel', 'RocketLawyer', 'Rosetta', 'Royal Bank of Canada', 'Royal Bank of Scotland Group', 'Royal Dutch Shell', 'Rumble', 'Safeway', 'SAIC', 'Salesforce.com', 'SaltStack', 'Samsung Electronics', 'SAP', 'SAS Institute', 'Sazze Partners', 'Scaled Inference', 'Scanadu', 'Schlumberger', 'Schneider Electric', 'ScienceLogic', 'Scopely', 'Scorebeyond', 'Scribd', 'Scripted', 'Seagate Technology', 'Sears Holdings', 'SeatGeek', 'Secret', 'SecureAuth Corporation', 'Sequoia', 'ServiceTitan', 'Shake Inc.', 'Shakelaw', 'Shazam', 'Shopify', 'shopkick', 'Shopular', 'Shots Mobile, Inc.', 'Shuddle', 'Shutterfly', 'Shyp', 'Siemens', 'Sift Science', 'SignalFx', 'Signifyd', 'Silver Spring Networks', 'Simplivity', 'SK Holdings', 'Skyhigh Networks', 'Skytap', 'Slack', 'Slice', 'SmartDrive Systems', 'Smartsheet', 'SmartThings', 'Smule', 'Snapchat', 'Snapdeal', 'SnapLogic', 'Snowflake Computing', 'Social Finance', 'SocialRadar', 'Socrata', 'Sodexo', 'Solar Turbines', 'SolidFire, Inc.', 'Songkick', 'Sonos', 'Sony', 'Sophos', 'Sosh', 'Sourcefire', 'SpaceX', 'SpareFoot', 'Sparta Systems, Inc.', 'SpiceWorks', 'Spire', 'Splice Machine', 'Splunk', 'SpoonRocket', 'Sportsbet', 'Spotify', 'Sprig', 'Sprinklr', 'Sprint Nextel', 'Square', 'Stack Exchange', 'StackCommerce', 'Staples', 'State Bank of India', 'State Farm Insurance Cos.', 'State Grid', 'Stion', 'Stormpath', 'Strava', 'Stride Labs', 'Stripe', 'Strongview', 'Stryker', 'StyleSeat', 'Sumitomo Mitsui Financial Group', 'Sumo Logic', 'Sun Life Financial', 'Sunrun', 'SurveyMonkey', 'Susquehanna International Group', 'SwiftKey', 'Swiftype', 'Switch Communications', 'Symantec', 'Synack', 'Synchronoss Technologies', 'Synlogic', 'Synopsys', 'T&D Holdings', 'Tableau Software', 'Tactile', 'TalentWise', 'Tango', 'Tanium', 'Tapingo', 'Tarana', 'Tarana Wireless', 'Target', 'Taser', 'TASER International', 'TaskRabbit', 'Tata Motors', 'Tata Steel', 'Taulia', 'TechTarget', 'Techtronic Industries NA (TTI Group)', 'Teespring', 'Tegile Systems', 'Telerik', 'TellApart', 'Telstra', 'Tenable Network Security', 'Teradata', 'Teradici', 'Tesla', 'The Climate Corporation', 'The Sourcing Institute', 'Theatro', 'Theranos', 'ThinAir', 'THINK Surgical', 'ThoughtSpot', 'ThoughtWorks', 'ThreatStream', 'Throwdown Labs', 'Thumbtack', 'ThyssenKrupp', 'TIBCO', 'TigerText', 'Tilt', 'Time Warner', 'Timeful', 'Tintri', 'Tintri Storage', 'Tokyo Electric Power', 'Tokyo Gas', 'Tongal', 'TopLine Game Labs', 'Toronto-Dominion Bank', 'Tortuga Logic', 'Toshiba', 'Tower Research Capital', 'Toyota Motor', 'Toytalk', 'TPG Capital, L.P.', 'TransferWise', 'Trendy Group', 'Trexquant Investment LP', 'TripAdvisor', 'Troo.ly', 'True North Therapeutics', 'TuneIn', 'Twilio', 'Twitter', 'U.S. Navy', 'U.S. Postal Service', 'uBeam', 'Uber', 'UBS', 'Udacity', 'Udemy', 'Ultimate Software', 'Unilever', 'Union Bank', 'United Continental Holdings', 'United Parcel Service', 'United Technologies', 'UnitedHealth Group', 'Unity Technologies', 'Urban Teacher Center', 'US Navy', 'Usermind', 'UserTesting', 'Valero Energy', 'VCE', 'Veeam Software', 'Veeva Systems', 'VeloCloud Networks, Inc.', 'VeriSign', 'Verizon', 'Verizon Communications', 'Verne Global', 'Vessel', 'ViaSat', 'Vicarious Visions', 'View Inc.', 'VigLink', 'Virool', 'Visual Supply Co', 'VMware', 'Vodafone Group', 'Volkswagen', 'Volvo', 'Vormetric', 'Vox Media', 'Voxy', 'Vungle', 'Wal-Mart Stores', 'Walgreen', 'Walker & Company Brands, Inc', 'Walt Disney', 'Wanelo', 'Warby Parker', 'WatchDox', 'Wattpad', 'Wayfair', 'Wealthfront', 'Web.com', 'Weebly', 'Wells Fargo', 'Welltok', 'Westpac Banking', 'WeWork', 'Wikia', 'Wikihow', 'WillowTree', 'Wilocity', 'Wix', 'Wizeline', 'Wonder Workshop', 'Workday', 'WorldRemit', 'Xamarin', 'Xapo', 'Xero', 'Xerox', 'Xiaomi', 'Yahoo', 'Yammer', 'Yardi', 'Yello Mobile', 'Yelp', 'Yext', 'YPlan', 'Zaarly', 'Zanbato', 'Zappos', 'Zazzle', 'Zenefits', 'ZenPayroll', 'Zerto', 'Zillow', 'Zimride', 'Zomato', 'zulily', 'Zynga', 'Fuze', 'Epic Systems'],
  majors:['Accounting','Actuarial Science','Advertising','Aeronautical Engineering','Aerospace Engineering','Agrobusiness','Animal Science','Anthropology','Applied Computer Science','Applied Mathematics','Applied Statistics','Architecture','Asian Studies','Astronomy','Astrophysics','Atmospheric Science','Audio Production and Design','Automation and Robotics','Bio-behavioral Health','Biochemistry','Bioengineering','Biological Sciences','Biology','Biomedical Engineering','Biotechnology','Business','Business Administration','Chemical Engineering','Chemistry','Civil Engineering','Cognitive Science','Commerce','Communication','Computer Engineering','Computer Information Systems','Computer Science','Design Computing','Digital Media','Early Childhood Education','Ecology','Economics','Electrical and Computer Engineering','Electrical Engineering','Electronics','Engineering','English','Entrepreneurship','Environmental Science','Exercise Science','Film Studies','Financial Economics','Food Science','Health and Societies','History','Hotel Administration','Human resources management','Industrial Engineering','Information Systems','Internet Technology Management','Journalism','Linguistics','Management Engineering','Marketing','Masters in Business Administration','Materials Science','Mathematics','Mechanical Engineering','Microbiology','Molecular and Cell Biology','Nano-engineering','Natural Resource Management','Network and Security','Neurobiology','Neuroscience','Nursing','Nutrition','Operations Research','Pharmacy','Philosophy','Physics','Political Science','Psychology','Public Health','Public Policy','Sociology','Software Engineering','Statistics','Undecided','Visual Art','Web Design','Zoology'],
  roles: ['Aerospace Engineer', 'Application Engineer', 'Biological Engineer', 'Biomedical Engineer', 'Chemical Engineer', 'Civil Engineer', 'Electrical Engineer', 'Environmental Engineer', 'Field Service Engineer', 'Geological Engineer', 'Hardware Engineer', 'Industrial Engineer', 'Materials Engineer', 'Mechanical Engineer', 'Nuclear Engineer', 'Petroleum Engineer', 'Quality Engineer', 'Sales Engineer', 'Security Engineer', 'Software Engineer', 'Stationary Engineer', 'Systems Engineer', 'Telecommunications Engineer', 'Database Engineer', 'Backend Engineer', 'Frontend Engineer', 'Full Stack Engineer', 'Data Scientist', 'Mobile Engineer', 'Embedded Systems Engineer', 'Distributed Systems Engineer', 'Networks Engineer', 'Firmware Engineer', 'Designer', 'Product Manager', 'Ux/Ui Designer', 'Marketing Associate', 'Communications Associate', 'Program Manager', 'Project Manager', 'Graphic Designer', 'Analyst', 'Laboratory Technician', 'Business System Analyst', 'Data Analyst', 'Clinical Researcher', 'Clinical Pharmacy Assistant', 'Computing Consultant', 'Environmental Specialist', 'Insurance Representative', 'Laboratory Assistant', 'Medical Services Assistant', 'Pharmaceutical Assistant', 'Pharmaceutical Technician', 'Research Assistant', 'Research Technician', 'Researcher', 'Statistician', 'Systems Analyst', 'Technical Writer', 'Consultant', 'Business Analyst', 'Business Consultant', 'Financial Consultant', 'Healthcare Consultant', 'Management Consultant', 'Political Strategist', 'Recruiter', 'Sales Consultant', 'Strategy Consultant', 'Tax Advisor', 'Financial Analyst', 'Accountant', 'Auditor', 'Investment Banking Analyst', 'Account Executive', 'Account Manager', 'Account Representative', 'Sales Representative', 'Brand Ambassador', 'Business Development Representative', 'Customer Care Representative', 'Brand Manager', 'Copywriter', 'Creative Assistant', 'Digital Marketer', 'Market Research Analyst', 'Marketing Analyst', 'Media Relations Coordinator', 'Public Relations Coordinator', 'Social Media Marketing Manager', 'Operations Associate', 'Business Manager', 'Administrative Assistant', 'Executive Assistant', 'Case Manager', 'Contract Analyst', 'Court Messenger', 'Legal Analyst', 'Legal Secretary', 'Paralegal'],
  places: ['Palo Alto, CA', 'Mountain View, CA', 'Sunnyvale, CA', 'Cambridge, MA', 'Alabama', 'Birmingham metropolitan area, Alabama', 'Alaska', 'Anchorage metropolitan area, Alaska', 'Arizona', 'Phoenix metropolitan area, Arizona', 'Tucson metropolitan area, Arizona', 'Arkansas', 'Little Rock metropolitan area, Arkanasa', 'California', 'Los Angeles metropolitan area, California', 'San Francisco Bay metropolitan area, California', 'San Diego metropolitan area, California', 'Colorado', 'Denver metropolitan area, Colorado', 'Connecticut', 'Hartford metropolitan area, Connecticut', 'Bridgeport metropolitan area, Connecticut', 'Delaware', 'Dover metropolitan area, Delaware', 'Florida', 'Miami metropolitan area, Florida', 'Orlando metropolitan area, Florida', 'Tampa metropolitan area, Florida', 'Jacksonville metropolitan area, Florida', 'Georgia', 'Atlanta metropolitan area, Georgia', 'Hawaii', 'Honolulu metropolitan area, Hawaii', 'Idaho', 'Boise metropolitan area, Idaho', 'Illinois', 'Chicago metropolitan area, Illinois', 'Indiana', 'Indianapolis metropolitan area, Indiana', 'Iowa', 'Des Moines metropolitan area, Iowa', 'Kansas', 'Wichita metropolitan area, Kansas', 'Kentucky', 'Louisville metropolitan area, Kentucky', 'Louisiana', 'New Orleans metropolitan area, Louisiana', 'Maine ', 'Portland metropolitan area, Maine', 'Maryland ', 'Baltimore metropolitan area, Maryland', 'Massachusetts ', 'Boston metropolitan area, Massachusetts', 'Michigan ', 'Detroit metropolitan area, Michigan', 'Minnesota', 'Minneapolis metropolitan area, Minnesota', 'Mississippi ', 'Jackson metropolitan area, Mississippi', 'Missouri ', 'St. Louis metropolitan area, Missouri', 'Kansas City metropolitan area, Missouri', 'Montana', 'Billings metropolitan area, Montana', 'Nebraska ', 'Omaha metropolitan area, Nebraska', 'Nevada ', 'Las Vegas metropolitan area, Nevada', 'New Hampshire ', 'Manchester metropolitan area, New Hampshire', 'New Jersey ', 'Trenton metropolitan area, New Jersey', 'New Mexico ', 'Albuquerque metropolitan area, New Mexico', 'New York ', 'New York metropolitan area, New York', 'North Carolina ', 'Charlotte metropolitan area, North Carolina', 'North Dakota ', 'Fargo metropolitan area, North Dakota', 'Ohio ', 'Cleveland metropolitan area, Ohio', 'Columbus metropolitan area, Ohio', 'Cincinnati metropolitan area, Ohio', 'Oklahoma ', 'Oklahoma City metropolitan area, Oklahoma', 'Oregon ', 'Portland metropolitan area, Oregon', 'Pennsylvania', 'Philadelphia metropolitan area, Pennsylvania', 'Pittsburgh metropolitan area, Pennsylvania', 'Rhode Island ', 'Providence metropolitan area, Rhode Island', 'South Carolina ', 'Greenville metropolitan area, South Carolina', 'Columbia metropolitan area, South Carolina', 'South Dakota ', 'Sioux Falls metropolitan area, South Dakota', 'Tennessee ', 'Nashville metropolitan area, Tennessee', 'Memphis metropolitan area, Tennessee', 'Texas ', 'Dallas metropolitan area, Texas', 'Houston metropolitan area, Texas', 'San Antonio metropolitan area, Texas', 'Austin metropolitan area, Texas', 'Utah ', 'Salt Lake City metropolitan area, Utah', 'Vermont ', 'Burlington metropolitan area, Vermont', 'Virginia ', 'Virginia Beach metropolitan area, Virginia', 'Richmond metropolitan area, Virginia', 'Washington', 'Seattle metropolitan area, Washington', 'Washington DC metropolitan area', 'West Virginia ', 'Huntingon metropolitan area, West Virginia', 'Wisconsin ', 'Milwaukee metropolitan area, Wisconsin', 'Madison metropolitan area, Wisconsin', 'Wyoming', 'Cheyenne metropolitan area, Wyoming', 'Slovenia', 'Kazakhstan', 'Algeria', 'Hungary', 'United States', 'Canada', 'India', 'New Zealand ', 'United Kingdom', 'Turkey', 'Iran', 'Australia', 'Pakistan', 'Italy', 'Brazil', 'South Africa', 'China', 'Thailand ', 'Egypt', 'Bangladesh', 'Israel', 'Cape Verde', 'France', 'Hong Kong', 'Saudi Arabia', 'Puerto Rico', 'Mexico', 'Germany', 'Sweden', 'Qatar', 'South Korea', 'Iceland', 'Philippines', 'Colombia', 'Norway', 'Republic of Indonesia', 'Netherlands', 'Libya', 'Vietnam', 'Finland', 'Japan', 'Spain', 'Switzerland', 'Kenya', 'Denmark', 'Malaysia', 'Sri Lanka', 'Jordan', 'Albania', 'Russia', 'Ireland', 'Peru', 'Portugal', 'Greece', 'Indonesia', 'Poland', 'Venezuela', 'Georgia', 'Nigeria', 'Romania', 'Taiwan', 'United Arab Emirates', 'Morocco', 'Argentina', 'Lebanon', 'Jamaica', 'Belgium', 'Singapore', 'Chile', 'Austria', 'Nepal', 'Bahrain'],
  schools: ["Carnegie Mellon University","Massachusetts Institute of Technology (MIT)","Stanford University","University of California, Berkeley (UC Berkeley)","University of Illinois at Urbana-Champaign","Cornell University","University of Washington","Princeton University","California Institute of Technology (Caltech)","The University of Texas at Austin","Georgia Institute of Technology","University of Wisconsin, Madison","University of California, Los Angeles","University of Michigan","Columbia University in the City of New York","University of California, San Diego","University of Maryland","Harvard University","University of Waterloo","Harvey Mudd College","University of Oregon","Brown University","Purdue University","Rice University","University of Rochester","Yale University","Duke University","University of Massachusetts Amherst","University of North Carolina at Chapel Hill","Johns Hopkins University","New York University","Pennsylvania State University (Penn State)","University of California, Irvine","University of Minnesota","University of Virginia","Northwestern University","Rutgers University","University of California, Davis","University of California, Santa Barbara","University of Chicago","Dartmouth College","Stony Brook University","Texas A&M University","University of Arizona","University of Colorado at Boulder","Virginia Tech","Washington University in St Louis","Arizona State University","Boston University","North Carolina State University","University of Florida","Indiana University","Rensselaer Polytechnic Institute","University of Pennsylvania","University of Pittsburgh","Michigan State University","University of California, Riverside","University of California, Santa Cruz","Vanderbilt University","Northeastern University","University of Illinois at Chicago","University of North Carolina at Charlotte","Iowa State University","University of Iowa","University of Notre Dame","George Mason University","Oregon State University","Syracuse University","College of William and Mary","Colorado State University","Tufts University","University of Delaware","University of Maryland-Baltimore County","University of Nebraska - Lincoln","University of Southern California","University of Texas at Dallas","Washington State University","Brandeis University","Clemson University","Florida State University","George Washington University","University of Connecticut","University of Kansas","University of New Mexico","Auburn University","Brigham Young University","Drexel University","University of Central Florida","University of Georgia","University of Kentucky","University of Tennessee, Knoxville","Worcester Polytechnic Institute","Pomona College","Amherst College","Williams College","Bowdoin College","Washington and Lee University","Wellesley","Vassar College","Davidson College","Boston College","Colgate University","Wesleyan University","Middlebury College"],
  showResumeDropdown: function() {
    var d = new Date();
    if(!(d.getMonth() < 3 || (d.getMonth() == 3 && d.getDate() < 25) || 
        d.getMonth() > 4 || (d.getMonth() == 4 && d.getDate() > 15))) return; // skip cuz the top bar banner is already showing
    $('#upload_resume_dropdown').show(); 
    PA.call_pj("user.set_last_saw_resume_dropdown", {}, 1);
    PA.call_pj("generic.event_to_requests", {event: "careers.resume_dropdown.saw"}, 1);
    P.top_bar.user.config.resume_dropdown_last_seen = new Date();
  },
  clickUpdateFromResumeDropdown: function() {
    $('#upload_resume_dropdown').hide();    
    PA.call_pj("generic.event_to_requests", {event: "careers.resume_dropdown.update"}, 1);    
  },
  dismissResumeDropdown: function() {
    $('#upload_resume_dropdown').hide();    
    PA.call_pj("generic.event_to_requests", {event: "careers.resume_dropdown.dismiss"}, 1);    
  },
  showJobStatus: function() {
    if (P.top_bar.isClassmates) return;
    var d = new Date();
    if(!(d.getMonth() < 3 || (d.getMonth() == 3 && d.getDate() < 25) || 
        d.getMonth() > 4 || (d.getMonth() == 4 && d.getDate() > 15))) return; // skip cuz the top bar banner is already showing
    var job_yr = d.getUTCMonth() > 6 ? d.getUTCFullYear() + 1 : d.getUTCFullYear();
    $('#job_year').text(job_yr);
    $('#company').autoComplete({
      minChars: 2,
      source: function(term, suggest){
          term = term.toLowerCase();
          var choices = P.top_bar.companies;
          var matches = [];
          for (i=0; i<choices.length; i++)
            if (~choices[i].toLowerCase().indexOf(term) && matches.length < 20)
              matches.push(choices[i]);
          suggest(matches);
      }
    });

    $('#role').autoComplete({
        minChars: 2,
        source: function(term, suggest){
          term = term.toLowerCase();
          var choices = P.top_bar.roles;
          var matches = [];
          for (i=0; i<choices.length; i++)
            if (~choices[i].toLowerCase().indexOf(term) && matches.length < 20)
              matches.push(choices[i]);
          suggest(matches);
        }
    });

    $('#location').autoComplete({
        minChars: 2,
        source: function(term, suggest){
          term = term.toLowerCase();
          var choices = P.top_bar.places;
          var matches = [];
          for (i=0; i<choices.length; i++)
            if (~choices[i].toLowerCase().indexOf(term) && matches.length < 20)
              matches.push(choices[i]);
          suggest(matches);
        }
    });

    $('#job_status_dropdown').show(); 
    var elem = $('#job_status_timer');
    var counter = 20;
    var interval = setInterval(function() {
      if(!P.top_bar.jobStatusClicked) counter--;
      elem.text(counter)
      if (counter == 0) {
        $('#job_status_dropdown').hide();     
        clearInterval(interval);
      }
    }, 1000);
    PA.call_pj("user.set_last_saw_job_dropdown", {}, 1);
    PA.call_pj("generic.event_to_requests", {event: "careers.saw_job_dropdown"}, 1);
    P.top_bar.user.config.job_dropdowns_last_seen = new Date();
  },
  
  updateHeadedTo: function() {
    var d = new Date();
    var job_yr = d.getUTCMonth() > 6 ? d.getUTCFullYear() + 1 : d.getUTCFullYear();
    var type = "intern";
    if(P.top_bar.profile 
      && P.top_bar.profile.academics
      && P.top_bar.profile.academics.grad_year 
      && P.top_bar.profile.academics.grad_year == job_yr) type = "full";
    var paramsMap = {
      type: type,
      company: $('#company').val(),
      role: $('#role').val(),
      location: $('#location').val(),
      headed_to: true
    };
    if(type == "intern") {
      paramsMap.quarter = "Summer";
      paramsMap.year = job_yr;
    } else {
      paramsMap.start_month = 6;
      paramsMap.start_year = job_yr;
    }
    PA.call_pj("user_profile.add_work_experience", paramsMap, 1, function(data){console.log(data)});
    $('#job_details_dropdown').hide();    
    PA.call_pj("generic.event_to_requests", {event: "careers.job_dropdown_update_headed_to"}, 1);
  },
  
  hideJobDetails: function() {
    $('#job_details_dropdown').hide();
  },
  
  updateJobStatus: function() {
    var val = $('input:radio[name=job_status]:checked').val();
    var d = new Date();
    var job_yr = d.getUTCMonth() > 6 ? d.getUTCFullYear() + 1 : d.getUTCFullYear();
    var paramsMap = {
      seeking_full:{status: "Seeking Full Time for " + job_yr.toString(), status_what: "fulltime", status_when: job_yr.toString()},
      seeking_intern:{status: "Seeking Internship for " + job_yr.toString(), status_what: "internship", status_when: job_yr.toString()},
      accepted:{status: "Accepted Position for " + job_yr.toString(), status_what: "accepted_position", status_when: job_yr.toString()}
    };
    PA.call_pj("user_profile.update_profile", {set: paramsMap[val]}, 1, function(data){console.log(data)})
    $('#job_status_dropdown').hide();
    if(val == "accepted") $('#job_details_dropdown').show();
    PA.call_pj("generic.event_to_requests", {event: "careers.job_dropdown_update_status"}, 1);
  },
  
  confirmWaitlistModal: function() {
    if(P.top_bar.waitListLoadingInfo.which_modal == "image") {
      $('#image_first_view').hide();
      $('#no_image_dismiss').hide();
      $('#image_second_view').show();
    } else {
      $('#no_image_first_view').hide();
      $('#no_image_dismiss').hide();
      $('#no_image_second_view').show();      
    }
  },
  
  hideWaitlistModal: function() {
    $('.modal_background').hide();
  },
  
  sign_up_waitlist: function() {
    P.top_bar.user.config.waitlist_response = "yes";
    var modal_type = P.top_bar.waitListLoadingInfo.which_modal;
    P.top_bar.confirmWaitlistModal()
    if(P.top_bar.waitListLoadingInfo.which_modal == "image") {
      PA.call_pj("user.set_piazza_network_waitlist_response", {response : "yes", type : modal_type}, 1, function(data){})
    } else {
      var checkboxes = {activity: $('#activity_checkbox').is(":checked"), classmates: $('#classmates_checkbox').is(":checked")}
      PA.call_pj("user.set_piazza_network_waitlist_response", {response : "yes", type : modal_type, checkboxes : checkboxes}, 1, function(data){})
    }
  },
  
  exit_waitlist: function() {
    P.top_bar.hideWaitlistModal()
  },
  
  reject_waitlist: function() {
    P.top_bar.user.config.waitlist_response = "no";
    var modal_type = P.top_bar.waitListLoadingInfo.which_modal;
    P.top_bar.hideWaitlistModal()
    PA.call_pj("user.set_piazza_network_waitlist_response", {response : "no", type : modal_type}, 1, function(data){})
  },

  initEventHandlers: function() {
    $("#network_button").click(function(event) {
      if (PA.staticContent || P.top_bar.blockNetworkChange) return false;
      var dropdownMenu = $("#my_class_menu");
      var menuVisible = dropdownMenu.is(":visible");
      if (!menuVisible) {
        P.top_bar.openDropDown($('#my_class_menu'));
        $(this).closest('.topbar_button').addClass('active');
      } else {
        closeDropDown();
      }
      event.stopPropagation();
      return false;
    });
    $('.top_bar_logo').click(function(){
      PEM.fire("cleanDashboard");
      PEM.fire("showHomescreen");
    });
    $('#user_button').click(function(event) {
      var dropdownMenu = $("#user_dropdown");
      var menuVisible = dropdownMenu.is(":visible");
      if (!menuVisible) {
        P.top_bar.openDropDown($('#user_dropdown'));
        $(this).addClass('active');
        $(this).find('.topbar_arrow').addClass('settings_active');
      }
      else closeDropDown();
      event.stopPropagation();
      return false;
    });
    $("html").click(function() {
      if (typeof(closeDropDown) != "undefined")
        closeDropDown();
    });
    $("#log_out").click(function() {
      PA.call("user.logout", {}, null, function() {
        if (window.localStorage) {
          localStorage.setItem('refresh', 'refresh' + Math.random());
        }
        window.location = HOME;
      });
    });
    $('#user_dropdown_list > li').click(function() {
      return P.top_bar.executeDropdownAction($(this).attr("action"));
    });
    $(".class_report").click(function() {
      window.open("/stats/report/" + P.top_bar.network.id, "_blank");
    });
    $('.topbar_icons.stats').click(function() {
      P.top_bar.openDropDown($('#stats_dropdown'));
      return false;
    });
    $('.show_stats').click(function(){
      PEM.fire("cancelAll");
      if (P.top_bar.isDashboard) {
        PEM.fire("showClassStats");
        $('.top_bar_statistics').addClass('active');
        $('.top_bar_qa').removeClass('active');
      } else {
        P.top_bar.markSetupSeen(function(){
          window.location = "/class/" + P.top_bar.network.id + "?show_stats=1";
        });
      }
    });

    $('.export_stats').click(function(){
      window.location = "/classes/export_stats/" + P.top_bar.network.id;
    });

    $('.top_bar_classmates').click(function() {
      if( !P.homescreen )
        return false;
        
      P.top_bar.isClassmates = true;
      if( !P.top_bar.user.config.published ) 
        P.homescreen.optInCaag(true, 'top_bar_classmates');
      else {
        P.top_bar.openClassmates(true);
      }
      return false;
    });
    
    
    $(".top_bar_manage").click(function() {
      P.top_bar.gotoConfigClass();
    });

    $(".top_bar_setup").click(function() {
      P.top_bar.gotoConfigClass(null, true);
    });

    $(".top_bar_qa, #classes_brand").click(function() {
      P.top_bar.loadQaSite();
    });
    
    // $(".top_bar_careers_homescreen").click(function() {
    //   if ($(this).hasClass("view_all_events"))
    //     window.location = "/careers/dashboard?eid=all";
    //   else if ($(this).hasClass("view_all_messages"))
    //     window.location = "/careers/dashboard?mid=all";
    //   else
    //     window.location = "/careers/dashboard";
    //   return false;
    // });
    $('#event_notifications_button').click(function(){
      closeDropDown();
      $('#topbar_career_events_notifications_popover').show();
      P.top_bar.resetEventNotifications();
      PA.call_pj("user.set_last_saw_careers", {}, 1);

      return false;
    });
    // $('#message_notifications_button').click(function(){
    //   closeDropDown();
    //   $('#topbar_career_message_notifications_popover').show();
    //   PA.call_pj("generic.event_to_requests", {event: "careers.messages_icon"},1);
    //   return false;
    // });
    $("#careers_button_signed").click(function() {
      window.location = "/careers/student";
    });
    $("#careers_button").click(function() {
      if (P.top_bar.isDashboard) {
        PA.call_pj("user.set", {stat:"careers.ybtn", val:new Date()}, 1);
        PEM.fire("cleanDashboard");
        PEM.fire("showHomescreen");
      } else {
        window.location = "/class";
      }
    });

    $('#careers_button .icon-remove-sign').click(function(){
      if (!P.top_bar.user.config.careers) P.top_bar.user.config.careers = {};
      P.homescreen.user.config.careers.stop = new Date();
      PA.call_pj("user.set", {stat:"careers.stop", val:P.homescreen.user.config.careers.stop}, 1);
      $('#careers_button').hide();
    });
    $('.top_bar_course_page').click(function() {
      P.top_bar.gotoCoursePage();
    });
    $('.top_bar_button.login').click(function() {
      openSlidingPanel($('#LoginPanel'));
      $('#email_field').focus();
      return false;
    });
    $('.top_bar_button.enroll').click(function() {
      if (typeof(FORCE_TERM) != 'undefined') {
        var term = FORCE_TERM.toLowerCase().replace(/\s+/g, "") || "other";
        window.location = "/" + FORCE_EXT + "/" + term + "/" + FORCE_SN;
      }
      return false;
    });

    $('#inactive_network_toggle').click(function() {
      P.top_bar.showingInactive = !P.top_bar.showingInactive;
      if (P.top_bar.showingInactive) {
        $('.inactiveNetwork').show();
        $('#inactive_network_toggle').html("Hide inactive classes");
      } else {
        $('.inactiveNetwork').hide();
        $('#inactive_network_toggle').html("Show inactive classes");
      }
      return false;
    });
    $('#manage_class_dropdown').click(function(){
      P.top_bar.manageView = !P.top_bar.manageView;
      if (P.top_bar.manageView) {
        $('.inactiveNetwork').hide();
        $('#inactive_network_toggle').html("Show inactive classes");
        $('#inactive_network_toggle').css("visibility", "hidden");
        P.top_bar.showingInactive = false;
        $('#manage_class_dropdown').html("Exit manage view");
        $('.top_bar_dropdown_wrapper').addClass('manage');
      } else {
        $('#inactive_network_toggle').css("visibility", "visible");
        $('#manage_class_dropdown').html("Manage class dropdown");
        $('.top_bar_dropdown_wrapper').removeClass('manage');
      }
      return false;
    });
    $("#stats_button").click(function() {
      if (typeof(INTERNAL_ID) != 'undefined')
        window.location = "/company/" + INTERNAL_ID + "/stats";
    });
    $("#search_button").click(function() {
      if (typeof(COMPANY_STATS) != 'undefined' && COMPANY_STATS) {
        window.location = "/company/" + INTERNAL_ID + "/search";
        return;
      }
      $(this).addClass("active");
      P.modules.loadModule("careers_company_search", {}, function() {
        PEM.fire("showSearch");
      }, null);
      $(".top_bar_tab").removeClass("active");
      $(this).addClass("active");
      PA.call_pj("generic.event_to_requests", {event: "careers.search_tab"},1);
    });
    $("#interacted_button").click(function() {
      if (typeof(COMPANY_STATS) != 'undefined' && COMPANY_STATS) {
        window.location = "/company/" + INTERNAL_ID + "/interacted";
        return;
      }
      $(this).addClass("active");

      P.modules.loadModule("careers_company_students_interacted", {}, function() {
        PEM.fire("showInteracted");
      }, null);
      $(".top_bar_tab").removeClass("active");
      $(this).addClass("active");
      PA.call_pj("generic.event_to_requests", {event: "careers.interacted_tab"},1);
    });
    $("#discover_button").click(function() {
      if (typeof(COMPANY_STATS) != 'undefined' && COMPANY_STATS) {
        window.location = "/company/" + INTERNAL_ID;
        return;
      }
      $(".top_bar_tab").removeClass("active");
      $(this).addClass("active");
      P.modules.loadModule("careers_company_discover", {}, function() {
        PEM.fire("showDiscover");
      }, null);
      PA.call_pj("generic.event_to_requests", {event: "careers.discover_tab"},1);
    });
    $("#company_profile_button").click(function() {
      P.modules.loadModule("careers_company_profile", {}, function() {
        PEM.fire("showCompanyProfile", LOAD_COMPANY);
      }, null);
      $(".top_bar_tab").removeClass("active");
      $(this).addClass("active");
      PA.call_pj("generic.event_to_requests", {event: "careers.company_profile_tab"},1);
    });
    $('#signup_button').click(function(){
      window.location = "/instructors/school-search";
    });
    $('#piazza_com_button').click(function(){
      window.location = "/";
    });
    $("#company_log_out").click(function() {
      PA.call("careers_company.logout", {}, null, function() {
        window.location = '/company/login';
      }, function(err){console.log(err)});
    })
    $('.top_bar_classes').click(function() {
      window.location = '/class';
      return false;
    });
    $('.log_click').click(function(){
      var id = $(this).attr("id");
      if (id) {
        id = "company_profile." + id;
        PA.call_pj("generic.page_event", {type:id}, 1, function(){});
      }
    });
    $("#close_topbar_careers_popover").click(function(){
      $('#topbar_careers_popover').hide();
      if (PA.user) {
        PA.markSeenUnseen("career_tab_pop");
        PA.markSeenUnseen("career_tab_pop_2");
      }
    });
    $('#close_topbar_careers_popover_optout').click(function(){
      $('#topbar_careers_popover').hide();
      if (PA.user) {
        PA.call_pj("user.update", {email_prefs:{careers:{no_careers:true}}}, null, function(data){
          window.location = "/class";
        });
      }
    });
    $("#close_topbar_career_events_popover").click(function(){
      $('#topbar_career_events_popover').hide();
      if (PA.user)
        PA.markSeenUnseen("career_tab_pop_2");
    });
    if (typeof(COMPANY_STATS) != 'undefined' && COMPANY_STATS) {
      $('.top_bar_tab').removeClass('active');
      $('#stats_button').addClass('active');
    }
    if (typeof(COMPANY_SEARCH) != 'undefined')
      $('#search_button').click();
    if (typeof(COMPANY_INTERACTED) != 'undefined')
      $('#interacted_button').click();
    P.top_bar.reloadMessagesCount = 0;
    P.top_bar.reloadEventsCount = 0;
    $("#messages_icon").click(function() {
      P.top_bar.reloadMessagesCount += 1;
      $("#messages_icon").attr('href', "/careers/dashboard#/messages/reload_" + P.top_bar.reloadMessagesCount);
    });
    $('.topbar_events_icon').unbind().click(function(){
      $(".event_count").hide();
      //window.location.href = "/careers/dashboard#/events";
      //return false;
    });
  },
  openClassmates: function(newTab) {
    if( newTab ) {
      var fullPath = window.location.protocol + "//" + window.location.host + "/classmates/" + P.top_bar.network.id;
      window.open(fullPath, "_blank");
    } else {
      window.location = "/classmates/" + P.top_bar.network.id;
    }
  },
  optIn: function() {
    if (P.top_bar.isClassmates) {
      P.top_bar.openClassmates(false);
    }
    if (P.top_bar.isRefresh) {
      window.location.reload();
    }
  },
  markSetupSeen: function(callback) {
    if (typeof(IS_MANAGE) != 'undefined' && !PA.isSeenUser("setup_" + P.top_bar.network.id)) {
      PA.call_pj("user.mark_seen", {msg:"setup_" + P.top_bar.network.id}, null, function(){
        callback();
      });
      return false;
    }
    callback();
  },
  gotoConfigClass: function(section, setup) {
    if (P.top_bar.network.type == "group")
      window.location = "/configure-group/" + P.top_bar.nid;
    else {
      var term = P.top_bar.network.term.toLowerCase().replace(/\s+/g, "") || "other";
      var shortNumber = P.top_bar.network.short_number;
      if (section)
        window.location = "/configure-classes/" + term + "/" + shortNumber + "#" + section;
      else {
        if (setup) {
          window.location = "/configure-classes/" + term + "/" + shortNumber + "?setup=1";
        } else {
          P.top_bar.markSetupSeen(function(){
            window.location = "/configure-classes/" + term + "/" + shortNumber;
          });
        }
      }
    }
  },
  gotoCoursePage: function(subpage) {
    subpage = subpage || "resources";
    var net = P.top_bar.network;
    if (!net) return;
    var term = net.term.toLowerCase().replace(/\s+/g, "") || "other";
    var shortNumber = net.short_number;
    P.top_bar.markSetupSeen(function() {
      window.location = "/" + net.school_ext + "/" + term + "/" + shortNumber + '/' + subpage;
    });
  },
  initTipsies: function() {
    $('.show-tipsy').tipsy({gravity: 'n'});
  },
  refreshOnlineUsers: function(nid) {
    if (nid == P.top_bar.network.id) {
      var params = {nid: nid,uid: P.top_bar.user.id};
      if (P.top_bar.onWhatPage) params.page = P.top_bar.onWhatPage; // make this log in vertica
      PA.call_pj("network.get_online_users", params, 1, function(data) {
        if (nid == P.top_bar.network.id) {
          PEM.fire("online_users", data);
          if (P.top_bar.getOnlineUsers) {
            clearTimeout(P.top_bar.getOnlineUsers);
          }
          P.top_bar.getOnlineUsers = setTimeout(function() { P.top_bar.refreshOnlineUsers(P.top_bar.network.id); }, 1000 * 180); // 3 minute timeout
        }
      }, function(err) {
        if (err === "User session changed") {
          PEM.fire("user_logout");
        }
      });

    }
  },
  careersPing: function() {
    if (typeof(COMPANY_USER_ID) != 'undefined') {
      PA.call_pj("careers_company.ping", {}, 1, function(data) {
        P.top_bar.getOnlineUsers = setTimeout(P.top_bar.careersPing, 1000 * 180); // 3 minute timeout
      });
    }
  },
  ensureTooltips: function() {
    var showTips = true;
    if (P.top_bar.user && P.top_bar.user.config && P.top_bar.user.config.no_tips) showTips = false;
    if (!showTips && !P.top_bar.showTips) {// no need to spend extra cycles
      $('[notutorial]').unbind('mouseenter mouseleave')
      $('[notutorialw]').unbind('mouseenter mouseleave')
      $('[notutorial]').tipsy({gravity: 'n', html: true, title:"notutorial"});
      $('[notutorialw]').tipsy({gravity: 'w', html: true, title:"notutorialw"});
      return;
    }
    // either show, or hide tooltips
    $('[tutorial]').unbind('mouseenter mouseleave')
    $('[tutorialw]').unbind('mouseenter mouseleave')
    $('[notutorial]').unbind('mouseenter mouseleave')
    $('[notutorialw]').unbind('mouseenter mouseleave')
    $('[notutorial]').tipsy({gravity: 'n', html: true, title:"notutorial"});
    $('[notutorialw]').tipsy({gravity: 'w', html: true, title:"notutorialw"});
    if (showTips) {
      $('.icons .sr_icon').attr("tutorial", "Question has a Students' Answer");
      $('.instructor_endorsed_sr .icons .sr_icon').attr("tutorial", "Question has an instructor-endorsed Students' Answer");
      $('.icons .ir_icon').attr("tutorial", "Question has an Instructors' Answer");
      $('.icons .note').attr("tutorial", "This is a note");
      $('.icons .poll_icon').attr("tutorial", "This is a poll");

      $('[tutorialw]').tipsy({gravity: 'w', html: true, title:"tutorialw"});
      $('[tutorial]').tipsy({gravity: 'n', html: true, title:"tutorial"});
    }
    P.top_bar.showTips = showTips;
  },
  executeDropdownAction: function(action) {
    if (action == "settings") {
      window.location = '/account_settings';

    } else if (action == "licensing") {
      window.open('/license_portal', '_blank');

    } else if (action == "support") {
      window.open('http://support.piazza.com/', '_blank');

    } else if (action == "features") {
      window.open('/features', '_blank');

    } else if (action == "tooltips") {
      if (P.top_bar.user.config.no_tips) {
        // TURNING TUTORIAL ON
        P.top_bar.user.config.no_tips = false;
        PA.call_pj("user.unset", {stat:"no_tips"}, 1);
        $('#tooltip_link').html("Turn off Tooltips");
        P.top_bar.ensureTooltips();
      } else {
        // TURNING TUTORIAL OFF
        P.top_bar.user.config.no_tips = 1;
        PA.call_pj("user.set", {stat:"no_tips", val:1}, 1);
        $('#tooltip_link').html("Turn on Tooltips");
        P.top_bar.ensureTooltips();
      }

    } else if (action == "contact") {
      window.open('/contactus.html?nid=' + P.top_bar.network.id, '_blank');

    } else if (action == "bug") {
      PTM.getModuleTemplate("top_bar", "bug_report", P.top_bar.showBugReport);

    } else if (action == "homepage") {
      window.open('/signup', '_blank');
    } else if (action == "careers") {
      if (P.top_bar.isDashboard) {
        PEM.fire("cleanDashboard");
        PEM.fire("showHomescreen");
      } else {
        window.location = "/class/" + P.top_bar.nid;
      }
    }

    return false;
  },
  showBugReportExternal: function() {
    PTM.getModuleTemplate("top_bar", "bug_report", P.top_bar.showBugReport);
  },
  showBugReport: function(template) {
    if ($('#report_bug_dialog') && $('#report_bug_dialog').length > 0) {
      $('#report_bug_dialog').jqmShow();
    } else {
      $("body").append(template({}));
      $('#report_bug_dialog').jqm();
      $("#submit_bug").click(function() {
        PA.call("user.bug_report", {details:$('#bug_details').val(), nid: P.top_bar.network.id},
          $('#report_bug_dialog'), function() {
              $('#report_bug_dialog').jqmHide();
              $('#bug_details').val("");
              alert("Thanks for your feedback!");
        });
        return false;
      });
      $("#close_bug_report").click(function() {
        $('#report_bug_dialog').jqmHide();
        return false;
      });
      $('#report_bug_dialog').jqmShow();
    }
  },
  fileBugReport: function() {

  },
  setCustomTopbarColor: function(color) {
    $('.top_bar').addClass('custom_topbar_color');
    $('.top_bar').addClass(color);
    $('#topbar_color_block').addClass(color);
    var col = $('.top_bar').css('background-color');
    if (col.substr(0, 4) != "rgba") {
      col = "rgba(" + col.substr(4, col.length - 5) + ", 1)";
    }
    var col2 = col.substr(0, col.length - 2) + " 0)";
    $('#floating-gear').css({
      'background-color': col,
      'background': 'linear-gradient(90deg, ' + col2 + ' 0%, ' + col + ' 29%, ' + col + ' 100%)'
    });
  },
  setTopbarColorCallback: function(nid, color) {
    if(!P.top_bar.user.config.topbar_colors) P.top_bar.user.config.topbar_colors = {};
    P.top_bar.user.config.topbar_colors[nid] = color;
    var colors = ['green', 'purple', 'grey', 'orange', 'teal', 'aqua'];
    if (P.top_bar.network.id == nid) {
      for(var i = 0; i < colors.length; i++) {
        $('.top_bar').removeClass(colors[i]);
        $('#topbar_color_block').removeClass(colors[i]);
        $("#network_" + nid).removeClass(colors[i]);
      }
      if (P.top_bar.user.config.topbar_colors[P.top_bar.network.id]) {
        P.top_bar.setCustomTopbarColor(P.top_bar.user.config.topbar_colors[P.top_bar.network.id]);
      }
  
    }
    $("#network_" + nid).addClass(color);
    if (typeof(angular) != 'undefined' && angular.element('#account_settings') && angular.element('#account_settings').scope()) {
      angular.element('#account_settings').scope().setTopBarColorForNetworkCallback(nid, color);
    }
  },
  setTopbarColor: function(color) {
    var nid = P.top_bar.network.id;
    PA.call_pj('user.set_network_topbar_color', {network_id: nid, color: color}, null, function(data) {
      P.top_bar.setTopbarColorCallback(nid, color);
    }, function(err){
      alert(err);
    })
  },
  setUserAndPopulateNetworks: function(user) {
    $('.my_pic').html(PA.getUserPic(user.id));
    $('.my_pic_noclick').html(PA.getUserPic(user.id, true));

    if (user.total_profiles) user.total_profiles += 2000;
    // populate network dropdown
    P.top_bar.globalNotifications = 0;
    var nid = user.last_network;
    if (typeof(FORCE_NID) != "undefined")
      nid = FORCE_NID;
    // make sure we have this network
    var have = false;
    for (var i = 0; i < user.networks.length; i++)
      if (user.networks[i].id == nid) have = true;
    if (!have && typeof(FORCE_NID_NOTAUTO) == 'undefined') nid = false;
    if (!have && typeof(FORCE_NID_NOTAUTO) != 'undefined') {
      $('.logged_out').show();
      $('.logged_in').hide();
      $('.top_bar_button.login').hide();
    }
    if (!nid && user.networks.length > 0)
      nid = user.networks[0].id;
    // see if URL has old-style link
    var hash = window.location.hash;
    if (hash) {
      // form: #summer2013/math021wd/76
      var entries = hash.split(/[#\/]/);
      if (entries.length > 2) {
        var term = entries[1];
        var courseNr = entries[2];
        var cid = "";
        if (entries.length > 3) cid = entries[3];
        // find class in question
        for (var i = 0; i < user.networks.length; i++) {
          var net = user.networks[i];
          var netterm = net.term.toLowerCase().replace(/\s+/g, "") || "other";
          if (netterm == term && courseNr == net.short_number) {
            nid = net.id;
            if (cid) CID = cid;
          }
        }
      }
    }
    if (user.new_questions) {
      user.new_questions[nid] = 0;
    }
    if (!user.config.email_prefs.careers)
      user.config.email_prefs.careers = {};
    // add story class if it has at least 2 posts
    //if (user.total_careers_stories && user.total_careers_stories > 1 && user.config.published && P.feed)
    //  user.networks.unshift({id:"stories_" + user.id, name:"Piazza Stories", course_number:"Piazza Stories", anonymity:"no", term:"ongoing", profs:[], user_count:0});
    P.top_bar.schoolExt = "";
    P.top_bar.user.hasCS = false;
    P.top_bar.user.hasUS = false;
    if (P.top_bar.user.config.cs_student)
      P.top_bar.user.hasCS = true;
    if (!P.top_bar.user.isPublicFaq) {
      jQuery.each(user.networks, function(idx, net) {
        // Construct each item in the list and add to the dropdown
        if (net.is_cs) P.top_bar.user.hasCS = true;
        if (net.school_ext) P.top_bar.schoolExt = net.school_ext;
        if (net.school_emails && (net.school_emails.length > 3)) {
          if (net.school_emails.substr(net.school_emails.length - 4, 4) == ".edu") P.top_bar.user.hasUS = true;
          if (net.school_emails.substr(net.school_emails.length - 3, 3) == ".ca") P.top_bar.user.hasUS = true;
        }
        // Updated the global notification count on the network dropdown bar
        if (user.new_questions && user.new_questions[net.id] > 0 && net.status !== 'inactive') {
          P.top_bar.globalNotifications += user.new_questions[net.id];
        }
      });
      P.top_bar.makeClassDropdown();
    } else {
      // hide drop-down, and disable it
      $('#network_button .topbar_arrow').hide();
      $('#network_button').unbind();
    }
    P.top_bar.user.showCareers = true;
    if (P.top_bar.user.config.email_prefs.careers && P.top_bar.user.config.email_prefs.careers.no_careers)
      P.top_bar.user.showCareers = false;
    //if (!P.top_bar.user.config.logins || P.top_bar.user.config.logins < 10)
    //  P.top_bar.user.showCareers = false;
    $('#global_wishlist_notifications').hide();

    P.top_bar.changeNetwork(nid,false);
    P.top_bar.displayGlobalNotifications();
  },
  makeClassDropdown: function() {
    var myClasses = $("#my_classes");
    myClasses.find(".classDropdownItem").remove();
    var user = P.top_bar.user;
    var totalAdmin = 0;
    var haveInactiveClasses = false;
    var haveActiveClasses = false;
    for (var i = 0; i < user.networks.length; i++) {
      var net = user.networks[i];
      var theHTML = "";
      var nameHTML = '<span class="course_number">' + net.course_number + '</span>' + net.name + ' <span class="term">[' + net.term + ']</span>';
      if (net.type == "group") {
        var creatorName = net.creator_name;
        if (!creatorName)
          creatorName = "";
        nameHTML = '<span class="course_number">' + net.name + '</span> ' + creatorName;
      }
      var color = P.top_bar.user.config.topbar_colors ? P.top_bar.user.config.topbar_colors[net.id] : '';
      if (net.status !== "inactive" || net.config.inactive_private) {
        haveActiveClasses = true;
        if (net.status == "inactive") {
          nameHTML = "(temp inactive) " + nameHTML;
        }
        theHTML += '<li data-pats="classes_dropdown_item" class="clearFix classDropdownItem sortable networkDropdown ' + color +'" id="network_' + net.id + '" onclick="P.top_bar.changeNetwork(\'' + net.id + '\',null,true)">';
        theHTML += '<div class="reorder_class manage_classes"/><div data-pats="label" class="main ">' + nameHTML + '</div>';
        if (user.can_admin[net.id] > 0 && net.status == "active") {
          theHTML += '<a href="#" class="inactivate_class manage_classes" onclick="return P.top_bar.inactivate(\'' + net.id + '\', event)">Make inactive</a>';
          totalAdmin += 1;
        }
      } else {
        haveInactiveClasses = true;
        theHTML += '<li data-pats="classes_dropdown_item" class="clearFix classDropdownItem sortable networkDropdown ' + color +' inactiveNetwork" style="display:none;" id="network_' + net.id + '" onclick="P.top_bar.changeNetwork(\'' + net.id + '\', null, true)">';
        theHTML += '<div data-pats="label" class="main ">' + "(inactive) " + nameHTML + '</div>';
      }

      if (user.new_questions[net.id]) {
        theHTML += '<div class="global_notifications my_classes" id="dropdown_notifications_' + net.id + '">' + user.new_questions[net.id] + '</div>';
      }
      theHTML += '</li>';
      myClasses.append(theHTML);
    }
    P.top_bar.totalAdmin = totalAdmin;
    $('#my_classes').b_sortable({handle:".reorder_class"}).bind('sortupdate', function() {
      P.top_bar.updateClassListOrder();
    });

    if (haveInactiveClasses && haveActiveClasses) {
      $("#inactive_network_toggle").css("visibility", "visible");
    } else {
      $("#inactive_network_toggle").css("visibility", "hidden");
      if (!haveActiveClasses)
        $('.inactiveNetwork').show();
    }
  },
  inactivate: function(nid, event) {
    $('#inactivateClass').modal('show');
    for (var i = 0; i < P.top_bar.user.networks.length; i++) {
      var net = P.top_bar.user.networks[i];
      if (net.id != nid) continue;
      $('.inactivateClassName').text(net.course_number + ": " + net.name + " [" + net.term + "]");
      $('.inactivateClassNum').text(net.course_number);
    }
    P.top_bar.setInactiveNid = nid;
    event.stopPropagation();
    return false;
  },
  activate: function(nid, num, event) {
    $('#reactivateClass').modal('show');
    $('.inactivateClassNum').text(num);
    P.top_bar.setInactiveNid = nid;
    event.stopPropagation();
    return false;
  },
  switchToContribution: function() {
    if (P.top_bar.network.licensing.donations_small) {
      $(".donation_amounts_small").show();
      $(".donation_amounts_big").hide();
    } else {
      $(".donation_amounts_small").hide();
      $(".donation_amounts_big").show();
    }
    $('#switchToContribution').modal('show');
    return false;
  },
  switchToContributionConfirm: function() {
    $('#switchToContribution').modal('hide');
    PA.call_pj("network.update", {licensing: {type: "donation"}, id:P.top_bar.network.id}, null, function(){
      window.location.reload();
    });
    return false;
  },
  setInactive: function(status) {
    PA.call_pj("network.update", {
      id: P.top_bar.setInactiveNid,
      status: status,
      config: {inactive_private: false}
    }, 1, (function() {}), function(err){alert(err);});
    for (var i = 0; i < P.top_bar.user.networks.length; i++) {
      var net = P.top_bar.user.networks[i];
      if (net.id != P.top_bar.setInactiveNid) continue;
      net.status = status;
    }
    P.top_bar.makeClassDropdown();
    return false;
  },
  updateClassListOrder: function() {
    var arr = $('#my_classes .classDropdownItem');
    var list = {};
    for (var i = 0; i < arr.length; i++)
      list[$(arr[i]).attr("id").replace("network_", "")] = i;
    var req = {
      stat: 'class_list',
      val:  list
    };
    P.top_bar.user.networks.sort(function(a,b) {
      return list[a.id] - list[b.id];
    });
    PA.call_pj("user.set", req, 1);
  },
  displayGlobalNotifications: function() {
    if (P.top_bar.globalNotifications > 0 && !P.top_bar.blockNetworkChange) {
      $("#global_notifications_indicator").html(P.top_bar.globalNotifications);
      $("#global_notifications_indicator_wrapper").show();
      $("#network_button").addClass("notification_present");
    } else {
      $("#global_notifications_indicator_wrapper").hide();
      $("#network_button").removeClass("notification_present");
    }
    if (P.top_bar.blockNetworkChange) {
      $('#change_network_caret').hide();
    }
  },
  changeNetwork: function(id, showNewPost, fromClassList) {
    if (P.top_bar.nid) {
      PEM.fire("verifyAnyCancel", function() {
        P.top_bar.doChangeNetwork(id, showNewPost, fromClassList);
      });
    } else {
      P.top_bar.doChangeNetwork(id, showNewPost, fromClassList);
    }
    return false;
  },
  nameClick: function() {
    if (P.top_bar.user.isInst && !P.top_bar.user.isTA)
      return false;
    return P.top_bar.user.showCareers;
  },
  hideHeadedToBanner: function() {
    $("#headed_to_banner").hide();
    $("#page_main").removeClass('has_green_message_bar_summer_info');
    PA.markSeenUnseen("headed_to_banner_" + (1900 + (new Date()).getYear()));
  },
  maybeShowHeadedToBanner: function() {
    if(P.top_bar.hasShownHeadedToBanner) return;
    P.top_bar.hasShownHeadedToBanner = true;
    // check: correct date range
    // check: hasn't updated profile since apr 1
    // check: hasn't xed out of this thing this year 
    // check: is a student or a ta in this class 
    // has not opted out
    var d = new Date();
    if( d.getMonth() < 3 || (d.getMonth() == 3 && d.getDate() < 25) || 
        d.getMonth() > 4 || (d.getMonth() == 4 && d.getDate() > 15) ||
        PA.isSeenUser("headed_to_banner_" + (1900 + (new Date()).getYear())) || 
        (P.top_bar.user.isInst && !P.top_bar.user.isTA) || 
        !P.top_bar.user.showCareers ||
        new Date(P.top_bar.last_update) > new Date(d.getYear(), 3, 1)) return;
    $("#headed_to_banner").show();
    $("#page_main").addClass('has_green_message_bar_summer_info');
    $('#company_banner').autoComplete({
      minChars: 2,
      source: function(term, suggest){
          term = term.toLowerCase();
          var choices = P.top_bar.companies;
          var matches = [];
          for (i=0; i<choices.length; i++)
            if (~choices[i].toLowerCase().indexOf(term) && matches.length < 20)
              matches.push(choices[i]);
          suggest(matches);
      }
    });

    $('#role_banner').autoComplete({
        minChars: 2,
        source: function(term, suggest){
          term = term.toLowerCase();
          var choices = P.top_bar.roles;
          var matches = [];
          for (i=0; i<choices.length; i++)
            if (~choices[i].toLowerCase().indexOf(term) && matches.length < 20)
              matches.push(choices[i]);
          suggest(matches);
        }
    });

    $('#location_banner').autoComplete({
        minChars: 2,
        source: function(term, suggest){
          term = term.toLowerCase();
          var choices = P.top_bar.places;
          var matches = [];
          for (i=0; i<choices.length; i++)
            if (~choices[i].toLowerCase().indexOf(term) && matches.length < 20)
              matches.push(choices[i]);
          suggest(matches);
        }
    });
    PA.call_pj("generic.event_to_requests", {event: "careers.headed_to_banner_seen"}, 1);
  },
  isValidEmail: function(email) {
    var reg = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return email.match(reg);
  },
  validateHeadedToBannerFields: function() {
    var errors = {any: false, company: false, email: false};
    if($('#company_banner').val().length === 0) {
      errors.any = true;
      errors.company = true;
    }
    if($('#summer_email_banner').val().length > 0 && !P.top_bar.isValidEmail($('#summer_email_banner').val())) {
      errors.any = true;
      errors.email = true;
    }
    if(errors.company) $("#company_banner").addClass("border-hard-lite-red");
    else $("#company_banner").removeClass("border-hard-lite-red");
    if(errors.email) $("#summer_email_banner").addClass("border-hard-lite-red");
    else $("#summer_email_banner").removeClass("border-hard-lite-red");
    return errors;
  },
  updateHeadedToBanner: function() {
    var errors = P.top_bar.validateHeadedToBannerFields();
    if(errors.any) return;
    var d = new Date();
    var job_yr = d.getUTCMonth() > 6 ? d.getUTCFullYear() + 1 : d.getUTCFullYear();
    var type = "intern";
    if(P.top_bar.profile && 
      P.top_bar.profile.academics && 
      P.top_bar.profile.academics.grad_year && 
      P.top_bar.profile.academics.grad_year == job_yr) type = "full";
    var paramsMap = {
      type: type,
      company: $('#company_banner').val(),
      role: $('#role_banner').val(),
      city: $('#location_banner').val(),
      headed_to: true
    };
    if(type == "intern") {
      paramsMap.quarter = "Summer";
      paramsMap.year = job_yr;
    } else {
      paramsMap.start_month = 6;
      paramsMap.start_year = job_yr;
    }
    PA.call_pj("user_profile.add_work_experience", paramsMap, 1, function(data){console.log(data);});
    $('#job_details_dropdown').hide();    
    $('#headed_to_company').text(paramsMap.company);
    PA.call_pj("generic.event_to_requests", {event: "careers.banner_update_headed_to"}, 1);
    P.top_bar.hideHeadedToBanner();
  },
  doChangeNetwork: function(id, showNewPost, fromClassList) {
    var user = P.top_bar.user;
    var isProf = P.top_bar.user.isInst && !P.top_bar.user.isTA;
    var isUSOrCA = P.top_bar.user.isUS || P.top_bar.user.isCA;
    var hasSeenSelectSurveyModal = PA.isSeenUser(P.top_bar.SELECT_COMPANY_MODAL_CONSTANTS.SEEN_MESSAGE_SELECT_MODAL_THIS_YEAR);
    var shouldShowCompaniesSelectModal = showCareers && !isProf && !hasSeenSelectSurveyModal;
    $('.instructor_only').hide();
    $('.student_only').hide();
    for (var i = 0; i < user.networks.length; i++) {
      if (user.networks[i].id == id) {
        var net = user.networks[i];
        net.isGroup = (net.type == "group");
        $('#dropdown_notifications_' + net.id).hide(); // remove red badge
        var term = net.term.toLowerCase().replace(/\s+/g, "") || "other";
        var shortNumber = net.short_number;
        net.configLink = "/configure-classes/" + term + "/" + shortNumber;

        P.top_bar.globalNotifications -= P.top_bar.user.new_questions[net.id];
        P.top_bar.user.new_questions[net.id] = 0;
        P.top_bar.blockNetworkChange = false;
        if (net.is_teams && window.parent != window) {
          P.top_bar.blockNetworkChange = true;
        }
        P.top_bar.displayGlobalNotifications();
        P.top_bar.network = net;
        P.top_bar.user.isInst = P.top_bar.user.can_admin[id] || 0;
        P.top_bar.user.isTA = false;
        if (P.top_bar.user.can_admin[id] && P.top_bar.user.can_admin[id] < 10)
          P.top_bar.user.isTA = true;
        // populate section names
        net.sectionNames = {};
        PA.profs = {};
        for (var z = 0; z < net.profs.length; z++) {
          PA.users[net.profs[z].id] = net.profs[z];
          PA.profs[net.profs[z].id] = 1;
        }
        if (net.config && net.config.class_sections) {
          //net.subGroups = net.config.class_sections.sections;
          net.subGroups = [];
          net.showAllGroups = false;
          if (P.top_bar.user.config.feed_groups && net.config.class_sections.section_list) {
            for (var j = 0; j < net.config.class_sections.section_list.length; j++) {
              var sect = net.config.class_sections.section_list[j];
              net.sectionNames[sect.id] = sect.name;
              if (P.top_bar.user.config.feed_groups.exist(sect.id)) {
                net.subGroups.push(sect);
              }
            }
            if (net.subGroups.length > 1) {
              net.showAllGroups = true;
            }
          }
        }
        if (!P.top_bar.user.isInst) {
          if (net.private_posts === "no" && !(net.config && net.config.inactive_private)) {
            net.noPrivatePosts = true;
          } else {
            if (net.config && net.config.private_posts_only) {
              net.privatePostsOnly = true;
            }
          }
        }
        if (net.type == "no-verify") net.isLargeClass = true;

        P.modules.setNetwork(P.top_bar.network);

        var term = P.top_bar.network.term.toLowerCase().replace(/\s+/g, "") || "other";
        $('.create_new_class').attr("href", "/instructors/" + P.top_bar.network.school_ext);
        $('.clone_class').attr("href", "/clone-class/" + term + "/" + P.top_bar.network.short_number);
        $('.add_another_class').attr("href", "/signup/" + P.top_bar.schoolExt);

        P.top_bar.refreshOnlineUsers(P.top_bar.network.id); // 3 minute timeout
        if (net.type != "group") {
          $(".current_class_name").html(P.top_bar.network.course_number);
        } else {
          $(".current_class_name").html(P.top_bar.network.name);
        }
        $(".current_class_name").css("min-width", "90px");// safari trick, to force recalculation of width
        if (typeof(COMPANY_PROFILE) != 'undefined' || typeof(LOAD_MY_PROFILE) != 'undefined') {
          $('.top_bar_qa').hide();
          $('.top_bar_classes').show();
          $('.top_bar_new_careers').show();
          $('.top_bar_new_careers').addClass("active");
          return;
        }
        $('.top_bar_manage').hide();
        $('.top_bar_setup').hide();
        $('.top_bar_classmates').hide();
        P.top_bar.user.showClassmates = false;
        $('.top_bar_course_page').hide();
        $('.class_report').hide();
        $('.topbar_icons.stats').hide();
        $('.top_bar_manage').html("<a href='#'>Manage Group</a>");
        $('.top_bar_qa').html("<a href='#'>Home</a>");
        $(".student_only").hide();
        $('#careers_button').hide();
        $('#careers_button_signed').hide();
        $('#piazza_careers_link').hide();
        $('.top_bar_careers_homescreen').hide();
        $("#new_prof_homescreen_message").hide();
        $('.account_name_container').addClass('opted_out_name_link');
        if (!P.top_bar.user.isPublic) {
          P.top_bar.showCareersStuff();
        }
        $('.license_portal').hide();
        if (P.top_bar.user.isInst) {
          if ((P.top_bar.user.config.logins || 0) < 20) {
            $("#new_prof_homescreen_message").show();
          }
          $(".instructor_only").show();
          $("#topbar_careers_popover").hide();
          $("#topbar_career_events_popover").hide();
          if(P.top_bar.user.isTA && (P.homescreen || P.top_bar.isClassmates) && P.top_bar.user.showCareers) {
            P.top_bar.user.showClassmates = true;
          }
          if (P.top_bar.user.can_admin[id] > 5) {
            // check if class needs a license
            $('.license_portal').show();
          }
        } else {
          $('.instructor_only').hide();
          if (!P.top_bar.user.is_public) {
            if (P.top_bar.schoolExt && P.top_bar.user.networks[0].type != "public" ) {
              $(".student_only").show();
              if (P.top_bar.isDashboard && P.top_bar.user.config.logins > 10) {
                if (!P.top_bar.user.config.careers || !P.top_bar.user.config.careers.stop)
                  $('#careers_button').show();
              }
            }
            if( (P.homescreen || P.top_bar.isClassmates) && P.top_bar.user.showCareers ) {
              P.top_bar.user.showClassmates = true;
            }
            if (P.top_bar.user.config.careers && P.top_bar.user.config.careers.signed) {
              $('#careers_button_signed').show();
              $('#careers_button').hide();
            }
          }
        }
        // only allow classmates if I'm from UT Austin, or specifically allowed class
        if (!net.config || !net.config.show_classmates)
          P.top_bar.user.showClassmates = false;
        if (P.top_bar.user.showClassmates)
          $(".top_bar_classmates").show();
        // only show if user has permission
        var role = "member";
        if (P.top_bar.user.config.roles && P.top_bar.user.config.roles[id]) {
          role = P.top_bar.user.config.roles[id];
        }
        if (role == "admin" && net.type != "group")
          role = "instructor";
        P.top_bar.user.network_permissions = {};
        if (net.config && net.config.roles && net.config.roles[role]) {
          P.top_bar.user.network_permissions = net.config.roles[role];
        }
        var canManageClass = PA.hasPermission("manage_group_info");
        P.top_bar.user.role = role;
        if (net.type != "group") {
          net.urlType = "/class";
          $('.top_bar_manage').html("<a data-pats='manage_class' href='#'>Manage Class</a>");
          $('.top_bar_qa').html("<a href='#' data-pats='qa_link'>Q &amp; A</a>");
          if (net.id != "stories_" + P.top_bar.user.id) {
            $('.top_bar_course_page').show();
            if (net.total_content_stud > 20)
              $('.class_report').show();
            if (!P.top_bar.user.isPublic) {
              $('.topbar_icons.stats').show();
            }
          } else {
            canManageClass = false;
            P.top_bar.careersNotifications = {};
            P.top_bar.displayCareersNotifications(true);
          }
          if (!P.top_bar.user.isPublic && (!P.top_bar.user.config || !P.top_bar.user.config.logins || P.top_bar.user.config.logins < 5) && !PA.isSeenUser('tutorial_dashboard')) {
            P.modules.loadModule("onboarding_overlay", {}, function() {
              PEM.fire("show_onboarding_overlay", P.top_bar.user.isInst);
            }, null);
          }
        } else {
          net.urlType = "/group";
        }
        if (P.top_bar.changeUrl && window.history && window.history.pushState) {
          try {
            window.history.pushState({cid:false, id:false}, "Piazza", P.top_bar.network.urlType + "/" + P.top_bar.network.id );
          } catch (err) {}
        }
        if (canManageClass) {
          $('.top_bar_manage').show();
          var showExp = (net.total_content_prof > 15) || PA.isSeenNetwork(net, "exp");
          if (!showExp) {
            $('.top_bar_setup').show();
            // open setup?
            if (typeof(IS_MANAGE) == 'undefined' && !PA.isSeenUser("setup_" + P.top_bar.network.id)) {
              P.top_bar.gotoConfigClass(null, true);
            }
          }
        }
        if (id !== P.top_bar.nid) {
          PEM.fire("content", null);
          PEM.fire("network", P.top_bar.network);
        }
        // turn on buy license link, if needed
        $("#license-action").hide();
        $(".license-action-days-left").hide();
        if (net.licensing && net.licensing.license_required && typeof(IS_LICENSE_PORTAL) == 'undefined') {
          if (net.licensing.license_expired) {
            $(".btn-buy").hide();
            if (net.licensing.days_over < 4) {
              $(".btn-late").show();
              $(".btn-late").css("display", "inline-block");
            }
          } else if (typeof net.licensing.days_to_expire !== "undefined") {
            // this class needs a license, but does not have it yet
            if (net.licensing.days_to_expire < 10) {
              $(".license-action-days-left").text(" - " + net.licensing.days_to_expire +
                " day" + (net.licensing.days_to_expire > 1 ? "s" : "") + " left");
              $(".license-action-days-left").show();
            }
          }
          if (!net.licensing.type) {
            net.licensing.type = LICENSING_TYPE_INSTRUCTOR;
          }
          if (P.top_bar.user.isInst && !P.top_bar.user.isTA && net.licensing.type === LICENSING_TYPE_INSTRUCTOR) {
            $("#license-portal-url").attr("href", "/license_portal/" + net.id);
            $("#license-action").show();
            $(".top_bar_careers_homescreen").hide();
            P.top_bar.user.showCareers = false
          }
        }
        $('#question_feed_questions').scrollTop(0);
        var showHomescreen = true;
        if (typeof(COMPANY_PROFILE) != 'undefined' || typeof(COMPANY_STATS) != 'undefined' || typeof(CAREERS_DASHBOARD) != 'undefined') {
          showHomescreen = false;
        } else {
          if (id !== P.top_bar.nid) PEM.fire("cleanDashboard");
        }
        if (showNewPost || (typeof(SHOW_POST) != 'undefined' && SHOW_POST)) {
          SHOW_POST = false;
          setTimeout(function(){PEM.fire("showNewPost");}, 100);
          showHomescreen = false;
        }
        if ((typeof(SHOW_STATS) != 'undefined' && SHOW_STATS)) {
          setTimeout(function(){
            PEM.fire("showClassStats");
            SHOW_STATS = false;
            $('.top_bar_statistics').addClass('active');
            $('.top_bar_qa').removeClass('active');
          }, 100);
          showHomescreen = false;
        }
        if ((typeof(SHOW_UP) != 'undefined' && SHOW_UP)) {
          SHOW_UP = false;
          PEM.fire("showMyProfile");
          showHomescreen = false;
        }
        if (showHomescreen && id !== P.top_bar.nid)
          PEM.fire("showHomescreen");
      }
    }
    if (P.top_bar.nid != id && typeof(FORCE_CN) != 'undefined') {
      $(".current_class_name").html(FORCE_CN);
    }
    if (P.top_bar.user.isPublic) {
      $('.top_bar_course_page').hide();
      $('.top_bar_manage').hide();
      $('#topbar_color_container').hide();
      $('#manage_class_dropdown').hide();
      if (!P.top_bar.user.isPublicFaq) {
        $('#signup_button').show();
        $('#piazza_com_button').show();
      }
    }
    if (typeof IS_NEW_CAREERS !== 'undefined' && fromClassList) {
      P.top_bar.loadQaSite();
    }
    P.top_bar.maybeShowJobLink();
    
    // determine if survey select modal show display:
    var showCareers = P.top_bar.user.showCareers;
    
    // Insights survey modal show logic.
    var notOptedOut = !(P.top_bar.user.config.email_prefs.careers && P.top_bar.user.config.email_prefs.careers.no_careers) || P.top_bar.user.config.published;
    var isProf = P.top_bar.user.isInst && !P.top_bar.user.isTA;
    var hasSeenSelectSurveyModal = PA.isSeenUser(P.top_bar.SELECT_COMPANY_MODAL_CONSTANTS.SEEN_MESSAGE_SELECT_MODAL_THIS_YEAR);
    var enoughLogins = P.top_bar.user.config.logins > 1;
    var shouldShowCompaniesSelectModal = notOptedOut && 
                                         !isProf && 
                                         !hasSeenSelectSurveyModal &&
                                         enoughLogins;
    P.top_bar.nid = id;

    // Note: uncomment to show the select companies modal:
    // if (shouldShowCompaniesSelectModal) {
    //   P.modules.loadModule("careers_company_select_modal", {}, function() {
    //   setTimeout(function() {PEM.fire("showCompanySelectModal");}, 250);
    //   }, null);
    // }
  },
  initWaitlistModalWithImage: function(){
    // load image first
    $("#hidden_waitlist_img").load(function(){

      // get data from petty      
      var numberWithCommas = function(x) {
        return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      };
      // PA.call_pj("user.get_waitlist_modal_data", {}, $(".modal_background"), function(data){
      
      // set data from petty in modal
      $(".image_name").text(P.top_bar.user.name);
      // $(".data_points").text(numberWithCommas(data.data_points));
      // $(".qa_classmates").text(numberWithCommas(data.classmates));
      
      // show modal
      P.top_bar.showWaitlistModal();
      
      // update loading state:
      P.top_bar.waitListLoadingInfo.loading = false;
      P.top_bar.waitListLoadingInfo.loaded = true;
      });
    // });
  },
  str_hash: function(str) {
    var hash = 0, i, chr, len;
    if (str.length === 0) return hash;
    for (i = 0, len = str.length; i < len; i++) {
      chr   = str.charCodeAt(i);
      hash  = ((hash << 5) - hash) + chr;
      hash |= 0; // Convert to 32bit integer
    }
    return hash;
  },
  maybeShowWaitListModal: function() {
    //  is a student or a ta and has not seen it before
    if ((!P.top_bar.user.isInst || P.top_bar.user.isTA)
          && !PA.isProfessor()
          && P.top_bar.user.config 
          && (!P.top_bar.user.config.email_prefs.careers || P.top_bar.user.config.email_prefs.careers.no_careers == false)
          && P.top_bar.user.config.waitlist_response == null 
          && P.top_bar.user.config.logins >= 50) {
      if (!P.top_bar.waitListLoadingInfo.loading && !P.top_bar.waitListLoadingInfo.loaded) {
        // need to init the waitlist modal
        P.top_bar.waitListLoadingInfo.loading = true;
        // if(P.top_bar.str_hash(P.top_bar.user.id) % 2 == 0) {
        P.top_bar.initWaitlistModalWithImage();
        P.top_bar.waitListLoadingInfo.which_modal = "image";       
        // } else {
        //   P.top_bar.showWaitlistModal2();
        //   P.top_bar.waitListLoadingInfo.which_modal = "no_image";  
        // }
      }
    }
  },
  showCareersStuff: function() {
    if ((!(P.top_bar.user.isInst && !P.top_bar.user.isTA) && !P.top_bar.user.isPublic) || P.top_bar.isCareers) {
      if( P.top_bar.user.showCareers )
        $('.top_bar_careers_homescreen').show();
        // P.top_bar.maybeShowHeadedToBanner();
      //$('.my_name_wrapper').addClass('has_job_link');
      //if (!PA.isSeenUser("careers_intro_modal")) {
      //  // make sure images have loaded!!
      //  $('.careers_intro_modal').waitForImages(function() {
      //    $('.careers_intro_modal').show();
      //  });
      //  $('.close_careers_intro_modal').click(function(){
      //    $('.careers_intro_modal').hide();
      //    PA.markSeenUnseen("careers_intro_modal");
      //  });
      //  $('.careers_intro_image_wrapper a').click(function(){
      //    var link = $(this).attr('href');
      //    PA.call_pj("user.mark_seen", {msg:"careers_intro_modal"}, null, function(){
      //      $.blockUI();
      //      window.location = link;
      //    });
      //    return false;
      //  });
      //  $('.close_careers_intro_browse').click(function(){
      //    PA.call_pj("user.mark_seen", {msg:"careers_intro_modal"}, null, function(){
      //      $.blockUI();
      //      window.location = '/careers/dashboard#/companies';
      //    });
      //  });
      //}
      if (!P.top_bar.allEvents) {
        P.top_bar.rsvpdCompanies = [];
        P.modules.getData("user_profile", 1, function(data){
          var pro = PEM.callFirst("loadMyProfile", P.top_bar.loadAllEvents);
          if (!pro) pro = data;
          if (pro) {
            P.top_bar.profile = pro;
            P.top_bar.loadAllEvents(pro);
            // show job join us link if criteria are met:
            P.top_bar.maybeShowJobLink();
            //if (P.top_bar.isDashboard && pro.academics && (pro.academics.grad_year == "2015" || pro.academics.grad_year == "2016") && PA.user.config.logins >= 30)
            //  P.top_bar.showSeniorSurvey();
            if (typeof(RESOURCES) !== "undefined") {
              return;
            }
            var d = new Date();
            var yr = d.getUTCFullYear();
            var days_ago = new Date();
            // var showingResumeDropdown = 
            days_ago.setDate(days_ago.getDate() - 14);
            
            var last_seen_resume_dropdown = new Date(P.top_bar.user.config.resume_dropdown_last_seen || null);
            var resume_reset_dates = [6, 7, 8, 9]; // month indexes w/ jan = 0
            var resume_most_recent = new Date(yr - 1, resume_reset_dates[resume_reset_dates.length - 1], 15);
            for (var i = 0; i < resume_reset_dates.length; i++) {
              var cand = new Date(yr, resume_reset_dates[i], 15);
              if(d > cand) resume_most_recent = cand;
            }
            var isShowingResumeDropdown = $("#upload_resume_dropdown").is(":visible");
            // not opted out and the last time i saw it was before the most recent cut date and you haven't seen it too recently and i haven't uploaded a resume yet
            if(P.top_bar.user.showCareers && (P.top_bar.user.config && P.top_bar.user.config.logins && P.top_bar.user.config.logins >= 15) && last_seen_resume_dropdown < resume_most_recent && last_seen_resume_dropdown < days_ago && !P.top_bar.profile.resume) {
              P.top_bar.showResumeDropdown();
            } else if(!isShowingResumeDropdown) {
              var last_seen_job_dropdown = new Date(P.top_bar.user.config.job_dropdowns_last_seen || null);
              var job_reset_dates = [0, 1, 2, 3, 9, 10]; // month indexes w/ jan = 0
              var job_most_recent = new Date(yr - 1, job_reset_dates[job_reset_dates.length - 1], 15);
              for (var i = 0; i < job_reset_dates.length; i++) {
                var cand = new Date(yr, job_reset_dates[i], 15);
                if(d > cand) job_most_recent = cand;
              }
              var job_yr = d.getUTCMonth() > 6 ? yr + 1 : yr;
              if(P.top_bar.user.showCareers && (P.top_bar.user.config && P.top_bar.user.config.logins && P.top_bar.user.config.logins >= 15) && !(last_seen_job_dropdown > job_most_recent || last_seen_job_dropdown > days_ago || (P.top_bar.profile.status_what == "accepted_position" && P.top_bar.profile.status_when == job_yr))) {
                P.top_bar.showJobStatus();        
              }  
            }
            
          }
        });
      }
      if (!P.top_bar.allMessages) P.top_bar.loadAllMessages();
      // if (P.top_bar.allStories && P.top_bar.allStories.events && P.top_bar.allStories.events.length > 0)
      //   $('#event_notifications_button').show();
      // P.top_bar.showJobStatus();
    } else {
      $('.top_bar_careers_homescreen').hide();
    }
  },
  profileChange: function(profile) {
    P.top_bar.userProfile = profile;
    // decide if to show search
    var myNr = parseInt(P.top_bar.user.id.substr(7), 36);
    P.top_bar.showSearch = false;
    /*
    if (profile.school == "Stanford University" && myNr % 6 == 0) {
      P.top_bar.showSearch = 1; // false: don't show, 1:show school, 2:show worked_at
    }
    if (P.top_bar.user.config.show_search) {
      if (P.top_bar.user.config.show_search == "1")
        P.top_bar.showSearch = 1;
      else
        P.top_bar.showSearch = false;
    }*/
    P.homescreen.updateNotificationPanel();
    
    if( typeof(P.feed.cid) == "undefined" && typeof(AUTO_POST) == "undefined") {
      if (!P.homescreen.user.isTA && !P.homescreen.showingTechTour) PTM.getModuleTemplate("homescreen", "homescreen_student", P.homescreen.showStudent);
      else if(!(P.homescreen && P.homescreen.showingTechTour)) PTM.getModuleTemplate("homescreen", "homescreen_instructor", P.homescreen.showInstructor);
    }
  },
  loadAllStories: function() {
    P.modules.getData("career_stories", 1, function(data){
      if (P.top_bar.allStories) return;
      var allStories = {events:[], stories:[]};
      var newCount = 0;
      var lastSaw = "";
      if (PA.user.config && PA.user.config.last_saw_careers)
        lastSaw = new Date(PA.user.config.last_saw_careers);
      for (var i = 0; i < data.length; i++) {
        var item = data[i];
        if (item.config.type && item.config.type == "event") {
          var eventDate = new Date(item.show_at);
          if (eventDate > lastSaw)
            newCount += 1;
          allStories.events.push(item);
        } else {
          allStories.stories.push(item);
        }
      }
      if (newCount > 0) {
        $(".event_count").html(newCount);
        $(".event_count").show();
      }
      if (allStories.events.length > 0) {
        $('#event_notifications_button').show();
        var html = "";
        for(var i = 0; i < allStories.events.length; i++) {
          html += P.top_bar.eventStorySmallTemplate({item:allStories.events[i]});
        }
        $('.event_notifications_list').html(html);
      }
      //randomize stories
      shuffleArray(allStories.stories);
      P.modules.getDataLoaded("career_stories_all", allStories);
      P.top_bar.allStories = allStories;
    });
  },
  loadAllEvents: function(profile) {
    // if not already doing this
    if (P.top_bar.loadAllEventsTimout)
      clearTimeout(P.top_bar.loadAllEventsTimout);
    P.top_bar.loadAllEventsTimout = setTimeout(function() {P.top_bar.loadAllEvents(profile);}, 1000 * 60 * 60 * 6); // poll every 6 hours
    PA.call_pj("company_event.get_my_events_info", {}, 1, function(data) {
      P.top_bar.userProfile = profile;
      var calcProfileProgress = function(profile) {
        var progress = 0;
        var hasLinks = false;
        if (profile.links && (profile.links.stackoverflow || profile.links.github || profile.links.website || profile.links.linkedin))
          hasLinks = true;
        profile.has_links = hasLinks;
        if (profile.has_links)
          progress += 2;
        if (profile.coding_since)
          progress += 2;
        if (profile.status)
          progress += 2;
        if (profile.visa)
          progress += 2;
        if (profile.roles && profile.roles.length > 0)
          progress += 2;
        var haveSkills = false;
        if (profile.skills && profile.skills.length > 0)
          haveSkills = true;
        if (haveSkills)
          progress += 10;
        if (profile.resume || profile.resume_internal)
          progress += 80;
        profile.progress = progress;
      };
      calcProfileProgress(P.top_bar.userProfile);
      var lastSawEvents = profile.profile_settings.last_saw_events;
      var lastSawEventsMoment;
      if (!lastSawEvents)
        lastSawEventsMoment = moment().year(2013).startOf('year');
      else
        lastSawEventsMoment = moment(lastSawEvents);
      
      // Only include companies whose profile is actively shown
      var _ciids = Object.keys(data.companies);
      for (var i = 0; i < _ciids.length; i++) {
        var ciid = _ciids[i];
        if (!data.companies[ciid].show_profile) {
          delete data.companies[ciid];
        }
      }
      P.top_bar.allCompanies = data.companies;
      

      var weeks = {};
      var processedWeeks = [];
      P.top_bar.allEvents = {};
      P.top_bar.futureEvents = [];
      for (var i = 0; i < data.events.length; i++) {
        var e = data.events[i];
        e.rsvp_list = e.rsvp_list || [];
        if (e.config && e.config.is_child)
          continue;
        if (!(P.top_bar.allCompanies && P.top_bar.allCompanies[e.internal_id]) && e.internal_id != "all")
          continue;
        if (e.start_date) {
          e.start_date = new Date(e.start_date);
          e.start_date = new Date(e.start_date.getUTCFullYear(),
                                        e.start_date.getUTCMonth(),
                                        e.start_date.getUTCDate());
          e.date_time_str = moment(e.start_date).format("MM/DD") + ( e.start_time.trim().length > 0 ? " - " + e.start_time.trim() : "" );
        }
        if (e.end_date) {
          e.end_date = new Date(e.end_date);
          e.end_date = new Date(e.end_date.getUTCFullYear(),
                                        e.end_date.getUTCMonth(),
                                        e.end_date.getUTCDate());
        }
        if( (!e.description || e.description.trim().length == 0) && P.top_bar.allCompanies[e.internal_id] )
          e.description = P.top_bar.allCompanies[e.internal_id].short_about_full || P.top_bar.allCompanies[e.internal_id].short_about;
        e.description = e.description.replace(/(^|[^"'])(https?:\/\/(\([^\s<\[\]"\)]*\)|[^ \t\n<\[\]"()])+?(\([^\s<\[\]"\)]*\)|[\w\/?=)}#&]))(?=$|<br|<\/|\s|([\]\)]|&gt;)[\.,:;?!"'\-]*(\s|<br|<\/|$)|[\.,:;!"'\-]+(\s|<br|<\/|$))/g, '$1<a href="$2" target="_blank">$2</a>');
        e.description_original = e.description; 
        if (e.description.length > 300 && e.description.indexOf("href") < 0)
        if (e.description.length > 300)
          e.description = e.description.substring(0, 297) + "...";
        if (e.published && e.show_at && moment(e.show_at) > lastSawEventsMoment)
          e["new"] = true;
        if (e.config && e.config.is_parent) {
          e.children = [];
          for (var j = 0; j < e.config.children.length; j++) {
            var child = e.config.children[j];
            if (P.top_bar.allCompanies[child.internal_id]) {
              child.image = P.top_bar.allCompanies[child.internal_id].image;
              child.name = P.top_bar.allCompanies[child.internal_id].name;
              child.desc = child.name + "- " + P.top_bar.allCompanies[child.internal_id].short_about;
              if (child.published && child.show_at && moment(child.show_at) > lastSawEventsMoment) {
                e["new"] = true;
                child["new"] = true;
              }
              e.children.push(child);
              P.top_bar.allEvents[child.id] = child;
            }
          }
        }
        if (P.top_bar.allCompanies && P.top_bar.allCompanies[e.internal_id]) {
          e.image = P.top_bar.allCompanies[e.internal_id].image;
          e.name = P.top_bar.allCompanies[e.internal_id].name;
        }
        var momentDate = moment(e.start_date);
        if (!weeks[momentDate.week()])
          weeks[momentDate.week()] = {};
        if (!weeks[momentDate.week()][momentDate.day()])
          weeks[momentDate.week()][momentDate.day()] = [];
        weeks[momentDate.week()][momentDate.day()].push(e);
        if (e.end_date_str && e.start_date_str != e.end_date_str) {
          var tomorrow = moment(e.start_date).add(1, "day");
          var endDate = moment(e.end_date_str);
          while (tomorrow <= endDate) {
            if (!weeks[tomorrow.week()])
              weeks[tomorrow.week()] = {};
            if (!weeks[tomorrow.week()][tomorrow.day()])
              weeks[tomorrow.week()][tomorrow.day()] = [];
            weeks[tomorrow.week()][tomorrow.day()].push(e);
            tomorrow.add(1, "day");
          }
        }
        P.top_bar.allEvents[e.id] = e;
        
        if( e.start_date && moment().diff(e.start_date) < 0 ) {
          P.top_bar.futureEvents.push(e);
        } 
      }
      
      if( P.homescreen ) {
        if( P.homescreen.updateRecentCompanyImages )
          P.homescreen.updateRecentCompanyImages();
        if( P.homescreen.showCaag )
          P.homescreen.showCaag();
      }
      
      PEM.fire("allEvents", P.top_bar.allEvents);
      var newCount = 0;
      var followingEvents = [];
      var nowWeek = moment().day("Monday").week();
      var hasEvents = false;
      for (var ii = nowWeek; ii < nowWeek + 2; ii++) {
        week = weeks[ii];
        if (week) {
          var pWeek = [];
          var w = moment().day("Monday").week(week).add(-1, "days");
          w.add(-1, "days");
          var seenEvents = {};
          for (var i = 0; i < 7; i++) {
            var date = w.add(1, "days");
            dateFormatted = date.format("ddd, MMMM Do");
            noDateFormatted = date.format("ddd");
            var popoverSide = "right";
            if (i >= 4)
              popoverSide = "left";
            if (week[i]) {
              pWeek.push({events: week[i], date: dateFormatted, side: popoverSide});
              hasEvents = true;
              for (var j = 0; j < week[i].length; j++) {
                var seenId = week[i][j].internal_id + week[i][j].title;
                if (seenEvents[seenId])
                  continue;
                seenEvents[seenId] = 1;
                if (week[i][j]["new"]) newCount += 1;
                if (week[i][j].following)
                  followingEvents.push(week[i][j]);
              }
            } else {
              pWeek.push({events: [], date: noDateFormatted, side: popoverSide});
            }
          }
          processedWeeks.push(pWeek);
        }
      }
      // processedWeeks = [processedWeeks[0]];
      if (processedWeeks.length == 0) {
        processedWeeks = false;
        $("#rsvp_header_1").hide();
      }
      PTM.getModuleTemplate("top_bar", "event_week", function(template){
        P.top_bar.eventWeekTemplate = template;
        $("#event_cal_popover").html(P.top_bar.eventWeekTemplate({events: processedWeeks}));
        if (hasEvents) {
          $("#event_notifications_button").show();
          if (newCount > 0) {
            $(".event_count").html(newCount);
            $(".event_count").show();
          }
        }
        var displayResumeHeader = function() {
          if (followingEvents.length == 0) {
            $('#rsvp_header_2').hide();
            $('#rsvp_header_1').show();
          } else {
            $('#rsvp_header_1').hide();
            $('#rsvp_header_2').show();
            var comps = {};
            var compArray = [];
            for (var i = 0; i < followingEvents.length; i++) {
              if (!comps[e.name]) {
                comps[e.name] = 1;
                compArray.push(e.name);
              }
            }
            $('#rsvp_company_list').html(compArray.join(", "));
            if (P.top_bar.userProfile.resume) {
              $('#rsvp_company_no_resume').show();
              $('#rsvp_company_have_resume').hide();
            } else {
              $('#rsvp_company_no_resume').hide();
              $('#rsvp_company_have_resume').show();
            }
          }
        };
        // displayResumeHeader();
        $(".event_cal_item").hover(function() {
          var eid = $(this).attr("eid");
          var e = P.top_bar.allEvents[eid];
          if (!e) return false;
          $("#event_title_info").html(e.title);
          var dateStr = e.start_date_str;
          if (e.end_date_str)
            dateStr += " - " + e.end_date_str;
          $("#event_date_info").html(dateStr);
          var timeStr = e.start_time;
          if (e.end_time)
            timeStr += " - " + e.end_time;
          $("#event_time_info").html(timeStr);
          $("#event_location_info").html(e.location);
          if (!e.internal_id == "all")
            $("#event_logo_info").html("<img src='" + P.top_bar.allCompanies[e.internal_id].image + "' alt=''>")
          $("#hover_info").addClass('show_info');
        }, function() {
          $("#hover_info").removeClass('show_info');
        });
        $(".child_event_cal_item").hover(function() {
          var e = P.top_bar.allEvents[$(this).attr("eid")];
          $(this).closest(".event_cal_item").find(".event_description").html(e.desc);
        }, function() {
          var e = P.top_bar.allEvents[$(this).closest(".event_cal_item").attr("eid")];
          $(this).closest(".event_cal_item").find(".event_description").html(e.description);
        });
        $(".event_cal_item").click(function(click) {
          if (click && $(click.target).closest(".event_hover_popover").length != 0 && $(click.target).closest("a").length == 0)
            return false;
          if (!(click && $(click.target).closest("a").length > 0)) {
            var eid = $(this).attr('eid');
            var e = P.top_bar.allEvents[eid];
            if (!e) return false;
            var params = {event_id: eid};
            if (e.following) {
              followingEvents = jQuery.grep(followingEvents, function(value) {return value != e;});
              params.unfollow = true;
              e.following = false;
              $("[eid='" + eid + "']").removeClass("rsvped");
              $("[eid='" + eid + "']").find(".event_wrapper").removeClass("rsvped_event");
            } else {
              e.following = true;
              followingEvents.push(e);
              $("[eid='" + eid + "']").addClass("rsvped");
              $("[eid='" + eid + "']").find(".event_wrapper").addClass("rsvped_event");
              if (e.config.is_parent) {
                for (var i = 0; i < e.children.length; i++) {
                  var name = e.children[i].name;
                  if (!P.top_bar.rsvpdCompanies.exist(name))
                    P.top_bar.rsvpdCompanies.push(name);
                }
              } else {
                if (!P.top_bar.rsvpdCompanies.exist(e.name))
                  P.top_bar.rsvpdCompanies.push(e.name);
              }
              if (P.top_bar.rsvpdCompanies.length == 1) {
                $("#rsvp_company_list").html(e.name);
              } else {
                $("#rsvp_company_list").html(P.top_bar.rsvpdCompanies.length + "  companies");
              }
              var progress = P.top_bar.userProfile.progress;
              if (!progress) progress = 0;
              $("#profile_progress").html(progress);
              $("#rsvp_header_1").hide();
              $("#rsvp_header_2").show();
            }
            PA.call_pj("company_event.follow_unfollow_event", params, 1);
            // displayResumeHeader();
          }
        });
        $("#event_cal_popover").click(function(e) {
          e.stopPropagation();
        });
      });
    });
  },
  // clickOutsidePopover: function(e) {
  //   if ($(e.target).closest(".event_actions_popover").length == 0) P.top_bar.closeEventPopover();
  // },
  // closeEventPopover: function() {
  //   if (!P.top_bar.popoverToShow) return;
  //   P.top_bar.popoverToShow = false;
  //   $(".event_actions_popover").hide();
  //   $(document).unbind('mousedown', P.top_bar.clickOutsidePopover);
  // },
  loadAllMessages: function() {
    if (P.top_bar.loadAllMessagesTimout)
      clearTimeout(P.top_bar.loadAllMessagesTimout);
    P.top_bar.loadAllMessagesTimout = setTimeout(function() {P.top_bar.loadAllMessages();}, 1000 * 60 * 60); // poll every 1 hour
    PA.call_pj("memo.get_unread_message_count", {}, 1, function(data){
      if (data > 0) {
        $(".message_count").html(data);
        $(".message_count").show();
      } else
        $(".message_count").hide();
      P.top_bar.allMessages = [];
    }, function(err){
      $(".message_count").hide();
    });


      // if (P.top_bar.allMessages) return;
      // var allMessages = [];
      // var newCount = 0;
      // var lastSaw = "";
      // if (PA.user.config && PA.user.config.last_saw_messages)
      //   lastSaw = new Date(PA.user.config.last_saw_messages);
      // for (var i = 0; i < data.length; i++) {
      //   var message = data[i];
      //   var messageDate = new Date(message.when);
      //   if (messageDate > lastSaw)
      //     newCount += 1;
      //   allMessages.push(message);
      // }
      // if (newCount > 0) {
      //   $(".message_count").html(newCount);
      //   $(".message_count").show();
      //   PA.call_pj("generic.event_to_requests", {event: "careers.message_count_shown",count:newCount},1);
      // }
      // if (allMessages.length > 0) {
      //   $("#message_notifications_button").show();
      //   PA.call_pj("generic.event_to_requests", {event: "careers.message_icon_shown",count:newCount},1);
      //   var html = "";
      //   for (var i = 0; i < allMessages.length && i<4; i++) {
      //     var newDate = new Date(allMessages[i].when).getFullDate();
      //     allMessages[i].date = newDate;
      //     html += P.top_bar.messageSmallTemplate(allMessages[i]);
      //   }
      //   $('.messages_notifications_list').html(html);
      // }
      // P.modules.getDataLoaded("messages_all", allMessages);
      // P.top_bar.allMessages = allMessages;
    // });
  },
  getUserData: function() {
    setTimeout(function() {
      FORCE_NID = P.top_bar.network.id;
      P.top_bar.nid = null;
      PA.cache("user.status", {}, null);
      P.top_bar.getUserData();
    }, 1000*3600*24); // reload once a day
    PA.call_pj("user.status", {}, null, function(data, aid) {
      P.top_bar.user = data;
      PA.cacheUser(data);
      if (data.networks.length == 0)
        data.hasNoClasses = true;
      $('.top_bar_remove_refresh').remove();
      $("#top_bar").replaceWith(P.top_bar.template(data));
      P.top_bar.initEventHandlers();
      P.top_bar.initTipsies();
      if (data.id.indexOf("public_") == 0 || data.email == "tutorial") data.isPublic = true;
      if (data.id.indexOf("public_faq") == 0 || data.email == "tutorial") data.isPublicFaq = true;
      data.is_public = data.isPublic;
      if (!data.config) data.config = {};
      if (!data.config.email_prefs) data.config.email_prefs = {};
      P.modules.setUser(data);
      P.top_bar.setUserAndPopulateNetworks(data);
      if (typeof(CAN_ADMIN) != 'undefined' && CAN_ADMIN) {
        $('.top_bar_company').show();
      }
      if (typeof(IS_NEW_CAREERS) != 'undefined' && IS_NEW_CAREERS) {
        $("#report_bug_item").hide();
        P.top_bar.thisIsCareers();
      }
        
      PEM.fire("user", data);
    }, function(err) {
      if (err == "Email verification needed") {
        if (PA.pushCurrent) {
          PA.pushCurrent.abort();
          PA.pushAbort = false;
          PA.pushCurrent = false;
        }
        window.location = "/email_auth";
        return;
      } else if (err == "Account suspended") {
        alert("Your account has been suspended; please go to piazza.com/forgot_password to reset your password and unsuspend your account.")
      }
      // no user; show login button
      $('.top_bar_middle').hide();
      $('.top_bar_right.logged_in').hide();
      $('#network_button').hide();
      $('.top_bar_dropdown_wrapper').hide();
      $('.top_bar_right.logged_out').show();
      if (typeof(COMPANY_USER) != 'undefined') {
        if (typeof(COMPANY_USER_ID) != 'undefined') {
          P.top_bar.careersPing();
        }
        $('.top_bar_right.logged_out').hide();
        if (typeof(COMPANY_USER) != 'undefined' && COMPANY_USER) {
          var templateParams = {};
          if (typeof(MY_NAME) != 'undefined')
            templateParams.my_name = MY_NAME;
          $('.top_bar_remove_refresh').remove();
          $("#top_bar").replaceWith(P.top_bar.template(templateParams));
          P.top_bar.initEventHandlers();
          $('.top_bar_right.logged_in_company_profile').show();
          $('.top_bar_middle').show();
          $('.top_bar_company').show();
        }
        else
          $('.top_bar_right.logged_out_company_profile').show();
      }
    });
  },
  openDropDown: function(menu) {
    closeDropDown();
    var dropdown_wrapper = menu.closest('.top_bar_dropdown_wrapper');
    dropdown_wrapper.show();
  },
  thisIsDashboard: function() {
    $('.top_bar_qa').addClass("active");
    P.top_bar.isDashboard = true;
    if (P.top_bar.network.type != "group") {
      if (P.top_bar.network.total_content_stud > 20)
        $('.class_report').show();
      if (!P.top_bar.user.isPublic && P.top_bar.network.id != "stories_" + P.top_bar.user.id)
        $('.topbar_icons.stats').show();
      if (!P.top_bar.user.is_public && P.top_bar.schoolExt && P.top_bar.user.networks[0].type != "public" && !P.top_bar.user.isInst
           && P.homescreen.user.config.logins > 10) {
        if (!P.top_bar.user.config.careers || !P.top_bar.user.config.careers.stop) {
          $('#careers_button').show();
        }
      }
      if (!P.top_bar.user.is_public && !P.top_bar.user.isInst) {
        if (P.top_bar.user.config.careers && P.top_bar.user.config.careers.signed) {
          $('#careers_button_signed').show();
          $('#careers_button').hide();
        }
      }
      if (!P.top_bar.user.isPublic)
        P.top_bar.showCareersStuff();
    }
  },
  thisIsCareers: function() {
    P.top_bar.isCareers = true;
    //$("#classes_brand").hide();
    //$("#careers_brand").show();
    //$(".top_bar_tab").hide();
    //$(".class_list").hide();
    //$(".topbar_icon").hide();
    //$(".top_bar_classes_homescreen").show();
    $('.top_bar_manage').hide();
    $('.careers_dashboard_link').addClass('active');
    $('.topbar_events_icon').unbind().click(function(){
      $(".event_count").hide();
      if (P.top_bar.userProfile)
        P.top_bar.userProfile.profile_settings.last_saw_events = moment().format();
      P.top_bar.reloadEventsCount += 1;
      window.location.href = "/careers/dashboard#/events?reload=" + P.top_bar.reloadEventsCount;
      PA.call_pj("user_profile.set_last_saw_events", {}, 1);
      return false;
    });
    P.top_bar.showCareersStuff();
  },
  thisIsManage: function() {
    P.top_bar.isManage = true;
    $('.top_bar_manage').addClass('active');
    $('.topbar_events_icon').click(function(){
      window.location.href = "/careers/dashboard#/events";
      return false;
    });
  },
  thisIsClassmates: function() {
    P.top_bar.isClassmates = true;
    $('.top_bar_classmates').addClass('active');
  },
  cleanDashboard: function() {
    $('.top_bar_statistics').removeClass('active');
    if (P.top_bar.isDashboard)
      $('.top_bar_qa').addClass('active');
  },
  resetEventNotifications: function() {
    $(".event_count").hide();
  },
  resetMessageNotifications: function() {
    $(".message_count").hide();
  },
  showSeniorSurvey: function() {
    return;
    if (PA.isSeenUser('seniors_survey')) return; // don't show if already seen
    PA.markSeenUnseen("seniors_survey_view");
    $('#in_market_option, #off_market_option').click(function(){
      $('#seniors_survey .input_section').removeClass('checked');
      if ($('#in_market_option').is(":checked")) $('#in_market_option').closest('.input_section').addClass('checked');
      if ($('#off_market_option').is(":checked")) $('#off_market_option').closest('.input_section').addClass('checked');
    });
    $('#seniors_survey #confirm_button, #seniors_survey #close_button').click(function(){
      var params = {};
      if ($('#in_market_option').is(":checked"))
        params.seeking = true;
      if ($('#off_market_option').is(":checked")) {
        params.not_seeking = true;
        params.company = $('#seniors_survey .company_name_input').val();
      }
      if ($('#seniors_survey #seek_full_time').is(":checked"))
        params.seeking_full = true;
      if ($('#seniors_survey #seek_internship').is(":checked"))
        params.seeking_intern = true;
      if ((params.seeking || params.not_seeking) && !P.top_bar.surveySaved) {
        P.top_bar.surveySaved = true;
        PA.call_pj("user_profile.senior_survey", params, 1);
      }
      if (params.seeking && $(this).attr("id") != 'close_button') {
        $('#seniors_survey .first_view').hide();
        $('#seniors_survey .second_view').show();
        $('#seniors_survey #confirm_button').hide();
        $('#seniors_survey #done_button').show();
      } else {
        PA.markSeenUnseen("seniors_survey");
        $('#seniors_survey').modal('hide');
      }
    });
    $('#seniors_survey #done_button').click(function(){
      PA.markSeenUnseen("seniors_survey");
      $('#seniors_survey').modal('hide');
    });    
    $('#seniors_survey').modal('show');
  },
  // addCareersNotification: function(notification, displayAll) {
  //   P.top_bar.careersNotifications.push(notification);
  //   if (displayAll){
  //     P.top_bar.displayCareersNotifications(false);
  //   }
  // },
  clickOnCareersNotification: function(nofId) {
    var nof = P.top_bar.careersNotifications[nofId];
    var params = {
      subject: "click from top notification: " + nof.type,
      action: "notification click (link on dropdown notification)",
      data: nof.content
    }
    // PA.call_pj("student_careers.bcc", params, 1);
  },
  closeNotification: function(nofId) {
    // send an email for feedback
    var nof = P.top_bar.careersNotifications[nofId] || {};
    var type = nof.type || "";
    // P.top_bar.sendFeedBackEmailHideCareersNof(nof);
    delete P.top_bar.careersNotifications[nofId];
    P.top_bar.displayCareersNotifications(true);

    // log hide notification in vertica
    PA.call_pj("generic.event_to_requests", {event: "c_nof.hide.dropdown." + type}, 1);
    return false;
  },
  sendFeedBackEmailHideCareersNof: function(nof){
    var nid = P.top_bar.network.id;
    var params =  { nof:nof,
                    nid:nid,
                    location_type:"dropdown"
    };
    PA.call_pj("user.send_feedback_email_hide_careers_nof", params, 1);
  },
  showPiazzaStory: function(nofId){
    P.feed.autoSelect = nofId;
    P.top_bar.changeNetwork("stories_" + P.top_bar.user.id, false, true);
    PA.call_pj("generic.event_to_requests", {event: "c_nof.click.piazza_story_dropdown", nof_id: nofId}, 1);
  },
  displayCareersNotifications: function(clearCount) {
    var html = "";
    var cnt = 0;
    var nofsToMarkAsRead = [];
    var nofMap = P.top_bar.careersNotifications || {};

    // sort nofs by time
    var nofs = [];
    for (var nofId in nofMap) {
      nofs.push(nofMap[nofId]);
    }
    var compare = function(a, b){
      if (a.notification_event_time < b.notification_event_time){
        return 1;
      }
      if (a.notification_event_time > b.notification_event_time){
        return -1;
      }
      return 0;
    }
    nofs.sort(compare);



    for (var i = 0; i<nofs.length; i++) {
      var nof = nofs[i];
      var nofId = nof.id;
      var content = nof.content || "";
      var status = nof.status || "";
      var hideCompanyMessage = "Hide Company";
      if (content.indexOf(" and ") > -1){
        hideCompanyMessage = "Hide Companies";
      }
      var image_source = nof.image_source || P.feed.notificationProperties.defaultImage;
      var link = nof.link;
      html += '<li class="careers_notification clearfix" onclick="P.top_bar.clickOnCareersNotification(\'' + nofId + '\'); P.top_bar.showPiazzaStory(\''+nofId+'\')">' +
              
      // // code for a dropdown for close out options:
      //         '<div class="careers_notification_close dropdown-submenu"><a href=""><i class="icon-chevron-down"></i></a>'+
      //         '<ul class="dropdown-menu notification_dropdown" role="menu" aria-labelledby="dLabel">'+
      //         '<li><a tabindex="-1" href="#" onclick="var element = arguments[0]; element.stopPropagation(); return P.top_bar.closeNotification(\'' + nofId + '\')"><span class="main_title">'+hideCompanyMessage+'</span><span class="sub_title">(See fewer stories like this)</span></a></li>';
      // if (nof.company && nof.company != "?"){
      //   html += '<li><a tabindex="-1" href="#" onclick="return P.top_bar.closeNotification(\'' + nofId + '\')"><span class="main_title">Hide Company</span><span class="sub_title">(Stop seeing stories from this company)</span></a></li>';
      // }
      // html += '</ul>'+
      //         '</div>'+

              // // code for a simple close out option:
              // '<div class="careers_notification_close dropdown-submenu">'+
              //     '<a class="close" onclick="var element = arguments[0]; element.stopPropagation(); return P.top_bar.closeNotification(\'' + nofId + '\')">&times;</a>'+
              // '</div>'+

              '<div class="careers_notification_image">' +
              '<img src="' + image_source + '" alt="">' +
              '</div>' +
              '<div class="careers_notification_content">' +
              '<a class="notification_title">' + content + '</a>' +
              //'<div class="notification_subtitle">' + n.when.toRelativeTime() + '</div>' +
              '<div class="notification_subtitle">' + '' + '</div>' +
              '</div></li>';
      if (clearCount) {
        // mark as read when dropdown is shown. Next time the page is reloaded, they won't be shown
        nofsToMarkAsRead.push(nofId);
      }
      if (!clearCount && status != "read"){
        cnt += 1;
      }
    }
    if (Object.keys(P.top_bar.careersNotifications).length == 0){
      html = '<li class="careers_notification clearfix">'+
               '<div class="careers_notification_content">'+
                 '<div class="notification_title">'+
                    'No Notifications Yet...'+
                  '</div>'+
                '</div>'+
              '</li>';
    }
    if (cnt == 0) {
      $('.careers_notifications_count').hide();
    } else {
      $('.careers_notifications_count').html(cnt);
      $('.careers_notifications_count').show();
    }
    $(".careers_dropdown_notify").html(html);
    if (clearCount && nofsToMarkAsRead.length > 0){
      // tell petty to update nofs as read when the dropdown is clicked
      for (var i=0; i<nofsToMarkAsRead.length; i++) {
        var nof = P.top_bar.careersNotifications[nofsToMarkAsRead[i]];
        if (nof) {
          nof.status = "read";
        }
      }
      PA.call_pj("notification.mark_as_read", {nof_ids:nofsToMarkAsRead}, 1);
    }
  },
  displayCareersNotificationsOptions: function(from) {
    P.top_bar.controlType = from;
    var all = $('.notification_type');
    var conf = P.top_bar.user.config;
    for (var i = 0; i < all.length; i++) {
      var e = $(all[i]);
      if (!conf.c_notify_types || conf.c_notify_types[e.attr("id")])
        e.attr("checked", true);
      else
        e.attr("checked", false);
    }
    // select check-boxes based on user.config.career_notifications
  },
  // returns true if they should see the job link and false other wise
  maybeShowJobLink: function(){
    var show = false;
    var allowed_sids = [
      "ghzif8rpvM6",
      "gkst2179pxo",
      "gngvqcstkXS",
      "giw3ltw94uU",
      "ghziegkpSkh",
      "gic5as6rqBl",
      "gk64clti7wu",
      "gj5y8clufaK",
      "gjbvs5w8Z24",
      "gjuc1g5fEBY",
      "gjlgcf6vcMU",
      "gl6490d0F6I",
      "h6v9rjm85j86ft",
      "gn8z4cpjBfm",
      "gjysakwqrhW",
      "gkjh4yq0HTm",
      "gj6b0zumtST",
      "gjx4e558uyh", 
      "gllosozkzhN", 
      "gn7wksr747Q", 
      "gokwpr8nbeR", 
      "gk0fzg35Y04", 
      "gij1g12yOKj", 
      "gjbh9ifdZej",
      "gokwpw09NKa",
      "glbl8uj9sfA", 
      "gmbksebh90T",
      "irdtqozop131"
    ];
    // net info
    var network = P.top_bar.network || {};
    var network_type = "";
    var network_sid = "";
    // academics info
    var my_profile = P.top_bar.userProfile || {};
    var my_major = "";
    // current class role info
    var my_role = "";
    var my_user = P.top_bar.user || {};
    
    // don't show if don't have enough info
    if (  Object.keys(network).length == 0 ||
          Object.keys(my_profile).length == 0 ||
          Object.keys(my_user).length == 0 ) {
      return false;
    }
    
    network_type = network['type'] || '';
    network_sid = network['school_id'] || '';
    my_year = (my_profile['academics'] || {})['grad_year'] || '';
    my_month = (my_profile['academics'] || {})['grad_month'] || '';
    my_major = (my_profile['academics'] || {})['major'] || '';
    my_role = my_user['role'] || '';
    
    show = (
      my_year.length > 0 && my_month.length > 0 &&
      (my_year == '2018' || my_year == '2019') && 
      P.top_bar.user.isUS && 
      network_type != 'no-verify' &&
      (my_role == 'student' || my_role == 'ta') && 
      !PA.isProfessor() 
    );
    
    // Uncomment out to allow job link to show:
    if (show) {
      $('span.my_name_wrapper').addClass("has_job_link");
      $('span.job_link').show();
    } else {
      $('span.my_name_wrapper').removeClass("has_job_link");
      $('span.job_link').hide();
    }
    return show;
  },
  init: function(module) {
    if (typeof(IS_CLASSMATES) != "undefined")
      P.top_bar.thisIsClassmates();
    PEM.addListener("changeNetwork", function(param){P.top_bar.changeNetwork(param.id, param.show)})
    PEM.addListener("thisIsDashboard", P.top_bar.thisIsDashboard);
    PEM.addListener("thisIsCareers", P.top_bar.thisIsCareers);
    PEM.addListener("thisIsManage", P.top_bar.thisIsManage);
    PEM.addListener("isDashboard", function(){return P.top_bar.isDashboard});
    PEM.addListener("gotoCoursePage", P.top_bar.gotoCoursePage);
    PEM.addListener("gotoConfigClass", P.top_bar.gotoConfigClass);
    PEM.addListener("showBugReport", P.top_bar.showBugReportExternal);
    PEM.addListener("ensureTooltips", P.top_bar.ensureTooltips);
    PEM.addListener("resetEventNotifications", P.top_bar.resetEventNotifications);
    PEM.addListener("resetMessageNotifications", P.top_bar.resetMessageNotifications);
    PEM.addListener("profileChange", P.top_bar.profileChange);
    PEM.addListener("cleanDashboard", P.top_bar.cleanDashboard);
    PEM.addListener("optIn", P.top_bar.optIn);
    PEM.addLastListener("feed_created", P.top_bar.ensureTooltips);
    PEM.addLastListener("feed_filtered", P.top_bar.ensureTooltips);
    PEM.addLastListener("content", P.top_bar.ensureTooltips);

    PTM.getModuleTemplate("careers_dashboard", "careers_dashboard_event_story_small", function(template){P.top_bar.eventStorySmallTemplate = template});
    PTM.getModuleTemplate("careers_dashboard", "careers_dashboard_message_small", function(template){P.top_bar.messageSmallTemplate = template});

    P.top_bar.template = module.template;
    if ($('#top_bar_static_wrapper').length > 0) {
      $("#top_bar_static_wrapper").html(module.template({}));
    } else {
      $("body").prepend(module.template({}));
    }

    P.top_bar.initEventHandlers();
    P.top_bar.initTipsies();
    P.top_bar.getUserData();
    if ((typeof(TOPBAR_COLOR) !== 'undefined')) {
      P.top_bar.setCustomTopbarColor(TOPBAR_COLOR);
    }

    if (typeof(IS_CLASSMATES) != "undefined")
      P.top_bar.thisIsClassmates();

    if (P.push) {
      P.push.onPushMessage = function (channel, eventMessage) {
        if (eventMessage && eventMessage.oid) {
          if (eventMessage.action == "topbar_color_changed") {
            P.top_bar.setTopbarColorCallback(eventMessage.oid, eventMessage.sub_action);
          }
          if (eventMessage.oid === P.top_bar.network.id) {
            PEM.fire("pushNetworkMessage", eventMessage);
            if (eventMessage.action == "status") {
              P.top_bar.network.status = eventMessage.status;
              if (eventMessage.status == "active") {
                $('#inactive_group_message').hide();
                if (P.top_bar.network.config.inactive_block) {
                  // refresh feed
                  P.feed.refreshFeedContent(false);
                }
              } else {
                var private = eventMessage.inactive_private;
                var block = eventMessage.inactive_block;
                P.top_bar.network.config.inactive_private = private;
                P.top_bar.network.config.inactive_block = block;
                var text = "No posts";
                if (private) {
                  text = "Only private posts to instructors";
                }
                if (block) {
                  // refresh feed
                  P.feed.refreshFeedContent(false);
                  // close open post
                  PEM.fire("cleanDashboard");
                  PEM.fire("content", null);
                  PEM.fire("showHomescreen");
                }
                $('#inactive_group_message').text("! This class has been made inactive. " + text + " will be allowed until an instructor reactivates the class.");
                $('#inactive_group_message').show();
              }
            }
          }
          if (P.note_view.content && P.note_view.content.id === eventMessage.oid) {
            // if student view is enabled, don't allow to consume content push messages
            if (P.top_bar.user.isInst && P.feed.studentView) {
              return;
            }
            PEM.fire("pushContentMessage", eventMessage);
          }
        }
      };
      P.push.onGetPushCredentials = function () {
        PA.call_pj("user.get_refreshed_tokens", {nid: P.top_bar.network.id}, 1, P.push.setPushCredentials);
      };
    }
    window.addEventListener('storage', function(event){
      if (event.key == 'refresh') {
        window.location.reload();
      }
    });    
  },
  loadQaSite: function() {
    if (P.top_bar.isDashboard) {
      $(".top_bar_tab").removeClass("active");
      $(".top_bar_qa").addClass("active");
      PEM.fire("cleanDashboard");
      PEM.fire("content", null);
      PEM.fire("showHomescreen");
      PEM.fire("showFeed");
      P.folders_bar.setNumDrafts();
      if (!P.top_bar.user.isInst)
        PA.call_pj("generic.page_event", {type:"top_bar.qa_tab_click"}, 1, function(){});
    } else {
      P.top_bar.markSetupSeen(function(){
        window.location = "/class/" + P.top_bar.nid;
      });
      return false;
    }    
  }
}, 

(function(a){var b,e=a();a.fn.b_sortable=function(c){var j=String(c);c=a.extend({connectWith:!1},c);return this.each(function(){if(/^enable|disable|destroy$/.test(j)){var g=a(this).children(a(this).data("items")).attr("draggable","enable"==j);"destroy"==j&&g.add(this).removeData("connectWith items").off("dragstart.h5s dragend.h5s selectstart.h5s dragover.h5s dragenter.h5s drop.h5s")}else{var h,k,g=a(this).children(c.items),f=a("<"+(/^ul|ol$/i.test(this.tagName)?"li":"div")+' class="sortable-placeholder">');
g.find(c.handle).mousedown(function(){h=!0}).mouseup(function(){h=!1});a(this).data("items",c.items);e=e.add(f);c.connectWith&&a(c.connectWith).add(this).data("connectWith",c.connectWith);g.attr("draggable","true").on("dragstart.h5s",function(d){if(c.handle&&!h)return!1;h=!1;d=d.originalEvent.dataTransfer;d.effectAllowed="move";d.setData("Text","");k=(b=a(this)).addClass("sortable-dragging").index()}).on("dragend.h5s",function(){b&&(b.removeClass("sortable-dragging").show(),e.detach(),k!=b.index()&&
b.parent().trigger("sortupdate",{item:b}),b=null)}).not("a[href], img").on("selectstart.h5s",function(){this.dragDrop&&this.dragDrop();return!1}).end().add([this,f]).on("dragover.h5s dragenter.h5s drop.h5s",function(d){if(!g.is(b)&&c.connectWith!==a(b).parent().data("connectWith"))return!0;if("drop"==d.type)return d.stopPropagation(),e.filter(":visible").after(b),b.trigger("dragend.h5s"),!1;d.preventDefault();d.originalEvent.dataTransfer.dropEffect="move";g.is(this)?(c.forcePlaceholderSize&&f.height(b.outerHeight()),
b.hide(),a(this)[f.index()<a(this).index()?"after":"before"](f),e.not(f).detach()):!e.is(this)&&!a(this).children(c.items).length&&(e.detach(),a(this).append(f));return!1})}})}})(jQuery);

!function(a){var b="waitForImages";a.waitForImages={hasImageProperties:["backgroundImage","listStyleImage","borderImage","borderCornerImage","cursor"]},a.expr[":"].uncached=function(b){if(!a(b).is('img[src!=""]'))return!1;var c=new Image;return c.src=b.src,!c.complete},a.fn.waitForImages=function(c,d,e){var f=0,g=0;if(a.isPlainObject(arguments[0])&&(e=arguments[0].waitForAll,d=arguments[0].each,c=arguments[0].finished),c=c||a.noop,d=d||a.noop,e=!!e,!a.isFunction(c)||!a.isFunction(d))throw new TypeError("An invalid callback was supplied.");return this.each(function(){var h=a(this),i=[],j=a.waitForImages.hasImageProperties||[],k=/url\(\s*(['"]?)(.*?)\1\s*\)/g;e?h.find("*").addBack().each(function(){var b=a(this);b.is("img:uncached")&&i.push({src:b.attr("src"),element:b[0]}),a.each(j,function(a,c){var d,e=b.css(c);if(!e)return!0;for(;d=k.exec(e);)i.push({src:d[2],element:b[0]})})}):h.find("img:uncached").each(function(){i.push({src:this.src,element:this})}),f=i.length,g=0,0===f&&c.call(h[0]),a.each(i,function(e,i){var j=new Image;a(j).on("load."+b+" error."+b,function(a){return g++,d.call(i.element,g,f,"load"==a.type),g==f?(c.call(h[0]),!1):void 0}),j.src=i.src})})}}(jQuery);

P.feed = {
  user: null,
  network: null,
  content: null,
  feedPrefetch: null,
  feedObj: null,
  searchFeed: null,
  feedHash: {},
  initialFeedWidth: 350,
  searchFeedWidth: 550,

  feedBuckets: {},       // indicate whether or not a feed bucket is open
  bucketIds:{},
  initialFeedSize: 20,   // how many items to load at page start
  loadAtOnce: 150,         // how many feed items to load at a time after the initial feed has been loaded
  sort: "updated",       // sorting order: updated|score
  searchSort: "date",    // search sort order: date|relevance
  showFeedDetails: "yes",
  feedItemTemplate: null,
  curURLID: null,
  activeClasses: [],     // list of classes user is instructor for
  communityActivities: [],
  communityActivitySubject: "",
  feedLoadInProgress: false,
  must_read_counts:{cnt:0, new:0},
  mr_timers:{},
  top_size: 61,
  live: false,

  initEventHandlers: function() {
    window.onpopstate = function(event) {
      if (event && event.state && event.state.cid) {
        P.feed.curURLID = event.state.id;
        P.feed.selectContent(event.state.cid);
      }
    };
    $('.dropdownToggler.feed-options').click(function(){
      $('.feed-options-menu').show();
      return false;
    });
    $('.search_tips_toggle').click(function(){
      if ($('.search_tips').is(':visible')) {
        $('.search_tips').hide();
        $('.search_tips_arrow').removeClass('up').addClass('down');
        $('#question_feed_questions').css('top', P.feed.top_size + 30 + 'px');
      } else {
        $('#question_feed_questions').css('top', P.feed.top_size + 284 + 'px');
        $('.search_tips').show();
        $('.search_tips_arrow').removeClass('down').addClass('up');
        $('.initial_message').hide();
      }
    });
    $('#new_post_button').click(function() {
      P.feed.showNewPost();
      closeDropDown();
      return false;
    });
    $('.manual_filter').click(function() {
      $('.manual_filter').removeClass("active");
      $(this).addClass("active");
      P.feed.filterFeed({filter: $(this).attr("filter")});
    });
    $('#markAllRead').click(function() {
      var answer = confirm("Mark all posts as read?");
      if (answer)
        P.feed.markAllRead();
    });
    $('.show_icons_in_feed').click(function() {
      $('.show_icons_in_feed').toggleClass('active');
      $('#question_feed_questions').toggleClass('hidingIcons');
      if (!P.feed.user.config.feed) P.feed.user.config.feed = {};
      if (P.feed.user.config.feed.icons) {
        PA.call_pj("user.set", {stat:"feed.icons",val:0}, 1);
        P.feed.user.config.feed.icons = 0;
      } else {
        PA.call_pj("user.set", {stat:"feed.icons",val:1}, 1);
        P.feed.user.config.feed.icons = 1;
      }
    });
    $('.show_feed_details').click(function() {
      if ($('#question_feed_questions').hasClass('compact_view')) {
        P.feed.showFeedDetails = "yes";
      } else {
        P.feed.showFeedDetails = "no";
      }
      PA.call_pj("user.set", {stat: "feed_details", val: P.feed.showFeedDetails}, 1);
      if (!P.feed.user.config) P.feed.user.config = {};
      P.feed.user.config.feed_details = P.feed.showFeedDetails;
      P.feed.setFeedDetails(P.feed.showFeedDetails);
    });
    $('.show_followup_count').click(function() {
      $('.show_followup_count').toggleClass('active');
      $('.followup_count').toggleClass('active');
      if (!P.feed.user.config.feed) P.feed.user.config.feed = {};
      if (P.feed.user.config.feed.followup_count) {
        PA.call_pj("user.set", {stat:"feed.followup_count",val:0}, 1);
        P.feed.user.config.feed.followup_count = 0;
      } else {
        PA.call_pj("user.set", {stat:"feed.followup_count",val:1}, 1);
        P.feed.user.config.feed.followup_count = 1;
      }
    });
    $('.page_feed_options').unbind().click(function(event){
      if (!$('#page_feed_options_dropdown').is(':visible')) {
        openDropdown('#page_feed_options_dropdown', event);
      }
    });
    $('#instructor_feed_view').unbind().click(function(event){
      if (!$('#instructor_feed_view_dropdown').is(':visible')) {
        openDropdown('#instructor_feed_view_dropdown', event);
      }
    });
    $('.feed_options_arrow').unbind().click(function(event){
      if ($('#page_feed_options_dropdown').is(':visible')) {
        closeDropdown('#page_feed_options_dropdown', event);
      } else {
        openDropdown('#page_feed_options_dropdown', event);
      }
    });
    $('#search-box').keyup(function(e){
      var text = $(this).val();
      if ((text.length > 1 || text.match("^\\d+$")) &&
        text !== P.feed.searchQuery) {

        clearTimeout(P.feed.searchTimeout);
        var timeout = 1000;
        if (e.keyCode == 13) timeout = 10;
        P.feed.searchTimeout = setTimeout(function() {
          P.feed.search(text);
          $('#clear-search-button').show();
        }, timeout);
      }
      if (text.length == 0) {
        P.feed.filterFeed();
        clearTimeout(P.feed.searchTimeout);
        $('#clear-search-button').hide();
      }
    });
    $('#clear-search-button').click(function(){
      P.feed.filterFeed();
      return false;
    });
    $('.sort_results_by').unbind().click(function() {
      var sortOrder = 'date';
      if ($(this).attr('id') === "sort_by_rel") {
        sortOrder = 'relevance';
      }
      if(P.feed.searchSort === sortOrder) {
        return;
      }
      P.feed.searchSort = sortOrder;
      P.feed.orderSearchResults(sortOrder);
      if(sortOrder === 'relevance') {
        PA.call_pj("generic.event_to_requests", {event: "sort_by_relevance", ad_id: P.feed.searchHashValue}, 1);
      }
      $('.sort_results_by').removeClass("active");
      $(this).addClass("active");
    });
    $(".open_sort_option").click(function(){
      $(".open_sort_option").removeClass("active");
      $(this).addClass("active");
      var sort = $(this).attr("filter");
      P.feed.changeSortBy(sort, true);
    });
    $("#dismiss_feed_expanded_msg").click(function() {
      PA.markSeenUnseen("feed_view_toggle_msg_new");
    });
    $('#dismiss_feed_search_disabled').click(function(){
      $('#feed_search_disabled').hide();
    });
    //for students add this class to feed to position last dropdown properly
    if(P.feed.user.role=='student') {
      $("#feed").addClass("student_dropdown_position");
    }
    $('#question_feed_questions').css('top', P.feed.top_size);
  },
  setLive: function(live, recreateFeed) {
    P.feed.network.live = live;
    P.feed.feedObj.live = live;
    if (live.current) {
      P.feed.live = live.current;
      if (P.feed.user.isInst) {
        P.feed.top_size = 95;
        $('#live_control').show();
        $('.live_on').show();
        $('.live_button_stop').show();
        $('.live_button_start').hide();
        $('#homescreen_start_live').hide();
        $('#homescreen_start_live_progress').show();
      }
      if (!P.feed.feedFilter && !P.feed.searchFeed && recreateFeed) {
        P.feed.createFeed(P.feed.feedObj.feed);
      } else {
        if (P.feed.manualFilter == "live") {
          P.feed.createFeed(P.feed.searchFeed);
        }
      }
    } else {
      $('#upvote_button_wrapper').hide();
      $('#upvote_close_button_wrapper').hide();
      $('.live_button_stop').hide();
      $('.live_button_start').show();
      $('#homescreen_start_live').show();
      $('#homescreen_start_live_progress').hide();
      if (P.feed.live) {
        P.feed.lastLive = P.feed.live;
      }
      P.feed.live = false;
    }
    if(P.feed.searchFeed) {
      $('#question_feed_questions').css('top', P.feed.top_size + 29 + 'px');
    } else {
      $('#question_feed_questions').css('top', P.feed.top_size);
    }
  },
  startLive: function(state, add) {
    var hours = 1;
    if ($('#max_live_2' + add).attr('checked')) hours = 2;
    if ($('#max_live_3' + add).attr('checked')) hours = 3;
    if ($('#max_live_4' + add).attr('checked')) hours = 24;
    if ($('#max_live_5' + add).attr('checked')) hours = 168;
    PA.call_pj("network.set_live_state", {nid:P.feed.network.id, new_state:state, hours:hours}, null, function(live){
      P.feed.setLive(live, true);
    }, function(err){alert(err);});
  },
  removeLastLive: function() {
    // remove all feed items with live == lastLive
    for (var i = 0; i < P.feed.feedObj.feed.length; i++) {
      var item = P.feed.feedObj.feed[i];
      if (item.live && item.live == P.feed.lastLive) {
        P.feed.feedObj.feed.splice(i, 1);
        i--;
      }
    }
    P.feed.createFeed(P.feed.feedObj.feed);
  },
  closeLive: function() {
    if (!P.feed.live) {
      P.feed.top_size = 61;
      $('#live_control').hide();
      $('#question_feed_questions').css('top', P.feed.top_size);
    }
    PEM.fire("cleanDashboard");
    PEM.fire("content", null);
    PEM.fire("showHomescreen");
    PEM.fire("showFeed");
  },
  openLive: function() {
    if (P.feed.user.isInst) {
      PEM.fire("cleanDashboard");
      PEM.fire("content", null);
      PEM.fire("showHomescreen");
      PEM.fire("showFeed");
      $('.live_qa').show();
      $('.homescreen_section_wrapper').hide();
      $('.ia2a').hide();
      P.feed.top_size = 95;
      $('#live_control').show();
    }
    P.feed.filterFeed({filter:'live'});
    $('#question_feed_questions').css('top', P.feed.top_size);
  },
  showStudentFeed: function(studentView, preventRefresh) {
    P.feed.studentView = studentView;
    if (P.feed.studentView) {
      $('#instructor_feed_view .instructor').hide();
      $('#instructor_feed_view .student').show();
      $('#question_feed_questions').addClass('student_view');
      // close open post
      PEM.fire("cleanDashboard");
      PEM.fire("content", null);
      PEM.fire("showHomescreen");
    } else {
      $('#instructor_feed_view .instructor').show();
      $('#instructor_feed_view .student').hide();
      $('#question_feed_questions').removeClass('student_view');
    }
    if (preventRefresh) return;
    P.feed.refreshFeedContent(false);
  },
  copyAt: function(elem) {
    var nr = elem.id.split("copy_")[1];
    copyToClipboard('@' + nr);
    $('#click_copied_' + nr).show();
    setTimeout(function() {
      $('#click_copied_' + nr).hide();
    }, 4000)
  },
  showNewPost: function() {
    PEM.fire("verifyAnyCancel", function() {
      P.modules.loadModule("old_new_post", {folders: P.feed.feedObj.tags.instructor}, function() {
        PEM.fire("show_new_post");
      }, null);
    });
  },
  initPersonalFeed: function() {
    if (P.feed.user && P.feed.user.config && P.feed.user.config.feed) {
      var f = P.feed.user.config.feed;
      if (f.icons == 0) {
        $('#show_icons_in_feed').removeClass('active');
        $('#question_feed_questions').addClass('hidingIcons');
      }
      // $('.filter-shortcut').each(function() {
      //   var id = $(this).attr('id').split("-")[1];
      //   if (f[id] == 1)
      //     $(this).show();
      // });
    }
  },
  convertLive: function(cid) {
    PA.call_pj("content.convert_live_to_regular", {cid: cid}, 1);
  },
  feedItemDropdownMenuCallback: function(that) {
    var item = $(that);
    var postID = item.closest('.feed_item').attr('id');
    var action = item.attr('class');
    if (action == 'live_action')
      P.feed.convertLive(postID);
    if (action == 'archive_action')
      P.feed.delFeedItem(postID);
    if (action == 'unarchive_action')
      P.feed.addFeedItem(postID);
    if (action == 'follow_action')
      P.feed.toggleFollow(postID, true);
    if (action == 'unfollow_action')
      P.feed.toggleFollow(postID, false);
    if (action == 'mark_unread_action')
      P.feed.markUnread(postID);
    if (action == 'mark_read_action')
      P.feed.markUnread(postID, true);
    if (action == 'delete_action')
      P.feed.deleteContent(postID);
    if (action == 'clone_action') {
      var nid = item.attr("id").substr(9);
      var cn = item.attr("cn"); // course number
      P.feed.clone(postID, nid, cn);
    }
    if (action == 'pin_post' || action == 'unpin_post') {
      var method;
      if (action == 'pin_post')
        method = "content.pin";
      else
        method = "content.unpin";

      PA.call_pj(method, {cid: postID}, 1, function(data) {
        if (P.feed.feedHash[postID]) {
          P.feed.feedHash[postID].tags = data.item.tags;
          P.feed.feedHash[postID].version += 1;
          P.feed.feedItemUpdate(P.feed.feedHash[postID], true);
        }
      });
    }
    return false;
  },
  clone: function(cid, nid, cn) {
    P.feed.feedItemUpdate(P.feed.feedHash[cid]);
    PA.call_pj('network.clone_single_content',
            {content_id:cid, new_course_id:nid}, 1, function() {
              var item = $('#' + cid);
              item.find('.feed_item_dropdown_selector .feed_item_dropdown_arrow ul').hide();
              if (item.find('.successful_clone_message').length == 0) {
                item.find('.messages').append('<li class="successful_clone_message" style="display: none;"><div>Copied to <span class="copy_post_course_number">class</span> as a private post.</div></li>');
              }
              item.find('.copy_post_course_number').text(cn);
              item.find('.successful_clone_message').fadeIn(300).delay(2400).fadeOut(200);
            }, function(err) {
                alert('Failed to clone content: ' + err);
            });
  },
  feedItemUpdate: function(content, forceRecreate) {
    if (forceRecreate || (content.tags && content.tags.exist("pin"))) {
      if (P.feed.searchFeed && P.feed.manualFilter == "live") {
        P.feed.searchFeed.sort(P.feed.feedComparator);
        P.feed.addBuckets(P.feed.searchFeed);
        P.feed.createFeed(P.feed.searchFeed);
      }
      if (!P.feed.feedFilter && !P.feed.searchFeed) {
        P.feed.setNewFeed(P.feed.feedObj);
        return;
      }
      if (content === null) {
        return;
      }
    }
    // if there is no post with this ID in the feed, no need to update anything, so we're done
    var $feedItem = $("#" + content.id);
    if ($feedItem.size() < 1)
      return;
    $(".tipsy").remove();
    var html = P.feed.createFeedItem(content);
    $feedItem.replaceWith(html);
    P.renderer.renderMath(content.id);
    if (P.feed.content) { // select item again
      $('#' + P.feed.content.id).addClass('selected');
    }
  },
  addFeedItem: function(id) {
    PA.call_pj("network.add_item", {cid:id}, $('#' + id), function(data){
      P.feed.searchFeed.remove(function(item) {
        if (id == item.id) {
          item.hidden = false;
          P.feed.feedObj.feed.push(item);
          P.feed.feedHash[item.id] = item;
          return true;
        }
        return false;
      });
      $('#' + id).hide();
    });
    return false;//do not bubble event
  },
  deleteContent: function(id) {
    //if (P.feed.checkNotActive()) return false;
    var params = {
      title: "Delete this content?",
      confirm: "Delete",
      cancel: "Cancel",
      callback: function() {
        PA.call_pj("content.delete", {cid:id}, null, function(data){
          P.feed.removeFromFeed(id);
        }, function(err) {setTimeout(function() {alert(err);}, 1000)});
      }
    };
    PEM.fire("showConfirmationWindow", params);
    return false;
  },
  toggleFollow: function(cid, follow) {
    var method = "content.unbookmark";
    if (follow)
      method = "content.bookmark";
      PA.call_pj(method, {cid: cid}, 1, function(data) {
        P.feed.feedObj.feed.forEach(function(item){
          if (item.id == cid) {
            if (follow)
              item.book = true;
            else
              item.book = false;
            P.feed.feedItemUpdate(item);
            PEM.fire("toggleFollowFromFeed", {cid: cid, follow: follow});
          }
        });
      });
  },
  toggleFollowFromPost: function(params) {
    P.feed.toggleFollow(params.cid, params.follow);
  },
  markUnread: function(cid, markRead) {
    if (!cid && P.feed.content) cid = P.feed.content.id;
    if (markRead) {
      PA.call_pj("content.view", {cid:cid}, 1, function(data){
        //mark it read on the feed
        P.feed.feedObj.feed.forEach(function(item){
          if (item.id === cid && item.is_new) {
            item.is_new = false;
            P.feed.feedItemUpdate(item);
            PEM.fire("updateFolderCount", {folders: item.folders, action: "dec"});
            P.feed.updateTitle();
            P.feed.updateMRUC(-1, item);
          }
        });
      });
    } else {
      PA.call_pj("content.mark_unread", {cid:cid}, 1,
        function(data) {
          //mark it unread on the feed
          P.feed.feedObj.feed.forEach(function(item){
            if (item.id === cid && !item.is_new) {
              item.is_new = true;
              P.feed.feedItemUpdate(item);
              PEM.fire("updateFolderCount", {folders: item.folders, action: "inc"});
              P.feed.updateTitle();
              P.feed.updateMRUC(1, item);
            }
          });
        });
    }
  },
  changeSortBy: function(sort, savePrefs) {
    P.feed.sort = sort;
    if (savePrefs) {
      P.feed.user.config.sort_default = sort;
      PA.call_pj("user.set", {stat:"sort_default",val:sort}, 1);
    }
    if (P.feed.feedObj && P.feed.feedObj.feed) {
      if (P.feed.feedFilter) {
        P.feed.searchFeed.sort(P.feed.feedComparator);
        P.feed.createFeed(P.feed.searchFeed);
      } else {
        P.feed.addBuckets(P.feed.feedObj.feed);
        P.feed.feedObj.feed.sort(P.feed.feedComparator);
        P.feed.createFeed(P.feed.feedObj.feed);
      }
    }
  },
  delFeedItem: function(id) {
    PA.call_pj("network.del_item", {cid:id}, $('#' + id), function(data){
      P.feed.removeFromFeed(id);
    });
    return false;//do not bubble event
  },
  removeFromFeed: function(cid) {
    P.feed.feedHash[cid] = null
    P.feed.feedObj.feed.removeF(function(item) {
      if (cid == item.id) {
        if (item.is_new) {
          PEM.fire("updateFolderCount", {folders: item.folders, action: "dec"});
        }
        return true;
      }
      return false;
    });
    if (P.feed.searchFeed && P.feed.searchFeed.length > 0) {
      P.feed.searchFeed.removeF(function(item) {
        if (cid == item.id) {
          return true;
        }
        return false;
      });
    }
    $('#' + cid).remove();
    P.feed.updateTitle();
  },
  bucketHeaderHTML: function(bucketName, bucketNumber, start_css, arrow){
    var id = "bucket_" + bucketNumber;
    var img = "";
    if (bucketName == "Pinned") img = "<img src='/images/piazza/dashboard/feed_icon_pin.png' alt='pin'>";

    //DMITRY - I put the image for the top bar of the bucket here. For the Favorite section,
    if (bucketName == "Favorites") img = "<img src='/images/piazza/dashboard/feed_icon_favorite.png' alt='pin'></img>"

    var html = '<div title="' + bucketName + '" onclick="P.feed.toggleBucket(' + "'" + id + "'" + ')" id="' + id + '" class="' + start_css + ' page_feed_bucket_header"><span data-pats="label">' + arrow + ' ' + bucketName + '</span>'+ img + '</div>';
    return html;
  },
  toggleBucket: function(bucketId){
    var $bucket = $('#' +  bucketId);
    if($bucket.siblings('.item-list-in-bucket').is(':visible')){
      P.feed.feedBuckets[$bucket.attr('id')] = 1;
      $bucket.find('span').html('&#9656;' + $bucket.find('span').html().substring(1));
      $bucket.siblings('.item-list-in-bucket').hide();
    } else {
      P.feed.feedBuckets[$bucket.attr('id')] = 2;
      $bucket.find('span').html('&#9662;' + $bucket.find('span').html().substring(1));
      $bucket.siblings('.item-list-in-bucket').show();
    }
  },

  /*
   * Private Function: P.feed.createFeedItem
   * ===================================
   * This function constructs all of the HTML for a single feed item. It
   * handles the showing and hiding of all elements based on the state of
   * the associated content (i.e. if it has a students' response and/or
   * instructors' response, if it has new activity, if it is unread or
   * unanswered, if it has unresolved followups, etc.), so no additional
   * logic is needed on that front.
   */
  createFeedItem: function (content) {

    var unresolvedFollowups = content.no_answer_followup
    if (P.feed.network.config.disable_followup_resolve)
      unresolvedFollowups = 0
    var statuses = '';
    if (content.log) {
      content.main_version = content.log.length;
    }
    content.changes = (content.version)
                    ? content.main_version - content.version
                    : content.main_version;
    if (content.has_s)                  statuses += 'has_sr ';                           // SR
    if (content.has_i)                  statuses += 'has_ir ';                           // IR
    if (content.type == 'question'
        && content.no_answer)           statuses += 'unanswered ';                      // Unanswered
    if (content.type == 'note')         statuses += 'note ';                            // Note
    if (content.type == 'poll')         statuses += 'poll ';                            // Poll
    if (content.tag_endorse_prof)       statuses += 'instructor_endorsed_sr ';            // Instructor-Endorsed SR
    if (content.tag_good_prof > 0)      statuses += 'instructor_endorsed_post ';          // Endorsed Post
    if (content.status == 'private')    statuses += 'private ';                         // Private
    if (unresolvedFollowups > 0) statuses += 'has_unresolved_followups ';          // Unanswered Followups
    if (content.id == 'careers_optin')  statuses += 'careers_optin ';
    if (content.id == 'careers_optin_new')  statuses += 'careers_optin_new ';
    if (content.changes > 0 && !P.feed.user.isPublic) statuses += 'has_new_activity ';       // New Activity
    if (content.is_new) statuses += 'unread '; // Unread
    var timeStamp;
    var metadataTime;

    if( P.feed.manualFilter == "updated" && content.log && content.log[content.log.length -1].t) {
      var dt = new Date();
      dt.setISO8601(content.log[content.log.length -1].t);
      metadataTime = dt;
    } else {
      metadataTime = content.updated;
    }

    if (metadataTime) {
      if (content.dateType == 0) timeStamp = metadataTime.get12();       // x units ago
      if (content.dateType == 1) timeStamp = metadataTime.getWDay();     // Mon, Tue, Wed
      if (content.dateType == 2) timeStamp = metadataTime.getFullDate(); // MM/DD/YY
    }

    var contentChangesPlural = (content.changes > 1 ? 's' : '')
    var icon;
    var memIcon = false;
    if (content.type == 'poll') icon = "poll_icon";
    if (content.type == 'note') icon = "note";
    if (content.type == 'question' && P.feed.network.type == 'group') {
      icon = "";
      memIcon = true;
    }
    var publicUser = P.feed.user.is_public;
    var isInst = P.feed.user.isInst;
    if (!content.tags) content.tags = [];
    var hasPin = content.tags.exist('pin');

    var snippetText;
    if (P.feed.searchQuery && content.highlighted_snipet) {
      snippetText = content.highlighted_snipet;
    } else {
      snippetText = content.content_snipet.replace(/<[^>]*>/g, "").replace(/<[^>]*$/, "");
    }
    var subject = content.subject;

    subject = subject.replace(/</g, "&lt;");
    subject = subject.replace(/>/g, "&gt;");
    snippetText = snippetText.replace(/<[^>]+>/g, "");
    snippetText = snippetText.replace(/___bold_start___/g, "<strong style='color:#222'>");
    snippetText = snippetText.replace(/___bold_end___/g, "</strong>");
    if (snippetText.indexOf("<script") >= 0 || snippetText.indexOf("PA.load(") >= 0) snippetText = "";
    var isPrivateToIndividuals = false;
    var icons = 0;
    if (content.hidden)
      icons += 1;
    var didPrivate = false;
    if (content.status == "private") {
      didPrivate = true;
      content.is_private = true;
      icons += 1;
    }
    var sectName;
    if (content.feed_groups) {
      // see if this item is in a section
      sectName = "";
      for (var group in P.feed.network.sectionNames)
        if ((content.feed_groups.indexOf(group) == 0 || content.feed_groups.indexOf("," + group) > 0) && P.feed.user.config.feed_groups.exist(group)) {
          sectName = P.feed.network.sectionNames[group];
          break;
        }
      if (sectName != "") {
        icons += 1;
      } else {
        // must be private to individuals
        if ((content.feed_groups.indexOf(",") >= 0 || content.feed_groups.indexOf("instr_" + P.feed.network.id) >= 0) && !didPrivate) {
          isPrivateToIndividuals = true;
          content.is_private = true;
          icons += 1;
        }
      }
    }
    var instNote = content.tags.exist('instructor-note') || content.tags.exist('instructor-question') || content.tags.exist('instructor-poll');
    if (P.feed.network.isGroup) instNote = false;
    var iconsGtOne = false;
    if (instNote) icons += 1;
    if (icons > 1) {
      iconsGtOne = true;
      icons = 0;
    }
    var maxTitleLen = 235 - icons*59;
    if (content.has_attach) maxTitleLen -= 15;
    var showLikes = P.feed.network.isOpen;
    if (showLikes && content.lk && content.lk > 0) maxTitleLen -= 38;
    var hasLikes = (showLikes && content.lk && content.lk > 0);
    // Instructor-Endorsed Post
    var isEndorsed = (content.tag_good_prof > 0);
    var isEndorsedFollowup = (content.gd_f > 0);
    var isEndorsedSR = (content.tag_endorse_prof > 0);
    var commentCount = 0
    for (var i = 0; i < content.log.length; i++) {
      if (content.log[i].n === "followup") commentCount++
      if (content.log[i].n === "feedback") commentCount++
    }
    var showFollowupCount = (P.feed.user.config && P.feed.user.config.feed && P.feed.user.config.feed.followup_count)
      // Open team mate searches
    var openTeammateSearch = false;
    if ((content.subject.indexOf("Form project teams & study groups!") != -1 ||
       content.subject.indexOf("Search for Teammates!") != -1)) {
       openTeammateSearch = P.feed.feedObj.no_open_teammate_search;
       statuses += 'has_open_teammate_searches ';         // Open Teammate Searches
    }
    var timer = false;
    var current_time = (new Date).getTime();
    if (P.feed.user.isInst && content.timer && !content.has_i && content.type == "question") {
      timer = content.timer;
      var now = current_time / 1000;
      timer.isActive = (now < timer.expire);
      if (now - timer.expire > 72*3600)
        timer = false;
    }
    var mr_expires_after = -P.clock.getLocalDiff(content.mrx, current_time);
    var context = {
      isMobile: is_mobile,
      content: content,
      isGroup: (P.feed.network.type == 'group'),
      statuses: statuses,
      timeStamp: timeStamp,
      contentChangesPlural: contentChangesPlural,
      icon: icon,
      memIcon: memIcon,
      publicUser: publicUser,
      isInst: isInst,
      hasPin: hasPin,
      timer: timer,
      isPrivate: didPrivate,
      sectName: sectName,
      maxTitleLen: maxTitleLen,
      isPrivateToIndividuals:isPrivateToIndividuals,
      instNote: instNote,
      iconsGtOne: iconsGtOne,
      hasLikes: hasLikes,
      numLikes: content.lk,
      snippetText: snippetText,
      subject: subject,
      isEndorsed: isEndorsed,
      isEndorsedFollowup: isEndorsedFollowup,
      isEndorsedSR: isEndorsedSR,
      unresolvedFollowups: unresolvedFollowups,
      commentCount: commentCount,
      showFollowupCount: showFollowupCount,
      openTeammateSearch: openTeammateSearch,
      activeClasses: P.feed.activeClasses,
      must_read_expired: mr_expires_after < 0
    };
    if (P.feed.isMustRead(content) && mr_expires_after > 0) {
      if (P.feed.mr_timers[content.id]) {
        clearTimeout(P.feed.mr_timers[content.id]);
      }
      P.feed.mr_timers[content.id] = setTimeout(P.feed.mustReadExpired, mr_expires_after + 1, content.id);
    }
    return P.feed.feedItemTemplate(context);
  },

  setUser: function(u) {
    if (!P.feed.user || P.feed.user.id != u.id) {
      P.feed.user = u;
      P.feed.feedPrefetch = u.feed_prefetch;
      u.feed_prefetch = null;
    }
    if (P.feed.template && $('.page_feed').length == 0) {
      $('#views').append(P.feed.template({user:P.feed.user}));
      P.feed.initEventHandlers();
      P.feed.setFeedHideState();
      P.feed.showFeedMessages();
      if ($.browser.msie) {
        setTimeout(function(){
          $('#search-box').focus();
          setTimeout(function(){$('#search-box').blur();}, 200);
        }, 500);
      }
    }
    P.feed.setFeedDetails(u.config.feed_details);
    P.feed.initPersonalFeed();
  },
  setFeedDetails: function(details) {
    P.feed.showFeedDetails = "yes";
    if (details == "no")
      P.feed.showFeedDetails = "no";
    if (P.feed.showFeedDetails == "no") {
      $('#question_feed_questions').addClass('compact_view');
      $('#question_feed_questions').addClass('hidingTags');
      $('.show_feed_details').addClass('active');
    } else {
      $('#question_feed_questions').removeClass('compact_view');
      $('.show_feed_details').removeClass('active');
      if (P.feed.user && P.feed.user.config && P.feed.user.config.feed && P.feed.user.config.feed.tags == 0) return;
      $('#question_feed_questions').removeClass('hidingTags');
    }
  },
  setContent: function(c) {
    P.feed.content = c;
    if (!c) {
      return;
    }
    if (c.status && c.status == "deleted") {
      alert("Content not available!");
      return;
    }
    $('#question_feed_questions').find('.selected').removeClass('selected');
    var element = $('#' + P.feed.content.id);
    if (element.length > 0) {
      element.addClass('selected');
      // scroll to the item
      if (!P.feed.clicked) {
        $('#question_feed_questions').scrollTop(element.offset().top - 200 + $('#question_feed_questions').scrollTop());
      }
      P.feed.clicked = false;
    }
  },
  feedItemClick: function(ev, that) {
    var e = ev;
    // Does this do anything? Removing it in Chrome seems to have no adverse effects; haven't tried IE though

    if ($(e.target).closest('.feed_item_dropdown_selector').size() == 0) {
      P.feed.clicked = true;
      P.feed.selectContent($(that).attr('id'));
    }
  },
  selectContent: function(cid) {
    var fid = '';
    var ifid = '';
    cid = '' + cid; // turn into string
    if (cid.indexOf('_f') >= 0 ) {
      var parts = cid.split('_f');
      cid = parts[0];
      fid = parts[1];
    }
    if (cid.indexOf('_if') >= 0 ) {
      var parts = cid.split('_if');
      cid = parts[0];
      ifid = parts[1];
    }
    $('.signup_modal_wrapper').hide();
    P.feed.cid = cid;
    P.feed.resetSearchTips();
    // get content
    PEM.fire("verifyAnyCancel", function() {
      if (cid == "careers_optin") {
        if (PA.isSeenUser("c_optin")) return;
        PEM.fire("showCareersOptin");
        if (P.feed.feedHash["careers_optin"]) {
          P.feed.feedHash["careers_optin"].is_new = false;
          P.feed.content = false;
          P.feed.feedItemUpdate(P.feed.feedHash["careers_optin"]);
          P.feed.updateTitle();
          $('#question_feed_questions').find('.selected').removeClass('selected');
          $('#careers_optin').addClass('selected');
        };
        if (!PA.isSeenUser("c_optin_seen")) PA.markSeenUnseen("c_optin_seen");
        return;
      }
      if (cid == "careers_optin_new") {
        if (PA.isSeenUser("c_optin_new")) return;
        PEM.fire("showCareersOptinNew");
        if (P.feed.feedHash["careers_optin_new"]) {
          P.feed.feedHash["careers_optin_new"].is_new = false;
          P.feed.content = false;
          P.feed.feedItemUpdate(P.feed.feedHash["careers_optin_new"]);
          P.feed.updateTitle();
          $('#question_feed_questions').find('.selected').removeClass('selected');
          $('#careers_optin_new').addClass('selected');
        };
        if (!PA.isSeenUser("c_optin_new_seen")) PA.markSeenUnseen("c_optin_new_seen");
        return;
      }
      var params = {cid:cid, nid:P.feed.network.id, student_view:P.feed.studentView};
      if (P.feed.searchQuery && $('#search-box').val() && $('#search-box').val().length > 1) {
        var index = 0;
        $(".feed_item").each(function(i) {
          if ($(this).attr("id") == cid) index = i;
        });
        params.sid = P.feed.searchHashValue;
        params.index = index;
      }
      //if (P.feed.communityActivities.length > 0) {
      //  var list = angular.copy(P.feed.communityActivities);
      //  P.feed.communityActivities = [];
      //  PA.call_pj("generic.send_student_community_activity", {activity:list, subject: P.feed.student_product_version + " " + P.feed.communityActivitySubject}, 1);
      //}
      if (P.feed.network.id == "stories_" + P.feed.user.id) {
        // find feed item that was clicked
        var item = P.feed.feedHash[cid];
        P.feed.selectedItem = item;
        var content = item;
        $("#" + content.id).removeClass('unread');
        PEM.fire("cleanDashboard");
        PEM.fire("content", content);
        item.is_new = false;
        item.version = item.main_version;
        P.feed.feedItemUpdate(item);
        P.feed.updateTitle();
        $('.main_panel.scrollable').scrollTop(0);
        // clear notifications
        return;
      }
      var clock_id = P.clock.startDriftMeasure();
      PA.call_pj("content.get", params, $("#page_center"), function(content) {
        P.clock.stopDriftMeasure(clock_id, content.t);
        ATTACHMENTS = {};
        if (fid) content.gotoFollowup = parseInt(fid);
        if (ifid) content.gotoIFollowup = parseInt(ifid);
        if (P.feed.curURLID != content.id) {
          if (window.history && window.history.pushState) {
            try {
              var showNr = content.nr;
              if (content.config && content.config.student_product) {
                showNr = content.id;
                var item = P.feed.feedHash[content.id];
                P.feed.communityActivities.push((new Date()).toLocaleString() + ": View " + item.subject);
                P.feed.communityActivitySubject = item.subject;
              }
              var url = P.feed.network.urlType + "/" + P.feed.network.id + "?cid=" + showNr;
              if (fid) url += '_f' + fid;
              if (ifid) url += '_if' + ifid;
              window.history.pushState({cid:cid, id:content.id}, "Piazza @" + showNr, url);
            } catch (err) { }
          }
          P.feed.curURLID = content.id;
        }
        $("#" + content.id).removeClass('unread');
        if (P.feed.feedHash[content.id]) {
          var item = P.feed.feedHash[content.id];
          P.feed.selectedItem = item;
        }
        $('#question_feed_questions').find('.selected').removeClass('selected');
        content.dupeMsg = $('#duplicate_reason').val();
        PEM.fire("cleanDashboard");
        P.renderer.resetRenderProgress();
        P.renderer.setRenderInProgress();
        PEM.fire("content", content);
        P.renderer.renderMath("view_quesiton_note");
        P.renderer.renderMath("member_answer");
        P.renderer.renderMath("clarifying_discussion");
        P.renderer.renderMath("instructor_answer");
        P.renderer.renderMath("poll_results");
        $('.main_panel').waitForImages(P.renderer.setRenderComplete);
        if (P.feed.feedHash[content.id] && item) {
          if (item.is_new) {
            item.is_new = false;
            P.feed.updateTitle();
            P.feed.updateMRUC(-1, item);
            PEM.fire("updateFolderCount", {folders: content.folders, action: "dec"});
          }
          item.version = item.main_version;
          P.feed.feedItemUpdate(item);
        }
        // scroll up
        $('.main_panel.scrollable').scrollTop(0);
        CID = false;
        // if search post, record if they stay on it 2, 5, 10 seconds
        if (P.feed.searchQuery && $('#search-box').val() && $('#search-box').val().length > 1) {
          var timeoutFunction = function(seconds) {
            if ($("#" + content.id).hasClass("selected")) {
              var params = {
                event: "search_result_view_" + seconds,
                ad_id: P.feed.searchHashValue,
                content_id: content.id,
                line: index
              };
              PA.call_pj("generic.event_to_requests", params, 1);
            }
          };
          P.feed.searchResultSelectTimeout2 = setTimeout(function() {timeoutFunction("2")}, 2000);
          P.feed.searchResultSelectTimeout5 = setTimeout(function() {timeoutFunction("5")}, 5000);
          P.feed.searchResultSelectTimeout10 = setTimeout(function() {timeoutFunction("10")}, 10000);
          P.feed.searchResultSelectTimeout30 = setTimeout(function() {timeoutFunction("30")}, 30000);
          P.feed.searchResultSelectTimeout60 = setTimeout(function() {timeoutFunction("60")}, 60000);
        }
      }, function(err){alert(err);});
    });
  },
  getSelectedItem: function() {
    return P.feed.selectedItem;
  },
  markAllRead: function() {
    PA.call_pj("network.mark_all", {nid:P.feed.network.id,read:"read"}, null, function(data) {
      // set feed as all read and regenerate
      var mr_unread = 0;
      P.feed.feedObj.feed.forEach(function(item) {
        if (item.is_new) {
          if (item.mr) mr_unread += 1;
          item.is_new = false;
          item.version = item.main_version;
          PEM.fire("updateFolderCount", {folders: item.folders, action: "dec"});
        }
      });
      P.feed.updateMRUC(-mr_unread);
      if (!P.feed.feedFilter)
        P.feed.setNewFeed(P.feed.feedObj);
    }, function(err) {
      alert(err);
    });
  },
  markAllUnread: function() {
    PA.call_pj("network.mark_all", {nid:P.feed.network.id,read:"unread"}, null, function(data) {
      var mr_read = 0;
      P.feed.feedObj.feed.forEach(function(item) {
        if (!item.is_new) {
          if (item.mr) mr_read += 1;
          item.is_new = true;
          PEM.fire("updateFolderCount", {folders: item.folders, action: "inc"});
        }
      });
      P.feed.updateMRUC(mr_read);
      if (!P.feed.feedFilter)
        P.feed.setNewFeed(P.feed.feedObj);
    }, function(err) {
      alert(err);
    });
  },
  // when network changes, this is called
  setNetwork: function(n) {
    PEM.fire("thisIsDashboard");
    P.feed.showStudentFeed(false, true);
    P.feed.network = n;
    P.feed.activeClasses = [];
    // populate active classes
    var isGroup = (n.type == "group");
    for (var i = 0; i < P.feed.user.networks.length; i++) {
      var net = P.feed.user.networks[i];
      if (net.status == 'active' && net.id != n.id && P.feed.user.can_admin[net.id] > 0 &&
          ((isGroup && net.type == "group") || (!isGroup && net.type != "group")))
        P.feed.activeClasses.push(net);
    }
    // set feed sort
    if (P.feed.network.isOpen) {
      if (P.feed.user.config.sort_default)
        P.feed.changeSortBy(P.feed.user.config.sort_default, false);
    } else {
      P.feed.sort = "updated";
    }
    if (n.id == P.feed.user.last_network && P.feed.feedPrefetch) {
      // this is first time; show prefetched feed
      P.feed.setNewFeed(P.feed.feedPrefetch);
      PEM.fire("initialFolders", P.feed.feedObj.tags);
      PEM.fire("setDrafts", P.feed.feedObj.drafts);
      if (P.feed.feedObj.prof_news) {
        PEM.fire("set_prof_news", {prof_news: P.feed.feedObj.prof_news, homescreen_update: P.feed.feedObj.homescreen_update});
      }
      var specialMentionsInfo = {avg: P.feed.feedPrefetch.avg, hof: P.feed.feedPrefetch.hof, users_7: P.feed.feedPrefetch.users_7};
      PEM.fire("newHof", specialMentionsInfo);
      P.feed.network.draft = P.feed.feedObj.draft;
      if (P.feed.feedPrefetch.more) {
        setTimeout(P.feed.getMoreFeed, 500);
      } else {
        P.feed.markFeedComplete();
      }
      P.feed.feedPrefetch = null;
      if (P.feed.autoSelect) {
        P.feed.selectContent(P.feed.autoSelect);
        P.feed.autoSelect = false;
      }
    } else {
      // need to get feed
      P.feed.feedLoadInProgress = true;
      P.push.first_connect = true; // don't read feed again
      PA.call_pj("network.get_my_feed", {nid:P.feed.network.id,
        limit: P.feed.initialFeedSize,
        student_view: P.feed.studentView,
        sort: P.feed.sort}, $("#feed"), function(feed, aid) {
        P.feed.setNewFeed(feed);
        // update credentials to access push streams:
        P.push.setPushCredentials(feed.token_data);
        PEM.fire("initialFolders", feed.tags);
        PEM.fire("setDrafts", P.feed.feedObj.drafts);
        if (P.feed.feedObj.prof_news) {
          PEM.fire("set_prof_news", {prof_news: P.feed.feedObj.prof_news, homescreen_update: P.feed.feedObj.homescreen_update});
        }
        PEM.fire("newRecentNetworks", P.feed.feedObj.last_networks);
        var specialMentionsInfo = {avg: feed.avg, hof: feed.hof, users_7: feed.users_7};
        PEM.fire("newHof", specialMentionsInfo);
        P.feed.resetFilterState();
        if (P.feed.autoSelect) {
          P.feed.selectContent(P.feed.autoSelect);
          P.feed.autoSelect = false;
        }
        if (feed.more) {
          setTimeout(P.feed.getMoreFeed, 500);
        } else {
          P.feed.markFeedComplete();
        }
      }, function(err){
        P.feed.markFeedComplete();
        if (err == "Email verification needed") {
          window.location = "/email_auth?nid=" + P.feed.network.id;
        }
      });
    }
    // select content, if needed
    if (typeof(CID) != 'undefined' && CID) {
      P.feed.selectContent(CID);
    }
  },
  getMoreFeed: function(offset, limit, getAll) {
    offset = (typeof(offset) == 'undefined' || offset == null) ? P.feed.feedObj.feed.length : offset;
    limit = (typeof(limit) == 'undefined' || limit == null) ? P.feed.loadAtOnce : limit;
    getAll = (typeof(getAll) == 'undefined' || getAll == null) ? false :  getAll;
    limit = getAll? 1000000 : limit;
    var params = {nid:P.feed.network.id,
      offset:offset,
      limit:limit,
      sort:P.feed.sort,
      student_view: P.feed.studentView
    };
    var curNetwork = P.feed.network.id;
    var block = 1;
    if (getAll) block = $("#feed_loading_div");
    P.feed.feedLoadInProgress = true;
    var clock_id = P.clock.startDriftMeasure();
    PA.call_pj("network.get_my_feed", params, block,
      function(feed) {
        P.clock.stopDriftMeasure(clock_id, feed.t);
        // update credentials for push streams:
        P.push.setPushCredentials(feed.token_data);
        if (P.feed.network.id != curNetwork)
          return;
        P.feed.feedObj.more = feed.more;
        var fh = {};
        var have = {};
        for (var i = 0; i < P.feed.feedObj.feed.length; i++) {
          fh[P.feed.feedObj.feed[i].id] = P.feed.feedObj.feed[i];
        }
        for (var i = 0; i < feed.feed.length; i++) {
          var id = feed.feed[i].id;
          have[id] = 1;
          if (fh[id]) {
            for (var key in feed.feed[i]) {
              fh[id][key] = feed.feed[i][key];
            }
            // remove all fields which are not in the new feed item.
            for (var key in fh[id]) {
              // don't remove "highlighted_snipet".
              // Allows updating feed but keep the highlighted items while search is active.
              if (feed.feed[i][key] == null && key !== "highlighted_snipet") {
                delete (fh[id][key])
              }
            }
          } else {
            P.feed.feedObj.feed.push(feed.feed[i]);
          }
        }
        if (offset === 0) {
          var nextid = false;
          for (var i = 0; i < P.feed.feedObj.feed.length; i++) {
            var thisid = P.feed.feedObj.feed[i].id;
            if (P.note_view.content && P.note_view.content.id === thisid) {
              if (have[thisid]) {
                break;
              }
              nextid = true;
            } else if (nextid && have[thisid]) {
              nextid = thisid;
              break;
            }
          }
          for (var cid in fh) {
            if (!have[cid]) {
              P.feed.removeFromFeed(cid);
            }
          }
          if (P.feed.feedObj.feed.length === 0) {
            P.top_bar.loadQaSite();
          } else if (nextid) {
            if (nextid === true) {
              nextid = P.feed.feedObj.feed[P.feed.feedObj.feed.length - 1].id;
            }
            P.feed.selectContent(nextid);
          }
        }
        if (!P.feed.manualFilter && !P.feed.searchQuery) {
          P.feed.setNewFeed(P.feed.feedObj);
        } else {
          P.feed.addBuckets(P.feed.searchFeed, true);
          P.feed.createFeed(P.feed.searchFeed);
        }
        P.feed.markFeedComplete(feed.more);
      }, function(err) {
        P.feed.markFeedComplete();
    });

  },
  // mark the feed when complete, so testing can properly wait for this state
  markFeedComplete: function(more_feed) {
    P.feed.feedLoadInProgress = false;
    P.renderer.renderMath("question_feed_questions");
    PEM.fire("newMustReads", P.feed.getMustReadPosts());
    if (more_feed) {
      P.feed.displayShowAll();
    } else {
      $('#feed').find('.loadMoreContent').remove();
    }
  },
  setNewFeed: function(f) {
    P.feed.feedObj = f;
    if (f.live) {
      P.feed.setLive(f.live, false);
    }
    P.feed.addBuckets(P.feed.feedObj.feed);
    P.feed.feedObj.feed.sort(P.feed.feedComparator);
    $('#filter_message').hide();
    if (P.feed.network && P.feed.network.isOpen) {
      $(".open_sort_option").removeClass("active");
      $(".open_sort_option").show();
      if (P.feed.sort == "like")
        $(".open_sort_option[filter='like']").addClass("active");
      else if (P.feed.sort == "score")
        $(".open_sort_option[filter='score']").addClass("active");
      else
        $(".open_sort_option[filter='updated']").addClass("active");
    } else
      $(".open_sort_option").hide();

    PTM.getModuleTemplate("feed", "feed_item", P.feed.setFeedItemAndCreateFeed, P.feed.feedObj.feed);
    P.renderer.renderMath("question_feed_questions");
    if ($('#careers_optin').length > 0) {
      $('#careers_optin .metadata').before('<i class="icon-remove-sign hide_feed_item" onclick="return P.homescreen.hideOptin();"></i>');
    }
  },
  setFeedItemAndCreateFeed: function(template, feed) {
    P.feed.feedItemTemplate = template;
    P.feed.createFeed(feed);

    PEM.fire("feed_created");
    // hide loading screen
    $('#loading-screen').hide();
  },
  toggleFeedShortcut: function() {
    var id = P.feed.manualFilter;
    if (!id) return;
    if (!P.feed.user.config) P.feed.user.config = {};
    if (!P.feed.user.config.feed) P.feed.user.config.feed = {};
    if (!P.feed.user.config.feed[id]) {
      P.feed.user.config.feed[id] = 1;
      $('#shortcut_' + id).show();
    } else {
      P.feed.user.config.feed[id] = 0;
      $('#shortcut_' + id).hide();
    }
    PA.call_pj("user.set", {stat:"feed." + id, val:P.feed.user.config.feed[id]}, 1);
    P.feed.showToggleShortcut();
  },
  showToggleShortcut: function() {
    if (!P.feed.manualFilter) return;
    if (P.feed.manualFilter == "folder" || P.feed.manualFilter == "live") {
      $('#filter_message .bookmark_filter_link').hide();
    }
    else {
      if (P.feed.user.config && P.feed.user.config.feed && P.feed.user.config.feed[P.feed.manualFilter])
        $('#filter_message .bookmark_filter_link').text("Remove shortcut");
      else
        $('#filter_message .bookmark_filter_link').text("Add shortcut");
      $('#filter_message .bookmark_filter_link').show();
    }
    P.feed.truncateShortcutsMaybe();
  },
  // If there are too many shortcuts currently displayed, this applies
  // a truncated style to the items so they fit
  truncateShortcutsMaybe: function(){
    var visibleShortcuts = $('#page_feed_filter_buttons').children().filter(function(index){
      return $(this).css("display") != "none";
    });
    var totalShortcutsDisplayed = visibleShortcuts.length;
    var maxBeforeTruncate = 4;
    if (totalShortcutsDisplayed > maxBeforeTruncate) {
      visibleShortcuts.addClass("page_feed_filter_buttons_truncate");
    } else {
      visibleShortcuts.removeClass("page_feed_filter_buttons_truncate")
    }
  },
  resetSearchTips: function() {
    $('.search_tips').hide();
    $('.search_tips_arrow').removeClass('up').addClass('down');
    if(P.feed.searchFeed) {
      $('#question_feed_questions').css('top', P.feed.top_size + 29 + 'px');
    } else {
      $('#question_feed_questions').css('top', P.feed.top_size);
    }
  },
  resetFilterState: function() {
    P.feed.searchFeed = null;
    P.feed.showHidden = false;
    $('#clear-search-button').hide();
    $('#filter_sort_method').hide();
    P.feed.searchQuery = '';
    $('#search_help_box').hide();
    if (!$('#search-box').hasClass('placeholder')) {
      $('#search-box').val('');
    }
    P.feed.animateFeedToWidth(P.feed.initialFeedWidth);
    P.feed.manualFilter = null;
    P.feed.feedFilter = null;
    $('#page_feed_options_dropdown').children(".manual_filter").removeClass('active');
    $('.filter_show_all').addClass('active');
  },
  filterFeed: function(params) {
    P.feed.resetSearchTips();
    // parameters are "filter" - string representing the filter used (e.g., 'updated', 'unread'); "showHidden" - whether to show archived posts
    if (params === undefined) {
      params = {};
    }
    var filter = params.filter;
    var folder = params.folder;
    P.feed.resetFilterState();
    if (!filter) {
      if (P.feed.manualFilter == 'live') {
        P.feed.closeLive();
      }
      P.feed.manualFilter = null;
      P.feed.feedFilter = null;
      $('#page_feed_options_dropdown').children(".manual_filter").removeClass('active');
      $('.filter_show_all').addClass('active');
      if (P.feed.feedObj) {
        if (P.feed.feedObj.more) {
          P.feed.getMoreFeed(0, P.feed.initialFeedSize + P.feed.loadAtOnce);
        } else {
          P.feed.getMoreFeed(0, null, true);
        }
      }
      $('#question_feed_questions').css('top', P.feed.top_size);
      if (P.feed.showFeedDetails == "no") {
        $("#question_feed_questions").addClass("compact_view");
        $(".show_feed_details").addClass("active");
      }
      P.feed.setFeedHideState(); // reset to default hide state
      return false;
    }
    var manualFilters = {
      'good_question': 'Instructor-marked Good Questions',
      'unread': 'Unread Posts',
      'due': 'Posts due for answer',
      'following': 'Posts I Follow',
      'unresolved': 'Unresolved Questions',
      'updated': 'Updated Posts',
      'hidden': 'Posts I Archived',
      'unanswered': 'Unanswered Questions',
      'unresolved_followups': 'Unresolved Followups',
      'instructors': 'Instructor Posts',
      'folder': '',
      'must-reads': 'Reading List',
      'hide_group_posts': 'Hide Group Posts',
      'live': 'Live Q&A posts'
    };
    P.feed.feedFilter = manualFilters[filter];
    P.feed.manualFilter = filter;
    P.feed.searchQuery = '';
    var apiParams = {nid:P.feed.network.id, sort:P.feed.sort, student_view: P.feed.studentView};
    if (folder) {
      apiParams.filter_folder = folder;
      P.feed.feedFilter = folder;
      P.feed.manualFitler = 'folder';
    }
    apiParams[filter] = 1;
    if(params.showHidden) {
      apiParams.hidden = params.showHidden;
    }
    if (filter == 'hide_group_posts'){
      apiParams.hide_group_posts = 1;
    }
    PA.call_pj("network.filter_feed", apiParams, $('#feed'), function(result){
      if (result.feed) {
        if (params.hidden) {
          P.feed.showHidden = true;
        }
        P.feed.searchFeed = result.feed;
        P.feed.addBuckets(P.feed.searchFeed, filter != 'live');
        P.feed.searchFeed.sort(P.feed.manualFilter == "updated" ? P.feed.feedComparatorUpdated : P.feed.feedComparator);
        P.feed.createFeed(P.feed.searchFeed);
        P.feed.autoSearch = false;
        P.feed.mergeIntoMainFeed();
        $('#question_feed_questions').css('top', P.feed.top_size + 30 + 'px');
        $('#filter_message').show();
        $('#filter_message #filter_by').text(P.feed.feedFilter);
        P.feed.showToggleShortcut();
        P.feed.setFeedHideState(true);//show feed, if it is hidden right now
        PEM.fire("feed_filtered");
      }
    }, function(err) {
      alert(err);
      P.feed.autoSearch = false;
    });
  },
  searchHash: function(query) {
    query = (new Date()).getTime().toString() + query;
    var hash = 0, i, char;
    if (query.length === 0) return hash;
    for (i = 0, l = query.length; i < l; i++) {
        char  = query.charCodeAt(i);
        hash  = ((hash<<5)-hash)+char;
        hash |= 0; // Convert to 32bit integer
    }
    return hash;
  },
  search: function(query) {
    if (P.feed.user.is_public) {
      $('#feed_search_disabled').show();
      return;
    }
    if (P.feed.searchResultSelectTimeout2) {
      clearTimeout(P.feed.searchResultSelectTimeout2);
      clearTimeout(P.feed.searchResultSelectTimeout5);
      clearTimeout(P.feed.searchResultSelectTimeout10);
      clearTimeout(P.feed.searchResultSelectTimeout30);
      clearTimeout(P.feed.searchResultSelectTimeout60);
    }
    P.feed.searchQuery = query;
    if (!query || query === "Search or add a post...")
      return P.feed.filterFeed();
    if (query.indexOf("@") === 0 && parseInt(query.substr(1)) >= 0) {
      P.feed.selectContent(query.substr(1));
      return;
    }
    $('#question_feed_questions').css('top', P.feed.top_size);
    P.feed.searchHashValue = P.feed.searchHash(query);
    PA.call_pj("network.search", {nid:P.feed.network.id, query:query, sid:P.feed.searchHashValue, student_view: P.feed.studentView}, $('#feed'), function(result, aid){
      if (P.feed.searchQuery && P.feed.searchQuery !== "") {
        $('.search_term').html(query);
        if (query.indexOf(":") < 0)
          $('#search_help_box').show();
        P.feed.feedFilter = null;
        P.feed.searchFeed = result;
        P.feed.orderSearchResults(P.feed.searchSort);
        P.feed.mergeIntoMainFeed();

        $('.sort_results_by').removeClass("active");
        $('#question_feed_questions').css('top', P.feed.top_size + 30 + 'px');
        $('#filter_sort_method').show();

        if(P.feed.searchSort === 'date') {
                $(".sort_results_by[id=sort_by_date]").addClass("active");
              } else {
          $(".sort_results_by[id=sort_by_rel]").addClass("active");
        }
        $('#filter_message').hide();
        P.feed.animateFeedToWidth(P.feed.searchFeedWidth);
        $("#question_feed_questions").removeClass("compact_view");
        $(".show_feed_details").removeClass("active");
        PEM.fire("feed_filtered");
      }
    }, function(err) {
      // alert(err);
    });
  },
  orderSearchResults: function(sortOrder) {
    if (P.feed.searchFeed) {
      if (sortOrder == 'date') {
        P.feed.searchFeed.sort(function(a,b) {
          if (b.updated > a.updated) return 1;
          if (b.updated < a.updated) return -1;
            return 0;
          });
        P.feed.addBuckets(P.feed.searchFeed, true);
      } else {
        P.feed.searchFeed.sort(function(a,b) {
          return a.sort_order - b.sort_order;
        });
        P.feed.addSearchBuckets(P.feed.searchFeed);
      }
      P.feed.createFeed(P.feed.searchFeed);
    }
  },
  mergeIntoMainFeed: function() {
    if (!P.feed.feedObj || !P.feed.feedObj.feed) return;
    for (var i = 0; i < P.feed.feedObj.feed.length; i++) {
      var id = P.feed.feedObj.feed[i].id;
      if (P.feed.feedHash[id])
        P.feed.feedObj.feed[i] = P.feed.feedHash[id];
    }
  },
  searchSubject: function() {
    var term = 'subject:"' + P.feed.searchQuery + '"';
    $('#search-box').val(term);
    P.feed.search(term);
    $('#search_help_box').hide();
  },
  addSearchBuckets: function(feed) {
    for (var i = 0; i < feed.length; i++) {
      var item = feed[i];
      if (item.updated && !(item.updated instanceof Date)) {
        var dt = new Date();
        dt.setISO8601(item.updated);
        item.updated = dt;
      }
      item.bucket_name = "Search results";
      item.bucket_order = 2;
    }
  },
  createFeed: function(feed) {
    for (var timer in P.feed.mr_timers) {
      clearTimeout(timer);
    }
    P.feed.mr_timers = {};
    $(".tipsy").remove(); // remove all tipsy messages
    if (typeof(is_mobile) == 'undefined') is_mobile = false;
    var studentProductOptions = (((P.feed.user.config || {}).student_product || {}).stories || []);
    studentProductOptions = studentProductOptions.filter(function(n) {return n != 0});
    if (studentProductOptions.length > 0) {
      P.feed.showStory = studentProductOptions[Math.floor(Math.random() * studentProductOptions.length)];
    };
    var feedHTML = '';
    var now = new Date();
    var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    P.feed.today = today;

    var lastBucket = "";
    var dateType = -1;
    var need_titles = true;
    var shown = 0;

    var lastOpen = true;
    var selContentIn = false;
    P.feed.bid = 0;
    var studentProduct = "";
    var pinned = "";
    var favorited = "";
    var live = "";
    P.feed.bucketIds = {};
    P.feed.feedHash = {};
    var selectedCid = false;
    if (typeof(CID) != 'undefined')
      selectedCid = CID;
    if (P.feed.content) selectedCid = P.feed.content.id;
    for (var i = 0; i < feed.length; i++) {
      var item = feed[i];
      if (!item) continue;
      if (item.type == "ad") continue;
      P.feed.feedHash[item.id] = item;
      var bucket = item.bucket_name;
      if (dateType < 0)
        dateType = P.feed.getDateType(bucket);
      if (bucket != lastBucket && need_titles && !(item.bucket_name == 'Pinned' && !P.feed.searchFeed) && !item.my_favorite && (!item.live || item.live != P.feed.live)) {
        var open = true;
        if (shown > 50 && !P.feed.searchFeed) {
          open = false;
        }
        var start_css;
        var arrow;
        P.feed.bid++;
        if (P.feed.feedBuckets['bucket_' + P.feed.bid] == 1) open = false;
        if (P.feed.feedBuckets['bucket_' + P.feed.bid] == 2) open = true;
        if (open) {
          start_css = "start_open";
          arrow = "&#9662;";
        } else {
          start_css = "start_closed";
          arrow = "&#9656;";
        }
        if (lastBucket.length > 0) feedHTML += '</div>';
        //var id = "bucket_" + bid;
        feedHTML += '<div data-pats="post_group" class="question_group">'
        feedHTML += P.feed.bucketHeaderHTML(bucket, P.feed.bid, start_css, arrow);
        feedHTML += '<ul data-pats="posts" id="bucket_' + P.feed.bid + '-item-list" class="item-list-in-bucket" ' + (!open ? 'style="display:none;"' : '') + '>';
        P.feed.bucketIds[bucket] = 'bucket_' + P.feed.bid; //keep mapping of bucket name to id
        lastBucket = bucket;
        dateType = P.feed.getDateType(bucket);
      }
      if (item.id == selectedCid || item.nr == selectedCid) selContentIn = P.feed.bid;
      if (lastOpen) shown++;
      item.dateType = dateType;
      var itemHTML = P.feed.createFeedItem(item);
      if (item.live && item.live == P.feed.live) {
        live += itemHTML;
      } else if (!P.feed.searchFeed && item.bucket_name === 'Pinned') {
        pinned += itemHTML;
      } else if (item.my_favorite) {
        favorited += itemHTML;
      } else {
        feedHTML += itemHTML;
      }
    }
    if (lastBucket.length > 0)
      feedHTML += '</ul></div>';
    if (favorited.length > 0) {
      if (!((P.feed.searchFeed || P.feed.feedFilter) && favorited.length == 0)) {
        var favoriteHTML = '<div class="question_group">';
        var startState = "start_open";
        var startArrow = '&#9662;';
        if (P.feed.feedBuckets['bucket_favorite'] == 1) {
          startState = "start_closed";
          startArrow = '&#9656;';
        }
      }
      favoriteHTML += P.feed.bucketHeaderHTML("Favorites", "favorite", startState, startArrow);
      favoriteHTML += '<ul id="favorite_pin-item-list" class="item-list-in-bucket">' + favorited + '</ul></div>';
      feedHTML = favoriteHTML + feedHTML;
      P.feed.bucketIds['Favorites'] = "bucket_favorite";
    }

    if (pinned.length > 0) {
      var pinnedHTML = '<div class="question_group">';
      var startState = "start_open";
      var startArrow = '&#9662;';
      if (P.feed.feedBuckets['bucket_pin'] == 1) {
        startState = "start_closed";
        startArrow = '&#9656;';
      }
      pinnedHTML += P.feed.bucketHeaderHTML("Pinned", "pin", startState, startArrow);
      pinnedHTML += '<ul id="bucket_pin-item-list" class="item-list-in-bucket">' + pinned + '</ul></div>'
      feedHTML = pinnedHTML + feedHTML;
      P.feed.bucketIds['Pinned'] = "bucket_pin";
    }
    if (live.length > 0 || P.feed.live) {
      var liveHTML = '<div class="question_group">';
      var startState = "start_open";
      var startArrow = '&#9662;';
      if (P.feed.feedBuckets['live'] == 1) {
        startState = "start_closed";
        startArrow = '&#9656;';
      }
      liveHTML += P.feed.bucketHeaderHTML("Live Q&A", "live", startState, startArrow);
      liveHTML += '<ul id="bucket_pin-item-list" class="item-list-in-bucket">' + live + '</ul></div>'
      feedHTML = liveHTML + feedHTML;
      P.feed.bucketIds['Live Q&A'] = "bucket_live";
    }
    if (P.feed.studentView) {
      feedHTML += '<div id="student_only_indicator_border"></div>';
    }
    $('#question_feed_questions').removeClass('sortedFiltered');
    var oldTop = $("#feed").find('.scrollable').scrollTop();
    $('#question_feed_questions').html(feedHTML);
    $('#noresults').hide();
    if (P.feed.searchFeed && P.feed.searchFeed.length == 0) {
      $("#noresults").show();
    }
    $("#feed").find('.scrollable').scrollTop(oldTop);
    if (selContentIn) {
      if (!$('#bucket_' + selContentIn).siblings('.item-list-in-bucket').is(':visible'))
        P.feed.toggleBucket('bucket_' + selContentIn);
    }
    if (P.feed.content) {
      $('#feed').find('li.selected').removeClass('selected');
      var element = $('#' + P.feed.content.id);
      if (element.length > 0) {
        element.addClass('selected');
        $('#question_feed_questions').scrollTop(element.offset().top - 200 + $('#question_feed_questions').scrollTop());
      }
    }
    P.feed.updateTitle();
    if ((!P.feed.user.isInst || P.feed.user.isTA)
          && !PA.isProfessor()
          && P.feed.user.config
          && (!P.feed.user.config.email_prefs.careers || !P.feed.user.config.email_prefs.careers.no_careers || P.feed.user.config.email_prefs.careers.no_careers == false)
          && P.feed.user.config.waitlist_response == null
          && P.feed.user.config.logins >= 50) {
    } else {
      $("#question_feed_questions").removeClass("showing_request_invite_to_network");
    }
    P.feed.truncateShortcutsMaybe();
  },
  getDateType: function(bucketLabel){
    var dateType = 2;
    if (bucketLabel == "This week" || bucketLabel == "Last week")
      dateType = 1;
    if (bucketLabel == "Today" || bucketLabel == "Yesterday")
      dateType = 0;
    return dateType;
  },
  isMustRead: function(item) {
    var ret = false;
    if (P.feed && P.feed.user && !P.feed.user.isInst && item.mr > 0) {
      if (item.mrx) {
        if (P.clock.getLocalDiff(item.mrx) < 0) {
          ret = true;
        }
      } else {
        ret = true;
      }
    }
    if (ret && P.feed.feedHash) {
      var i = P.feed.feedHash[item.id];
      if (i && i.mru === item.mr) {
        ret = false;
      }
    }
    if (ret && item.mru === item.mr) {
      ret = false;
    }
    return ret;
  },
  /*
   * Add bucket names to items in feed
   */
  addBuckets: function(feed, isFilter) {
    var now, today, this_week;
    var maxLive = 5;
    if (P.feed.feedObj.live && P.feed.feedObj.live.sessions) {
      for (var key in P.feed.feedObj.live.sessions) {
        var k = parseInt(key.substr(1));
        if (k + 3 > maxLive)
          maxLive = k + 3;
      }
    }
    now = new Date();
    today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    P.feed.today = today;
    this_week = new Date(today.getTime() - today.getDay() * 24 * 60 * 60 * 1000).getTime();
    today = today.getTime();
    for (var i = 0; i < feed.length; i++) {
      var item = feed[i];
      var bucket_name, bucket_order;
      if (item.updated && !(item.updated instanceof Date)) {
        var dt = new Date();
        dt.setISO8601(item.updated);
        item.updated = dt;
      }
      if (item.live && ((item.live == P.feed.live) || !isFilter)) {
        if (item.live == P.feed.live) {
          bucket_name = "Live Q&A";
          bucket_order = 0;
        } else {
          var dt = new Date();
          dt.setISO8601(P.feed.feedObj.live.sessions[item.live].start);
          bucket_name = "Live Q&A: " + dt.format("yyyy-mm-dd HH:MM:ss");
          bucket_order = maxLive - parseInt(item.live.substr(1));
        }
      } else if (P.feed.isMustRead(item)) {
        bucket_name = "my reading list";
        bucket_order = 1;
      } else if (item.tags && item.tags.exist("pin")) {
        bucket_name = "Pinned";
        bucket_order = 0;
      } else if (item.my_favorite) {
        bucket_name = "Favorites";
        bucket_order = 2;
      } else {
        var target = item.updated.getTime();
        var when = item.updated;

        if( P.feed.manualFilter == "updated" && item.log && item.log[item.log.length -1].t) {
          var dt = new Date();
          dt.setISO8601(item.log[item.log.length -1].t);
          target = dt.getTime();
          when = dt;
        }

        if (target >= today) {
          bucket_name = "Today";
          bucket_order = 3;
        } else if (target >= today - 24 * 60 * 60 * 1000) {
          bucket_name = "Yesterday";
          bucket_order = 4;
        } else if (target >= this_week) {
          bucket_name = "This week";
          bucket_order = 5;
        } else if (target >= this_week - 7 * 24 * 60 * 60 * 1000) {
          bucket_name = "Last week";
          bucket_order = 6;
        } else {
          var start = new Date(when.getTime() - when.getDay() * 24 * 60 * 60 * 1000);
          var end = new Date(start.getTime() + 6 * 24 * 60 * 60 * 1000);
          bucket_name = "Week " + (start.getMonth() + 1) + "/" + start.getDate() + " - " + (end.getMonth() + 1) + "/" + end.getDate();
          // remove extra precision so bucket_order is same for buckets that have same start week
          var week_start = new Date(start.getFullYear(), start.getMonth(), start.getDate());
          // we want the larger times (more recent start dates) to have smaller bucket_order to be at the top, so need decreasing function
          bucket_order = 7 + (now.getTime() - week_start.getTime())/(1000*60*60*24*7);
        }
      }
      item.bucket_name = bucket_name;
      item.bucket_order = bucket_order;
    }
  },
  feedComparator: function(a,b) {
    var bucket_diff = a.bucket_order - b.bucket_order;
    if (bucket_diff != 0) return bucket_diff;
    // force chronological sort for first three buckets: pinned, must-read and favorites
    if (a.live && b.live) {
      if (a.live_closed && !b.live_closed) return 1;
      if (!a.live_closed && b.live_closed) return -1;
      if (!a.upvotes) a.upvotes = 0;
      if (!b.upvotes) b.upvotes = 0;
      if (a.upvotes != b.upvotes) {
        return b.upvotes - a.upvotes;
      }
      if (b.updated > a.updated) return 1;
      if (b.updated < a.updated) return -1;
      return 0;
    }
    if (P.feed.sort != "score" || a.bucket_order < 3) {
      if (P.feed.sort == "like")
        return (b.lk ? b.lk : 0) - (a.lk ? a.lk : 0);
      return b.updated - a.updated;
    } else {
       return b.score - a.score;
    }
  },
  feedComparatorUpdated: function(a,b ) {
    var bucket_diff = a.bucket_order - b.bucket_order;
    if (bucket_diff != 0) return bucket_diff;

    var dt_a = new Date();
    var dt_b = new Date();
    var time_a = a.log ? dt_a.setISO8601(a.log[a.log.length-1].t) : a.updated;
    var time_b = b.log ? dt_b.setISO8601(b.log[b.log.length-1].t) : b.updated;

    return time_b - time_a;
  },
  /**
  * Displays the "Show All" element at the bottom of the feed.
  * If loading is true, add the loading class to the element so that a spinner gif shows
  * loading defaults to false
  */
  displayShowAll: function(){
    if (P.feed.searchFeed)
      return;
    var loading = false;
    if (P.feed.feedLoadInProgress) {
      loading = true;
    }
    PTM.getModuleTemplate("feed", "show_all_feed", P.feed.displayShowAllCallback, loading);
  },
  displayShowAllCallback: function(template, loading) {
    var $feedRegion = $('#feed').find('.scrollable');
    if($feedRegion.find('.loadMoreContent').length > 0) {
      $feedRegion.find('.loadMoreContent').replaceWith(template({loading: loading}));
    } else {
      $feedRegion.append(template({loading: loading}));
    }
  },
  showAllFeed: function() {
    P.feed.getMoreFeed(null, null, true);
    P.feed.displayShowAll();
    return false;
  },
  getUnreadPosts: function() {
    var unread = 0;
    if (!P.feed.feedObj) return 0;
    if (!P.feed.feedObj.feed) return 0;
    for (var i = 0; i < P.feed.feedObj.feed.length; i++) {
      if (P.feed.feedObj.feed[i].is_new) unread += 1;
    }
    return unread;
  },
  getMustReadPosts: function() {
    var ret = {mr: 0, mrp:0, new:0, cnt:0};
    if (P.feed.feedObj && P.feed.feedObj.feed) {
      for (var i = 0; i < P.feed.feedObj.feed.length; i++) {
        var item = P.feed.feedObj.feed[i];
        if (item.mr) {
          ret.cnt += 1;
          if (item.is_new) {
            ret.new += 1;
          }
          if (P.feed.isMustRead(item)) {
            ret.mr += 1;
            if (item.mrp) {
              ret.mrp += 1;
            }
          }
        }
      }
    }
    P.feed.must_read_counts = {new:ret.new, cnt:ret.cnt};
    return ret;
  },
  getUpdatedPosts: function() {
    var updated = 0;
    if (!P.feed.feedObj) return 0;
    if (!P.feed.feedObj.feed) return 0;
    for (var i = 0; i < P.feed.feedObj.feed.length; i++) {
      if (P.feed.feedObj.feed[i].changes && P.feed.feedObj.feed[i].changes > 0) updated += 1;
    }
    return updated;
  },
  updateTitle: function() {
    var title = P.feed.network.course_number;
    var unread = P.feed.getUnreadPosts();
    if(unread !== undefined && unread > 0) {
      title += " (" + unread + " unread)";
    }
    $(document).attr("title", title);
  },
  pushNetworkMessage: function(message) {
    if (message.action === "live_update" && message.live) {
      P.feed.setLive(message.live, true);
      return;
    }
    if (message.item) {
      // make sure this item is for me, if it belongs to a group
      if (message.item.feed_groups) {
        var canSee = (message.item.feed_groups.indexOf(P.feed.user.id) >= 0);
        if (P.feed.user.isInst && message.item.feed_groups.indexOf("instr_" + P.feed.network.id) >= 0) canSee = true;
        if (!canSee) {
          if (P.feed.user.config.feed_groups && P.feed.user.config.feed_groups.length > 0) {
            for (var i = 0; i < P.feed.user.config.feed_groups.length; i++)
              if (message.item.feed_groups.indexOf(P.feed.user.config.feed_groups[i]) == 0) {
                canSee = true;
                break;
              }
          }
        }
        if (P.feed.studentView || !canSee) return false;
      }
      if (message.item.live && message.item.live != P.feed.network.live.current && P.feed.manualFilter != "live") return false;
    }
    if (message.action === 'feed_item_change' && P.feed.feedObj) {
      if (message.item.live && message.item.live == P.feed.network.live.current) {
        message.item.bucket_name = "Live Q&A";
        message.item.bucket_order = 0;
      }
      var dt = new Date();
      dt.setISO8601(message.item.updated);
      message.item.updated = dt;
      var f = null;
      var forceFeedRecreate = false;
      if (P.feed.feedHash[message.item.id]) {
        f = P.feed.feedHash[message.item.id];
        if (f.is_new)
          message.item.is_new = true;
        if (message.confirm_read != null) {
          if (f.mru !== message.confirm_read) {
            f.mru = message.confirm_read;
            forceFeedRecreate = true;
          }
        }
        if (f.tags.exist("pin") || f.mr !== message.item.mr || f.mrx !== message.item.mrx || f.mrp !== message.item.mrp || f.live) {
          forceFeedRecreate = true;
        }
        if (message.item.mr == null)
          delete (f.mr);
        if (message.item.mrx == null)
          delete (f.mrx);
        if (message.item.mrp == null)
          delete (f.mrp);
        if (message.item.l == null)
          delete (f.l);
        if (message.item.live == null)
          delete (f.live);
        message.item.version = f.version;
        message.item.book = f.book;
        message.item.my_favorite = f.my_favorite;
        if (message.item.log && message.item.log[message.item.log.length - 1].u && message.item.log[message.item.log.length - 1].u == P.feed.user.id) {
          message.item.version = message.item.main_version;
        } else {
          if (P.feed.content && message.item.id == P.feed.content.id) {
            message.item.version = message.item.main_version;
            PA.call_pj("content.view", {cid:P.feed.content.id}, 1);
          }
        }
        for (var key in message.item)
          f[key] = message.item[key];
        f.feed_groups = message.item.feed_groups;
        f.tag_good_prof = message.item.tag_good_prof;
        f.tag_endorse_prof = message.item.tag_endorse_prof;
        f.gd = message.item.gd;
        f.gd_a = message.item.gd_a;
        if (P.feed.user.isInst && message.item.type == "question" && message.item.timer) {
          f.timer = message.item.timer;
          var now = (new Date()).getTime() / 1000;
          if (f.timer.expire && now - f.timer.expire > 72*3600)
            f.timer = false;
        }
      } else {
        if (!P.feed.searchFeed) {
          forceFeedRecreate = true;
          if (P.feed.content && message.item.id == P.feed.content.id) {
            message.item.is_new = false;
            message.item.is_modified = false;
            message.item.changes = 0;
          }
          // see who made last few edits
          if (message.item.log && message.item.log[message.item.log.length - 1].u && message.item.log[message.item.log.length - 1].u == P.feed.user.id) {
            message.item.version = message.item.main_version;
            message.item.is_new = false;
          }
          P.feed.feedObj.feed.push(message.item);
          if (P.feed.searchFeed && P.feed.manualFilter == "live" && message.item.live) {
            P.feed.searchFeed.push(message.item);
          }
          if (message.item.is_new) {
            PEM.fire("updateFolderCount", {folders: message.item.folders, action: "inc"});
          }
          P.feed.updateTitle();
        }
      }
      if (P.feed.searchFeed && P.feed.searchFeed.length > 0) {
        for (var i = 0; i < P.feed.searchFeed.length; i++) {
          if (P.feed.searchFeed[i].id === message.item.id) {
            P.feed.searchFeed[i] = message.item;
          }
        }
      }
      if (f || forceFeedRecreate)
        P.feed.feedItemUpdate(f, forceFeedRecreate);
    } else if (message.action === 'feed_item_delete' && P.feed.feedObj && message.cid) {
      P.feed.removeFromFeed(message.cid);
    }
    PEM.fire("newMustReads", P.feed.getMustReadPosts());
  },
  updateFavoriteListener: function(content) {
    var f = null;
    if (P.feed.feedHash[content.id]) {
      f = P.feed.feedHash[content.id];
      f.my_favorite = content.my_favorite;
    }
    if (P.feed.searchFeed && P.feed.searchFeed.length > 0) {
      for (var i = 0; i < P.feed.searchFeed.length; i++) {
        if (P.feed.searchFeed[i].id == content.id) {
          P.feed.searchFeed[i] = content;
        }
      }
    }
    if (f)
      P.feed.feedItemUpdate(f, true);
  },
  unselectPost: function() {
    $('#question_feed_questions').find('.selected').removeClass('selected');
    if (P.feed.searchResultSelectTimeout2) {
      clearTimeout(P.feed.searchResultSelectTimeout2);
      clearTimeout(P.feed.searchResultSelectTimeout5);
      clearTimeout(P.feed.searchResultSelectTimeout10);
      clearTimeout(P.feed.searchResultSelectTimeout30);
      clearTimeout(P.feed.searchResultSelectTimeout60);
    }
  },
  showHideFeed: function(show) {
    if (show) {
      P.feed.user.config.hide_feed = false;
      PA.call_pj("user.unset", {stat:"hide_feed"}, 1);
    } else {
      P.feed.user.config.hide_feed = "yes";
      PA.call_pj("user.set", {stat:"hide_feed", val:"yes"}, 1);
    }
    P.feed.setFeedHideState();
  },
  hideFeed: function() {
    $("#feed").hide();
    $("#page_center").css("left", 0);
  },
  showFeed: function() {
    $("#feed").show();
    PEM.fire("initialFolders", P.feed.feedObj.tags);
    P.feed.setFeedHideState();
  },
  startUpload: function() {
    P.feed.uploading = true;
    $.blockUI();
    PA.call_pj("generic.event_to_requests", {event: "resume_feed.uploaded_resume"}, 1);
    $('#upload_form_feed').submit();
  },
  onUploadComplete: function() {
    if (!P.feed.uploading) return false;
    P.feed.uploading = false;
    $.unblockUI();
    if (P.feed.userProfile && P.feed.userProfile.profile_settings && P.feed.userProfile.profile_settings.published) {
      $("#submit_resume").hide();
      $("#question_feed_questions").removeClass("showing_upload_resume");
      PA.markSeenUnseen("careers_feed_resume_dec");
      PA.call_pj("generic.event_to_requests", {event: "resume_feed.already_opted_in"}, 1);
      return false;
    }
    $("#submit_resume .first_view").hide();
    $("#submit_resume .second_view").show();
    P.feed.resumeBoxTimeout = setTimeout(function() {
      $("#submit_resume").fadeOut(500, function() {
        var published = false;
        if ($("#feed_resume_checkbox").is(":checked"))
          published = true;
        PA.call_pj("user_profile.save_published_status", {published: published, message: "fade"}, 1);
        $("#question_feed_questions").removeClass("showing_upload_resume");
      });
      PA.markSeenUnseen("careers_feed_resume_dec");
    }, 8000);
  },
  setFeedHideState: function(forceShow) {
    if (P.feed.user.config.hide_feed && !forceShow) {
      $('.hide_show_feed.show_feed').show();
      $('#feed').hide();
      $('#page_center').css("left", "0px");
      $('#page_bottom_bar').css("left", "0px");
    } else {
      $('.hide_show_feed.show_feed').hide();
      $('#feed').show();
      $('#page_center').css("left", "350px");
      $('#page_bottom_bar').css("left", "350px");
    }
  },
  showFeedMessages: function() {
    if (P.feed.user.config && P.feed.user.config.seen_message) {
      var msg = "feed_view_toggle_msg_new";
      if (P.feed.user.config.seen_message.exist(msg) || (msg == "feed_view_toggle_msg_new" && (!P.feed.user.config.logins || P.feed.user.config.logins < 20))) {

      } else {
        PA.markSeenUnseen(msg);
        if (P.feed.user.config.feed_details != "yes") {
          $("#feed_expanded").show();
          P.feed.user.config.feed_details = "yes";
          P.feed.showFeedDetails = "yes";
          P.feed.setFeedDetails(P.feed.showFeedDetails);
          PA.call_pj("user.set", {stat: "feed_details", val: "yes"}, 1);
        }
      }
    }
  },
  animateFeedToWidth: function(width) {
    $("#feed").animate({
      width: width
    }, 300);
    $("#page_center").animate({
      left: width
    }, 300);
    $("#page_bottom_bar").animate({
      left: width
    }, 300);
    $('#student_only_indicator_border').animate({
      width: width
    }, 300);
  },
  // this will show the next pop up lined up
  refreshFeedContent: function(first_connect, info) {
    if (!first_connect) {
      // Must refresh feed and content
      if (P.feed.feedObj && !P.feed.searchFeed) {
        if (P.feed.feedObj.more) {
          P.feed.getMoreFeed(0, P.feed.initialFeedSize + P.feed.loadAtOnce);
        } else {
          P.feed.getMoreFeed(0, null, true);
        }
      }
    }
  },
  updateMRUC: function(val, item) {
    if ((val >0 || val < 0) && (item === undefined || item == null || item.mr)) {
      P.feed.must_read_counts.new += val;
      if (P.feed.must_read_counts.new < 0) {
        P.feed.must_read_counts.new = 0;
      }
      PEM.fire("updateMRUC", P.feed.must_read_counts);
    }
  },
  mustReadExpired: function(cid) {
    if (P.feed) {
      var item = P.feed.feedHash[cid];
      if (item && item.bucket_order === 1 && !P.feed.isMustRead(item)) {
        P.feed.feedItemUpdate(item, true);
        PEM.fire("newMustReads", P.feed.getMustReadPosts());
      }
    }
  },
  getContentMustRead: function() {
    if (P.note_view && P.note_view.content &&P.note_view.content.config) {
      var p = {
        mr: P.note_view.content.config.must_read_version,
        mrx: P.note_view.content.config.must_read_expire,
        mrp: P.note_view.content.config.must_read_to_post,
        id: P.note_view.content.id
      };
      if (P.feed.isMustRead(p)) {
        return {cid: p.id, ver: p.mr, mrp: p.mrp};
      }
    }
  },
  init: function(module) {
    PEM.addListener("network", P.feed.setNetwork);
    PEM.addListener("content", P.feed.setContent);
    PEM.addListener("pushNetworkMessage", P.feed.pushNetworkMessage);
    PEM.addListener("updateFavorite", P.feed.updateFavoriteListener);
    PEM.addListener("filterFeed", P.feed.filterFeed);
    PEM.addListener("toggleFeedShortcut", P.feed.toggleFeedShortcut);
    PEM.addListener("selectContent", P.feed.selectContent);
    PEM.addListener("toggleFollowFromPost", P.feed.toggleFollowFromPost);
    PEM.addListener("showNewPost", P.feed.showNewPost);
    PEM.addListener("cleanDashboard", P.feed.unselectPost);
    PEM.addListener("getUnreadPosts", P.feed.getUnreadPosts);
    PEM.addListener("getUpdatedPosts", P.feed.getUpdatedPosts);
    PEM.addListener("deleteContent", P.feed.deleteContent);
    PEM.addListener("showHideFeed", P.feed.showHideFeed);
    PEM.addListener("getSelectedItem", P.feed.getSelectedItem);
    PEM.addListener("updateTitle", P.feed.updateTitle);
    PEM.addListener("hideFeed", P.feed.hideFeed);
    PEM.addListener("showFeed", P.feed.showFeed);
    PEM.addListener("getContentMustRead", P.feed.getContentMustRead);
    P.feed.template = module.template;

    P.push.onPushReconnect = P.feed.refreshFeedContent;
    P.push.onPushNoConnection = function(info) {
      P.feed.refreshFeedContent(false, info);
    };
  }
};
P.folders_bar = {
  network:null,
  allFolders:null,
  nestedFolders:[],
  maxTags: 20,
  visibleFolderCount: -2,
  must_read_count: 0,
  must_read_new:0,

  setNetwork: function(network) {
    P.folders_bar.network = network;
  },
  openDrafts: function() {
    if (P.drafts.showing) {
      P.drafts.hideDrafts();
    } else {
      $('#new_post_button').click();
      if (P.folders_bar.numDrafts() > 0) {
        P.drafts.showDrafts(true);
      } else {
        P.drafts.showDrafts();
      }
    }
  },
  numDrafts: function() {
    return Object.keys(P.drafts.drafts).length;
  },
  setNumDrafts: function() {
    var numDrafts = P.folders_bar.numDrafts();
    if (numDrafts > 0) {
      $('#folder_count_drafts').text(numDrafts);
      $('#folder_count_drafts').addClass('show');
    } else {
      $('#folder_count_drafts').removeClass('show');
    }
  },
  newMustReads: function(data) {
    P.folders_bar.must_read_count = data.cnt;
    P.folders_bar.must_read_new = data.new;
    P.folders_bar.onResize();
  },

  setInitialFolders: function(tags) {
    P.folders_bar.nestedFolders = [];
    P.folders_bar.allFolders = tags;
    if (!tags ||
        (P.folders_bar.network && P.folders_bar.network.config && P.folders_bar.network.config.disable_folders)) {
      $("#page_main").removeClass("has_popular_tags_bar");
      $("#bars").html("");
      return;
    }

    if (!tags.instructor) return;

    function _add_folder (array, parsed, count, index) {
      var entry = array.find(function(el) {
        return parsed[0] === el.name;
      });
      if (!entry) {
        entry = {name: parsed[0], subfolders:[], count: 0, index: -1}
        array.push(entry);
      }
      if (parsed.length === 1) {
        entry.count = count;
        entry.index = index;
      } else {
        _add_folder(entry.subfolders, parsed.slice(1), count, index);
      }
    }

    for (var i = 0; i < tags.instructor.length; i++) {
      _add_folder(
        P.folders_bar.nestedFolders,
        tags.instructor[i].split(FOLDER_DELIMITER),
        tags.instructor_count[tags.instructor[i]] || 0,
        i);
    }

    var special_folders = ["polls"];
    for (var i = 0; i < special_folders.length; i++) {
      if (tags.popular_count[special_folders[i]] > 0) {
        P.folders_bar.nestedFolders.push({
          name: special_folders[i],
          count: tags.instructor_count[special_folders[i]]});
      }
    }

    $("#page_main").addClass("has_popular_tags_bar");
    $("#bars").html(P.folders_bar.template({folders: P.folders_bar.nestedFolders}));
    $("#bars").show();
    P.folders_bar.onResize();

    $('#openMoreFolders').click(function(event) {
      $('#moreFolders').show();
      $(".subfolder_menu").hide();
      event.stopPropagation();
      return false;
    });
  },

  updateFolderCount: function(params) {
    if (P.feed.user.isPublic) return;
    if (!P.folders_bar.allFolders) return;
    if (!P.folders_bar.allFolders.instructor) return;
    var action = params.action === "inc"? 1 : params.action === "dec" ? -1 : 0;
    if (!params.action) return;
    var all_folders = P.folders_bar.allFolders.instructor;
    var counts = P.folders_bar.allFolders.instructor_count;
    for (var i = 0; i < params.folders.length; i++) {
      var folderName = params.folders[i];
      var index = all_folders.indexOf(folderName);
      var folder_count_element = $("#folder_count_" + index);
      var all_folder_element = $("#folder_count_" + index + "_all");
      if (index === -1 || !folder_count_element)
        continue;
      if (!counts[folderName])
        counts[folderName] = 0;
      counts[folderName] += action;
      if (counts[folderName] > 0) {
        folder_count_element.html(counts[folderName]);
        folder_count_element.addClass("show");
        all_folder_element.html(counts[folderName]);
        all_folder_element.addClass("show");
      } else {
        counts[folderName] = 0;
        folder_count_element.removeClass("show");
        all_folder_element.removeClass("show");
      }
    }
  },
  pushNetworkMessage: function(message) {
    if (message.action === "folders_update" && message.folders) {
      P.folders_bar.allFolders.instructor = message.folders;
      P.folders_bar.network.config.disable_folders = message.disable_folders;
      P.folders_bar.visibleFolderCount = -2; // force regen of theresmore.
      P.folders_bar.setInitialFolders(P.folders_bar.allFolders);
    }
  },
  hideFoldersBar: function() {
    $("#bars").hide();
    $("#page_main").removeClass("has_popular_tags_bar");
  },

  filterFolder:function(evt, index, menu_id, parent_index) {
    var folder = P.folders_bar.allFolders.instructor[index];
    $(".subfolder_menu").hide();
    $('#moreFolders').hide();
    if (menu_id) {
      $("#subfolder_" + menu_id + "_" + index).show()
      if (parent_index >= 0) {
        $("#subfolder_" + menu_id + "_" + parent_index).show()
      }
      if (menu_id === 2) {
        $('#moreFolders').show();
      }
    } else {
      PEM.fire("filterFeed", {filter: "folder", folder: folder})
    }
    if (evt && evt.stopPropagation)
      evt.stopPropagation();
    return false;
  },

  onResize: function() {
    if (P.folders_bar.nestedFolders.length && $("#popular_tags_bar").is(":visible")) {
      $(".subfolder_menu").hide();
      var last = -1;
      for (var i = 0; i < P.folders_bar.nestedFolders.length; i++) {
        var p = $('#folder_bar_' + P.folders_bar.nestedFolders[i].index).position();
        if (p && p.top > 0) {
          last = i;
          break;
        }
      }
      if (P.folders_bar.visibleFolderCount !== last) {
        P.folders_bar.visibleFolderCount = last;
        if (last >= 0) {
          $("#popular_tags_bar").addClass("theresMore");
          $('#moreFolders').html(
            PTM.templates["folders_bar:more_menu"](
              {folders:P.folders_bar.nestedFolders.slice(P.folders_bar.visibleFolderCount)}
            ));
        } else {
          $("#popular_tags_bar").removeClass("theresMore");
          $('#moreFolders').hide();
        }
      }
    }
    if (P.top_bar.user.showCareers) {
      var p = $('.top_bar_careers_homescreen').position();
      if (p.top > 0) {
        $('.stud_companies_nav').hide();
      } else {
        $('.stud_companies_nav').show();
        p = $('.top_bar_careers_homescreen').position();
        if (p.top > 0) {
          $('.stud_companies_nav').hide();
        }
      }
    }
    if (P.folders_bar.must_read_count > 0) {
      $('#must_read_folder').show();
      if (P.folders_bar.must_read_new > 0) {
        $('#folder_must_reads_count').text(P.folders_bar.must_read_new);
        $('#folder_must_reads_count').addClass("show");
      } else {
        $('#folder_must_reads_count').removeClass("show");
      }
    } else {
      $('#must_read_folder').hide();
    }
  },

  init: function(module) {
    PEM.addListener("network", P.folders_bar.setNetwork);
    PEM.addListener("initialFolders", P.folders_bar.setInitialFolders);
    PEM.addListener("updateFolderCount", P.folders_bar.updateFolderCount);
    PEM.addListener("hideFoldersBar", P.folders_bar.hideFoldersBar);
    PEM.addListener("newMustReads", P.folders_bar.newMustReads);
    PEM.addListener("updateMRUC", P.folders_bar.newMustReads);
    PEM.addListener("pushNetworkMessage", P.folders_bar.pushNetworkMessage);
    if (module.options.network)
      P.folders_bar.network = module.options.network;
    P.folders_bar.template = module.template;
  }

};

window.addEventListener('resize', P.folders_bar.onResize, { passive: true });
P.folder_selector = {
  folderList: [],
  folderState: {
    editing: {},
    collapsed: {},
    new_subfolder: {},
    selected:{},
  },
  templateName: "",
  elementId: "",

  handleFolderSelect: function() {
    function _select(index) {
      var e = P.folder_selector.folderList[index];
      $("#folder_" + index + ".folder_select_button").addClass('selected');
      if (e.parent !== -1) {
        _select(e.parent);
      }
      P.folder_selector.folderState.selected[e.name] = true;
    }

    function _unselect(index) {
      var e = P.folder_selector.folderList[index];
      $("#folder_" + index + ".folder_select_button").removeClass('selected');
      delete P.folder_selector.folderState.selected[e.name];
      if (e.parent !== -1) {
        var p = P.folder_selector.folderList[e.parent]
        for (var i = 0; i < p.children.length; i++) {
          if (P.folder_selector.folderState.selected[p.children[i].name]) {
            return;
          }
        }
        _unselect(e.parent);
      }
    }

    $(".subfolder_menu").hide();
    $(".folder_selector_menu").hide();
    var id = this.getAttribute("id");
    if (id) id = id.split("_")[1];
    if (id) {
      function _show_menu(id) {
        var e = P.folder_selector.folderList[id];
        if (e.parent >= 0) {
          _show_menu(e.parent);
        }
        $("#selector_submenu_" + P.folder_selector.elementId + "_" + id).show();
        $("#folder_" + id + ".folder_select_button").addClass('selected');
        for (var i = 0; i < e.children.length; i++) {
          if (!P.folder_selector.folderState.selected[e.children[i].name]) {
            $("#folder_" + e.children[i].index + ".folder_select_button").removeClass('selected');
          }
        }
      }
      if (this.classList.contains("has_child")) {
        _show_menu(id); //show menu and its parents
      } else {
        if (this.classList.contains("selected")) {
          _unselect(+id);
        } else {
          _select(+id);
          $(".new_post_error.no_folders").removeClass("show");
        }
      }
    }
    return false;
  },

  handleFolderFocusOut: function(element, id) {
    // magic to detect focus moved outside of parent element.
    setTimeout(function() {
      // by the time this gets called activeElement is the newly focused element.
      var parent = document.activeElement && document.activeElement.parentElement;
      while (parent) {
        if (parent === element) {
          return; // focus still within the element.
        }
        parent = parent.parentElement;
      }
      $(".folder_selector_menu").hide();
      if (!P.folder_selector.folderState.selected[P.folder_selector.folderList[id].name]) {
        $("#folder_" + id + ".folder_select_button").removeClass("selected");
      }
    })
  },

  pushNetworkMessage: function(message) {
    if (message.action === "folders_update" && message.folders) {
      P.folder_selector.generateFolderList(message.folders);
      P.folder_selector.setSelectedFolders(null, true, true);
    }
  },

  rerender: function() {
    if (P.folder_selector.templateName && P.folder_selector.folderList.length) {
      $("#" + P.folder_selector.elementId).
        html(P.folder_selector.processTemplate());
    }
  },

  processTemplate: function() {
    function _add_selected(array) {
      for (var i = 0; i < array.length; i++) {
        var e = array[i];
        e.selected = !!P.folder_selector.folderState.selected[e.name];
        _add_selected(e.children);
      }
    }
    _add_selected(P.folder_selector.folderList);
    return PTM.templates["folder_selector:" + P.folder_selector.templateName]({
      folders:P.folder_selector.folderList,
      instance_id: P.folder_selector.elementId
    })
  },

  processSubmenuTemplate: function(options) {
    options.instance_id = P.folder_selector.elementId;
    return PTM.templates["folder_selector:selector_submenu"](options)
  },

  processConfigTemplate: function() {
    return PTM.templates["folder_selector:configure_folders"]()
  },

  processConfigListTemplate: function(options) {
    if (!options) {
      options = {};
    }
    if (!options.children) {
      options.children = P.folder_selector.folderList.filter(function(e) {
        return e.parent === -1
      })
    }
    return PTM.templates["folder_selector:configure_folders_list"](options)
  },

  setContent: function(content) {
    if (content) {
      P.folder_selector.initialize(
        "note_view_folders",
        "edit_quesiton_note_folders",
        content.folders ? content.folders : null
      );
    }
  },

  setNetwork: function(network) {
    P.folder_selector.generateFolderList(network.folders);
    P.folder_selector.setSelectedFolders([], true);
  },

  setSelectedFolders(folders, re_render, autoselect_parent) {
    if (!folders) {
      folders = Object.keys(P.folder_selector.folderState.selected);
    }
    P.folder_selector.folderState.selected = folders.reduce(function(ret, e) {
      if (P.folder_selector.folderList.length) {
        function _select(en) {
          if (en) {
            ret[en.name] = true;
            if (autoselect_parent) {
              _select(P.folder_selector.folderList[en.parent]);
            }
          }
        }
        var f = P.folder_selector.folderList.find(function(el) {
          return el.children.length === 0 && el.name === e;
        })
        _select(f);
      } else {
        ret[e] = true;
      }
      return ret;
    }, {})
    if (re_render) {
      P.folder_selector.rerender();
    }
  },

  initialize: function(templateName, elementId, selected) {
    P.folder_selector.templateName = templateName;
    P.folder_selector.elementId = elementId;
    P.folder_selector.setSelectedFolders(selected, false, true);
  },

  getParentFolderCount: function() {
    return P.folder_selector.folderList.reduce(function(ret, e) {
      return e.parent < 0 ? ret + 1 : ret;
    }, 0)
  },

  getSelectedFolders: function() {
    return Object.keys(P.folder_selector.folderState.selected);
  },

  addNewFolder: function(full_name) {
    full_name = full_name.replace(/[ |]/g, "_").replace(/>/g,"&gt;").replace(/</g, "&lt;");
    var sep = full_name.lastIndexOf(FOLDER_DELIMITER);
    var my_name = full_name;
    var parent_idx = -1;
    if (sep !== -1) {
      parent_idx = P.folder_selector.addNewFolder(full_name.substring(0, sep));
      my_name = full_name.substring(sep + 1);
    }
    var entry = P.folder_selector.folderList.find(function(el) {
      return el.name === full_name;
    });
    if (!entry) {
      entry = {
        index: P.folder_selector.folderList.length,
        parent: parent_idx,
        name: full_name,
        subname: my_name,
        children: [],
        level: parent_idx === -1 ? 0 : P.folder_selector.folderList[parent_idx].level + 1
      }
      P.folder_selector.folderList.push(entry);
      if (parent_idx !== -1) {
        P.folder_selector.folderList[parent_idx].children.push(entry);
      }
    }
    return entry.index;
  },

  generateFolderList: function(new_folders) {
    P.folder_selector.folderList = [];

    for (var i = 0; i < new_folders.length; i++) {
      P.folder_selector.addNewFolder(new_folders[i]);
    }
  },

  deleteAllFolders: function () {
    var cnt = $(".massFolderSelect:checked").length;
    var html = "";
    html +=  "<div class=\"UIModalWindow UIConfirmationWindow\" id=\"Confirmation_Unenroll\">";
    html +=    "<div class=\"topbar\">Delete " + cnt + " folders?</div>";
    html +=    "<div class=\"content\">";
    html +=      "<p>";
    html +=        "These folders will no longer be visible in the top folders bar or selectable when creating a new post. Posts already associated with these folders will still be tagged with these folders. All subfolders of these folders will also be deleted.";
    html +=      "</p>";
    html +=    "</div>";
    html +=    "<ul class=\"UIActions clearFix\">";
    html +=      "<li class=\"rightFloat\"><a class=\"UIButton submit\" id=\"fancyConfirm_cancel\" href=\"#\">Cancel</a></li>";
    html +=      "<li class=\"rightFloat leftSave\"><a class=\"UIButton cancel\" id=\"fancyConfirm_ok\" href=\"#\">Delete Folders</a></li>";
    html +=    "</ul>";
    html +=  "</div>";
    jQuery.fancybox({
      modal: true,
      padding: 0,
      content: html,
      onComplete: function(){
        jQuery("#fancyConfirm_cancel").click(function(){
          jQuery.fancybox.close();
          return false;
        })
        jQuery("#fancyConfirm_ok").click(function() {
          jQuery.fancybox.close();
          $(".massFolderSelect:checked").closest(".folder_entry").remove();
          P.folder_selector.onSortableStop();
          return false;
        })
      }
    });
    return false;
  },

  onSortableStop: function() {
    var elems = $(".folder_header");
    var new_folders = []
    for (var i = 0; i < elems.length; i++) {
      new_folders.push(P.folder_selector.getFolderEntryFromId(elems[i].id));
    }
    P.folder_selector.folderList = new_folders;
    saveChanges();
  },

  renderConfig: function(id, folders) {
    P.folder_selector.generateFolderList(folders);
    P.folder_selector.setSelectedFolders();
    $(id).html(P.folder_selector.processConfigTemplate(null));
    $('.subfolder_list').sortable({
      axis: "y",
      handle: ".reorder-folder",
      snap: true,
      stop: P.folder_selector.onSortableStop
    });
    P.folder_selector.applyConfigState();
  },

  renderFolderList: function(folders) {
    P.folder_selector.generateFolderList(folders);
    P.folder_selector.setSelectedFolders();
    $("#configure_folders_list_wrapper").html(P.folder_selector.processConfigListTemplate());
    P.folder_selector.applyConfigState();
    $('.subfolder_list').sortable({
      axis: "y",
      handle: ".reorder-folder",
      snap: true,
      stop: P.folder_selector.onSortableStop
    });
  },

  applyConfigState: function() {
    P.folder_selector.folderList.forEach(function (e) {
      var z = $("#folder_entry_" + e.index);
      if (typeof P.folder_selector.folderState.new_subfolder[e.name] === "string") {
        z.find(".subfolder_name_edit").val(P.folder_selector.folderState.new_subfolder[e.name]);
        z.find(".folder_name").show();
        z.find(".folder_name_edit").hide();
        z.find(".folder_edit_button.edit").hide();
        z.find(".folder_edit_button.save").hide();
        z.find(".folder_edit_button.cancel").show();
        z.find(".folder_edit_button.subfolder").hide();
        z.find(".subfolder_add_wrapper").show();
      } else {
        z.find(".subfolder_add_wrapper").hide();
        if (typeof P.folder_selector.folderState.editing[e.name] === "string") {
          z.find(".folder_name_edit").val(P.folder_selector.folderState.editing[e.name]);
          z.find(".folder_name").hide();
          z.find(".folder_name_edit").show();
          z.find(".folder_edit_button.edit").hide();
          z.find(".folder_edit_button.save").show();
          z.find(".folder_edit_button.cancel").show();
          z.find(".folder_edit_button.subfolder").hide();
        } else {
          z.find(".folder_name").show();
          z.find(".folder_name_edit").hide();
          z.find(".folder_edit_button.edit").show();
          z.find(".folder_edit_button.save").hide();
          z.find(".folder_edit_button.cancel").hide();
          z.find(".folder_edit_button.subfolder").show();
        }
      }
      if (e.children.length) {
        if (P.folder_selector.folderState.collapsed[e.name]) {
          $("#subfolders_wrapper_" + e.index).hide();
          z.find(".subfolders_expand").removeClass("open");
          z.find(".folder_icon").removeClass("open");
        } else {
          $("#subfolders_wrapper_" + e.index).show();
          z.find(".subfolders_expand").addClass("open");
          z.find(".folder_icon").addClass("open");
        }
      }
      z.find(".massFolderSelect").attr('checked', !!P.folder_selector.folderState.selected[e.name])
    })
    P.folder_selector.showDeleteAllError();
  },

  handleCreateSubfolder: function(parent_idx) {
    var parent_entry = P.folder_selector.folderList[parent_idx];
    var parent_name = "";
    if (parent_entry) {
      parent_name = parent_entry.name + FOLDER_DELIMITER;
      P.folder_selector.folderState.new_subfolder[parent_entry.name] = false;
      P.folder_selector.folderState.collapsed[parent_entry.name] = false;
    }
    var f = $("#subfolder_name_edit_" + parent_idx).val()
    .replace(new RegExp(FOLDER_DELIMITER,'g'), "")
    .trim()
    .toLowerCase();
    if (!f) {
      alert("Please enter folder name");
      return;
    }
    if ($("#subfolder_numbered_" + parent_idx).attr('checked')) {
      var from = parseInt($("#subfolder_numbered_from_" + parent_idx).val());
      var to = parseInt($("#subfolder_numbered_to_" + parent_idx).val());
      if (from >= 0 && to >= from) {
        $("#subfolder_name_edit_" + parent_idx).val("");
        for (var i = from; i <= to; i++) {
          P.folder_selector.addNewFolder(parent_name + f + i);
        }
      } else {
        alert("Please enter correct from and to numbers");
        return;
      }
    } else {
      $("#subfolder_name_edit_" + parent_idx).val("");
      P.folder_selector.addNewFolder(parent_name + f,);
    }
    saveChanges();
  },

  handleExpand: function() {
    var z = $(this).closest('.folder_header');
    var folder_id = z.attr("id");
    var folder_entry = P.folder_selector.getFolderEntryFromId(folder_id);
    P.folder_selector.folderState.collapsed[folder_entry.name] = this.classList.contains("open");
    P.folder_selector.applyConfigState();
    return false;
  },

  handleCollapseAll: function(collapse) {
    P.folder_selector.folderState.collapsed = {};
    if (collapse) {
      P.folder_selector.folderList.forEach(function(e){
        if (e.children.length)
          P.folder_selector.folderState.collapsed[e.name] = true;
      })
    }
    P.folder_selector.applyConfigState();
    return false;
  },

  handleNumbered: function(idx) {
    if ($("#subfolder_numbered_" + idx).attr('checked')) {
      $("#subfolder_numbered_from_" + idx).prop("disabled", false);
      $("#subfolder_numbered_to_" + idx).prop("disabled", false);
    } else {
      $("#subfolder_numbered_from_" + idx).prop("disabled", true);
      $("#subfolder_numbered_to_" + idx).prop("disabled", true);
    }
  },

  handleNameChange: function(idx) {
    P.folder_selector.folderState.editing[P.folder_selector.folderList[idx].name] =
      $("#folder_name_edit_" + idx).val();
  },

  handleNewNameChange: function(idx) {
    P.folder_selector.folderState.new_subfolder[P.folder_selector.folderList[idx].name] =
      $("#subfolder_name_edit_" + idx).val();
  },

  handleDeleteSelect: function(idx) {
    if ($("#folder_entry_" + idx + " .massFolderSelect").attr('checked')) {
      P.folder_selector.folderState.selected[P.folder_selector.folderList[idx].name] = true;
    } else {
      delete P.folder_selector.folderState.selected[P.folder_selector.folderList[idx].name];
    }
    P.folder_selector.showDeleteAllError();
  },

  showDeleteAllError: function() {
    var total = $(".massFolderSelect.level0").length;
    var selected = $(".massFolderSelect.level0:checked").length;
    if (total === selected) {
      $('#deleteAllError').show();
      $('#deleteAllLink').hide();
    } else {
      $('#deleteAllError').hide();
      $('#deleteAllLink').show();
    }
  },

  getFolderEntryFromId: function(tag) {
    if (!tag || !tag.split)
      return null;
    return P.folder_selector.folderList[tag.split("_")[2]];
  },

  initForConfig: function() {
    Handlebars.registerHelper('configure_folders_list', P.folder_selector.processConfigListTemplate);
    Handlebars.registerHelper('configure_folders', P.folder_selector.processConfigTemplate);

    $('.subfolders_expand').die().live('click', P.folder_selector.handleExpand)

    $('.folder_edit_button').die().live('click', function() {
      var z = $(this).closest('.folder_header');
      var folder_id = z.attr("id");
      var folder_entry = P.folder_selector.getFolderEntryFromId(folder_id);
      if (this.classList.contains("save")) {
        var new_subname = z.find(".folder_name_edit").val()
        .replace(new RegExp(FOLDER_DELIMITER,'g'), "")
        .trim()
        .replace(/[ |]/g, "_")
        .toLowerCase();
        if (!new_subname) {
          alert("Please enter folder name");
          return;
        }
        var new_full_name = new_subname;
        if (folder_entry.parent !== -1) {
          new_full_name = P.folder_selector.folderList[folder_entry.parent].name + FOLDER_DELIMITER + new_subname;
        }
        P.folder_selector.folderState.editing[folder_entry.name] = false;
        if (folder_entry.subname !== new_subname) {
          z.find(".folder_name .tag").html(new_subname)
          PA.call_pj(
            "network.rename_folder",
            {
              id: cc.id, old_name: folder_entry.name,
              new_name: new_full_name
            },
            1,
            function(new_folders) {
              function _resetState(e) {
                var ret = {
                  editing: P.folder_selector.folderState.editing[e.name],
                  selected: P.folder_selector.folderState.selected[e.name],
                  collapsed: P.folder_selector.folderState.collapsed[e.name],
                  new_subfolder: P.folder_selector.folderState.new_subfolder[e.name],
                  children: {}
                }
                P.folder_selector.folderState.collapsed[e.name] = false;
                P.folder_selector.folderState.editing[e.name] = false;
                P.folder_selector.folderState.new_subfolder[e.name] = false;
                delete P.folder_selector.folderState.selected[e.name];
                for (var i = 0; i < e.children.length; i++) {
                  ret.children[e.children[i].subname] = _resetState(e.children[i]);
                }
                return ret;
              }

              function _setState(e, state) {
                if (e && state) {
                  P.folder_selector.folderState.collapsed[e.name] = state.collapsed;
                  P.folder_selector.folderState.editing[e.name] = state.editing;
                  P.folder_selector.folderState.new_subfolder[e.name] = state.new_subfolder;
                  if (state.selected)
                    P.folder_selector.folderState.selected[e.name] = true;
                  for (var i = 0; i < e.children.length; i++) {
                    _setState(e.children[i], state.children[e.children[i].subname]);
                  }
                }
              }

              var state = _resetState(folder_entry);

              if (new_folders.length) {
                P.folder_selector.renderFolderList(new_folders);
                _setState(
                  P.folder_selector.folderList.find(function(el) {
                    return el.name === new_full_name;
                  }),
                  state);
              }
              P.folder_selector.applyConfigState();
              var html = ""
              html += "<div class=\"UIModalWindow UIConfirmationWindow\" id=\"Confirmation_Unenroll\">"
              html += "<div class=\"topbar\">Renaming a Folder</div>"
              html += "<div class=\"content\">"
              html += "<p>"
              html += "It may take a few minutes for posts in this folder to reflect the updated folder name."
              html += "</p>"
              html += "</div>"
              html += "<ul class=\"UIActions clearFix\">"
              html += "<li class=\"rightFloat\"><a class=\"UIButton submit\" data-pats=\"folder_warning_modal\" id=\"fancyConfirm_cancel\" href=\"#\">Close</a></li>"
              html += "</ul>"
              html += "</div>"
              jQuery.fancybox({
                modal: true,
                padding: 0,
                content: html,
                onComplete: function() {
                  jQuery("#fancyConfirm_cancel").click(function() {
                    jQuery.fancybox.close()
                    return false
                  })
                },
              })
            },
            function(err) {
              alert(err);
              z.find(".folder_name .tag").html(folder_entry.subname)
              z.find(".folder_name_edit").val(folder_entry.subname);
            }
          )
        }
      } else if (this.classList.contains("cancel")) {
        P.folder_selector.folderState.new_subfolder[folder_entry.name] = false;
        P.folder_selector.folderState.editing[folder_entry.name] = false;
      } else if (this.classList.contains("edit")){
        P.folder_selector.folderState.editing[folder_entry.name] = folder_entry.subname;
      } else if (this.classList.contains("subfolder")){
        P.folder_selector.folderState.new_subfolder[folder_entry.name] = "";
      }
      P.folder_selector.applyConfigState();
    });
  },

  getFolders: function() {
    return P.folder_selector.folderList.map(function(e){return e.name});
  },

  init: function(module) {
    $(".folder_select_button").die();
    $(".folder_select_button").live("click", P.folder_selector.handleFolderSelect);
    PEM.addListener("pushNetworkMessage", P.folder_selector.pushNetworkMessage);
    PEM.addListener("content", P.folder_selector.setContent);
    PEM.addListener("network", P.folder_selector.setNetwork);
    Handlebars.registerHelper('folder_selector', P.folder_selector.processTemplate);
    Handlebars.registerHelper('folder_selector_submenu', P.folder_selector.processSubmenuTemplate);
    if (module.options.network) {
      P.folder_selector.setNetwork(module.options.network);
    }
  }
};
P.note_view = {
  content:null,
  network:null,
  user:null,
  questionTextTemplate: null,
  usersAutoComplete: null,
  editRevision: null,
  FEED_GROUP_DELIMITER: "||",

  initHandlers: function() {
    $(".post_region_box.question_note_view .post_action.edit").click(function() {
      $(".tipsy").remove();
      if (P.note_view.user.isPublic) {
        alert("You cannot edit this post");
        return;
      }
      P.note_view.startEdit();
      return false;
    });
    $("#must_read_button").click(function() {
      PA.call_pj("content.confirm_read", {
        cid: P.note_view.content.id,
        ver: P.note_view.content.config.must_read_version
      }, 1);
      return false;
    });
    $("#undo_must_read_button").click(function() {
      PA.call_pj("content.confirm_read", {cid: P.note_view.content.id}, 1);
      return false;
    });
    $(".must_read_expire_radio").change(function() {
      P.note_view.showMustReadTime();
      return false;
    });
    $(".post_region_box.question_note_view .post_action.submit").click(function() {
      var top = $(this).closest(".post_region_box.question_note_view");
      P.note_view.editSubmit();
      return false;
    });
    $("#must_read_date").datepicker();
    $("#must_read_time").timepicker({
      listWidth: 1,
      selectOnBlur: true,
      timeFormat: 'h:i a',
    });
    $("#inactive_date").datepicker();
    $("#inactive_date").datepicker('setValue', new Date());
    $("#inactive_date").val("--/--/--")
    $("#inactive_time").timepicker({
      listWidth: 1,
      selectOnBlur: true,
      timeFormat: 'h:i a',
      appendTo: '#content_lock_menu'
    });
    $('.post_region_box.question_note_view .others.highlight').attr("title", "one, two<br>three");
    $('.post_region_box.question_note_view .others').tooltip({placement: 'left', html: true});
    $(".post_region_arrow_dropdown").hover(
      function() {
        $(this).find(".dropdown-menu").show();
      }, function() {
        $(this).find(".dropdown-menu").hide();
      }
    );
    $('.post_converted_message_close').click(function(){
      $(this).closest('.post_converted_message').hide();
    });
    $('.question_icon.link').tooltip({
      'placement': 'bottom',
      'container': 'body',
      'title': 'Copy URL'
    });
    $('#at_ref_top').tooltip({
      'placement': 'bottom',
      'container': 'body',
      'title': 'Copy @' + P.note_view.content.nr
    });
    P.note_view.subGroupChange();
    P.note_view.showEditors();
  },
  showMustReadTime: function(config){
    if (config) {
      var exp_time = config.must_read_expire;
      if (exp_time > 0) {
        $("#must_read_date").datepicker('setValue', new Date(exp_time));
        $("#must_read_time").timepicker('setTime', new Date(exp_time));
      }
    }
    if($("#must_read_manual").attr('checked')) {
      $("#must_read_date").attr('disabled', true);
      $("#must_read_time").attr('disabled', true);
      if (!$("#must_read_date").val()) {
        $("#must_read_date").val("--/--/--")
      }
      if (!$("#must_read_time").val()) {
        $("#must_read_time").val("--:-- am");
      }
    } else {
      $("#must_read_date").removeAttr('disabled');
      $("#must_read_time").removeAttr('disabled');
      if (!$("#must_read_date").val()) {
        var d = new Date();
        d.setDate(d.getDate() + 1);
        $("#must_read_date").datepicker('setValue', d);
      }
      if (!$("#must_read_time").val()) {
        $("#must_read_time").timepicker('setTime', new Date());
      }
    }
  },
  showEditors: function() {
    var getUnique = function(array) {
      var contains = {};
      var unique = [];
      for (var i=0, len=array.length; i<len; ++i) {
        if (!contains[array[i]]) {
          contains[array[i]] = true;
          unique.push(array[i]);
        }
      }
      return unique;
    };

    var edits = P.note_view.content.q_edits;
    var elem = $('.question_note_view .currently_editing');
    if (!edits) return;
    if (edits.length == 0) {
      elem.hide();
      return;
    }
    var uniqueEdits = getUnique(edits);
    elem.find('.editing_message').html(
      '&#8764; ' + uniqueEdits.length + ' other user' + (uniqueEdits.length > 1 ? 's are' : ' is') + ' editing this right now. &#8764;'
    );
    elem.show();
  },
  showMustReadButton: function() {
    if (P.note_view.user &&
      !P.note_view.user.isInst &&
      P.feed &&
      P.note_view.content &&
      P.note_view.content.config &&
      P.note_view.content.config.must_read &&
      (P.note_view.content.config.must_read_expire === undefined || P.clock.getLocalDiff(P.note_view.content.config.must_read_expire) < 0))
    {
      if (PEM.callFirst("getContentMustRead")) {
        $('#must_read_button').show();
        $('#undo_must_read_button').hide();
      } else {
        $('#must_read_button').hide();
        $('#undo_must_read_button').show()
      }
    } else {
      $('#undo_must_read_button').hide();
      $('#must_read_button').hide();
    }
    P.note_view.showLockState();
  },
  onMustReadChange: function() {
    if ($('#must_read').attr('checked'))
      $('#must_read_details').show();
    else
      $('#must_read_details').hide();
  },
  setUser: function(user) {
    P.note_view.user = user;
  },
  setNetwork: function(network) {
    P.note_view.network = network;
  },
  scrollToFollowup: function(first_try) {
    if (P.note_view.content) {
      if ((P.note_view.content.gotoFollowup || P.note_view.content.gotoIFollowup) && P.note_view.content.followups) {
        var idx = 1;
        var iidx = 1;
        var found = false;
        var target = null;
        for(var i = 0; i < P.note_view.content.followups.length; i++) {
          var followup = P.note_view.content.followups[i];
          if (followup.config.ionly) {
            if (P.note_view.content.gotoIFollowup && P.note_view.content.gotoIFollowup == iidx) {
              found = true;
            }
            iidx += 1;
          } else {
            if (P.note_view.content.gotoFollowup && P.note_view.content.gotoFollowup == idx) {
              found = true;
            }
            idx += 1;
          }
          if (found) {
            target = $("#" + followup.id).offset().top + $('.main_panel').scrollTop() - 90;
            break;
          }
        }
      }
      if (target) {
        var time = 500;
        if (first_try) {
          time = Math.max(500, target * 2);
        } else {
          P.note_view.content.gotoFollowup = 0;
          $('.main_panel').stop();
        }
        $('.main_panel').animate({
          scrollTop: target
        }, time);
      }
    }
  },
  setContent: function(content) {
    P.note_view.content = content;
    if (!content) {
      P.note_view.showMustReadButton();
      return;
    }
    if (!content.config) content.config = {};
    if (!content.config.lock) content.config.lock = {date:"--/--/--", time:"--:-- am"};
    if (content.type == "note") {
      // this is my content! render it
      P.note_view.prepareHistoryAndChildren(content);
      PTM.getTemplate("question_note_view", P.note_view.showContent);
    }
    if(content.type == "poll" && content.config.unpublished) {
      content.isUnpublishedPoll = true;
    }
    if (!content.history_size) {
      content.history_size = content.history.length;
    }
    var anon = P.note_view.content ? P.note_view.content.default_anonymity : "no";
    $(".anonymity_selector").val(anon);
    setTimeout(P.note_view.scrollToFollowup, 1, true);
  },
  showContent: function(template) {
    $('.remove_on_post_load').remove();
    $('.post_region_box.question_note_view').replaceWith(template({
      content:P.note_view.content,
      network:P.note_view.network,
      user:P.note_view.user,
      anon: PEM.callFirst("getAnonymityOptions"),
      show_must_read: P.note_view.user.isInst && (P.note_view.network.config === null || P.note_view.network.config.must_read !== false),
      timezone:moment().tz(moment.tz.guess()).format("z")
    }));
    P.note_view.initHandlers();
    P.note_view.visibilityChange();
    P.note_view.showLiveButtons();
    P.note_view.showMustReadButton();
    P.note_view.showMustReadTime(P.note_view.content.config);
    P.renderer.ensureSyntaxHighlighting();
  },
  prepareHistoryAndChildren: function(content, historyIdx) {
    historyIdx = historyIdx || 0;
    if (content.history && content.history.length > 0) {
      // first make sure history is sorted
      content.history.sort(function(a,b){
        if (a.created > b.created) return -1;
        if (a.created < b.created) return 1;
        return 0;
      });
      if (historyIdx > content.history.length - 1) {
        historyIdx = content.history.length - 1;
      }
      content.lastUid = content.history[historyIdx].uid;
      content.lastUidA = content.history[historyIdx].uid_a;
      content.lastSet = (content.lastUid || content.lastUidA);
      content.firstUid = content.history[content.history.length - 1].uid;
      content.firstUidA = content.history[content.history.length - 1].uid_a;
      content.anon = content.history[historyIdx].anon;
      if (content.history[content.history.length - 1].anon == "stud" && content.my_post)
        content.showMyAnon = true;
      content.subject = content.history[historyIdx].subject;
      content.body = P.text_editor.convertOriginalToBase(content.history[historyIdx].content);
      // special embedding
      if (content.data && content.data.embed_links) {
        for (var i = 0; i < content.data.embed_links.length; i++) {
          var link = content.data.embed_links[i][0];
          var html = content.data.embed_links[i][1];
          // support up to two repeat occurrences of the same link (replaceAll requires using a regex,
          // which requires escaping metacharacters)
          content.body = content.body.replace(link, html).replace(link, html);
        }
      }
      content.last_edit = content.history[historyIdx].created;
      var others = {};
      for (var i = 1; i < content.history.length; i++)
        if (content.lastUid != content.history[i].uid)
          others[content.history[i].uid] = {anon:content.history[i].anon, uid_a:content.history[i].uid_a};
      var othersArr = [];
      var othersAnon = [];
      var othersA = [];
      for (var id in others) {
        othersArr.push(id);
        othersAnon.push(others[id].anon);
        othersA.push(others[id].uid_a)
      }
      content.others = othersArr;
      content.othersAnon = othersAnon;
      content.othersA = othersA;
    }
    if (content.children && content.children.length > 0) {
      var attach = [];
      for (var i = 0; i < content.children.length; i++) {
        if (content.children[i].type == "attach") {
          var attachment = P.note_view.makeAttachmentObject(content.children[i]);
          attach.push(attachment);
        }
      }
      if (attach.length > 0)
        content.attach = attach;
    }

    var feedGroups = content.config.feed_groups;
    if (content.config.publish_later) {
      feedGroups = content.config.publish_later_to;
    }

    if (content.config && feedGroups) {
      if (content.type == "poll" && content.config.publish_later == 1) {
        content.config.feed_groups_original = content.config.feed_groups;
        content.config.feed_groups = feedGroups;
      }

      var arr = content.config.feed_groups.split(",");
      var groups = 0;

      for (var i = 0; i < arr.length; i++) {
        if (arr[i].indexOf("instr_") == 0)
          arr[i] = "Instructors";
        else
          if (arr[i].indexOf("_") > 0) {
            groups = 1;
            content.myGroup = arr[i];
          }
      }
      if (content.type == "poll" && P.poll_view.content.folders.length == 0) {
        // cloned poll, default visibility to individuals
        content.isGroup = true;
        content.isPrivate = true;
        content.isPrivateAndNotGroup = true;
      } else if (groups) {
        content.visibility = content.myGroup;
        content.isGroup = true;
        content.isPrivate = true;
        content.isPrivateAndNotGroup = false;
        P.note_view.subGroupChange();
      } else {
        content.visibleOne = arr[0];
        if (arr.length == 2) {
          content.visibleTwo = arr[1];
        } else {
          arr.splice(0, 1);
          content.visibleArr = arr;
        }
        content.isPrivate = true;
        content.isPrivateAndNotGroup = true;
        content.visibility = "private";
        if (content.config.anon_group)
          content.visibleOne = false;
      }
    } else {
      if (!content.config.publish_later && content.status == "private") {
        content.isPrivate = true;
        content.isPrivateAndNotGroup = true;
        content.visibility = "private";
      } else {
        content.isPublic = true;
        content.visibility = "all";
      }
    }
    content.showType = content.type;
    P.note_view.prepareEndorsementVars(content, historyIdx);
    content.isPoll = false;
    content.isNote = false;
    content.isQuestion = false;
    content.canEdit = true;
    content.canDelete = true;
    if (!content.uid && content.change_log) content.uid = content.change_log[0].uid;
    if (!P.note_view.network.isGroup && !P.note_view.user.isInst)
      content.canDelete = false;
    if (P.note_view.network.prof_hash && P.note_view.network.prof_hash[content.uid] && !P.note_view.user.isInst)
      content.canEdit = false;
    content.disabledHistory = content.tags.exist("no_history");
    if (content.type == "poll") content.isPoll = true;
    if (content.type == "note") content.isNote = true;
    if (content.type == "question") content.isQuestion = true;
    if (content.isPrivate)
      $(".main_panel").addClass("private_post");
    else
      $(".main_panel").removeClass("private_post");
    // special case for teammate search
    if (content.type == "note" && content.subject == "Form project teams & study groups!" && content.body.indexOf("<script") == 0) {
      content.canEdit = false;
      content.canDelete = false;
      content.noFollowups = true;
      content.isTeammateSearch = true;
    }
    if (content.config && content.config.student_product) {
      content.canEdit = false;
      content.canDelete = false;
      content.noFollowups = true;
    }
  },
  prepareEndorsementVars: function(content, historyIdx) {
    content.endorseOne = null;
    content.endorseTwo = null;
    content.endorseArr = null;
    if (historyIdx > 0) return;
    if (content.tag_good_arr && content.tag_good_arr.length > 0) {
      content.endorseOne = content.tag_good_arr[0];
      if (content.tag_good_arr.length == 2) {
        content.endorseTwo = content.tag_good_arr[1];
      }
      else {
        content.endorseArr = content.tag_good_arr.slice(1, content.tag_good_arr.length);
      }
      if (!(P.note_view.network.type && P.note_view.network.type == "group")) {
        content.endorseOne = false;
        for (var i = 0; i < content.tag_good_arr.length; i++) {
          if (P.note_view.network.prof_hash[content.tag_good_arr[i]]) {
            content.endorseOne = content.tag_good_arr[i];
            break;
          }
        }
      }
    }
  },
  subGroupChange: function() {
    if (!P.note_view.network.config.class_sections) return;
    if (!$("#subgroup_dropdown_edit").val()) return;
    P.note_view.selectedSectionError = false;
    if ($('#subgroup_dropdown_edit').val() == "All my groups") {
      var net = P.note_view.network;
      var all = "";
      for (var i = 0; i < net.subGroups.length; i++) {
        if (net.subGroups[i].name != "All my groups") {
          var sect = net.subGroups[i].id;
          if (all) all += P.note_view.FEED_GROUP_DELIMITER;
          all += sect;
        }
      }
      P.note_view.selectedSection = all;
      return;
    }
    var sect = $('#subgroup_dropdown_edit').val();
    P.note_view.selectedSection = sect;
    $('#subgroup_list_edit .error_wrapper').hide();
    var usr = P.note_view.user;
    if (usr.config && usr.config.feed_groups && usr.config.feed_groups.exist(sect)) {
      // do nothing here
    } else {
      if (usr.isInst) {
        $('#not-in-section-instructor-edit').show();
      } else {
        if (P.note_view.network.config.class_sections.allow_enroll != 1) {
          $('#not-in-section-student-edit').show();
          P.note_view.selectedSectionError = true;
        } else {
          $('#not-in-section-can-join-edit').show();
          P.note_view.selectedSectionError = true;
        }
      }
    }
  },
  getAutocompleteIndex: function(id) {
    for(var i = 0; i < P.old_new_post.usersAutoComplete.length; i++) {
      if(P.old_new_post.usersAutoComplete[i].id == id) return i;
      if(P.old_new_post.usersAutoComplete[i].name == id) return i;
    }
    return -1;
  },
  getFeedGroupsInEdit: function() {
    var ch = $('.selected_user_list').children();
    var ids = [];
    for(var i = 0; i < ch.length; i++) {
      var idx = parseInt(ch[i].id.split('individual_')[1]);
      if (idx >= 0) {
        ids.push(P.old_new_post.usersAutoComplete[idx].id)
      }
    }
    return ids.join(',');
  },
  setSelectedUserList: function() {
    // var visibleList = P.note_view.content.config.feed_groups.split(',');
    var visibleList = [];
    if (P.note_view.content.visibleOne) { 
      visibleList.push(P.note_view.content.visibleOne);
    }
    if (P.note_view.content.visibleTwo) { 
      visibleList.push(P.note_view.content.visibleTwo);
    }
    if (P.note_view.content.visibleArr) { 
      visibleList = visibleList.concat(P.note_view.content.visibleArr);
    }
    $('.selected_user_list').empty();
    for (var i = 0; i < visibleList.length; i++) {
      if (P.note_view.user.id == visibleList[i]) continue;
      var idx = P.note_view.getAutocompleteIndex(visibleList[i]);
      if (idx >= 0) {
        $('.selected_user_list').append('<li id="individual_' + idx + '">' + PA.getUserName(visibleList[i], false, undefined, undefined, false) + ' <i class="icon-remove" onclick="return P.old_new_post.removeIndividualUserToPost(' + idx + ')"></i></li>');
      }
    } 
  },
  visibilityChange: function() {
    P.poll_view.postTo = "all";
    if ($('#question_visibility_1').attr('checked')) {
      P.poll_view.postTo = "section";
      $('#subgroup_list_edit').show();
    } else {
      $('#subgroup_list_edit').hide();
    }
    if ($('#question_visibility_2').attr('checked')) {
      P.poll_view.postTo = "individual";
      $('.edit_post_names').show();
      $('.member_names').show();
      if (!P.old_new_post.usersAutoComplete) {
        P.old_new_post.loadAutocompleteUsers(P.note_view.setSelectedUserList);
      } else {
        P.note_view.setSelectedUserList();
      }
      $("#member_names").keyup(function() {
        P.old_new_post.performUsersAutocomplete();
      });
    } else {
      $('.edit_post_names').hide();
    }
  },
  makeAttachmentObject: function(attachment) {
    var nameSize = attachment.subject.split("|");
    attachment.name = nameSize[0];
    var size = nameSize[1];
    if (size < 1000) attachment.size = size + "b";
    if (size >= 1000 && size < 1000000) attachment.size = (size / 1000) + "k";
    if (size >= 1000000) attachment.size = (size / 1000000) + "mb";
    return attachment;
  },
  copyAt: function() {
    copyToClipboard('@' + P.note_view.content.nr);
    $('#link_copied_top_level').show();
    $('#link_copied_top_level').html("@" + P.note_view.content.nr + " copied");
    $('.post_favorite.favorite').hide();
    setTimeout(function() {
      $('#link_copied_top_level').hide();
      $('.post_favorite.favorite').show();
    }, 4000)
  },
  copyLink: function() {
    copyToClipboard('https://piazza.com/class/' + P.note_view.network.id + '?cid=' + P.note_view.content.nr);
    $('#link_copied_top_level').show();
    $('#link_copied_top_level').html("URL copied");
    $('.post_favorite.favorite').hide();
    setTimeout(function() {
      $('#link_copied_top_level').hide();
      $('.post_favorite.favorite').show();
    }, 4000)
  },
  startEdit: function() {
    $('#edit_question_note').show();
    $('#edit_question_note_bar').show();
    $("#edit_question_note_subject").val(P.note_view.content.subject);
    $('#view_quesiton_note').hide();
    $('#view_question_note_bar').hide();
    var toSet = null;
    $(".post_region_box.question_note_view").addClass("edit_mode");
    // select correct group
    if (P.note_view.content.isGroup) {
      if (P.note_view.network.sectionNames[P.note_view.content.myGroup]) {
        $('#subgroup_dropdown_edit').val(P.note_view.content.myGroup);
        if (P.note_view.content.config.feed_groups.split(",").length > 1) {
          $('#subgroup_dropdown_edit').val("All my groups");
          toSet = "All my groups";
        }
        P.note_view.subGroupChange();
      }
    }
    if (P.note_view.content.config && !toSet) {
      var feedGroups = P.note_view.content.config["feed_groups"];
      if (feedGroups) {
        feedGroups = feedGroups.split(",")[0];
        $("#subgroup_dropdown_edit option").each(function() {
          if (feedGroups == $(this).attr("value")) {
            toSet = $(this).attr("value");
          }
        });
      }
    }
    if (P.note_view.content && P.note_view.content.history) {
      P.note_view.editRevision = P.note_view.content.history_size;
    }
    else {
      P.note_view.editRevision = 0;
    }
    PEM.fire("injectEditor", {
      anonymity: P.note_view.content.default_anonymity,
      where: $("#question_note_editor"),
      postfix: "question_note_edit",
      text: P.note_view.content.body,
      save: P.note_view.editSubmit,
      cancel: P.note_view.stopEdit,
      height: 150,
      type: P.note_view.content.type,
      noSave: true,
      group: toSet
    });
    PA.call_pj("content.edit", {cid: P.note_view.content.id, type: P.note_view.content.type}, 1, function(sid) { PA.user.sid = sid; });
    return false;
  },
  stopEdit: function() {
    $('#edit_question_note').hide();
    $('#edit_question_note_bar').hide();
    $('#view_question_note_bar').show();
    $('#view_quesiton_note').show();
    $(".post_region_box.question_note_view").removeClass("edit_mode");
    PA.call_pj("content.cancel_edit", {cid:P.note_view.content.id, nid:P.note_view.network.id}, 1);
    return false;
  },
  convertType: function() {
    var type = P.note_view.content.type;
    if (type == "question") {
      P.note_view.content.type = "note";
      PEM.fire("cancelOneForce", {postfix: 'answer_i_answer'});
    }
    else if (type == "note")
      P.note_view.content.type = "question";

    var obj = {
      cid:       P.note_view.content.id,
      subject:   P.note_view.content.subject,
      content:   P.note_view.content.body,
      anonymous: P.note_view.content.anon,
      type:      P.note_view.content.type,
      revision:  P.note_view.content.history_size
    };

    PA.call_pj("content.update", obj, $('.question_note_view'),
      function(data) {
        PEM.fire("content", data);
        $(".post_converted_message").show().delay(2000).fadeOut(350);
    }, function(err) {setTimeout(function(){alert(err);}, 1000);});

  },
  startFollow: function() {
    if (!P.note_view.content.is_bookmarked) {
      PA.call_pj("content.bookmark", {cid:P.note_view.content.id}, $('.question_note_view'),
          function(data) {
            P.note_view.content.is_bookmarked = true;
            P.note_view.content.bookmarked += 1;
            PEM.fire("content", P.note_view.content); // re-render
            PEM.fire("toggleFollowFromPost", {cid: P.note_view.content.id, follow: true});
      });
    }
  },
  stopFollow: function() {
    if (P.note_view.content.is_bookmarked) {
      PA.call_pj("content.unbookmark", {cid:P.note_view.content.id}, $('.question_note_view'),
          function(data) {
            P.note_view.content.is_bookmarked = false;
            P.note_view.content.bookmarked -= 1;
            PEM.fire("content", P.note_view.content); // re-render
            PEM.fire("toggleFollowFromPost", {cid: P.note_view.content.id, follow: false});
      });
    }
  },
  toggleFollow: function(params) {
    var cid = params.cid;
    var follow = params.follow;
    if (P.note_view.content && P.note_view.content.id == cid) {
      if (follow)
        P.note_view.startFollow();
      else
        P.note_view.stopFollow();
    }
  },
  mergeConflict: function(subject, text) {
    P.note_view.editRevision = P.note_view.content.history_size;
    PEM.fire("showPostConflict", {
      mySubject: subject,
      myText: text,
      otherSubject: P.note_view.content.history[0].subject,
      otherText: P.note_view.content.history[0].content,
      submit: function(subject, text) {
        P.note_view.editSubmit(subject, text);
      },
      cancel: function() {
        PEM.fire("cancelOneForce", {postfix: 'question_note_edit'});
      }
    });
  },
  editSubmit: function(overrideSubject, overrideText) {

    // this is called when main note/question body is edited

    var $wrapper =
      $('#edit_question_note_subject')
      .closest('.post_region_content.edit_mode');
    var subject = $('#edit_question_note_subject').val();
    var content = PEM.callFirst("getEditorText", "question_note_edit");
    var anon = $('#edit_quesiton_anonymity').val() || "no";
    var type = P.note_view.content.type;

    if (overrideSubject) {
      $wrapper = $("#concurrency_conflict_dialog_post");
      subject = overrideSubject;
    }
    var titleIsValid = P.note_view.validateTitle( subject, $wrapper );
    var foldersAreValid = P.note_view.validateFolders( $wrapper );
    var visibleToAreValid = P.note_view.validateVisibleTo( $wrapper );

    // var detailsAreValid = P.note_view.validateDetails( content, $wrapper );

    if ( !titleIsValid || !foldersAreValid || !visibleToAreValid ) {
      return false;
    }

    if (type != "poll") {
      if ($('#question_type_0').attr('checked')) type = 'question';
      if ($('#question_type_1').attr('checked')) type = 'note';
    }
    //if ($('#question-type-2').attr('checked')) type = 'poll';

    if (overrideText) {
      content = overrideText;
    }
    var latestRevision = 0;
    if (P.note_view.content && P.note_view.content.history) {
      latestRevision = P.note_view.content.history_size;
    }
    if (P.note_view.editRevision < latestRevision) {
      P.note_view.mergeConflict(subject, content);
      return false;
    }

    var obj = {
      cid:       P.note_view.content.id,
      subject:   subject,
      content:   content,
      anonymous: anon,
      type:      type,
      folders:   P.folder_selector.getSelectedFolders(),
      revision:  P.note_view.editRevision
    };

    if ($('#must_read').attr('checked')) {
      obj.must_read = true;
      if ($('#must_read_auto').attr('checked')) {
        var date = new Date($('#must_read_date').val());
        var time = $('#must_read_time').timepicker('getSecondsFromMidnight');
        obj.must_read_expire = date.getTime() + time * 1000;
      }
      if ($('#must_read_reset').attr('checked')) {
        obj.must_read_reset = true;
      }
      if($('#must_read_to_post').attr('checked')) {
        obj.must_read_to_post = true;
      }
    } else {
      obj.must_read = false;
    }

    var visibility = "all";
    if ($('#question_visibility_1').attr('checked')) {
      visibility = P.note_view.selectedSection;
    }
    if ($('#question_visibility_2').attr('checked') || ($('#question_visibility_poll').length > 0 && $('#question_visibility_poll')[0].value == "private") )
      visibility = "private";
    if (P.note_view.content.visibility != visibility) {
      if ($('#not-in-section-student-edit').is(":visible") || $('#not-in-section-can-join-edit').is(":visible"))
        return false;
      obj.visibility = visibility;
    }
    if ($('#question_visibility_2').attr('checked')) {
      var groups = P.note_view.getFeedGroupsInEdit();
      if (!!groups) {
        if (groups.indexOf(P.note_view.user.id) == -1) groups += ',' + P.note_view.user.id;
        obj.visibility = groups;
      }
    }

    if (obj.folders.length == 0 && !P.note_view.network.config.disable_folders && !P.note_view.content.config.live) {
      alert("You need to select at least one folder");
      return false;
    }
    // add visibility groups folders if needed
    if ($('#question_visibility_1').attr('checked')) {
      var sects = visibility.split(P.note_view.FEED_GROUP_DELIMITER);
      for (var i = 0; i < sects.length; i++) {
        var sect = sects[i];
        var folder = P.note_view.network.sectionNames[sect];
        obj.folders.push(folder);
      }
    }

    if (type == "poll") {
      P.poll_view.fillSubmitParams(obj);
    }

    PA.call_pj("content.update", obj, $('.question_note_view'),
      function(data) {
        data.is_tag_good = P.note_view.content.is_tag_good;
        data.default_anonymity = anon;
        P.note_view.content = data;
        if (data.bad) {
          P.note_view.content = data.bad;
          P.note_view.mergeConflict(obj.subject, obj.content);
          P.note_view.refreshContent(data.bad);
        }
        PEM.fire("content", P.note_view.content);
        P.renderer.renderMath("view_quesiton_note");
        if (type == "poll") {
          P.renderer.renderMath("poll_results");
        }

        $(".post_region_box.question_note_view").removeClass("edit_mode");
        PEM.fire('cancelOneForce', {postfix: 'question_note_edit'});
    }, function(err) {setTimeout(function(){alert(err);}, 1);});//anonymous


    return false;
  },
  validateTitle: function(title, $wrapper) {

    var isValid = true;

    if (title.length <= 0) {
      $wrapper.find(".error_message.long_summary").removeClass("show");
      $wrapper.find(".error_message.no_summary").addClass("show");
      isValid = false;
    } else if (title.length > 100) {
      $wrapper.find(".error_message.no_summary").removeClass('show');
      $wrapper.find(".error_message.long_summary").addClass("show");
      isValid = false;
    } else {
      $wrapper.find(".error_message.no_summary").removeClass('show');
      $wrapper.find(".error_message.long_summary").removeClass("show");
    }

    return isValid;
  },
  validateVisibleTo: function($wrapper) {
    if (P.poll_view.postTo == "individual") {// check if user selected anything
      var cnt = 0;
      for (var z in P.old_new_post.selectedPrivateUsers) {
        if (P.old_new_post.selectedPrivateUsers[z]) {
          cnt += 1;
        }
      }
      if (cnt > 10) {
        $wrapper.find(".new_post_error.no_names").removeClass("show");
        $wrapper.find(".new_post_error.too_many_names").addClass("show");
        return false;
      } else {
        $wrapper.find(".new_post_error.too_many_names").removeClass("show");
      }
    }
    return true
  },
  validateFolders: function($wrapper) {

    var isValid = true;

    if (P.note_view.network.config.disable_folders) return true;
    if (P.folder_selector.getSelectedFolders().length === 0 && !P.note_view.content.config.live) {
      $wrapper.find(".error_message.no_folders").addClass("show");
      isValid = false;
    } else {
      $wrapper.find(".error_message.no_folders").removeClass("show");
    }

    return isValid;
  },
  validateDetails: function(text, $wrapper) {

    var isValid = true;

    if (text.length <= 0) {
      $wrapper.find('.error_message.no_details').addClass('show');
      isValid = false;
    } else {
      $wrapper.find(".error_message.no_details").removeClass("show");
    }

    return isValid;
  },
  showLiveButtons: function() {
    var content = P.note_view.content;
    $('#upvote_button_wrapper').hide();
    $('#upvote_close_button_wrapper').hide();
    if (content.config && content.config.live && content.config.live == P.feed.live) {
      if (P.note_view.user.isInst) {
        $('#upvote_close_button_wrapper').show();
        $('#upvote_close_button').show();
        $('#upvote_close_button_done').hide();
        if (content.config.live_closed) {
          $('#upvote_close_button').hide();
          $('#upvote_close_button_done').show();
        }
      }
      if (!content.config.live_closed) {
        $('#upvote_button_wrapper').show();
        $('#upvote_button').show();
        $('#upvote_button_done').hide();
        if (content.my_upvote) {
          $('#upvote_button').hide();
          $('#upvote_button_done').show();
        }
      }
    }
  },
  reshowContent: function() {
    var pollChoice = $('.poll_button:checked').attr("id");
    $('#view_quesiton_note').html(P.note_view.questionTextTemplate({content:P.note_view.content, network:P.note_view.network}));
    P.renderer.renderMath("view_quesiton_note");
    P.note_view.showEditors();
    P.note_view.showMustReadButton();
    P.note_view.showLiveButtons();
    var c = P.note_view.content;
    for (var i = 0; i < c.children.length; i++) {
      var ch = c.children[i];
      if (ch.type == 's_answer' || ch.type == 'i_answer') {
        P.answer.prepareAnswer(ch);
        // update text, but keep edit window open if needed
        P.answer.updateCurrentAnswer($('#' + ch.type), ch);      
      }
    }
    P.answer.updateEditors();
    P.renderer.ensureSyntaxHighlighting();
    if (pollChoice)
      $('#' + pollChoice).attr('checked', true);
  },
  markAsDuplicate: function() {
    alert("dup");
  },
  reportSpam: function() {
    PA.call("content.report_spam", {cid:P.note_view.content.id}, null, function() {
      if (P.note_view.user.isInst)
        alert("Thanks, we've notified the Piazza Team. Feel free to delete or edit this post in the meanwhile. You can also disable history under the Actions menu so no one can see the question history.");
        //$('#report_spam_window2').jqmShow();
      else
        alert("Thanks, we have sent the report for a review to Piazza staff.");
        //$('#report_spam_window').jqmShow();
    });
  },
  deleteContent: function() {
    var params = {
      title: "Delete this content?",
      confirm: "Delete",
      cancel: "Cancel",
      callback: function() {
        PA.call_pj("content.delete", {cid:P.note_view.content.id}, null, function(data){
          PEM.fire("cleanDashboard");
          PEM.fire("showHomescreen");
        }, function(err) {setTimeout(function() {alert(err);}, 1000)});
      }
    };
    PEM.fire("showConfirmationWindow", params);
    return false;
  },
  deleteAttachment: function(id) {
    var params = {
      title: "Delete this attachment?",
      confirm: "Delete",
      cancel: "Cancel",
      callback: function() {
        PA.call_pj("content.delete", {cid:id}, null, function(data){
        }, function(err) {setTimeout(function() {alert(err);}, 1000)});
      }
    };
    PEM.fire("showConfirmationWindow", params);
    return false;
  },
  attachFile: function() {
    var params = {
      cid: P.note_view.content.id,
      uid: P.note_view.user.id,
      type: P.note_view.content.type,
      nid: P.note_view.network.id
    };
    P.modules.loadModule("attachments", {},
      function() {
        PEM.fire("show_upload_attachment", params);
      }, null);
  },
  pushContentMessage: function(message) {
    if ((message.action == 'start_edit' || message.action == 'done_edit') && P.note_view.content) {
      setTimeout(function() {
        var sid = message.sid;
        if(sid != PA.user.sid && P.note_view.content) {
          // someone is starting/finishing to edit answer
          if (!P.note_view.content.q_edits) P.note_view.content.q_edits = [];
          if (!P.note_view.content.s_edits) P.note_view.content.s_edits = [];
          if (!P.note_view.content.i_edits) P.note_view.content.i_edits = [];
          var arr = P.note_view.content.q_edits;
          if (message.sub_action == 's_answer') arr = P.note_view.content.s_edits;
          if (message.sub_action == 'i_answer') arr = P.note_view.content.i_edits;
          if (message.action == 'start_edit') {
            arr.push(sid);
          } else {
            if (arr) {
              for (var i = 0; i < arr.length; i++)
                if (arr[i] == sid)
                  arr.splice(i, 1);
            }
          }
          P.note_view.showEditors();
          PEM.fire("update_editors");
        }
      }, 2000); // add 2 second delay in case push arrived before response to actual content.edit call
    }
    var newContent = message.content;
    if (!newContent) return;
    if (message.action == 'create' && newContent.type == 'attach' &&
      (message.parent_type == 'question' || message.parent_type == 'note' || message.parent_type == 'poll')) {
      // new attachment for question area
      var attachment = P.note_view.makeAttachmentObject(message.item);
      if (!P.note_view.content.attach)
        P.note_view.content.attach = [];
      P.note_view.content.attach.push(attachment);
      if (PTM.templates["attachment"]) {
        $('.question_note_view .attachments_list').append(PTM.templates["attachment"]({attach:attachment, content:P.note_view.content, network:P.note_view.network}));
        $('.question_note_view .attachments').show();
      }
    }
    if (newContent.type == 'question' || newContent.type == 'note' || newContent.type == 'poll') {
      P.note_view.refreshContent(newContent);
    }
  },
  refreshContent: function(newContent) {
    for (var key in newContent) {
      if (key == "data") {
        if (P.note_view.content.data && P.note_view.content.data.has_voted)
          newContent.data.has_voted = P.note_view.content.data.has_voted;
      }
      P.note_view.content[key] = newContent[key];
    }
    P.note_view.prepareHistoryAndChildren(P.note_view.content);
    P.note_view.reshowContent();
    P.note_view.showLockState();
  },
  doGoodPost: function() {
    var feedbackType = "tag_good";
    PA.call_pj('content.add_feedback', {cid:P.note_view.content.id, type:feedbackType}, 1, function(){
      var feedbackTypeArr = "tag_good_arr";
      if (!P.note_view.content[feedbackType]) P.note_view.content[feedbackType] = [];
      P.note_view.content[feedbackType].push({id:P.note_view.user.id, name:P.note_view.user.name});
      P.note_view.content[feedbackTypeArr].push(P.note_view.user.id);
      $(".post_action.do_good_note").hide();
      $(".post_action.undo_good_note").show();
      $(".post_actions_number.good_note").html(P.note_view.content[feedbackType].length);
      P.note_view.prepareEndorsementVars(P.note_view.content, 0);
      if (P.note_view.network.isGroup)
        $("#endorse_text").html(P.note_view.endorseTemplate({content: P.note_view.content}));
      else
        $("#endorse_text").html(P.note_view.endorseTemplateClass({content: P.note_view.content}));
    }, function(err){
      alert(err);
    });
  },
  undoGoodPost: function() {
    var feedbackType = "tag_good";
    PA.call_pj('content.remove_feedback', {cid:P.note_view.content.id, type:feedbackType}, 1, function() {
      var feedbackTypeArr = "tag_good_arr";
      if (P.note_view.content[feedbackType]) {
        for (var i = 0; i < P.note_view.content[feedbackType].length; i++) {
          if (P.note_view.content[feedbackType][i].id == P.note_view.user.id) {
            P.note_view.content[feedbackType].splice(i, 1);
            break;
          }
        }
      }
      if (P.note_view.content[feedbackTypeArr]) P.note_view.content[feedbackTypeArr].remove(P.note_view.user.id);
      $(".post_action.undo_good_note").hide();
      $(".post_action.do_good_note").show();
      var cnt = 0;
      if (P.note_view.content[feedbackType])
        cnt = P.note_view.content[feedbackType].length
      $(".post_actions_number.good_note").html(cnt);
      P.note_view.prepareEndorsementVars(P.note_view.content, 0);
      if (P.note_view.network.isGroup)
        $("#endorse_text").html(P.note_view.endorseTemplate({content: P.note_view.content}));
      else
        $("#endorse_text").html(P.note_view.endorseTemplateClass({content: P.note_view.content}));
    }, function(err){
      alert(err);
    });
  },
  favorite: function(doFavorite) {
    var method = "content.mark_favorite";
    if (!doFavorite) method = "content.mark_unfavorite";

    PA.call_pj(method, {cid:P.note_view.content.id}, 1, function(data) {
      P.note_view.updateFavorite(doFavorite);
    });
  },
  updateFavorite: function(doFavorite) {
    if (!P.note_view.content) P.note_view.content = {};
    P.note_view.content.my_favorite = doFavorite;
    /* in case num_favorites wasn't initialized, we need to set it, or the user won't see updated number until full feed reload */
    if (P.note_view.content && !P.note_view.content.num_favorites && doFavorite) P.note_view.content.num_favorites = 0;

    if (doFavorite) {
      P.note_view.content.num_favorites++;
      $(".post_favorite").removeClass('is_not_favorite').addClass('is_favorite');
    } else {
      P.note_view.content.num_favorites--;
      $(".post_favorite").removeClass('is_favorite').addClass('is_not_favorite');
    }
    var numFavorites = 0;
    if (P.note_view.content.num_favorites > 0)
      numFavorites = P.note_view.content.num_favorites;
    $(".post_actions_number.favorites").html(numFavorites);

    PEM.fire("updateFavorite", P.note_view.content); /* This will reload the feed */
  },
  like: function() {
    if (!(P.note_view.content && P.note_view.content.id)) return false;
    $('#like_button_wrapper').hide();
    PA.call_pj("content.like", {cid:P.note_view.content.id}, 1);
    return false;
  },
  hideHistoryHighlight: function() {
    $('#view_quesiton_note').css("border", "none");
  },
  filterForFolder: function(idx) {
    PEM.fire("filterFeed", {filter:"folder", folder: P.note_view.content.folders[idx]});
    return false;
  },
  showHistory: function(history) {
    if (history.highlight == "question") {
      $('#view_quesiton_note').css("border-top","2px solid #0f0");
      $('#view_quesiton_note').css("border-bottom", "2px solid #0f0");
      $('.main_panel').scrollTo('#view_quesiton_note');
    } else {
      P.note_view.hideHistoryHighlight();
    }
    var content = P.note_view.content;
    if (!content.tag_good_arr_old)
      content.tag_good_arr_old = content.tag_good_arr;
    content.tag_good_arr = content.tag_good_arr_old.slice(0);
    for (var uid in history.tag_good)
      content.tag_good_arr.remove(uid);
    P.note_view.prepareHistoryAndChildren(P.note_view.content, history.q_idx);
    // calculate private status
    var lastVis = false;
    for (var i = history.idx; i >= 0; i--) {
      if (P.note_view.content.change_log[i].v) {
        lastVis = P.note_view.content.change_log[i].v;
        break;
      }
    }
    if (lastVis) {
      if (lastVis == "all") {
        $(".main_panel").removeClass("private_post");
        $(".question_note_view .post_title").text(P.note_view.content.type);
      } else {
        $(".main_panel").addClass("private_post");
        if (content.isGroup) {
          $(".question_note_view .post_title").text("group " + P.note_view.content.type);
        } else {
          $(".question_note_view .post_title").text("private " + P.note_view.content.type);
        }
      }
    }
    P.note_view.reshowContent();
  },
  lockPost: function(doLock) {
    if (doLock) {
      if ($('#lock_post_now').attr('checked')) {
        PA.call_pj("content.set_config", {cid:P.note_view.content.id, key:"locked", val:true}, 1);
        P.note_view.content.config.locked = doLock;
      } else {
        var date = new Date($('#inactive_date').val());
        var time = $('#inactive_time').timepicker('getSecondsFromMidnight');
        var lockAfter = date.getTime() + time * 1000;
        var data = {date:$('#inactive_date').val(), time:$('#inactive_time').val(), i:lockAfter};
        PA.call_pj("content.set_config", {cid:P.note_view.content.id, key:"lock", val:data}, 1);
        P.note_view.content.config.lock = data;
      }
    } else {
      PA.call_pj("content.set_config", {cid:P.note_view.content.id, key:"locked", val:false}, 1);
    }
    P.note_view.showLockState();
    closeDropDown();
  },
  showLockState: function() {
    if (!P.note_view.content || !P.note_view.content.config) return;
    if (P.note_view.content.config.locked) {
      $('.content-active').hide();
      $('.content-inactive').show();
    } else {
      $('.content-active').show();
      $('.content-inactive').hide();
    }
    if (P.note_view.content.config.lock && P.note_view.content.config.lock.i) {
      $('#inactive_time').val(P.note_view.content.config.lock.time);
      $('#inactive_date').val(P.note_view.content.config.lock.date);
      $('#lock_post_later').attr('checked', true);
    }
  },
  init: function(module) {
    PEM.addListener("content", P.note_view.setContent);
    PEM.addListener("network", P.note_view.setNetwork);
    PEM.addListener("question_note_convert_type", P.note_view.convertType);
    PEM.addListener("question_note_start_follow", P.note_view.startFollow);
    PEM.addListener("question_note_stop_follow", P.note_view.stopFollow);
    PEM.addListener("mark_as_duplicate", P.note_view.markAsDuplicate);
    PEM.addListener("report_spam", P.note_view.reportSpam);
    PEM.addListener("delete_content", P.note_view.deleteContent);
    PEM.addListener("attach_file", P.note_view.attachFile);
    PEM.addListener("do_good_post", P.note_view.doGoodPost);
    PEM.addListener("undo_good_post", P.note_view.undoGoodPost);
    PEM.addListener("like", P.note_view.like);
    PEM.addListener("favorite", P.note_view.favorite);
    PEM.addListener("pushContentMessage", P.note_view.pushContentMessage);
    PEM.addListener("newMustReads", P.note_view.showMustReadButton);

    PEM.addListener("deleteAttachment", P.note_view.deleteAttachment);
    PEM.addListener("toggleFollowFromFeed", P.note_view.toggleFollow);

    PEM.addListener("history", P.note_view.showHistory);
    PEM.addListener("hideHistoryHighlight", P.note_view.hideHistoryHighlight);
    PEM.addListener("content_rendered", P.note_view.scrollToFollowup);
    PEM.addLastListener("content", P.note_view.showLockState);
    PEM.addLastListener("content", P.note_view.ensureSyntaxHighlighting);

    PTM.getTemplate("question_note_view_text", function(template) {P.note_view.questionTextTemplate = template;});
    PTM.getTemplate("question_note_view_endorse_text", function(template) {P.note_view.endorseTemplate = template;});
    PTM.getTemplate("question_note_view_endorse_class", function(template) {P.note_view.endorseTemplateClass = template;});
    Handlebars.registerHelper('questionNoteText', function(content, network) {
      if (P.note_view.questionTextTemplate)
        return P.note_view.questionTextTemplate({content:content, network:network});
      return "";
    });
    Handlebars.registerHelper('endorseText', function(content) {
      if (P.note_view.endorseTemplate && P.note_view.network.isGroup)
        return P.note_view.endorseTemplate({content:content});
      if (P.note_view.endorseTemplateClass && !P.note_view.network.isGroup)
        return P.note_view.endorseTemplateClass({content:content});
      return "";
    });

    if (module.options.network)
      P.note_view.network = module.options.network;
  }
};

P.question_view = {
  content:null,
  network:null,
  user:null,
  dupeState: {},
  
  setUser: function(user) {
    P.question_view.user = user;
  },
  setNetwork: function(network) {
    P.question_view.network = network;
  },
  setContent: function(content) {
    if (!content) return;
    P.question_view.content = content;
    if (content.type == "question") {
      // this is my content! render it
      P.note_view.prepareHistoryAndChildren(content);
      P.question_view.prepareHistoryAndChildren(content);
      PTM.getTemplate("question_note_view", P.question_view.showContent);
    }
    if (content.type == "question" || content.type == "note") {
      if (P.question_view.dupeState.dupe_id) {
        $('#duplicate_reason').val(content.dupeMsg);
        if (P.question_view.dupeState.dupe_id != content.id) {
          P.question_view.dupeState.to_id = content.id;
          P.question_view.dupeState.to_subject = content.subject;
        }
        $('#mark_dupe_form').show();
        $('#duplicate_title').html("<b>" + P.question_view.dupeState.dupe_subject + "</b>");
        if (P.question_view.dupeState.to_subject) {
          $('#duplicate_of_title').html("<b>" + P.question_view.dupeState.to_subject + "</b>");
          $('#mark_duplicate').attr("disabled", false);
        }
      }
    }
  },
  showContent: function(template) {
    $('.remove_on_post_load').remove();
    $('.post_region_box.question_note_view').replaceWith(template({
      content:P.question_view.content,
      network:P.question_view.network,
      user:P.question_view.user,
      anon: PEM.callFirst("getAnonymityOptions"),
      show_must_read: P.question_view.user.isInst && (P.question_view.network.config === null || P.question_view.network.config.must_read !== false),
      timezone:moment().tz(moment.tz.guess()).format("z")
    }));
    P.note_view.initHandlers();
    P.note_view.visibilityChange();
    P.note_view.showEditors();
    P.note_view.showLiveButtons();
    P.note_view.showMustReadButton();
    P.note_view.showMustReadTime(P.question_view.content.config);
  },
  upvote: function() {
    $('#upvote_button').hide();
    $('#upvote_button_done').show();
    PA.call_pj("content.upvote", {cid: P.question_view.content.id}, 1);
    P.question_view.content.my_upvote = true;
  },
  upvoteClose: function() {
    $('#upvote_close_button').hide();
    $('#upvote_close_button_done').show();
    PA.call_pj("content.upvote_close", {cid: P.question_view.content.id}, 1);
  },
  addToClass: function() {
    $('.live_content').hide();
    PA.call_pj("content.convert_live_to_regular", {cid: P.question_view.content.id}, 1);
  },
  showBadges: function() {
    $('.post_region_box .class_badge').tooltip({
      'placement': 'left',
      'container': 'body',
      'title': 'Instructor-endorsed answerer in this class'
    });
    $('.post_region_box .piazza_badge').tooltip({
      'placement': 'left',
      'container': 'body',
      'title': 'Instructor-endorsed answerer on Piazza'
    });
  },
  /*
   *  This is only question-specific stuff
   */
  prepareHistoryAndChildren: function(content) {
    if (content.children && content.children.length > 0) {
      var answers = [];
      for (var i = 0; i < content.children.length; i++) {
      }
      if (answers.length > 0)
        content.answers = answers;
    }
    content.isPoll = false;
    content.isNote = false;
    content.isQuestion = false;
    if (content.type == "poll") content.isPoll = true;
    if (content.type == "note") content.isNote = true;
    if (content.type == "question") content.isQuestion = true;
  },
  markDuplicate: function() {
    P.question_view.dupeState = {
      dupe_id:P.question_view.content.id,
      dupe_subject:P.question_view.content.subject
    };
    $('#mark_dupe_form').show();
    $('#duplicate_title').html("<b>" + P.question_view.content.subject + "</b>");

  },
  markDuplicateCancel: function() {
    $('#mark_dupe_form').hide();
    P.question_view.dupeState = {};
  },
  markDuplicateSubmit: function() {
    if (!P.question_view.dupeState.dupe_id || !P.question_view.dupeState.to_id)
      return;
    var params = {
      cid_dupe: P.question_view.dupeState.dupe_id,
      cid_to: P.question_view.dupeState.to_id,
      msg:$('#duplicate_reason').val()
    };
    PA.call_pj("content.duplicate", params, null, function(data) {
      P.question_view.markDuplicateCancel();
      PEM.fire("selectContent", P.question_view.content.id); //reload content
    }, alert);
  },
  setAnonymity: function(anon) {
    P.question_view.content.default_anonymity = anon;
  },
  init: function(module) {
    PEM.addListener("content", P.question_view.setContent);
    PEM.addLastListener("content", P.question_view.showBadges);
    PEM.addListener("network", P.question_view.setNetwork);
    PEM.addListener("question_mark_duplicate", P.question_view.markDuplicate);
    PEM.addListener("setAnonymity", P.question_view.setAnonymity);
    PEM.addListener("question_mark_duplicate_cancel", P.question_view.markDuplicateCancel)
    PEM.addListener("question_mark_duplicate_submit", P.question_view.markDuplicateSubmit)
    if (module.options.network)
      P.question_view.network = module.options.network;
  }

};
P.poll_view = {
  content:null,
  network:null,
  user:null,
  initHandlers: function() {
    $(".post_region_arrow_dropdown").hover(
      function() {
        $(this).find(".dropdown-menu").show();
      }, function() {
        $(this).find(".dropdown-menu").hide();
      }
    );
    if (P.poll_view.content.config.unpublished == 0 || typeof(P.poll_view.content.config.unpublished) === 'undefined')
      $('.poll_button').attr("disabled", false);
    else
      $('.poll_button').attr("disabled", true);
    var isClosed = false;
    var openDate = new Date();
    openDate.setISO8601(P.poll_view.content.created);
    var openHours = Math.floor((new Date() - openDate) / (1000 * 60 * 60));
    var openMinutes = Math.floor((new Date() - openDate) / (1000 * 60));
    if (openMinutes < 0) openMinutes = 0;
    if (openHours < 0) openHours = 0;
    if (openHours >= parseInt(P.poll_view.content.config.close_after) && P.poll_view.content.config.always_open == 0 || P.poll_view.content.config.poll_is_closed) {
      isClosed = true;
    }
    if (isClosed)
      $('.poll_button').attr("disabled", true);

    $("#add_poll_choice").click(function() {
      P.poll_view.addPollChoice();
      return false;
    });
    $("#input_poll_choice").keypress(function(e){
      if(e.which == 13) {
        P.poll_view.addPollChoice();
        return false;
      }
    });

  },
  setUser: function(user) {
    P.poll_view.user = user;
  },
  setNetwork: function(network) {
    P.poll_view.network = network;
  },
  moveCursorToEnd: function(el) {
    if (!$.browser.mozilla) {
      return;
    }

    el.focus()

    if (typeof el.selectionStart == "number") {
      el.selectionStart = el.selectionEnd = el.value.length;
    } else if (typeof el.createTextRange != "undefined") {
      var range = el.createTextRange();
      range.collapse(false);
      range.select();
    }
  },
  redrawPollChoices: function() {
    var html = "";
    for (var i = 0; i < P.poll_view.question.answers.length; i++) {
      const answer = P.poll_view.question.answers[i];

      var inputDisabled = "";
      var btnHtml = '<i class="icon-remove" onclick="return P.poll_view.removePollChoice(' + i + ');"></i>';

      if (answer.deleted) {
        inputDisabled = "disabled";
        btnHtml = '<i class="icon-plus" onclick="return P.poll_view.recoverPollChoice(' + i + ');"></i>';
      }
      html +=
          '<li>' +
            '<div style="margin-left: 20px">' +
              '<div class="reorder_class"/>' +
              '<input class="span3 poll_answer_item" id="answer_' + answer.id + '" type="text" value="' + answer.text + '" ' + inputDisabled + ' onchange="return P.poll_view.onChangePollChoice(' + i + ');" onclick="P.poll_view.moveCursorToEnd(this)">' +
              btnHtml +
              '<span class="new_post_error answer_empty_' + i + '">Please enter answer</span>' +
            '</div>' +
          '</li>'
    }

    $('#poll_options_preview').html(html);
    $('#poll_options_preview').b_sortable({handle:".reorder_class"}).bind('sortupdate', function() {
      P.poll_view.updateAnswerOrder();
    });
  },
  onChangePollChoice: function(ai) {
    const arr = $('#poll_options_preview .poll_answer_item');
    const inputElement = $(arr[ai]);
    // var answerId = inputElement.attr("id").replace("answer_", "");

    P.poll_view.question.answers[ai].text = inputElement.val();
  },
  updateAnswerOrder: function() {
    var arr = $('#poll_options_preview .poll_answer_item');
    var list = {};
    for (var i = 0; i < arr.length; i++)
      list[$(arr[i]).attr("id").replace("answer_", "")] = i;
    P.poll_view.question.answers.sort(function(a,b) {
      return list[a.id] - list[b.id];
    });
  },
  addPollAnswer:     function(answerText) {
    this.question.answers.push({id: makeId(), text: answerText, deleted: false});
  },
  sanitizeAnswer: function(value) {
    value = value.replace(/>/g, "&gt;");
    value = value.replace(/</g, "&lt;");
    value = value.replace(/"/g, '&quot;');
    return value;
  },
  updateQuestions:    function() {
    for (var i = 0; i < this.question.answers.length; i++) {
      const answer = this.question.answers[i];
      answer.text = this.sanitizeAnswer($('#answer_' + answer.id).val().trim());
    }

    this.question.explanation = $('#input_poll_explanation').val().trim();

    if ($('#selections_allowed_more').is(':checked')) {
      this.question.type = "checkbox";
    } else {
      this.question.type = "radio";
    }
  },
  addPollChoice: function() {
    var choice = $('#input_poll_choice').val().trim();
    if (choice.length == 0) return;
    P.poll_view.addPollAnswer(this.sanitizeAnswer(choice));

    P.poll_view.redrawPollChoices();
    $('#input_poll_choice').val('');
    $('#input_poll_choice').focus();
  },
  recoverPollChoice: function(answerIndex) {
    const answer = P.poll_view.question.answers[answerIndex];
    answer.deleted = false;
    P.poll_view.redrawPollChoices();
    return true;
  },
  removePollChoice: function(answerIndex) {
    const answer = P.poll_view.question.answers[answerIndex];
    const pollResults = P.poll_results.getPollResults();

    for (var i = 0; i < pollResults.length; i++) {
      const result = pollResults[i];
      if (result.answerId == answer.id && result.votes > 0) {
        answer.deleted = true;
      }
    }

    if (!answer.deleted) {
      P.poll_view.question.answers.splice(answerIndex, 1);
    }
    P.poll_view.redrawPollChoices();

    return true;
  },
  setContent: function(content) {
    if (!content) return;
    if (content.type == "poll") {
      P.poll_view.content = content;
      P.poll_view.question = content.questions[0];
      P.note_view.prepareHistoryAndChildren(content);
      P.poll_view.preparePollAdmin();
      PTM.getTemplate("question_note_view", P.poll_view.showContent);
      P.poll_view.showPollChoices();
      if (P.question_view.dupeState.dupe_id) {
        if (P.question_view.dupeState.dupe_id != content.id) {
          P.question_view.dupeState.to_id = content.id;
          P.question_view.dupeState.to_subject = content.subject;
        }
        $('#mark_dupe_form').show();
        $('#duplicate_title').html("<b>" + P.question_view.dupeState.dupe_subject + "</b>");
        if (P.question_view.dupeState.to_subject) {
          $('#duplicate_of_title').html("<b>" + P.question_view.dupeState.to_subject + "</b>");
          $('#mark_duplicate').attr("disabled", false);
        }
      }
    }
  },
  showAdmin: function(template) {
    if (template)
      P.poll_view.adminTemplate = template;
    if (!P.poll_view.adminTemplate) return;
    $('#poll_admin').html(P.poll_view.adminTemplate({content: P.poll_view.content, toShow: P.poll_view.toShow}));
  },
  showContent: function(template) {
    const question = P.note_view.content.questions[0];

    var anon = PEM.callFirst("getAnonymityOptions");
    var always_open = P.note_view.content.config.always_open;
    var anonymity = P.note_view.content.config.anonymous;
    var close_after = P.note_view.content.config.close_after;
    var revote = P.note_view.content.config.revote;
    var show_results = P.note_view.content.config.show_results;
    var multiple_selections = question.type == "checkbox";

    if (always_open == 1)
      always_open = true;
    else
      always_open = false;

    if (revote == 1)
      revote = true;
    else
      revote = false;

    $('.post_region_box.question_note_view').replaceWith(template({
      content:P.poll_view.content,
      question:question,
      network:P.poll_view.network,
      user:P.poll_view.user,
      anon: PEM.callFirst("getAnonymityOptions"),
      show_must_read: P.poll_view.user.isInst && (P.poll_view.network.config == null || P.poll_view.network.config.must_read !== false) && P.poll_view.content.config && P.poll_view.content.config.must_read,
      timezone:moment().tz(moment.tz.guess()).format("z"),
      multiple_selections: multiple_selections,
      always_open: always_open,
      close_after: close_after,
      always_open: always_open,
      show_results: show_results,
      revote: revote,
      anonymity: anonymity,
      anon: anon,
      is_closed: P.poll_view.toShow.poll_closed
    }));


    P.poll_view.initHandlers();
    P.note_view.initHandlers();
    P.note_view.visibilityChange();
    PTM.getModuleTemplate("poll_view", "poll_admin", P.poll_view.showAdmin);
    P.note_view.showLiveButtons();
    P.note_view.showMustReadButton();
    P.note_view.showMustReadTime(P.poll_view.content.config);
    P.poll_view.redrawPollChoices();
    P.poll_view.showPollChoices();
    $("#input_poll_explanation").val(question.explanation);

    PEM.fire("ensureTooltips");
  },
  fillSubmitParams: function(params) {
    P.poll_view.updateQuestions();

    var config = {};
    config.anonymous = "no";
    config.show_results = "av"; //av = after vote; ac = after close; "" = right away; nn = never
    config.close_after = $("#poll_close_date_menu").val();
    config.always_open = 0;
    config.revote = 0;
    config.bypass_email = 0;
    config.notify_mobile_update = 0;
    config.multiple_selections = this.question.type == "checkbox" ? 1 : 0;
    config.feed_groups = "";

    if (this.question.answers.length < 1) {
      $(".new_post_error.no_poll_choices").addClass("show");
      $('#appendedInputButton').focus();
      return false;
    } else {
      $(".new_post_error.no_poll_choices").removeClass("show");
    }

    if ($("#poll_close_date_never").is(":checked")) config.always_open = 1;
    if ($("#show_poll_results_before_member_votes").is(":checked"))
      config.show_results = "";
    else if ($("#show_poll_results_after_poll_closes").is(":checked"))
      config.show_results = "ac";
    else if ($("#show_poll_results_keep_private").is(":checked"))
      config.show_results = "nn";

    if ($("#poll_anonymity_nobody").is(":checked"))
      config.anonymous = "yes";
    if ($("#poll_anonymity_students").is(":checked"))
      config.anonymous = "stud";

    if ($("#revotes_yes").is(":checked")) {
      config.revote = 1;
    }
    if ($("#revotes_no").is(":checked")) {
      config.revote = 0;
    }
    params.config = config;

    params.questions = [this.question];

    if (P.poll_view.postTo == "individual") {
      var feedGroups = "";
      for (var z in P.old_new_post.selectedPrivateUsers)
        if (P.old_new_post.selectedPrivateUsers[z] && feedGroups.indexOf(z) == -1) {
          feedGroups += (feedGroups.length == 0 ? "" : "," ) + z;
        }
      feedGroups += "," + PA.user.id;
      config.feed_groups = feedGroups;
    }

    var sectionsInfo = [];
    if (P.poll_view.postTo == "section") {
      var sects = P.note_view.selectedSection.split(P.note_view.FEED_GROUP_DELIMITER) || [];
      if (sects.length == 1) {
        params.config.feed_groups = sects[0];
      }
    }

    if (P.poll_view.content.config.publish_later) {
      config.publish_later_to = params.config.feed_groups;
      params.config.feed_groups = P.poll_view.content.config.feed_groups_original;
      params.visibility = params.config.feed_groups;
      params.publish_later_to = config.publish_later_to;
    };
  },
  /*
   *  This is only poll-specific stuff
   */
  preparePollAdmin: function() {
    var toShow = {
      poll_closed: false,
      poll_time: false,
      poll_published: false,
      is_instructor: P.stats.user.isInst,
      is_poll_admin: false,
      poll_unpublished: false,
      poll_toggle_visibility_on: true
    };

    var conf = P.poll_view.content.config;

    toShow.is_poll_admin = P.poll_view.content.change_log[0].uid === P.poll_view.user.id;

    toShow.poll_unpublished = conf.unpublished === 1;
    toShow.poll_toggle_visibility_on = (conf.toggle_visibility_on === 1 || typeof(conf.toggle_visibility_on) == 'undefined');;

    var openDate = new Date();
    openDate.setISO8601(P.poll_view.content.created);
    var openHours = Math.floor((new Date() - openDate) / (1000 * 60 * 60));
    var openMinutes = Math.floor((new Date() - openDate) / (1000 * 60));
    if (openMinutes < 0) openMinutes = 0;
    if (openHours < 0) openHours = 0;
    toShow.poll_time = openHours;
    if (openHours >= parseInt(conf.close_after) && conf.always_open == 0 || conf.poll_is_closed) {
      toShow.poll_closed = true;
    }

    P.poll_view.toShow = toShow;

    PTM.getTemplate("question_note_view", P.poll_view.showContent);
  },

   downloadPollStats: function() {
    //console.log("trying to donwload poll stats... ");
    var day = new Date().format("mmm-dd");
    window.location.href = '/poll_statistics/' + P.stats.network.id + '/' + P.poll_view.content.id + '?day=' + day;
    
   },

  showPollChoices: function() {
    //P.poll_results.getItemsToShow();
    var content = P.poll_view.content;
    if (content.data && content.data.has_voted && content.data.has_voted.length > 0)
      P.poll_results.hasVoted = true;
    var conf = P.poll_view.content.config;
    var openDate = new Date();
    openDate.setISO8601(P.poll_view.content.created);
    var openHours = Math.floor((new Date() - openDate) / (1000 * 60 * 60));
    if (openHours < 0) openHours = 0;
    if (openHours >= parseInt(conf.close_after) && conf.always_open == 0 || conf.poll_is_closed) {
      $('.poll_button').attr("disabled", true);
    }

    if (content.data && content.data.has_voted && content.data.has_voted.length > 0) {
      for (var z = 0; z < content.data.has_voted.length; z++) {
        $('#poll_button' + content.data.has_voted[z]).attr('checked', true);
      }
      if (content.config.revote !== 1)
        $('.poll_button').attr("disabled", true);
    }

    var poll_anonymity = "";

    if (content.data && content.data.has_voted && content.data.has_voted.length > 0)
      poll_anonymity += "You have voted.<br>";
    else
      poll_anonymity += "You have <b>not yet</b> voted.<br>";
    


    if (content.config.revote) 
      poll_anonymity += "Revoting is <b>allowed</b>. Select your vote and click submit to register your vote.<br>";
    else
      poll_anonymity += "Revoting is <b>not allowed</b>. Select your vote and click submit to register your vote.<br>";

    if (content.config.anonymous == "yes")
      poll_anonymity += "Your name will <b>not be visible to anyone.</b>";
    if (content.config.anonymous == "stud")
      poll_anonymity += "Your name will be <b>visible to instructors but not students.</b>";
    if (content.config.anonymous == "no")
      poll_anonymity += "Your name will be <b>visible to everyone.</b>";


    $('#poll_anonymity_placeholder').html(poll_anonymity);
    
  },
  closePoll: function() {
    P.poll_view.toShow.poll_closed = true;
    var params = {
      cid: P.poll_view.content.id,
      action: "close"
    };
    PA.call_pj("content.update_poll", params, null, function() {
      PEM.fire("poll_close");
      P.poll_view.showAdmin();
      P.poll_view.showPollChoices();
      $('.poll_button').attr("disabled", true);

      P.renderer.renderMath("view_quesiton_note");
      P.renderer.renderMath("poll_results");
    });
  },
  reopenPoll: function() {
    P.poll_view.toShow.poll_closed = false;
    var params = {
      cid: P.poll_view.content.id,
      action: "reopen",
      always_open: "1"
    };
    PA.call_pj("content.update_poll", params, null, function() {
      PEM.fire("poll_reopen");
      P.poll_view.showAdmin();
      P.poll_view.showPollChoices();
      $('.poll_button').attr("disabled", false);

      P.renderer.renderMath("view_quesiton_note");
      P.renderer.renderMath("poll_results");
    });
  },
  publishPoll: function() {
    P.poll_view.toShow.poll_closed = false;
    P.poll_view.toShow.poll_published = true;
    P.poll_view.toShow.poll_unpublished = false;
    P.poll_view.content.config.unpublished = 0;
    P.poll_view.content.config.publish_later = 0;
    var params = {
      cid: P.poll_view.content.id,
      action: "publish"
    }
    PA.call_pj("content.update_poll", params, null, function(data) {
      PEM.fire("content", data);
      PEM.fire("poll_publish");
      P.poll_view.showAdmin();
      P.poll_view.showPollChoices();
      $('.poll_button').attr("disabled", false);
      P.poll_results.toShow.poll_unpublished = false;

      P.renderer.renderMath("view_quesiton_note");
      P.renderer.renderMath("poll_results");
    }, function(e){alert(e)});
  },
  doVote: function() {
    var arr = [];
    $('.poll_button').each( function (idx, item) {
      if ($(item).attr('checked')) {
        var id = $(item).attr("id").replace("poll_button", "");
        arr.push(id);
      }
    });
    if (arr.length == 0) {
      alert("Please make your selection");
      return;
    }
    PA.call_pj("content.vote", {cid:P.poll_view.content.id, votes:arr}, null, function(data) {
      P.poll_view.content.data = data;
      P.poll_view.preparePollAdmin();
      P.poll_view.showPollChoices();
      P.poll_results.hasVoted = true;
      P.poll_view.showAdmin();
      PEM.fire("vote");

      P.renderer.renderMath("view_quesiton_note");
      P.renderer.renderMath("poll_results");
    }, function(err) {
      alert(err);
    });
  },
  clonePoll: function() {
    P.modules.loadModule("old_new_post", {folders: P.feed.feedObj.tags.instructor}, function() {
      PEM.fire("clone_new_poll");
    }, null);
  },
  togglePollVisibility: function() {
    P.poll_view.toShow.poll_toggle_visibility_on = !P.poll_view.toShow.poll_toggle_visibility_on;
    if (typeof(P.poll_view.content.config.toggle_visibility_on) != 'undefined')
      P.poll_view.content.config.toggle_visibility_on = !P.poll_view.content.config.toggle_visibility_on;
    var params = {
      cid: P.poll_view.content.id,
      action: "toggle_visibility",
    }
    PA.call_pj("content.update_poll", params, null, function() {
      PEM.fire("poll_toggle_visibility");
      P.poll_view.showAdmin();
      P.poll_view.showPollChoices();

      P.renderer.renderMath("view_quesiton_note");
      P.renderer.renderMath("poll_results");
    });
  },
  pushContentMessage: function(message) {
    if (!P.poll_view.content) return;
    var newContent = message.content;
    if (!newContent) return;
    if (newContent.type == 'poll') {
      var pollChoice = $('.poll_button:checked').attr("id");
      $('#view_quesiton_note').html(P.note_view.questionTextTemplate({content:P.poll_view.content, network:P.poll_view.network}));
      if (pollChoice)
        $('#' + pollChoice).attr('checked', true);
      P.poll_view.showPollChoices();
      P.poll_view.preparePollAdmin();
      P.poll_view.showAdmin();
    }    
  },
  init: function(module) {
    PEM.addListener("content", P.poll_view.setContent);
    PEM.addListener("network", P.poll_view.setNetwork);
    PEM.addListener("close_poll", P.poll_view.closePoll);
    PEM.addListener("publish_poll", P.poll_view.publishPoll);
    PEM.addListener("reopen_poll", P.poll_view.reopenPoll);
    PEM.addListener("doVote", P.poll_view.doVote);
    PEM.addListener("download_poll_stats", P.poll_view.downloadPollStats);
    PEM.addListener("clone_poll", P.poll_view.clonePoll);
    PEM.addListener("toggle_poll_visibility", P.poll_view.togglePollVisibility);
    PEM.addListener("pushContentMessage", P.poll_view.pushContentMessage);
    PEM.addListener("poll_sanitized", P.poll_view.showPollChoices);
    if (module.options.network)
      P.poll_view.network = module.options.network;
  }
};

P.poll_results = {
  template: null,
  user: null,
  network: null,
  content: null,
  resultTemplate: null,
  hasVoted: false,

  initShowHideVoters: function() {
    $(".show_voters").click(function() {
      $(this).hide();
      $(this).siblings(".voters_list").show();
    });
    $(".hide_voters").click(function() {
      $(this).closest(".voters_list").hide();
      $(this).closest(".voters_list").siblings(".show_voters").show();
    });
  },

  setContent:function(content) {
    P.poll_results.content = content;
    if (P.poll_results.content && P.poll_results.content.subject) {      
      P.poll_results.content.subject = P.poll_results.content.subject.replace(/&amp;/g, "&");
      P.poll_results.content.subject = P.poll_results.content.subject.replace(/&quot;/g, "\"");
      P.poll_results.content.subject = P.poll_results.content.subject.replace(/&apos;/g, "'");
      P.poll_results.content.subject = P.poll_results.content.subject.replace(/&#39;/g, "'");
    }    
    if (!content) return;
    if (content.type == "poll") {
      var results = P.poll_results.getPollResults();
      var toShow = P.poll_results.getItemsToShow();
      const explanation = ((P.poll_results.content.questions || [])[0] || {}).explanation || "";
      $('#poll_results').html(P.poll_results.template({content: P.poll_results.content, results: results, toShow: toShow, explanation: explanation}));
      P.poll_results.initShowHideVoters();
      //P.poll_results.showPollMessage();
      P.poll_results.hasVoted = P.poll_results.content.data && P.poll_results.content.data.has_voted && P.poll_results.content.data.has_voted.length > 0 ? true : false;
    } else {
      $('#poll_results').html("");
    }
  },
  setNetwork:function(network) {
    P.poll_results.network = network;
  },
  pushContentMessage:function(message) {
    if (!P.poll_results.content) return;
    if (message.action == "vote_result" && message.data) {
      if (P.poll_results.content.data && P.poll_results.content.data.has_voted)
        message.data.has_voted = P.poll_results.content.data.has_voted;
      P.poll_results.content.data = message.data;
      P.poll_results.setContent(P.poll_results.content);
      return;
    }
    var newContent = message.content;
    if (!newContent) return;
    if (newContent.type == 'poll') {
      P.note_view.prepareHistoryAndChildren(newContent);
      // this basically is a whole new updated poll object
      P.poll_results.setContent(newContent);
    }
  },
  getItemsToShow: function() {
    var toShow = {
      poll_submitted: false,
      poll_closed: false,
      poll_not_submitted: false,
      poll_will_close: false,
      poll_not_closed: false,
      poll_closes_in: false,
      poll_time: false,
      poll_only_instructors: false,
      poll_show_results: true,
      poll_no_data: false,
      poll_reopened: false,
      poll_published: false,
      is_instructor: P.stats.user.isInst,
      is_poll_admin: false,
      poll_unpublished: false,
    }
    if (P.feed.studentView) {
      toShow.is_instructor = false;
    }
    if (P.poll_results.content.data && P.poll_results.content.data.has_voted && P.poll_results.content.data.has_voted.length > 0 || P.poll_results.hasVoted)
      toShow.poll_submitted = true;

    var conf = P.poll_results.content.config;
    toShow.poll_unpublished = P.poll_results.content.config.unpublished === 1 ? true : false;
    toShow.poll_toggle_visibility_on = (conf.toggle_visibility_on == 1 || typeof(conf.toggle_visibility_on) == 'undefined');
    var isClosed = false;
    var dontShowNoData = false;
    var openDate = new Date();
    openDate.setISO8601(P.poll_results.content.created);
    var openHours = Math.floor((new Date() - openDate) / (1000 * 60 * 60));
    var openMinutes = Math.floor((new Date() - openDate) / (1000 * 60));
    if (openMinutes < 0) openMinutes = 0;
    if (openHours < 0) openHours = 0;
    toShow.poll_time = openHours;

    if (openHours >= parseInt(conf.close_after) && conf.always_open == 0 || conf.poll_is_closed) {
      isClosed = true;
      toShow.poll_closed = true;
    }
    if (!isClosed && conf.always_open == 0) {
      var closesAfter = parseInt(conf.close_after) - openHours;
      var closesAfterMin = parseInt(conf.close_after) * 60 - openMinutes;
      if (closesAfterMin < 60)
        toShow.poll_closes_in = (closesAfterMin > 0 ? closesAfterMin : 1) + " minutes"
      else {
        toShow.poll_closes_in = closesAfter + " hours"
        if (closesAfter > 24)
          toShow.poll_closes_in = Math.floor(closesAfter / 24) + " day(s)"
      }
      toShow.poll_will_close = true
    }
    //if (!P.poll_results.user.isInst) {
      if (P.poll_results.content.data.has_voted && P.poll_results.content.data.has_voted.length > 0) P.poll_results.hasVoted = true;
      if (!P.poll_results.hasVoted && conf.show_results == "av" && !isClosed) {
        toShow.poll_not_submitted = true;
        dontShowNoData = true;
      }
      if (conf.show_results == "ac" && !isClosed && conf.always_open == 0) {
        toShow.poll_not_closed = true;
        toShow.poll_will_close = false;
        toShow.poll_no_data = false;
        dontShowNoData = true;
      }
    //}
    var res = P.poll_results.content.data.result;
    if (!res) res = [];
    var totalVotes = 0;
    if (P.poll_results.content.data.total_votes)
      totalVotes = P.poll_results.content.data.total_votes;
    if (totalVotes == 0) {
      toShow.poll_show_results = false;
      if (conf.show_results == "nn")
        toShow.poll_only_instructors = true;
      else {
        if (!dontShowNoData) {
          toShow.poll_no_data = true;
        }
      }
    } else {
      if (dontShowNoData) {
        toShow.poll_show_results = false;
        return toShow;
      }
      toShow.poll_show_results = true;
      toShow.poll_not_submitted = false;
    }

    return toShow;

      },
  getPollResults: function() {
    var results = [];

    var answers = null;
    if (P.poll_results.content.questions) {
      answers = P.poll_results.content.questions[0].answers;
    }

    if (answers) {
      var content = P.poll_results.content;
      var totalVotes = content.data.total_votes;
      for (var i = 0; i < answers.length; i++) {
        if (answers[i].deleted)
          continue;

        const key = answers[i].id;
        var votes = 0;
        var percent = 0;
        var showVoters = false;
        var voters = [];
        if (content.data.result && content.data.result[key]) {
          if (typeof(content.data.result[key]) == "number")
            votes = content.data.result[key];
          if (typeof(content.data.result[key].length) != "undefined") {
            showVoters = true;
            votes = content.data.result[key].length;
            for (var j = 0; j < content.data.result[key].length; j++) {
              voters.push(PA.getUserName(content.data.result[key][j]));
            }
          }
        }
        if (totalVotes)
          percent = Math.round(votes * 100 / totalVotes);
        var result = {
          percent: percent,
          votes: votes,
          option: answers[i].text,
          answerId: answers[i].id,
          showVoters: showVoters,
          voters: voters
        };
        results.push(result);
      }
    }
    return results;
  },
  vote: function() {
    P.poll_results.hasVoted = true;
    P.poll_results.setContent(P.poll_results.content);
  },
  poll_close: function() {
    P.poll_results.toShow = P.poll_results.getItemsToShow();
    P.poll_results.toShow.poll_closed = true;
    P.poll_results.toShow.poll_closes_in = false;
    P.poll_results.toShow.poll_will_close = false;
    var results = P.poll_results.getPollResults();
    const explanation = ((P.poll_results.content.questions || [])[0] || {}).explanation || "";
    $('#poll_results').html(P.poll_results.template({content: P.poll_results.content, results: results, toShow: P.poll_results.toShow, explanation: explanation}));


  },
  poll_reopen: function() {
    P.poll_results.toShow = P.poll_results.getItemsToShow();
    P.poll_results.toShow.poll_closed = false;
    var results = P.poll_results.getPollResults();
    const explanation = ((P.poll_results.content.questions || [])[0] || {}).explanation || "";
    $('#poll_results').html(P.poll_results.template({content: P.poll_results.content, results: results, toShow: P.poll_results.toShow, explanation: explanation}));

  },
  poll_publish: function() {
    P.poll_results.toShow = P.poll_results.getItemsToShow();
    P.poll_results.toShow.poll_closed = false;
    P.poll_results.toShow.poll_published = true;
    P.poll_results.toShow.poll_unpublished = false;
    P.poll_results.content.config.unpublished = 0;
    P.poll_results.content.config.publish_later = 0;
    $(".main_panel").removeClass("private_post");
    $(".post_region_message").remove();
    var results = P.poll_results.getPollResults();
    const explanation = ((P.poll_results.content.questions || [])[0] || {}).explanation || "";
    $('#poll_results').html(P.poll_results.template({content: P.poll_results.content, results: results, toShow: P.poll_results.toShow, explanation: explanation}));

  },
  poll_toggle_visibility: function() {
    P.poll_results.toShow = P.poll_results.getItemsToShow();
    var results = P.poll_results.getPollResults();
    const explanation = ((P.poll_results.content.questions || [])[0] || {}).explanation || "";
    $('#poll_results').html(P.poll_results.template({content: P.poll_results.content, results: results, toShow: P.poll_results.toShow, explanation: explanation}));
  },
  init: function(module) {
    P.poll_results.template = module.template;

    PEM.addListener("content", P.poll_results.setContent);
    PEM.addListener("network", P.poll_results.setNetwork);
    PEM.addListener("pushContentMessage", P.poll_results.pushContentMessage);
    PEM.addListener("vote", P.poll_results.vote);
    PEM.addListener("poll_close", P.poll_results.poll_close);
    PEM.addListener("poll_reopen", P.poll_results.poll_reopen);
    PEM.addListener("poll_publish", P.poll_results.poll_publish);
    PEM.addListener("poll_toggle_visibility", P.poll_results.poll_toggle_visibility);
    PTM.getModuleTemplate("poll_results", "result", function(template) {P.poll_results.resultTemplate = template;});

    Handlebars.registerHelper('pollResult', function(result) {
      if (P.poll_results.resultTemplate)
        return P.poll_results.resultTemplate({result: result});
      return "";
    });

    if (module.options.network)
      P.poll_results.network = module.options.network;
    if (module.options.user)
      P.poll_results.user = module.options.user;
  }
};

P.answer = {
  template: null,
  network: null,
  content: null,
  user: null,
  answers: {},
  answerTextTemplate: null,
  editRevision: {},
  isEditing: {},

  initEventHandlers: function() {
    $(".post_region_box.answer .post_action.edit").unbind().click(function() {
      if (P.answer.user.isPublic) {
        alert("You cannot edit this answer");
        return;
      }
      P.answer.startEdit(this);
      return false;
    });
    $(".post_region_box.answer .post_action.cancel").unbind().click(function(){
      //var top = $(this).closest('.post_region_box.answer');
      //P.answer.stopEdit(top);
      var id = $(this).closest(".post_region_box").attr("id");
      PEM.fire("cancelOne", "answer_" + id);
      return false;
    });
    $(".post_region_box.answer .post_action.submit").unbind().click(function(){
      var top = $(this).closest('.post_region_box.answer');
      P.answer.editSubmit(top);
      return false;
    });
    $(".post_region_box.answer .compose_mode").unbind().click(function() {
      if (P.answer.user.isPublic) {
        alert("You cannot edit this answer");
        return;
      }
      $(this).hide();
      P.answer.startEdit(this);
      //P.answer.startAnswer(this);
      return false;
    });
    $(".post_action.do_good_answer").unbind().click(function() {
      var id = $(this).closest(".post_region_box").attr("id");
      P.answer.doGoodAnswer(id);
      return false;
    });
    $(".post_action.undo_good_answer").unbind().click(function() {
      var id = $(this).closest(".post_region_box").attr("id");
      P.answer.undoGoodAnswer(id);
      return false;
    });
    $("#answer_actions_dropdown li").unbind().click(function() {
      $(this).closest('.general_dropdown').hide();
      var type = $(this).closest(".post_region_box").attr("id");
      if ($(this).hasClass("attach"))
        P.answer.addAttachment(type);
      else if ($(this).hasClass("report_spam"))
        P.answer.reportSpam();
      return false;
    });
    $(".post_region_arrow_dropdown").unbind().hover(
      function() {
        $(this).find(".dropdown-menu").show();
      }, function() {
        $(this).find(".dropdown-menu").hide();
      }
    );
    $('.post_region_box.answer .others').tooltip({placement: 'left', html: true});
  },

  setNetwork: function(network) {
    P.answer.network = network;
  },
  setUser: function(user) {
    P.answer.user = user;
  },
  setContent: function(content) {
    P.answer.content = content;
    P.answer.isEditing = {};
    if (!content) return;
    P.answer.answers = {};
    if (content.type == "question") {
      var isActiveTimer = false;
      if (content.config && content.config.timer && content.config.timer.delay) {
        var now = (new Date()).getTime() / 1000;
        content.config.timer.isActive = (now < content.config.timer.expire);
        isActiveTimer = content.config.timer.isActive;
      }
      P.answer.answers = {s_answer:{body:"", type:"s_answer", title:"wiki answer", long:"collectively construct a single answer", icon:"member_answer", showEdit:true}};
      if (P.answer.network.type != "group")
        P.answer.answers = {s_answer:{body:"", type:"s_answer", icon:"s_answer", title:"the students' answer", long:"where students collectively construct a single answer", showEdit:true, showSuper:(P.answer.user.isInst > 0), isActiveTimer:isActiveTimer},
                            i_answer:{body:"", type:"i_answer", icon:"i_answer", title:"the instructors' answer", long:"where instructors collectively construct a single answer", showEdit:P.answer.user.isInst, isInstructor:P.answer.user.isInst}};
      for (var i = 0; i < content.children.length; i++) {
        if (content.children[i].type == 's_answer' || content.children[i].type == 'i_answer') {
          if (!content.children[i].history_size) {
            content.children[i].history_size = content.children[i].history.length;
          }
          P.answer.prepareAnswer(content.children[i]);
        }
      }
      if (P.answer.answers.i_answer && P.answer.answers.i_answer.isInstructor && P.answer.answers.s_answer && P.answer.answers.s_answer.endorseOne)
        delete(P.answer.answers.i_answer.isInstructor);
      P.answer.showCurrentAnswer();
    } else {
      $('#member_answer').html("");
      $('#instructor_answer').html("");
    }
  },
  setTimer: function(delay) {
    PA.call_pj("content.update_timer", {cid:P.answer.content.id, delay:delay}, 1);
    if (!P.answer.content.config) P.answer.content.config = {};
    P.answer.content.config.timer = {user_id:PA.user.id, delay:delay, when: new Date(), isActive:true};
    if (delay)
      P.answer.content.config.timer.enabled = true;
    else
      P.answer.content.config.timer.enabled = false;
    // re-show
    P.answer.showCurrentAnswer();
    return false;
  },
  prepareAnswer: function(answer, historyIdx) {
    historyIdx = historyIdx || 0;
    if (answer.history) {
      answer.history.sort(function(a,b){
        if (a.created > b.created) return -1;
        if (a.created < b.created) return 1;
        return 0;
      });
      if (historyIdx > answer.history.length - 1) {
        historyIdx = answer.history.length - 1;
      }
      
      answer.body = P.text_editor.convertOriginalToBase(answer.history[historyIdx].content);
      if (answer.data && answer.data.embed_links) {
        for (var i = 0; i < answer.data.embed_links.length; i++) {
          var link = answer.data.embed_links[i][0];
          var html = answer.data.embed_links[i][1];
          // support up to two repeat occurrences of the same link (replaceAll requires using a regex,
          // which requires escaping metacharacters)
          answer.body = answer.body.replace(link, html).replace(link, html);
        }
      }
      answer.uid = answer.history[historyIdx].uid;
      answer.uidA = answer.history[historyIdx].uid_a;
      answer.uidSet = (answer.uid || answer.uidA);
      answer.anon = answer.history[historyIdx].anon;
      answer.updated = answer.history[historyIdx].created;
      var others = {};
      for (var i = 1; i < answer.history.length; i++)
        if (answer.uid != answer.history[i].uid)
          others[answer.history[i].uid] = {anon:answer.history[i].anon, uid_a:answer.history[i].uid_a};
      var othersArr = [];
      var othersAnon = [];
      var othersA = [];
      for (var id in others) {
        othersArr.push(id);
        othersAnon.push(others[id].anon);
        othersA.push(others[id].uid_a);
      }
      answer.others = othersArr;
      answer.othersAnon = othersAnon;
      answer.othersA = othersA;
    }
    if (answer.children && answer.children.length > 0) {
      var attach = [];
      for (var i = 0; i < answer.children.length; i++) {
        if (answer.children[i].type == "attach") {
          var attachment = P.note_view.makeAttachmentObject(answer.children[i]);
          attach.push(attachment);
        }
      }
      if (attach.length > 0)
        answer.attach = attach;
    }
    P.answer.prepareEndorsementVars(answer, historyIdx);
    answer.showType = "answer";
    if (P.answer.answers[answer.type]) {
      answer.title = P.answer.answers[answer.type].title;
      answer.icon = P.answer.answers[answer.type].icon;
      answer.long = P.answer.answers[answer.type].long;
      answer.showEdit = P.answer.answers[answer.type].showEdit;
      answer.showSuper = P.answer.answers[answer.type].showSuper;
    }
    P.answer.answers[answer.type] = answer;
  },
  prepareEndorsementVars: function(answer, historyIdx) {
    answer.endorseOne = null;
    answer.endorseTwo = null;
    answer.endorseArr = null;
    answer.endorseCnt = 0;
    if (historyIdx > 0) return;
    if (answer.tag_endorse_arr && answer.tag_endorse_arr.length > 0) {
      answer.endorseCnt = answer.tag_endorse_arr.length;
      answer.endorseOne = answer.tag_endorse_arr[0];
      if (answer.tag_endorse_arr.length == 2) {
        answer.endorseTwo = answer.tag_endorse_arr[1];
      }
      else {
        answer.endorseArr = answer.tag_endorse_arr.slice(1, answer.tag_endorse_arr.length);
      }
      // special handling for class
      if (!P.answer.network.isGroup) {
        answer.isAnswer = true;
        answer.endorseOne = false;
        for (var i = 0; i < answer.tag_endorse_arr.length; i++) {
          if (P.answer.network.prof_hash[answer.tag_endorse_arr[i]]) {
            answer.endorseOne = answer.tag_endorse_arr[i];
            break;
          }
        }
      }
    }
  },
  copyAt: function(num) {
    copyToClipboard('@' + num);
    $('#copied_' + num).show();
    setTimeout(function() {
      $('#copied_' + num).hide();
    }, 4000)
  },
  search: function() {
    var subject = P.answer.content.subject;
    var content = P.answer.content.history[0].content;
    var query = (subject + " " + content).trim();

    query = query.replace(/&amp;/g, "&");
    query = query.replace(/&quot;/g, '"');
    query = query.replace(/&nbsp;/g, ' ');

    if (query.length == 0) {
      $('.similar-posts').hide();
      return;
    }
    var nid = P.answer.network.id;

    PA.call_pj("network.find_similar", {query:query, old_query:"", nid:nid, to_nr:P.answer.content.nr}, 1, function(ret){
      var list = ret.list;
      if (!list || list.length == 0) {
        $('#similar-posts').html("");
        return;
      }
      var html = "";
      for (var i = 0; i < list.length; i++) {
        var item = list[i];
        if (item.score < 100) {
          continue;
        }
        var part = "<li><span onclick='P.answer.copyAt(" + item.nr + ")' class='number' id='suggested_" + item.nr + "'>@" + item.nr + " </span><span class='copied' id='copied_" + item.nr + "'>Copied!</span><a href=\"/class/" + nid + "?cid=" + item.nr + "\" target=\"_blank\">" + item.subject + "</a><br>";
        var h = item.highlight;
        h = h.replace(/___bold_start___/g, "<b>");
        h = h.replace(/___bold_end___/g, "</b>");
        part += h;
        part += "</li>";
        html += part;
      }
      if (html == "") {
        $('#similar-posts').html("");
        return;
      } else {
        $('#similar-posts').html(html);
        for (var i = 0; i < list.length; i++) {
          var item = list[i];
          $('#suggested_' + item.nr).tooltip({
            'placement': 'bottom',
            'container': 'body',
            'title': 'Click to copy @' + item.nr
          });    
        }
      }
    });
  },
  doGoodAnswer: function(type) {
    var feedbackType = "tag_endorse";
    PA.call_pj('content.add_feedback', {cid:P.answer.answers[type].id, type:feedbackType}, 1, function() {
      var feedbackTypeArr = "tag_endorse_arr";
      if (!P.answer.answers[type][feedbackType]) P.answer.answers[type][feedbackType] = [];
      P.answer.answers[type][feedbackType].push({id:P.answer.user.id, name:P.answer.user.name});
      P.answer.answers[type][feedbackTypeArr].push(P.answer.user.id);
      $("#" + type + " .post_action.do_good_answer").hide();
      $("#" + type + " .post_action.undo_good_answer").show();
      $("#" + type + " .post_actions_number.good_answer").html(P.answer.answers[type][feedbackType].length);
      P.answer.prepareEndorsementVars(P.answer.answers[type], 0);
      if (P.note_view.network.isGroup)
        $("#endorse_text_" + P.answer.answers[type].type).html(P.note_view.endorseTemplate({content: P.answer.answers[type]}));
      else
        $("#endorse_text_" + P.answer.answers[type].type).html(P.note_view.endorseTemplateClass({content: P.answer.answers[type]}));
    }, function(err){
      alert(err);
    });
  },
  undoGoodAnswer: function(type) {
    var feedbackType = "tag_endorse";
    PA.call_pj('content.remove_feedback', {cid:P.answer.answers[type].id, type:feedbackType}, 1, function() {
      var feedbackTypeArr = "tag_endorse_arr";
      if (P.answer.answers[type][feedbackType]) {
        for (var i = 0; i < P.answer.answers[type][feedbackType].length; i++) {
          if (P.answer.answers[type][feedbackType][i].id == P.answer.user.id) {
            P.answer.answers[type][feedbackType].splice(i, 1);
            break;
          }
        }
      }
      if (P.answer.answers[type][feedbackTypeArr]) P.answer.answers[type][feedbackTypeArr].remove(P.answer.user.id);
      $(".post_action.undo_good_answer").hide();
      $(".post_action.do_good_answer").show();
      $(".post_actions_number.good_answer").html(P.answer.answers[type][feedbackType].length);
      P.answer.prepareEndorsementVars(P.answer.answers[type], 0);
      if (P.note_view.network.isGroup)
        $("#endorse_text_" + P.answer.answers[type].type).html(P.note_view.endorseTemplate({content: P.answer.answers[type]}));
      else
        $("#endorse_text_" + P.answer.answers[type].type).html(P.note_view.endorseTemplateClass({content: P.answer.answers[type]}));
    }, function(err) {
      alert(err);
    });
  },
  showCurrentAnswer: function() {
    var endorsed = false;
    if (P.answer.answers["s_answer"].updated) {
      $('#member_answer .compose_mode').hide();
      for (var i = 0; i < P.answer.answers["s_answer"].tag_endorse_arr.length; i++) {
        if (P.answer.answers["s_answer"].tag_endorse_arr[i] == P.answer.user.id)
          endorsed = true;
      }
    }
    var params = {
      content:P.answer.content,
      network:P.answer.network,
      user:P.answer.user,
      answer: P.answer.answers["s_answer"],
      endorsed: endorsed,
      anon: PEM.callFirst("getAnonymityOptions")
    };
    if (!P.answer.isEditing["s_answer"]) {
      if (P.answer.network.type == "group" || !P.answer.user.isInst || P.answer.answers["s_answer"].updated) {
        $('#member_answer').html(P.answer.template(params));
        P.renderer.renderMath("s_answer");
      } else
        $('#member_answer').html("");
    }
    if (P.answer.network.type != "group") {
      endorsed = false;
      if (P.answer.answers["i_answer"].updated) {
        $('#instructor_answer .compose_mode').hide();
        for (var i = 0; i < P.answer.answers["i_answer"].tag_endorse_arr.length; i++) {
          if (P.answer.answers["i_answer"].tag_endorse_arr[i] == P.answer.user.id)
            endorsed = true;
        }
      }
      var similar = false;
      if (P.answer.content.config.seen) {
        similar = [];
        for (var i = 0; i < Object.keys(P.answer.content.config.seen).length; i++) {
          for (var key in P.answer.content.config.seen) {
            if (P.answer.content.config.seen[key] == i && similar.length < 7)
              similar.push(key);
          }
        }
      }
      if (!P.answer.user.config.answer_dupes)
        P.answer.user.config.answer_dupes = {};
      P.answer.user.config.answer_dupe = P.answer.user.config.answer_dupes[P.answer.network.id];
      var params = {
        content:P.answer.content,
        network:P.answer.network,
        user:P.answer.user,
        answer: P.answer.answers["i_answer"],
        endorsed: endorsed,
        similar: similar,
      };
      if (!P.answer.isEditing["i_answer"]) {
        if (P.answer.answers["i_answer"].updated || P.answer.user.isInst) {
          $('#instructor_answer').html(P.answer.template(params));
          P.renderer.renderMath("i_answer");
        } else
          $('#instructor_answer').html("");
      }
    }
    P.answer.initEventHandlers();
    P.answer.updateEditors();
    P.renderer.ensureSyntaxHighlighting();
    if (P.answer.user.config.answer_dupe)
      P.answer.search();
  },
  showDupes: function(answerDupes) {
    PA.call_pj('user.set', {stat:'answer_dupes.' + P.answer.network.id, val:answerDupes}, 1);
    P.answer.user.config.answer_dupes[P.answer.network.id] = answerDupes;
    if (answerDupes) {
      P.answer.search();
    } else {
      $('#similar-posts').html("");
      return;
    }
  },
  updateEditors: function() {
    P.answer.showEditors($('#member_answer .answer'));
    if (P.answer.network.type != "group") {
      P.answer.showEditors($('#instructor_answer .answer'));
    }
  },
  showEditors: function(top) {
    var type = top.attr("id");
    var edits = [];
    if (type == "s_answer") edits = P.answer.content.s_edits;
    if (type == "i_answer") edits = P.answer.content.i_edits;
    if (!edits) edits = [];
    var elem = top.find('.currently_editing');
    if (edits.length == 0) {
      elem.hide();
      return;
    }
    elem.find('.editing_message').html(
      '&#8764; ' + edits.length + ' other user' + (edits.length > 1 ? 's are' : ' is') + ' editing this right now. &#8764;'
    );
    elem.show();
  },
  startEdit: function(element) {
    var top = $(element).closest('.post_region_box.answer');
    var type = top.attr("id");
    top.find('.post_region_content.edit_mode').show();
    top.find('.post_region_actions.edit_mode').show();
    top.find('.post_region_content.view_mode').hide();
    top.find('.post_region_actions.view_mode').hide();
    top.addClass("edit_mode");
    $('.similar-posts').show();
    if (P.answer.answers[type] && P.answer.answers[type].history)
      P.answer.editRevision[type] = P.answer.answers[type].history_size;
    else
      P.answer.editRevision[type] = 0;
    P.answer.isEditing[type] = true;
    PEM.fire("injectEditor", {
      anonymity: P.answer.content.default_anonymity,
      where: top.find(".answer_edit_wrapper"),
      postfix: "answer_" + P.answer.answers[type].type,
      text: P.answer.answers[type].body,
      save: P.answer.editSubmit,
      cancel: function(){P.answer.stopEdit(top)},
      height: 150,
      noSave: true
    });
    PA.call_pj("content.edit", {cid: P.answer.content.id, type: type}, 1, function(sid) { PA.user.sid = sid; });
    return false;
  },
  stopEdit: function(top) {
    var type = top.attr("id");
    top.find('.post_region_content.edit_mode').hide();
    top.find('.post_region_actions.edit_mode').hide();
    top.find('.post_region_content.view_mode').show();
    top.find('.post_region_actions.view_mode').show();
    P.answer.showCurrentAnswer();
    $('.similar-posts').hide();
    top.removeClass("edit_mode");
    PA.call_pj("content.cancel_edit", {cid:P.answer.content.id, nid:P.answer.network.id}, 1);
    if (!P.answer.answers[type].updated)
      top.find('.compose_mode').show();
    P.answer.isEditing[type] = false;
    return false;
  },
  mergeConflict: function(myText, top) {
    var type = top.attr("id");
    P.answer.mergeEditorTop = top;
    P.answer.editRevision[type] = P.answer.answers[type].history_size;
    PEM.fire("showConflict", {
      myText: myText,
      otherText: P.answer.answers[type].history[0].content,
      submit: function(text) {
        P.answer.editSubmit(P.answer.mergeEditorTop, text);
      },
      cancel: function() {
        PEM.fire('cancelOneForce', {postfix: 'answer_' + P.answer.answers[type].type});
      }
    });
  },
  editSubmit: function(top, overrideText) {
    var type = top.attr("id");
    var text = PEM.callFirst("getEditorText", "answer_" + type);
    if (overrideText)
      text = overrideText;
    var latestRevision = 0;
    if (P.answer.answers[type] && P.answer.answers[type].history)
      latestRevision = P.answer.answers[type].history_size;
    if (P.answer.editRevision[type] < latestRevision) {
      // show merge conflict
      P.answer.mergeConflict(text, top);
      return false;
    }
    var anon = top.find(".anonymity_selector").val();
    if (!anon) anon = "no";
    var params = {
      content: text,
      type: type,
      cid: P.answer.content.id,
      revision: P.answer.editRevision[type],
      anonymous: anon
    };
    P.answer.submitAnswer(params, top);
    top.removeClass("edit_mode");
    return false;
  },
  submitAnswer: function(params, top) {
    var myTop = top;
    var type = top.attr("id");
    PA.call_pj("content.answer", params, $('#page_center'),
      function(data) {
        PEM.fire('cancelOneForce', {postfix: "answer_" + params.type});
        if (data.bad) {
          P.answer.answers[type] = data.bad;
          P.answer.mergeConflict(params.content, myTop);
        }
        P.answer.prepareAnswer(data);
        P.answer.showCurrentAnswer();
        PEM.fire("setAnonymity", params.anonymous);
      }, function(err) {setTimeout(function(){alert(err);}, 1000);}
    );//anonymous
  },
  updateCurrentAnswer: function(top, answer) {
    var el = top.find('.post_region_content.view_mode');
    el.html(P.answer.answerTextTemplate({answer:answer, network:P.answer.network}));
    P.renderer.renderMath(el[0]);
  },
  pushContentMessage: function(message) {
    if (!P.answer.content) return;
    var newContent = message.content;
    if (!newContent) return;
    if (message.action === 'create' && newContent.type === 'attach' && message.parent_type === 's_answer') {
      // new attachment for answer
    }
    if (newContent.type === 's_answer' || newContent.type === 'i_answer') {
      // this basically is a whole new updated answer object
      P.answer.content.no_answer = false;
      if (P.answer.answers[newContent.type].history) {
        P.answer.prepareAnswer(newContent);
        // update text, but keep edit window open if needed
        P.answer.updateCurrentAnswer($('#' + newContent.type), newContent);
      } else {
        if (!P.answer.content.children)
          P.answer.content.children = [];
        P.answer.content.children.push(newContent);
        for (var k in newContent) {
          P.answer.answers[newContent.type][k] = newContent[k];
        }
        P.answer.prepareAnswer(newContent);
        P.answer.showCurrentAnswer();
      }
    }
  },
  addAttachment: function(type) {
    var params = {
      cid: P.answer.answers[type].id,
      uid: P.answer.user.id,
      type: "answer",
      nid: P.answer.network.id
    };
    P.modules.loadModule("attachments", {},
      function() {
        PEM.fire("show_upload_attachment", params);
      }, null);
  },
  reportSpam: function() {
    PA.call("content.report_spam", {cid:P.answer.answers["s_answer"].id}, null, function() {
      if (P.answer.user.isInst)
        alert("Thanks, we've notified the Piazza Team. Feel free to delete or edit this post in the meanwhile. You can also disable history under the Actions menu so no one can see the question history.");
        //$('#report_spam_window2').jqmShow();
      else
        alert("Thanks, we have sent the report for a review to Piazza staff.");
        //$('#report_spam_window').jqmShow();
    });
  },
  hideHistoryHighlight: function() {
    $('#s_answer .post_region_content').css("border", "none");
    $('#i_answer .post_region_content').css("border", "none");
  },
  showHistory: function(history) {
    P.answer.hideHistoryHighlight();
    if (history.highlight == "s_answer" || history.highlight == "i_answer") {
      $('#' + history.highlight + ' .post_region_content').css("border-top","2px solid #0f0");
      $('#' + history.highlight + ' .post_region_content').css("border-bottom", "2px solid #0f0");
      $('.main_panel').scrollTo('#' + history.highlight + ' .post_region_content');
    }
    if (P.answer.answers.s_answer && P.answer.answers.s_answer.history) {
      // save old endorsement array
      var s_answer = P.answer.answers.s_answer;
      if (!s_answer.tag_endorse_arr_old)
        s_answer.tag_endorse_arr_old = s_answer.tag_endorse_arr;
      s_answer.tag_endorse_arr = s_answer.tag_endorse_arr_old.slice(0);
      for (var uid in history.tag_endorse_s)
        s_answer.tag_endorse_arr.remove(uid);
      if (history.sa_idx >= s_answer.history.length) {
        $('#s_answer').hide();
      } else {
        $('#s_answer').show();
        P.answer.prepareAnswer(s_answer, history.sa_idx);
        P.answer.updateCurrentAnswer($('#s_answer'), s_answer);
      }
    }
    if (P.answer.answers.i_answer && P.answer.answers.i_answer.history) {
      var i_answer = P.answer.answers.i_answer;
      if (!i_answer.tag_endorse_arr_old)
        i_answer.tag_endorse_arr_old = i_answer.tag_endorse_arr;
      i_answer.tag_endorse_arr = i_answer.tag_endorse_arr_old.slice(0);
      for (var uid in history.tag_endorse_i)
        i_answer.tag_endorse_arr.remove(uid);
      if (history.ia_idx >= i_answer.history.length) {
        $('#i_answer').hide();
      } else {
        P.answer.prepareAnswer(i_answer, history.ia_idx);
        P.answer.updateCurrentAnswer($('#i_answer'), i_answer);
        $('#i_answer').show();
      }
    }
    P.renderer.ensureSyntaxHighlighting();
  },
  init: function(module) {
    P.answer.template = module.template;

    PEM.addListener("content", P.answer.setContent);
    PEM.addListener("network", P.answer.setNetwork);
    PEM.addListener("pushContentMessage", P.answer.pushContentMessage);
    PEM.addListener("history", P.answer.showHistory);
    PEM.addListener("hideHistoryHighlight", P.answer.hideHistoryHighlight);
    PEM.addListener("update_editors", P.answer.updateEditors);
    PEM.addListener("showSimilar", P.answer.search);
    PTM.getModuleTemplate("answer", "answer_text", function(template) {P.answer.answerTextTemplate = template;});
    Handlebars.registerHelper('answerText', function(element, network) {
      if (P.answer.answerTextTemplate)
        return P.answer.answerTextTemplate({answer:element, network:network});
      return "";
    });

    if (module.options.network)
      P.answer.network = module.options.network;
    if (module.options.user)
      P.answer.user = module.options.user;
  }
};

P.clarifying_discussion = {
  template: null,
  network: null,
  content: null,
  user: null,
  messageTemplate: null,
  replyTemplate: null,
  followups: {},
  replies: {},
  followupsSort: [],
  repliesSort: [],

  initHandlers: function() {
    $('#create_new_followup').unbind().click(function(){
      if (P.answer.user.isPublic) {
        alert("You cannot do that");
        return;
      }
      $(this).hide();
      $('#create_new_followup_div').show();
      PEM.fire("injectEditor", {
        where: $("#create_new_followup_editor"),
        postfix: "new_followup",
        text: "",
        anonymity: P.clarifying_discussion.content.default_anonymity,
        save: function(text, anon) {
          P.clarifying_discussion.updateEndorsementLinks("new_followup");
          return P.clarifying_discussion.postFollowup(text, anon);
        },
        cancel: function(){
          P.clarifying_discussion.updateEndorsementLinks();
          $('#create_new_followup_div').hide();
          $('#create_new_followup').show();
        },
        height: 120,
        saveText: "post",
        showIOnly: P.clarifying_discussion.user.isInst
      });
      P.clarifying_discussion.updateEndorsementLinks();
      return false;
    });
    $('.clarifying_discussion_dropdown').unbind().click(function(event){
      var top = $(this).closest('.clarifying_discussion');
      return openDropdown(top.find('.discussion_dropdown')[0], event);
    });
    $('.discussion_action.delete_reply').unbind().click(function(){
      var id = $(this).closest('.existing_reply').attr('id');
      P.clarifying_discussion.deleteItem(id, "comment");
      return false;
    });
    $('.clarifying_discussion .edit_reply').unbind().click(function(){
      if (P.answer.user.isPublic) {
        alert("You cannot do that");
        return;
      }
      var top = $(this).closest('.existing_reply');
      var id = top.attr("id");
      var parentId = top.closest('.clarifying_discussion').attr("id");
      top.find('.discussion_content').hide();
      var editWrapper = top.find('#reply_edit_' + id);
      editWrapper.show();
      top.addClass("edit_mode");
      PEM.fire("injectEditor", {
        where: editWrapper,
        postfix: "edit_followup_reply_" + id,
        text: P.clarifying_discussion.replies[id].subject,
        anonymity: P.clarifying_discussion.content.default_anonymity,
        noAnonymity:true,
        save: function(text) {
          P.clarifying_discussion.updateEndorsementLinks("edit_followup_reply_" + id);
          top.find('.discussion_content').show();
          top.find('#reply_edit_' + id).hide();
          top.removeClass("edit_mode");
          P.clarifying_discussion.updateReplyText(id, text);
          var f = P.clarifying_discussion.replies[id];
          if (f) {
            f.subject = text;
          }
          PA.call_pj("content.update", {cid:id, subject: text}, $('#clarifying_discussion'), function(data){
          }, function(err){
            alert(err);
          });
        },
        cancel: function(){
          P.clarifying_discussion.updateEndorsementLinks();
          top.find('.discussion_content').show();
          top.find('#reply_edit_' + id).hide();
          top.removeClass("edit_mode");
        },
        height: 100,
        saveText: "post"
      });
      P.clarifying_discussion.updateEndorsementLinks();
      return false;
    });
    $('.clarifying_discussion .delete_discussion').unbind().click(function(){
      var id = $(this).closest('.clarifying_discussion').attr('id');
      $('#' + id).find('.discussion_dropdown').hide();
      P.clarifying_discussion.deleteItem(id, "discussion");
      return false;
    });
    $('.clarifying_discussion .edit_discussion').unbind().click(function(){
      if (P.answer.user.isPublic) {
        alert("You cannot edit this");
        return;
      }
      var top = $(this).closest('.clarifying_discussion');
      var id = top.attr('id');
      top.find('.discussion_content.main_followup').hide();
      top.find('.discussion_dropdown').hide();
      var editWrapper = top.find('#discussion_edit_' + id);
      editWrapper.show();
      top.addClass("edit_mode");
      PEM.fire("injectEditor", {
        where: editWrapper,
        postfix: "edit_followup_" + id,
        text: P.clarifying_discussion.followups[id].subject,
        anonymity: P.clarifying_discussion.content.default_anonymity,
        noAnonymity:true,
        save: function(text) {
          P.clarifying_discussion.updateEndorsementLinks("edit_followup_" + id);
          top.find('.discussion_content').show();
          top.find('#discussion_edit_' + id).hide();
          top.removeClass("edit_mode");
          P.clarifying_discussion.updateFollowupText(id, text);
          var f = P.clarifying_discussion.followups[id];
          if (f) {
            f.subject = text;
          }
          PA.call_pj("content.update", {cid:id, subject: text}, $('#clarifying_discussion'), function(data){
          }, function(err){
            alert(err);
          });
        },
        cancel: function(){
          P.clarifying_discussion.updateEndorsementLinks();
          top.find('.discussion_content').show();
          top.find('#discussion_edit_' + id).hide();
          top.removeClass("edit_mode");
        },
        height: 120,
        saveText: "post"
      });
      P.clarifying_discussion.updateEndorsementLinks();
      return false;
    });
    $('.clarifying_discussion .start_reply').unbind().click(function(){
      if (P.answer.user.isPublic) {
        alert("You cannot do that");
        return;
      }
      var top = $(this).closest('.clarifying_discussion');
      var id = top.attr("id");
      top.addClass('edit_answer');
      top.find('.all_replies').show();
      top.find('.compose_reply').hide();
      top.find('.discussion_replies.new_reply').show();
      PEM.fire("injectEditor", {
        where: $("#followup_reply_" + id),
        postfix: "followup_reply_" + id,
        text: "",
        anonymity: P.clarifying_discussion.content.default_anonymity,
        save: function(text, anon){
          P.clarifying_discussion.updateEndorsementLinks("followup_reply_" + id);
          return P.clarifying_discussion.postFollowupReply(id, text, anon);
        },
        cancel: function(){
          P.clarifying_discussion.updateEndorsementLinks();
          P.clarifying_discussion.cancelFollowupReply(top);
        },
        height: 100,
        saveText: "post"
      });
      P.clarifying_discussion.updateEndorsementLinks();
      return false;
    });
    $('.clarifying_discussion .resolve_unresolve_actions').unbind().change(function(){
      var top = $(this).closest('.clarifying_discussion');
      var resolve = top.hasClass("unresolved");
      P.clarifying_discussion.markResolved(top, resolve);
      return false;
    });
    $(".followup_region_arrow_dropdown").unbind().hover(
      function() {
        $(this).find(".dropdown-menu").show();
      }, function() {
        $(this).find(".dropdown-menu").hide();
      }
    );
    $(".followup_region_arrow_dropdown.reply").unbind().hover(
      function() {
        $(this).find(".dropdown-menu").show();
      }, function() {
        $(this).find(".dropdown-menu").hide();
      }
    );
    $('.discussion_content .class_badge').tooltip({
      'placement': 'right',
      'container': 'body',
      'title': 'Instructor-endorsed answerer in this class'
    });
    $('.discussion_content .piazza_badge').tooltip({
      'placement': 'right',
      'container': 'body',
      'title': 'Instructor-endorsed answerer on Piazza'
    });
    P.renderer.ensureSyntaxHighlighting();
  },
  updateEndorsementLinks: function(arg) {
    if (!P.text_editor) return;
    for (var postfix in P.text_editor.active) {
      if (postfix.indexOf("followup") >= 0 && postfix !== arg) {
        $(".followup_actions").css("visibility", "hidden");
        return;
      }
    }
    $(".followup_actions").css("visibility", "");
  },
  deleteItem: function(id, type) {
    if (id) {
      var title = "Are you sure you want to delete this reply?";
      if (type == "discussion")
        title = "Are you sure you want to delete this followup discussion and all its replies?"
      var params = {
        title: title,
        confirm: "Delete",
        cancel: "Cancel",
        callback: function() {
          PA.call_pj("content.delete", {cid:id}, null, function(data){
            $('#' + id).hide();
          }, function(err) {setTimeout(function() {alert(err);}, 1000)});
        }
      }
      PEM.fire("showConfirmationWindow", params);
    }
  },
  markResolved: function(top, resolved) {
    var fid = top.attr('id');
    PA.call_pj('content.mark_resolved', {cid:fid, resolved:resolved}, top, function(data) {
      var f = P.clarifying_discussion.followups[fid];
      f.no_answer = data.no_answer;
      P.clarifying_discussion.fixResolveState(f);
    }, function(err) {
      alert(err);
      var add = "";
      if (resolved) add = "un";
      $('#' + add + 'resolved_' + fid).attr('checked', true);
    });
  },
  reShowFollowup: function(id) {
    var top = $('#' + id);
    if (top) {
      var f = P.clarifying_discussion.followups[id];
      f.top_nr = P.clarifying_discussion.content.nr;
      f.message_idx = P.clarifying_discussion.getFollowupIndex(f.id);
      f.followup_share_always_on = P.clarifying_discussion.network.config.disable_followup_resolve
      top.replaceWith(P.clarifying_discussion.messageTemplate(f));
      P.clarifying_discussion.initHandlers();
      P.renderer.renderMath(id);
    }
  },
  markGoodFollowup: function(id) {
    PA.call_pj('content.add_feedback', {cid: id, type: "tag_good"}, 1, function(data) {
      var item = P.clarifying_discussion.followups[id] ? P.clarifying_discussion.followups[id] : P.clarifying_discussion.replies[id];
      if (!item.tag_good_arr) item.tag_good_arr = [];
      item.tag_good_arr.push(P.clarifying_discussion.user.id);
      if (!item.tag_good) item.tag_good = [];
      item.tag_good.push({name: P.clarifying_discussion.user.name});
      var topLevelId = item.type == 'feedback' ? $('#' + id).closest('.clarifying_discussion').attr("id") : id;
      P.clarifying_discussion.reShowFollowup(topLevelId);
      var numEndorsements = P.clarifying_discussion.numEndorsements();
      $('.num_endorsement_top').text(numEndorsements == 0 ? "" : numEndorsements + " endorsed followup comment" + (numEndorsements == 1 ? "" : "s"));
    }, function(err) {
      alert(err);
    });
  },
  undoMarkGoodFollowup: function(id) {
    PA.call_pj('content.remove_feedback', {cid: id, type: "tag_good"}, 1, function(data) {
      var item = P.clarifying_discussion.followups[id] ? P.clarifying_discussion.followups[id] : P.clarifying_discussion.replies[id];

      var idx = item.tag_good_arr.indexOf(P.clarifying_discussion.user.id);
      if (idx !== -1) item.tag_good_arr.splice(idx, 1);
      idx = -1;
      for(var i = 0; i < item.tag_good.length; i++) {
        if(item.tag_good[i].name == P.clarifying_discussion.user.name) {
          idx = i;
          break;
        }
      }
      if (idx !== -1) item.tag_good.splice(idx, 1);

      var topLevelId = item.type == 'feedback' ? $('#' + id).closest('.clarifying_discussion').attr("id") : id;
      P.clarifying_discussion.reShowFollowup(topLevelId);
      var numEndorsements = P.clarifying_discussion.numEndorsements();
      $('.num_endorsement_top').text(numEndorsements == 0 ? "" : numEndorsements + " endorsed followup comment" + (numEndorsements == 1 ? "" : "s"));
    }, function(err) {
      alert(err);
    });
  },
  setNetwork: function(network) {
    P.clarifying_discussion.network = network;
  },
  setUser: function(user) {
    P.clarifying_discussion.user = user;
  },
  setContent: function(content) {
    P.clarifying_discussion.content = content;
    if (!content) return;
    if (content.status && content.status == 'deleted') return;
    P.clarifying_discussion.prepareChildren(content);
    if (content.noFollowups)
      $('#clarifying_discussion').html("");
    else {
      var param = {
        content:P.clarifying_discussion.content,
        network:P.clarifying_discussion.network,
        user:P.clarifying_discussion.user
      };
      $('#clarifying_discussion').replaceWith(P.clarifying_discussion.template(param));
      P.clarifying_discussion.initHandlers();
      P.renderer.renderMath(content.id);
    }
  },
  cancelFollowupReply: function(top) {
    top.removeClass('edit_answer');
    top.find('.discussion_replies.new_reply').hide();
    top.find('.start_reply').show();
  },
  postFollowupReply: function(id, text, anon) {
    if (text.length == 0) {
      alert("You cannot make an empty post");
      return false;
    }
    P.clarifying_discussion.cancelFollowupReply($('#' + id));
    PA.call_pj('content.create', {
      cid:id,
      subject:text,
      nid:P.clarifying_discussion.network.id,
      type:'feedback',
      anonymous:anon}, $('#' + id),
      function(data) {
        // do nothing. Push should take care of this (?)
        if (P.clarifying_discussion.followups[id] && !P.clarifying_discussion.replies[data.id]) {
          P.clarifying_discussion.insertReply(id, data);
        }
        P.clarifying_discussion.content.is_bookmarked = true;
        PEM.fire("setAnonymity", anon);
    }, function(err) {
      alert(err);
    });
    return true;
  },
  postFollowup: function(text, anon) {
    if (text.length == 0) {
      alert("You cannot make an empty post");
      return false;
    }
    $('#create_new_followup_div').hide();
    $('#create_new_followup').show();
    var config = {};
    if ($("#ionly_new_followup").attr("checked") && P.clarifying_discussion.user.isInst) {
      config.ionly = true;
    }
    PA.call_pj("content.create", {
      nid:P.clarifying_discussion.network.id,
      cid:P.clarifying_discussion.content.id,
      type:'followup',
      subject:text,
      content:"", anonymous:anon,
      config:config
    },
      $('#clarifying_discussion'),
      function(data) {
        P.clarifying_discussion.addFollowup(data);
        P.clarifying_discussion.content.is_bookmarked = true;
        PEM.fire("setAnonymity", anon);
    }, function(error) {
      alert(error);
    });
    return true;
  },
  getFollowupIndex: function(id) {
    var idx = 1;
    var iidx = 1;
    for(var i = 0; i < P.clarifying_discussion.content.followups.length; i++) {
      var followup = P.clarifying_discussion.content.followups[i];
      if (id == followup.id) {
        if (followup.config.ionly) return "if" + iidx;
        return "f" + idx;
      }
      if (followup.config.ionly) {
        iidx += 1;
      } else {
        idx += 1;
      }
    }
    return -1;
  },
  copyFollowupAt: function(elem) {
    var idx = elem.id.replace('at_ref_', '');
    copyToClipboard('@' + P.clarifying_discussion.content.nr + '_' + idx);
    $('#link_copied_' + idx).show();
    $('#link_copied_' + idx).html("@" + P.note_view.content.nr + '_' + idx + " copied");
    setTimeout(function() {
      $('#link_copied_' + idx).hide();
    }, 4000)
  },
  copyFollowupLink: function(elem) {
    var idx = elem.id.replace('link_icon_', '');
    copyToClipboard('https://piazza.com/class/' + P.clarifying_discussion.network.id + '?cid=' + P.clarifying_discussion.content.nr + '_' + idx);
    $('#link_copied_' + idx).show();
    $('#link_copied_' + idx).html("URL copied");
    setTimeout(function() {
      $('#link_copied_' + idx).hide();
    }, 4000)
  },
  addFollowup: function(newContent) {
    if (!P.clarifying_discussion.followups[newContent.id]) {
      if (!P.clarifying_discussion.content.children)
        P.clarifying_discussion.content.children = [];
      newContent.inst = false;
      if (P.clarifying_discussion.network.prof_hash && P.clarifying_discussion.network.prof_hash[newContent.uid])
        newContent.inst = true;
      P.clarifying_discussion.content.children.push(newContent);
      P.clarifying_discussion.content.followups.push(newContent);
      P.clarifying_discussion.followups[newContent.id] = newContent;
      newContent.user = P.clarifying_discussion.user;
      newContent.top_nr = P.clarifying_discussion.content.nr;
      newContent.followup_share_always_on = P.clarifying_discussion.network.config.disable_followup_resolve
      newContent.message_idx = P.clarifying_discussion.getFollowupIndex(newContent.id);
      $('#start_new_followup_header').before(P.clarifying_discussion.messageTemplate(newContent));
      P.clarifying_discussion.initHandlers();
      P.renderer.renderMath(newContent.id);
    }
  },
  fixResolveState: function(f) {
    if (f.no_answer) {
      $('#' + f.id).addClass("unresolved");
      $('#' + f.id + " .discussion_action.mark_unresolved").removeClass("mark_unresolved").addClass("mark_resolved").html("mark as resolved");
      $('#unresolved_' + f.id).attr('checked', true);
    } else {
      $('#' + f.id).removeClass("unresolved");
      $('#' + f.id + " .discussion_action.mark_resolved").removeClass("mark_resolved").addClass("mark_unresolved").html("mark as unresolved");
      $('#resolved_' + f.id).attr('checked', true);
    }
  },
  prepareChildren: function(content) {
    var followups = [];
    P.clarifying_discussion.followups = {};
    P.clarifying_discussion.replies = {};
    P.clarifying_discussion.followupsSort = [];
    P.clarifying_discussion.repliesSort = [];
    if (content.children && content.children.length > 0) {
      for (var i = 0; i < content.children.length; i++) {
        if (content.children[i].type == "followup") {
          var f = content.children[i];
          f.inst = false;
          if (P.clarifying_discussion.network.prof_hash && P.clarifying_discussion.network.prof_hash[f.uid])
            f.inst = true;
          f.subject = P.text_editor.convertOriginalToBase(f.subject);
          followups.push(f);
          P.clarifying_discussion.followups[f.id] = f;
          P.clarifying_discussion.followupsSort.push({id:f.id,u:f.updated,config:f.config});
          for (var j = 0; j < f.children.length; j++) {
            if (f.children[j].type == "feedback") {
              f.children[j].canShow = true;
              f.children[j].inst = false;
              if (P.clarifying_discussion.network.prof_hash && P.clarifying_discussion.network.prof_hash[f.children[j].uid])
                f.children[j].inst = true;
              f.children[j].subject = P.text_editor.convertOriginalToBase(f.children[j].subject);
              P.clarifying_discussion.replies[f.children[j].id] = f.children[j];
              P.clarifying_discussion.repliesSort.push({id:f.children[j].id,u:f.children[j].updated});
            }
            if (f.children[j].type == "dupe")
              f.dupe = f.children[j];
          }
        }
      }
    }
    content.followups = followups;
    var sortF = function(a,b){
      if (a.u > b.u) return -1;
      if (a.u < b.u) return 1;
      return 0;
    };
    P.clarifying_discussion.followupsSort = P.clarifying_discussion.followupsSort.sort(sortF);
    P.clarifying_discussion.repliesSort = P.clarifying_discussion.repliesSort.sort(sortF);
  },
  insertReply: function(pid, newContent) {
    var f = P.clarifying_discussion.followups[pid];
    if (f) {
      if (!f.children) f.children = [];
      newContent.inst = false;
      newContent.canShow = true;
      if (P.clarifying_discussion.network.prof_hash && P.clarifying_discussion.network.prof_hash[newContent.uid])
        newContent.inst = true;
      f.children.push(newContent);
      P.clarifying_discussion.replies[newContent.id] = newContent;
      $('#' + pid + ' .compose_reply').before(P.clarifying_discussion.replyTemplate(newContent));
      $('#' + pid + ' .num_replies').removeClass("start_reply").addClass("show_reply").html("view " + f.children.length + " " + (f.children.length == 1 ? "reply" : "replies"));
      P.clarifying_discussion.initHandlers();
      P.renderer.renderMath(newContent.id);
    }
  },
  pushContentMessage: function(message) {
    if (!P.clarifying_discussion.content) return;
    if (message.content && message.parent) {
      var pid = message.parent; // where this should go
      var newContent = message.content;
      if (message.action === 'create' && newContent.type === 'followup') {
        P.clarifying_discussion.addFollowup(newContent);
      }
      if (message.action === 'update' && newContent.type === 'followup') {
        if (P.clarifying_discussion.followups[newContent.id]) {
          var f = P.clarifying_discussion.followups[newContent.id];
          var needUpdate = (f.subject != newContent.subject);
          for (var key in newContent)
            f[key] = newContent[key];
          P.clarifying_discussion.prepareChildren(P.clarifying_discussion.content);
          // update subject
          if (needUpdate) {
            P.clarifying_discussion.updateFollowupText(f.id, f.subject);
          }
          // update resolved state
          P.clarifying_discussion.fixResolveState(f);
        }
      }
      if (message.action === 'create' && newContent.type === 'feedback') {
        if (!P.clarifying_discussion.replies[newContent.id]) {
          P.clarifying_discussion.insertReply(pid, newContent);
        }
      }
      if (message.action === 'update' && newContent.type === 'feedback') {
        if (P.clarifying_discussion.replies[newContent.id]) {
          var r = P.clarifying_discussion.replies[newContent.id];
          var needUpdate = (r.subject != newContent.subject);
          for (var key in newContent)
            r[key] = newContent[key];
          // just update subject
          if (needUpdate) {
            P.clarifying_discussion.updateReplyText(r.id, r.subject);
          }
        }
      }
    }
  },
  updateReplyText: function(id, subject) {
    var el = $('#' + id + " .actual_reply_text");
    el.html(PEM.callFirst("makeHtml", {text: subject}));
    P.renderer.renderMath(el[0]);
    P.renderer.ensureSyntaxHighlighting();
  },
  updateFollowupText: function(id, subject) {
    var el = $('#' + id + " .actual_text");
    el.html(PEM.callFirst("makeHtml", {text: subject}));
    P.renderer.renderMath(el[0]);
    P.renderer.ensureSyntaxHighlighting();
  },
  hideHistoryHighlight: function() {
    $('.discussion_replies.existing_reply').css("border", "none");
    $('.clarifying_discussion.clearFix:not(.new):not(.private)').css("border-top", "none");
    $('.clarifying_discussion.clearFix:not(.new):not(.private)').css("border-bottom", "none");
    $('.clarifying_discussion.clearFix.private').css("border-top-color", "#666");
    $('.clarifying_discussion.clearFix.private').css("border-bottom-color", "#666");
  },
  showHistory: function(history) {
    $('.discussion_replies.existing_reply').show();
    for (var i = 0; i < history.hide_feedbacks; i++) {
      if (i < P.clarifying_discussion.repliesSort.length)
        $('#' + P.clarifying_discussion.repliesSort[i].id).hide();
    }
    $('.clarifying_discussion.clearFix:not(.new)').show();
    for (var i = 0; i < history.hide_followups; i++) {
      if (i < P.clarifying_discussion.followupsSort.length)
        $('#' + P.clarifying_discussion.followupsSort[i].id).hide();
    }
    P.clarifying_discussion.hideHistoryHighlight();
    if (history.highlight == "followup") {
      var curFollowup = history.hide_followups || 0;
      if (curFollowup < P.clarifying_discussion.followupsSort.length) {
        var f = P.clarifying_discussion.followupsSort[curFollowup];
        if (f.config && f.config.ionly) {
          $('#' + f.id).css("border-top-color","#0f0");
          $('#' + f.id).css("border-bottom-color", "#0f0");
        } else {
          $('#' + f.id).css("border-top","2px solid #0f0");
          $('#' + f.id).css("border-bottom", "2px solid #0f0");
        }
        $('.main_panel').scrollTo('#' + f.id);
      }
    }
    if (history.highlight == "feedback") {
      var curFeedback = history.hide_feedbacks || 0;
      if (curFeedback < P.clarifying_discussion.repliesSort.length) {
        $('#' + P.clarifying_discussion.repliesSort[curFeedback].id).css("border-top","2px solid #0f0");
        $('#' + P.clarifying_discussion.repliesSort[curFeedback].id).css("border-bottom", "2px solid #0f0");
        $('.main_panel').scrollTo('#' + P.clarifying_discussion.repliesSort[curFeedback].id);
      }
    }
  },
  isEndorsedByMe: function(followup) {
    return followup && followup.tag_good_arr && followup.tag_good_arr.indexOf(P.clarifying_discussion.user.id) >= 0;
  },
  hasEndorsement: function(followup) {
    return followup && followup.tag_good_arr && followup.tag_good_arr.length > 0 && followup.tag_good_arr.filter(function(endorser) {return P.clarifying_discussion.network.prof_hash[endorser];}).length > 0;
  },
  firstEndorser: function(followup) {
    for (var i = 0; i < followup.tag_good_arr.length; i++) {
      if (P.clarifying_discussion.network.prof_hash[followup.tag_good_arr[i]]) {
        return PA.getUserName(followup.tag_good_arr[i], false, undefined, undefined, true);
      }
    }
    return "";
  },
  numHelpful: function(followup) {
    return followup.tag_good_arr ? followup.tag_good_arr.length : 0;
  },
  numEndorsements: function() {
    var count = 0;
    for (var key in P.clarifying_discussion.followups) {
      if (P.clarifying_discussion.followups.hasOwnProperty(key)) {
        var followup = P.clarifying_discussion.followups[key];
        if (followup.tag_good_arr && followup.tag_good_arr.length > 0 && followup.tag_good_arr.filter(function(endorser) {return P.clarifying_discussion.network.prof_hash[endorser];}).length > 0) {
          count += 1;
        }
        for(var i = 0; i < followup.children.length; i++) {
          var child = followup.children[i];
          if (child.tag_good_arr && child.tag_good_arr.length > 0 && child.tag_good_arr.filter(function(endorser) {return P.clarifying_discussion.network.prof_hash[endorser];}).length > 0) {
            count += 1;
          }
        }
      }
    }
    return count;
  },
  init: function(module) {
    P.clarifying_discussion.template = module.template;

    PEM.addListener("content", P.clarifying_discussion.setContent);
    PEM.addListener("network", P.clarifying_discussion.setNetwork);
    PEM.addListener("pushContentMessage", P.clarifying_discussion.pushContentMessage);

    PEM.addListener("history", P.clarifying_discussion.showHistory);
    PEM.addListener("hideHistoryHighlight", P.clarifying_discussion.hideHistoryHighlight);

    PTM.getModuleTemplate("clarifying_discussion", "message", function(template) {P.clarifying_discussion.messageTemplate = template;});
    PTM.getModuleTemplate("clarifying_discussion", "reply", function(template) {P.clarifying_discussion.replyTemplate = template;});

    Handlebars.registerHelper('followupMessage', function(element) {
      if (P.clarifying_discussion.messageTemplate) {
        element.user = P.clarifying_discussion.user;
        element.top_nr = P.clarifying_discussion.content.nr;
        element.followup_share_always_on = P.clarifying_discussion.network.config.disable_followup_resolve
        element.message_idx = P.clarifying_discussion.getFollowupIndex(element.id);  
        element.disabledHistory = P.clarifying_discussion.content.disabledHistory;
        return P.clarifying_discussion.messageTemplate(element);
      }
      return "";
    });
    Handlebars.registerHelper('followupReply', function(element, isVisible) {
      if (P.clarifying_discussion.replyTemplate) {
        element.isVisible = isVisible;
        element.user = P.clarifying_discussion.user;
        element.disabledHistory = P.clarifying_discussion.content.disabledHistory;
        return P.clarifying_discussion.replyTemplate(element);
      }
      return "";
    });
    Handlebars.registerHelper('canEditFollowup', function(element, options) {
      if (PA.hasPermission("followup_edit") || element.uid == P.clarifying_discussion.user.id) {
        return options.fn(this);
      }
      return "";
    });
    Handlebars.registerHelper('followupResolveEnabled', function(element, options) {
      if (P.clarifying_discussion.network.config.disable_followup_resolve || (element.config && element.config.ionly)) {
        return ""
      } else {
        return options.fn(this)
      }
    });
    Handlebars.registerHelper('canDeleteFollowup', function(element, options) {
      if (PA.hasPermission("followup_edit")) {
        return options.fn(this);
      }
      return "";
    });
    Handlebars.registerHelper('isEndorsedByMe', function(element, options) {
      if (P.clarifying_discussion.isEndorsedByMe(element)) {
        return options.fn(this);
      }
      return options.inverse(this);
    });
    Handlebars.registerHelper('hasEndorsement', function(element, options) {
      if (P.clarifying_discussion.hasEndorsement(element)) {
        return options.fn(this);
      }
      return options.inverse(this);
    });
    Handlebars.registerHelper('firstEndorser', function(element, options) {
      if (P.clarifying_discussion.firstEndorser(element)) {
        return P.clarifying_discussion.firstEndorser(element);
      }
      return "";
    });
    Handlebars.registerHelper('numHelpful', function(element, options) {
      return P.clarifying_discussion.numHelpful(element);
    });
    Handlebars.registerHelper('numEndorsementsStr', function(element, options) {
      var numEndorsements = P.clarifying_discussion.numEndorsements();
      if (numEndorsements == 0) return "";
      return numEndorsements + " endorsed followup comment" + (numEndorsements == 1 ? "" : "s");
    });

    if (module.options.network)
      P.clarifying_discussion.network = module.options.network;
  }
};
function myFileBrowser (callback, value, meta) {
  P.modules.loadModule("upload_manager", {}, function() {
    PEM.fire("showUploadManager", {submit: function (d) {
      callback(d);
    }});
  }, null);
}
var actualCaretPositionBookmark = null;
function LatexImageAlign(evt) {
  var img;
  try {
    img = evt.currentTarget;
    img = (evt.currentTarget) ? evt.currentTarget : evt.srcElement;
  } catch (err) {
    return;
  }
  var h = img.naturalHeight;
  if (h > 16)
    $(img).css("vertical-align", "middle");
}
P.text_editor = {
  template: null,
  converter: null,
  callbacks: {},
  active: {},
  oldText: {},
  tinymceInit: false,
  user: null,
  dollars: "$$$$",
  TOKEN_TYPE : {LATEX: 0, MDSTART: 1, MDEND: 2, PRESTART: 3, PREEND: 4, TEXT: 10, EOF: 11},
  TEXT_TYPE :{HTML: 0, MD: 1, PRE: 2, LATEX: 3},
  setUser: function(user) {
    P.text_editor.user = user;
  },
  setNetwork: function(network) {
    P.text_editor.network = network;
  },
  getCurrentEditor: function () {
    if (!P.text_editor.default_editor) {
      P.text_editor.default_editor = P.text_editor.getDefaultEditor();
    }
    P.text_editor.isRich = P.text_editor.default_editor === "rte";
    return P.text_editor.default_editor;
  },
  getDefaultEditor: function () {
    if (P.text_editor.user && P.text_editor.user.config) {
      return P.text_editor.user.config.default_editor || "rte";
    } else {
      return "rte";
    }
  },
  setCurrentEditor: function (ed, save) {
    P.text_editor.default_editor = ed;
    if (save) {
      PA.call_pj("user.update", {"default_editor": ed}, 1);
      if (P.text_editor.user) {
        if (P.text_editor.user.config) {
          P.text_editor.user.config.default_editor = ed;
        } else {
          P.text_editor.user.config = {default_editor: ed};
        }
      } else {
        P.text_editor.user = {config: {default_editor: ed}};
      }
      $("#incompatible_editor_warning").hide();
    }
    P.text_editor.isRich = P.text_editor.default_editor === "rte";
  },
  createEditor: function(options) {
    if (!options.height || options.height < 200) options.height = 200;
    if (options.noAnonymity)
      options.anon = false;
    else {
      options.anon = P.text_editor.getAnonymityOptions();
      options.old_anon = $("#anon_" + options.postfix).val();
    }
    var curEditor = P.text_editor.getCurrentEditor();

    if (P.text_editor.isRich) {
      options.text = P.text_editor.prepareForRich(options.text);
    } else if (curEditor === "md") {
      options.text = P.text_editor.prepareForMd(options.text);
    } else {
      options.text = P.text_editor.prepareForPlain(options.text);
    }
    var showTip = false;
    if (!PA.isSeenUser("at_tip") && PA.user.config.logins > 30 && PA.user.id < "iwg" && P.text_editor.isRich &&
      !P.top_bar.network.config.disable_mentions && (P.top_bar.user.isInst || P.top_bar.network.config.enable_mentions_students))
      showTip = true;
    options.where.html(P.text_editor.template({
      options: options,
      network: P.text_editor.network,
      isRich: P.text_editor.isRich,
      editor: curEditor,
      showTip: showTip
    }));
    if (options.old_anon) {
      $("#anon_" + options.postfix).val(options.old_anon);
    }
    $('#rich_' + options.postfix).val(options.text);
    $('#rich_' + options.postfix).bind('paste', P.text_editor.dropOrPaste);
    $('#rich_' + options.postfix).bind('drop', P.text_editor.dropOrPaste);
    $('#rich_' + options.postfix).bind('dragover', function(event){ event.preventDefault(); });

    if (options.warn) {
      $("#incompatible_editor_warning").show();
    } else {
      $("#incompatible_editor_warning").hide();
    }
    if (P.text_editor.active[options.postfix])
      P.text_editor.cancelActive(options.postfix);
    if (P.text_editor.isRich) {
      tinymce.execCommand('mceAddEditor', true, 'rich_' + options.postfix);
    } else {
      P.text_editor.oldText[options.postfix] = $('#rich_' + options.postfix).val();
      $("#rich_" + options.postfix).focus();
    }
    P.text_editor.callbacks[options.postfix] = options;
    P.text_editor.active[options.postfix] = options.postfix;
    if(P.top_bar.user.isInst >= 5) {
      $('.inst_only_tag_helper').show();
      $('.stud_only_tag_helper').hide();
    }
  },
  closeHelpTip: function() {
    $('.new_feature_notification_wrapper').hide();
    PA.markSeenUnseen("at_tip");
    return false;
  },
  getAnonymityOptions: function() {
    var anon = false;
    if (PA.hasPermission("can_post_anonymous_all") || PA.hasPermission("can_post_anonymous_members")) {
      anon = [{title:PA.user.name, val:"no"}];
      if (PA.hasPermission("can_post_anonymous_members") && P.modules.network && !P.modules.network.isGroup)
        anon.push({title:"Anonymous to Classmates", val:"stud"});
      if (PA.hasPermission("can_post_anonymous_all"))
        anon.push({title:"Anonymous to everyone", val:"full"});
    }
    return anon;
  },
  save: function(postfix) {
    if (P.text_editor.callbacks[postfix] && P.text_editor.callbacks[postfix].save) {
      if (P.text_editor.callbacks[postfix].save(P.text_editor.getEditorText(postfix), P.text_editor.getEditorAnonymity(postfix)) === false) return;
    }
    P.text_editor.cancelActive(postfix);
    return false;
  },
  cancel: function(postfix) {
    var newContent = $('#rich_' + postfix).val();
    if (P.text_editor.isRich)
      newContent = tinymce.get('rich_' + postfix).getContent();
    if (newContent !== '' && newContent !== P.text_editor.oldText[postfix]) {
      if (postfix === 'old_new_post')
        PEM.fire("verifyCancelNewPost", function(){P.text_editor.doCancel({postfix: postfix})});
      else
        PEM.fire("verifyCancel", function(){P.text_editor.doCancel({postfix: postfix})});
    } else {
      P.text_editor.doCancel({postfix: postfix});
    }
    return false;
  },
  doCancel: function(params) {
    P.text_editor.cancelActive(params.postfix);
    if (P.text_editor.callbacks[params.postfix] && P.text_editor.callbacks[params.postfix].cancel)
      P.text_editor.callbacks[params.postfix].cancel(params.hideHomeScreen);
    return false;
  },
  cancelActive: function(postfix) {
    if (typeof(tinymce) != "undefined") {
      $(".auto-list").hide();
      tinymce.execCommand('mceRemoveEditor', true, 'rich_' + postfix);
    }
    delete (P.text_editor.active[postfix]);
  },
  cancelAll: function() {
    for (var postfix in P.text_editor.active) {
      if (P.text_editor.callbacks[postfix] && P.text_editor.callbacks[postfix].cancel)
        P.text_editor.callbacks[postfix].cancel();
      P.text_editor.cancelActive(postfix);
    }
  },
  hasActiveEditor: function(keepOpen) {
    for (var postfix in P.text_editor.active) {
      if (postfix === 'old_new_post') return postfix;
      var newContent = P.text_editor.getEditorText(postfix);
      if (!newContent || newContent === P.text_editor.oldText[postfix]) {
        P.text_editor.cancelActive(postfix);
      } else {
        if (newContent !== '' && newContent !== P.text_editor.oldText[postfix]) return postfix;
      }
    }
    return false;
  },
  makeHtml: function(option) {
    var text = option.text;
    return P.text_editor.convertBaseToHtml(text, option.pollOptions, option.preview);
  },
  makeLaTeX: function(src, toHTML) {
    var content_text = src;
    content_text = content_text.replace(/<\/span>/g, "");
    content_text = content_text.replace(/<span[^>]*>/g, "");
    content_text = $("<span>" + content_text + "</span>").html();  // escape weird characters
    content_text = content_text.replace(/&lt;/g, "<");
    content_text = content_text.replace(/&gt;/g, ">");
    content_text = content_text.replace(/&amp;/g, "&");
    content_text = content_text.replace(/&quot;/g, '"');
    content_text = content_text.replace(/&nbsp;/g, ' ');
    content_text = content_text.replace(/<br\s*\/?>/g, "\n");
    content_text = content_text.replace(/<p>/g, "");
    content_text = content_text.replace(/<\/p>/g, "\n");
    if (toHTML) {
      content_text = content_text.replace(/\n$/, "<br/>&nbsp;");
      content_text = content_text.replace(/\n/g, "<br/>");
    }
    return content_text;
  },
  makeHtmlFromBase: function (text, is_preview) {
    text = text.trim();
    if (P.text_editor.looksLikePlain(text)) {
      text = text
        .replace(/\b(span|strong|em|i|b|sup|sub|code|samp|kbd|var|small|ins|del|mark|a|q|img [^>]*?)>[\t ]*\n\n\n+/gi, "$1><br><br><br>")
        .replace(/\b(span|strong|em|i|b|sup|sub|code|samp|kbd|var|small|ins|del|mark|a|q|img [^>]*?)>[\t ]*\n\n/gi, "$1><br><br>")
        .replace(/\b(span|strong|em|i|b|sup|sub|code|samp|kbd|var|small|ins|del|mark|a|q|img [^>]*?)>[\t ]*\n/gi, "$1><br>")
        .replace(/([^>\n])\n\n\n+(?!<(ul|li|ol|table|p)\b)/g, "$1<br><br><br>")
        .replace(/([^>\n])\n\n(?!<(ul|li|ol|table|p)\b)/g, "$1<br><br>")
        .replace(/([^>\n])\n(?!<(ul|li|ol|table|p)\b)/g, "$1<br>")
        .replace(/^\n\n\n+/gm, "<br><br>")
        .replace(/^\n\n/gm, "<br><br>")
        .replace(/^\n/gm, "<br>");
    }
    if (is_preview) {
      // escape weird characters and drop all scripts
      return $("<div>" + text + "</div>").html();
    } else {
      return text;
    }
  },
  updateLinksInHtml: function(html) {
    var pageUrl = "/class/";
    var prop = "";
    if(typeof(NETWORK) === "undefined") {
      if (P.modules && P.modules.network) {
        pageUrl += P.modules.network.id;
        prop = "onclick=\"return PEM.fire(\'selectContent\', \'$3\')\"";
      }
    } else {
      prop = " target=\"_blank\" rel=\"noreferrer\"";
      pageUrl += NETWORK.id;
    }
    return html
        // treat all relative links (without scheme) as absolute https.
        .replace(/<a href="(?!\w+:)([^\/].*?)"/g, "<a href=\"https://$1\"")
        // create links for contents and followups.
        .replace(/(\B|ooY)(@|&#64;)(\d+(_f\d+)?)(\b|(?=q38))/g, '$1<a href="' + pageUrl + '?cid=$3" '+ prop + '>@$3</a>')
        .replace(/(\B|ooY)(@|&#64;)(\d+(_if\d+)?)(\b|(?=q38))/g, '$1<a href="' + pageUrl + '?cid=$3" '+ prop + '>@$3</a>')
        // link target always blank.
        .replace(/(<a href="[^"]*")>/gi, '$1 target="_blank">')
        .replace(/target="_blank"/gi, 'target="_blank" rel="noreferrer"')
        // force all youtube links to https.
        .replace(/"http:\/\/((\w+\.)*youtu(be([-\w]+)?(\.\w+)+|\.be)\/)/gi, "\"https://$1")
        // replace URLs with links, except directly following a quote character or > (except br> inserted by makeHtmlFromBase)
        // URLs are defined as http or https, followed by ://, followed by a sequence of non-whitespace, non-bracket, non-double quote characters, followed by one word character or certain punctuation
        // the text immediately after a URL must be whitespace; a newline; end of input; a comma, period, or colon followed by one of the first three; or a closing parenthesis or HTML-escaped > followed by an optional period, comma, colon or semicolon followed by one of the first three
        .replace(/(^|\s|br>)(https?:\/\/(\([^\s<>\[\]"'\)]*\)|[^ \t\n<>\[\]"'()])+?(\([^\s<>\[\]"'\)]*\)|[\w\/?=)}#&%-]))(?=$|<br|<\/|\s|([\]\)]|&gt;)[\.,:;?!"']*(\s|<br|<\/|$)|[\.,:;!"']+(\s|<br|<\/|$))(?!<\/a)/g, '$1<a href="$2" target="_blank">$2</a>')
  },
  postSanitize: function(pre, html, pollOptions, is_preview) {
    var ret;
    switch (pre.type) {
      case P.text_editor.TEXT_TYPE.LATEX:
        ret = "$$" + pre.text + "$$";
        break;
      case P.text_editor.TEXT_TYPE.MD:
        if (typeof(html) === "string") {
          ret = P.text_editor.updateLinksInHtml(html).replace(/<p>/g, "<p style=\"margin-bottom:20px;\">");
        } else {
          ret = "<div id='" + pre.key + "' class='markdown'>Rendering markdown...</div>";
        }
        break;
      case P.text_editor.TEXT_TYPE.PRE:
        ret = pre.text;
        break;
      case P.text_editor.TEXT_TYPE.HTML:
        ret = P.text_editor.updateLinksInHtml(html);
        break;
    }
    if (pollOptions) {
      var voteOnClick = is_preview ? "" : "onclick='PEM.fire(\"doVote\");'";
      // answersHtml += "<br/><button " + voteOnClick + " class='poll_button btn btn-mini'>Submit</button><br/><span id='poll_anonymity_placeholder'></span><br/>";

      ret = ret
      .replace(/\[\[\[radio-([a-zA-Z0-9]+)]]]/g, "<input type='radio' class='poll_button' name='poll_radio_button' id='poll_button$1'/>&nbsp;")
      .replace(/\[\[\[checkbox-([a-zA-Z0-9]+)]]]/g, "<input type='checkbox' class='poll_button' name='poll_radio_button' id='poll_button$1'/>&nbsp;")
      .replace(/\[\[\[submit_vote]]]/, "<br/><br/><button " + voteOnClick + " class='poll_button btn btn-mini' data-pats='submit_poll_button'>Submit</button><br/><span id='poll_anonymity_placeholder'></span><br/>");
    }
    for (var i = 0; i < pre.pres.length; i++) {
      ret = ret.replace(pre.pres[i].key, P.text_editor.postSanitize(pre.pres[i]).replace(/\$/g, P.text_editor.dollars), is_preview);
    }
    return ret;
  },
  pollQuestionToHtml: function(question, is_preview) {
    const type = question.type;
    const answers = question.answers;

    var answersHtml = "\n";
    for (var i = 0; i < answers.length; i++) {
      var answer = answers[i];
      if (answer.deleted) continue;

      var choice = "[[[checkbox-"+answer.id+"]]]";
      if (type == "radio") {
        choice = "[[[radio-"+answer.id+"]]]";
      }
      answersHtml += "\n" + "<span data-pats='poll_radio_button'>" + choice + answer.text + "</span>"; 
    }
    answersHtml += "\n\n[[[submit_vote]]]";
    return answersHtml;
  },
  convertBaseToHtml: function(html, pollOptions, is_preview) {
    var _preSanitize = function(pre) {
      switch (pre.type) {
        case P.text_editor.TEXT_TYPE.LATEX:
          pre.text = pre.text
            .replace(/begin{tabular}/g, 'begin{array}')
            .replace(/end{tabular}/g, 'end{array}')
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;");
          break;
        case P.text_editor.TEXT_TYPE.MD:
          pre.text = P.text_editor.makeHtmlFromMd(pre.text);
          break;
        case P.text_editor.TEXT_TYPE.PRE:
          pre.text =
            "<div class=\"pre_wrapper\"><pre class=\"prettyprint\">" +
            pre.text +
            "</pre></div>";
          break;
        case P.text_editor.TEXT_TYPE.HTML:
          pre.text = P.text_editor.makeHtmlFromBase(pre.text, is_preview);
          break;
      }
      for (var i = 0; i < pre.pres.length; i++) {
        _preSanitize(pre.pres[i]);
      }
    };
    if (!html) return "";

    if (pollOptions) {
      const question = pollOptions.question
      html += this.pollQuestionToHtml(question);
    }

    var parsed = P.text_editor.parseContent(html);
    _preSanitize(parsed);
    html = parsed.text;
    var needToSanitize = {};
    var subpres = {};
    var call_sanitize = false;
    for (var i = 0; i < parsed.pres.length; i++) {
      if (parsed.pres[i].type === P.text_editor.TEXT_TYPE.MD) {
        needToSanitize[parsed.pres[i].key] = parsed.pres[i].text;
        subpres[parsed.pres[i].key] = parsed.pres[i];
        call_sanitize = true;
      }
    }
    if (call_sanitize) {
      P.renderer.setRenderInProgress();
      PA.call_pj("generic.sanitize_html", needToSanitize, 1, function (result) {
        for (var id in result) {
          var liveHtml = $('<div></div>').html(result[id]);
          $('table', liveHtml).each(function () {
            var table = $(this);
            // table bootstrap classes
            table.addClass('table table-striped table-bordered')
                // make table responsive
                .wrap('<div class="class table-responsive" ></div>');
          });
          html = P.text_editor.postSanitize(subpres[id], liveHtml.html(), pollOptions, is_preview);
          $('#' + id).html(html);
          P.renderer.renderMath(id);
        }
        P.renderer.ensureSyntaxHighlighting();
        P.renderer.setRenderComplete();
        if (pollOptions) {
          PEM.fire("poll_sanitized");
        }
      });
    }
    html = P.text_editor.postSanitize(parsed, html, pollOptions, is_preview);
    return html;
  },
  tokenize: function (text) {
    var TOKENS = [/^\$\$/, /^<md\b[^>]*>\n?/i, /^<\/md\s*>\n?/i, /^<pre\b[^>]*>\n?/i, /^<\/pre\s*>\n?/i];
    var pos = 0;
    var last_start = 0;
    var ret = [];
    while (pos < text.length) {
      for (var t = 0; t < TOKENS.length; t++) {
        var m = text.substring(pos).match(TOKENS[t]);
        if (m && m.length > 0) {
          if (last_start < pos) {
            ret.push({type: P.text_editor.TOKEN_TYPE.TEXT, begin: last_start, end: pos});
          }
          last_start = pos + m[0].length;
          ret.push({type: t, begin: pos, end: last_start});
          pos += m[0].length - 1;
          break;
        }
      }
      pos++;
    }
    if (last_start < text.length) {
      ret.push({type: P.text_editor.TOKEN_TYPE.TEXT, begin: last_start, end: text.length});
    }
    ret.push({type: P.text_editor.TOKEN_TYPE.EOF, begin: 0, end: 0});
    return ret;
  },
  idCounter: 0,
  getNextId: function () {
    return P.text_editor.idCounter++;
  },
  parseContent: function (text, latex_only) {
    var ret = {text: "", pres: [], type: P.text_editor.TEXT_TYPE.HTML};
    var state = P.text_editor.TEXT_TYPE.HTML;
    var start_token = 0;
    var current_token = 0;
    var tokens = P.text_editor.tokenize(text);
    while (current_token < tokens.length) {
      var tok = tokens[current_token];
      if (state === P.text_editor.TEXT_TYPE.HTML) {
        switch (tok.type) {
          case P.text_editor.TOKEN_TYPE.LATEX:
            start_token = current_token;
            state = P.text_editor.TEXT_TYPE.LATEX;
            break;
          case P.text_editor.TOKEN_TYPE.MDSTART:
            if (!latex_only) {
              start_token = current_token;
              state = P.text_editor.TEXT_TYPE.MD;
            }
            break;
          case P.text_editor.TOKEN_TYPE.PRESTART:
            start_token = current_token;
            state = P.text_editor.TEXT_TYPE.PRE;
            break;
          case P.text_editor.TOKEN_TYPE.TEXT:
            ret.text += text.substring(tok.begin, tok.end);
            break;
          default:
            // strip end tag without a start tag.
            break;
        }
      } else if (
        (tok.type === P.text_editor.TOKEN_TYPE.PREEND && state === P.text_editor.TEXT_TYPE.PRE && !latex_only) ||
        (tok.type === P.text_editor.TOKEN_TYPE.MDEND && state === P.text_editor.TEXT_TYPE.MD) ||
        (tok.type === P.text_editor.TOKEN_TYPE.LATEX && state === P.text_editor.TEXT_TYPE.LATEX))
      {// got closing tag for current state, replace it.
        var pre = {
          type: state,
          text: text.substring(tokens[start_token].end, tok.begin),
          pres: [],
          key: "q38kRj58oo" + P.text_editor.getNextId() + "ooY"
        };
        if (state === P.text_editor.TEXT_TYPE.MD) {
          var tmp = P.text_editor.parseContent(pre.text, true);
          pre.text = tmp.text;
          pre.pres = tmp.pres;
        }
        ret.pres.push(pre);
        ret.text += pre.key;
        state = P.text_editor.TEXT_TYPE.HTML;
      } else if (tok.type === P.text_editor.TOKEN_TYPE.PREEND && state === P.text_editor.TEXT_TYPE.PRE) {
        ret.text += text.substring(tokens[start_token].begin, tok.end);
        state = P.text_editor.TEXT_TYPE.HTML;
      } else if (tok.type === P.text_editor.TOKEN_TYPE.EOF) {
        // no closing tag for current state. Backtrack and restart parse as if plain.
        ret.text += text.substring(tokens[start_token].begin, tokens[start_token].end);
        current_token = start_token;
        state = P.text_editor.TEXT_TYPE.HTML;
      }
      // continue with next token.
      current_token++;
    }
    return ret;
  },
  prepareForRich: function(text) {
    if (!text) return "";
    var _escapeForHtml = function (text) {
      return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
    };
    var _prepareForRich = function(pre) {
      var ret;
      switch (pre.type) {
        case P.text_editor.TEXT_TYPE.LATEX:
          ret = "$$<latex class='piazza-latex-edit' ondblclick='window.parent.editSelectedLatex()'>" +
              _escapeForHtml(pre.text) +
              "</latex>$$";
          break;
        case P.text_editor.TEXT_TYPE.MD:
          ret = "<md>" + _escapeForHtml(pre.text).replace(/\n/g, "<br>") + "</md>";
          break;
        case P.text_editor.TEXT_TYPE.PRE:
          ret = "<pre>" + pre.text.replace(/\n/g, "<br>") + "</pre>";
          break;
        case P.text_editor.TEXT_TYPE.HTML:
          ret = P.text_editor.makeHtmlFromBase(pre.text, true);
          break;
      }
      for (var i = 0; i < pre.pres.length; i++) {
        ret = ret.replace(pre.pres[i].key, _prepareForRich(pre.pres[i]).replace(/\$/g, P.text_editor.dollars));
      }
      return ret;
    };
    var parsed = P.text_editor.parseContent(text);
    text = _prepareForRich(parsed).replace(/<\/md>(<\/p>)?$/, "</md><br>$1"); // add br to last MD
    return text;
  },
  convertRichToBase: function(html) {
    if (!html) return "<p></p>";
    html = html.replace(/\r/g, "");
    var _unescapeFromHtml = function (html) {
      return html
          .replace(/<br\s*\/?>/g, "\n")
          .replace(/<(?!img src=")[^>]*?>/g, "")
          .replace(/&amp;/g, "&")
          .replace(/&nbsp;/g, " ")
          .replace(/&lt;/g, "<")
          .replace(/&gt;/g, ">");
    };
    var _convertRichToBase = function(pre) {
      var ret;
      switch (pre.type) {
        case P.text_editor.TEXT_TYPE.LATEX:
          ret = pre.text.replace(/<\/?latex[^>]*>/gi, "");
          ret = "$$" + _unescapeFromHtml(ret) + "$$";
          break;
        case P.text_editor.TEXT_TYPE.MD:
          ret = "<md>" + _unescapeFromHtml(pre.text) + "</md>\n";
          break;
        case P.text_editor.TEXT_TYPE.PRE:
          ret = "<pre>\n" + pre.text.replace(/<br\s*\/?>/g, "\n").replace(/&nbsp;/g, " ") + "</pre>\n";
          break;
        case P.text_editor.TEXT_TYPE.HTML:
          // remove more than two empty paragraphs
          ret = pre.text.replace(/<p>\s*<\/p>\s*<p>\s*<\/p>\s*(<p>\s*<\/p>\s*)+/g, "<p></p>\n<p></p>\n");
          break;
      }
      for (var i = 0; i < pre.pres.length; i++) {
        ret = ret.replace(pre.pres[i].key, _convertRichToBase(pre.pres[i]).replace(/\$/g, P.text_editor.dollars));
      }
      return ret;
    };
    var parsed = P.text_editor.parseContent(html);
    html = _convertRichToBase(parsed);
    return html;
  },
  prepareForPlain: function(html) {
    if (!html) return "";
    var _prepareForPlain = function(pre) {
      var ret;
      switch (pre.type) {
        case P.text_editor.TEXT_TYPE.LATEX:
          ret = "$$" + pre.text + "$$";
          break;
        case P.text_editor.TEXT_TYPE.MD:
          ret = "<md>\n" + pre.text + "</md>\n";
          break;
        case P.text_editor.TEXT_TYPE.PRE:
          ret = "<pre>\n" + pre.text + "</pre>\n";
          break;
        case P.text_editor.TEXT_TYPE.HTML:
          if (!P.text_editor.looksLikePlain(pre.text)) {
            // assume no nested <p>'s
            ret = pre.text
              .replace(/<p>(.*?)<\/p>/gi, "$1") // remove simple <p>'s
              .replace(/(<p [^>]*?>)\s*(.*?)\s*(<\/p>)/gi, "$1\n$2\n$3") // sanitize specialized <p>'s
              .replace(/&nbsp;/gi, " ")
              .replace(/<br\s*\/?>/gi, "\n");
          } else {
            ret = pre.text;
          }
          break;
      }
      for (var i = 0; i < pre.pres.length; i++) {
        ret = ret.replace(pre.pres[i].key, _prepareForPlain(pre.pres[i]).replace(/\$/g, P.text_editor.dollars));
      }
      return ret;
    };
    var parsed = P.text_editor.parseContent(html);
    html = _prepareForPlain(parsed);
    return html;
  },
  looksLikeMd: function(text) {
    return P.text_editor.looksLikePlain(text, true);
  },
  looksLikePlain: function(text, md) {
    var parsed = P.text_editor.parseContent(text);
    if (md) {
      var txt = parsed.text.replace(/<[^>]*>/gi, "").trim();
      if (txt === "") {
        return true; // only empty tags
      }
      if (parsed.pres.length === 1 && parsed.pres[0].type === P.text_editor.TEXT_TYPE.MD) {
        // only tags before and after the single <md>
        return txt === parsed.pres[0].key;
      } else {
        for (var i = 0; i < parsed.pres.length; i++) {
          if (parsed.pres[i].type === P.text_editor.TEXT_TYPE.MD) {
            return false;
          }
        }
        return !parsed.text.replace(/<\/p>/, "").match(/<\/\w*\s*>/);
      }
    } else {
      text = parsed.text.trim();
      if (text.match(/\n\s*\n/)) return true;
      if (text.match(/(<\/(span|strong|em|i|b|sup|sub|code|samp|kbd|var|small|ins|del|mark|a|q|img)\s*>|[^>\t ])[\t ]*\n[\t ]*(<(span|strong|em|i|b|sup|sub|code|samp|kbd|var|small|ins|del|mark|a|q|img)\b|[^<\t ])/)) return true;
      return !text.match(/<\/(p|md)\s*>/);
    }
  },
  convertMdToBase: function(html) {
    if (html) {
      return "<md>" + html + "</md>";
    } else {
      return "";
    }
    return P.text_editor.convertPlainToBase(html);
  },
  convertPlainToBase: function(html) {
    if (html) {
      html = html.trim().replace(/\r/g, "");
    } else {
      return "";
    }
    return html;
  },
  prepareForMd: function(html) {
    html = P.text_editor.prepareForPlain(html);
    // remove all <md> tags
    return html.replace(/(\s*<md(\s[^>]*)?>\n?|<\/md(\s[^>]*)?>\s*)/gi, "");
  },
  convertOriginalToBase: function(html) {
    var _unescapeFromHtml = function (html) {
      return html
        .replace(/\r/g, "")
        .replace(/(&amp;|&#38;)/g, "&")
        .replace(/(&quot;|&#34;)/g, "\"")
        .replace(/(&apos;|&#39;)/g, "'")
        .replace(/&#64;/g, "@")
        .replace(/&#96;/g, "`")
        .replace(/<br\s*\/?>/g, "\n")
        .replace(/&#43;/g, "+")
        .replace(/(&nbsp;|&#160;)/g, " ")
        .replace(/(&lt;|&#60;)/g, "<")
        .replace(/(&gt;|&#62;)/g, ">")
        .replace(/{<!-- -->/g, "{");
    };
    var _convertOriginalToBase = function(pre) {
      var ret;
      switch (pre.type) {
        case P.text_editor.TEXT_TYPE.LATEX:
          ret = "$$" + _unescapeFromHtml(pre.text) + "$$";
          break;
        case P.text_editor.TEXT_TYPE.MD:
          ret = "<md>\n" + _unescapeFromHtml(pre.text) + "</md>\n";
          break;
        case P.text_editor.TEXT_TYPE.PRE:
          ret = "<pre>\n" + pre.text + "</pre>\n";
          break;
        case P.text_editor.TEXT_TYPE.HTML:
          ret = pre.text
          break;
      }
      for (var i = 0; i < pre.pres.length; i++) {
        ret = ret.replace(pre.pres[i].key, _convertOriginalToBase(pre.pres[i]).replace(/\$/g, P.text_editor.dollars));
      }
      return ret;
    };
    var parsed = P.text_editor.parseContent(html);
    html = _convertOriginalToBase(parsed);
    return html;
  },
  getEditorText: function(postfix) {
    var newContent;
    if (P.text_editor.isRich && tinymce.get('rich_' + postfix)) {
      newContent = tinymce.get('rich_' + postfix).getContent();
      newContent = P.text_editor.convertRichToBase(newContent);
    } else {
      newContent = $('#rich_' + postfix).val() || "";
      if (P.text_editor.getCurrentEditor() === "md") {
        newContent = P.text_editor.convertMdToBase(newContent);
      } else {
        newContent = P.text_editor.convertPlainToBase(newContent);
      }
    }
    return newContent;
  },
  getEditorAnonymity: function(postfix) {
    var anon = $('#anon_' + postfix).val();
    if (!anon) anon = "no";
    return anon;
  },
  setEditorText: function(options) {
    if (P.text_editor.getDefaultEditor() === "md" && !P.text_editor.looksLikeMd(options.text)) {
      if (P.text_editor.looksLikePlain(options.text)) {
        P.text_editor.toggleRichtextConfirmed("plain", false);
      } else {
        P.text_editor.toggleRichtextConfirmed("rte", false);
      }
      $("#incompatible_editor_warning").show();
    } else {
      if (P.text_editor.getCurrentEditor() !== P.text_editor.getDefaultEditor())
        P.text_editor.toggleRichtextConfirmed(P.text_editor.getDefaultEditor(), false);
      $("#incompatible_editor_warning").hide();
    }
    if (P.text_editor.isRich) {
      options.text = P.text_editor.prepareForRich(options.text);
      tinymce.get('rich_' + options.postfix).setContent(options.text);
    } else {
      if (P.text_editor.getCurrentEditor() === "md") {
        options.text = P.text_editor.prepareForMd(options.text);
      } else {
        options.text = P.text_editor.prepareForPlain(options.text);
      }
      $('#rich_' + options.postfix).val(options.text);
    }
  },
  focusEditor: function(postfix) {
    if (P.text_editor.isRich) {
      tinymce.get('rich_' + postfix).focus();
    } else {
      $('#rich_' + postfix).focus();
    }
  },
  injectEditor: function(options) {
    if (P.text_editor.getDefaultEditor() === "md" && !P.text_editor.looksLikeMd(options.text)) {
      options.warn = true;
      if (P.text_editor.looksLikePlain(options.text)) {
        P.text_editor.toggleRichtextConfirmed("plain", false);
      } else {
        P.text_editor.toggleRichtextConfirmed("rte", false);
      }
    }
    P.text_editor.createEditor(options);
    $(".anonymity_selector").val(options.anonymity);
    if (options.group) {
      $("#subgroup_dropdown_edit").val(options.group);
    }
  },
  toggleRichtext: function(newEditor) {
    var oldEditor = P.text_editor.getCurrentEditor();
    if (oldEditor === newEditor) {
      return false;
    }
    var md_errors = 0;
    for (var postfix in P.text_editor.active) {
      if (newEditor === "md" && !P.text_editor.looksLikeMd(P.text_editor.getEditorText(postfix))) {
        md_errors++;
      }
    }
    if (md_errors > 0) {
      var params = {
        title: "There may be change of formatting",
        confirm: "Switch to Markdown",
        reverse_buttons: true,
        body: "You’re trying to switch to the Markdown editor.<br>" +
            "Markdown formatting rules will apply to the content in your post, and there may be unexpected changes to formatting.",
        callback: function () {
          P.text_editor.toggleRichtextConfirmed(newEditor, true);
        },
        cancelCallback: function () {
          $('.editor_' + oldEditor).prop("checked", true);
        }
      };
      PEM.fire("showConfirmationWindow", params);
    } else {
      P.text_editor.toggleRichtextConfirmed(newEditor, true);
    }
  },
  toggleRichtextConfirmed: function(newEditor, save) {
    var body = {};
    for (var postfix in P.text_editor.active) {
      body[postfix] = P.text_editor.getEditorText(postfix);
    }
    var oldEditor = P.text_editor.getCurrentEditor();
    P.text_editor.setCurrentEditor(newEditor, save);
    if (oldEditor === "rte") {
      $(".auto-list").hide();
      for (var postfix in P.text_editor.active) {
        tinymce.execCommand('mceRemoveEditor', true, 'rich_' + postfix);
      }
    }
    $('.editor_' + newEditor).prop("checked", true);
    if (newEditor === "rte") {
      for (var postfix in P.text_editor.active) {
        var options = P.text_editor.callbacks[postfix];
        if (save) {
          options.warn = false;
        }
        options.text = body[postfix];
        var height = $('#rich_' + postfix).css("height");
        if (height) options.height = parseInt(height);
        P.text_editor.createEditor(options);
      }
      $('.md_help').html("");
    } else if (newEditor === "md") {
      $('.md_help').html("Use <span>$</span>$latex formula<span>$</span>$ for LaTeX.");
      for (var postfix in P.text_editor.active) {
        $('#rich_' + postfix).val(P.text_editor.prepareForMd(body[postfix]));
      }
    } else if (newEditor === "plain") {
      $('.md_help').html("Use &lt;md&gt;markdown block&lt;/md&gt; for markdown. Use <span>$</span>$latex formula<span>$</span>$ for LaTeX.");
      for (var postfix in P.text_editor.active) {
        $('#rich_' + postfix).val(P.text_editor.prepareForPlain(body[postfix]));
      }
    }
    return false;
  },
  makeHtmlFromMd: function(text) {
    if (!P.text_editor.mdConverter && typeof(showdown) !== "undefined") {
      P.text_editor.mdConverter = new showdown.Converter();
      P.text_editor.mdConverter.setFlavor('github');
      P.text_editor.mdConverter.setOption('tables', true);
      P.text_editor.mdConverter.setOption('emoji', true);
      P.text_editor.mdConverter.setOption('openLinksInNewWindow', true);
      P.text_editor.mdConverter.setOption('strikethrough', true);
      P.text_editor.mdConverter.setOption('ghMentions', false);
      P.text_editor.mdConverter.setOption('parseImgDimensions', true);
      P.text_editor.mdConverter.setOption('headerLevelStart', 6);
      P.text_editor.mdConverter.setOption('tablesHeaderId', false);
      P.text_editor.mdConverter.setOption('noHeaderId', true);
    }
    try {
      if (text == null)
        throw "null string";
      text = text.replace(/>(?:[ \t]*>){13,}/g,">>>>>>>>>>>>>");
      return P.text_editor.mdConverter.makeHtml(text);
    } catch (error) {
      return "Markdown render failed (" + error.toString() + ")";
    }
  },
  resizeImage: function(img) {
    var ret = img.src;
    var scale = Math.min(
      P.text_editor.MAX_IMG_W / img.naturalWidth,
      P.text_editor.MAX_IMG_H / img.naturalHeight);
    if (scale < 1 || ret[0] === "b") {
      if (scale > 1) {
        scale = 1;
      }
      var canvas_id = "cnv_" + img.piid;
      $("body").append("<canvas style=\"display:none\" id=\"" + canvas_id + "\">");
      var canvas = $("#" + canvas_id)[0];
      var context = canvas.getContext("2d");
      canvas.width = img.naturalWidth * scale;
      canvas.height = img.naturalHeight * scale;
      context.drawImage(img, 0, 0, canvas.width, canvas.height);
      ret = canvas.toDataURL('image/png');
      $("body").remove("#" + canvas_id);
    }
    return ret;
  },
  imagePaste: function (text) {
    var re = /<img[^>]*? src="((data:([^">]*?)(;base64)?,|blob:)[^">]*?)"[^>]*?>/g;
    var matcher;
    var ret = text;
    var editor = tinymce.activeEditor;
    while ((matcher = re.exec(text))) {
      var id = "imagePaste_" + P.text_editor.getNextId();
      P.upload_manager.uploadFromDataUrl(matcher[1], id, false, function (url, name, image_width) {
        if (editor && editor.dom) {
          if (url) {
            if (image_width > P.text_editor.MAX_IMG_W_DISPLAY)
              editor.dom.$("#" + name).replaceWith("<img src=\"" + url + "\" alt='pasted image' width='" + P.text_editor.MAX_IMG_W_DISPLAY + "'/>");
            else
              editor.dom.$("#" + name).replaceWith("<img src=\"" + url + "\" alt='pasted image'/>");
          } else {
            editor.dom.$("#" + name).remove();
          }
        }
        });
      ret = ret.replace(matcher[0], "<span style=\"display:none\" id=\"" + id + "\">Image paste in progress...</span>");
    }
    return ret;
  },
  MAX_IMG_H: 2000,
  MAX_IMG_W: 2000,
  MAX_IMG_W_DISPLAY: 1000,
  nodeInTags: function (n, names) {
    if (n) {
      if (names.indexOf(n.nodeName) >= 0)
        return true;
      return P.text_editor.nodeInTags(n.parentNode, names);
    }
    return false;
  },
  findEditor: function(target) {
    var doc = target;
    while (doc.parentNode != null) { doc = doc.parentNode; }
    for (var i = 0; i < tinymce.editors.length; i++) {
      if (tinymce.editors[i].dom.doc == doc) {
        return tinymce.editors[i];
      }
    }
    return null;
  },
  insertText: function(text, target) {
    if (P.text_editor.getCurrentEditor() === "rte") {
      // get editor for current target
      var ed = P.text_editor.findEditor(target);
      if (!ed) return;
      // check if not in bad blocks
      if (P.text_editor.nodeInTags(ed.selection.getNode(), ["PRE", "CODE"])) {
        alert("Images and files cannot be added in code blocks");
      } else {
        ed.insertContent(text);
      }
      return;
    }
    $(target).focus();
    var pos = $(target).prop("selectionStart");
    var old = $(target).val();
    $(target).val(old.substr(0, pos) + text + old.substr(pos));
  },
  dropOrPaste: function(event) {
    var data;
    if (event.originalEvent) {
      data = event.originalEvent.dataTransfer || event.originalEvent.clipboardData;
    } else {
      data = event.dataTransfer || event.clipboardData;
    }
    if (!data || (data.types && data.types.indexOf("text/html") >=0)) return;
    var f, err;
    if (data.files && data.files.length > 0) {
      if (data.files.length === 1) {
        f = data.files[0];
      } else {
        err = true;
      }
    } else {
      for (var i = 0; data.items && !err && i < data.items.length; i++) {
        var ff = data.items[i].getAsFile();
        if (ff) {
          if (f) {
            err = true;
          } else {
            f = ff;
          }
        }
      }
    }
    if (err) {
      alert("Paste/drop of multiple files is not supported. Please select a single file.");
      event.preventDefault();
    } else if (f) {
      P.upload_manager.uploadFromFile(f, null, false, function (url, name, image_width){
        if (!url) return;
        var html;
        if (P.text_editor.getCurrentEditor() === "md") {
          if (image_width) {
            html = "![" + name + "](" + url + ")";
          } else {
            html = "[" + name + "](" + url + ")";
          }
        } else {
          if (image_width) {
            if (image_width > P.text_editor.MAX_IMG_W_DISPLAY)
              html = "<img src='" + url + "' alt='" + name + "' width='" + P.text_editor.MAX_IMG_W_DISPLAY + "'/>";
            else
              html = "<img src='" + url + "' alt='" + name + "'/>";
          } else {
            html = "<a href='" + url + "'>" + name + "</a>";
          }
        }
        P.text_editor.insertText(html, event.currentTarget || event.target);
      }, alert)
      event.preventDefault();
    }
  },
  fixBullets: function(c, baseOpen, baseClose) {
    var bulletIdx = c.indexOf("</li>" + baseOpen);
    var offset = (baseClose + "</li>").length - 1;
    while (bulletIdx > 0) {
      var end = c.indexOf(baseClose, bulletIdx);
      if (end < 0) break;
      c = c.substr(0, bulletIdx) + baseOpen + c.substr(bulletIdx + offset, end - bulletIdx - offset) + baseClose + "</li>" + c.substr(end + 5);
      bulletIdx = c.indexOf("</li>" + baseOpen, end);
    }
    return c;
  },
  init: function(module) {

    // see how many dollars we need
    if ("a".replace("a", "$$") == "$$")
      P.text_editor.dollars = "$$";

    P.text_editor.template = module.template;
    PEM.addListener("network", P.text_editor.setNetwork);
    PEM.addListener("makeHtml", P.text_editor.makeHtml);
    PEM.addListener("getEditorText", P.text_editor.getEditorText);
    PEM.addListener("getEditorAnonymity", P.text_editor.getEditorAnonymity);
    PEM.addListener("getAnonymityOptions", P.text_editor.getAnonymityOptions);
    PEM.addListener("setEditorText", P.text_editor.setEditorText);
    PEM.addListener("injectEditor", P.text_editor.injectEditor);
    PEM.addListener("cancelOne", P.text_editor.cancel);
    PEM.addListener("cancelOneForce", P.text_editor.doCancel);
    PEM.addListener("cancelAll", P.text_editor.cancelAll);
    PEM.addListener("hasActiveEditor", P.text_editor.hasActiveEditor);
    PEM.addListener("toggleRichtext", P.text_editor.toggleRichtext);
    PEM.addListener("focusEditor", P.text_editor.focusEditor);
    PEM.addListener("previewPost", doPostPreview);


    if (typeof(tinymce) != 'undefined') {
      if (!P.text_editor.tinymceInit) {
        var profs = [];
        if (P.top_bar.network && P.top_bar.network.profs)
          profs = P.top_bar.network.profs;
        P.text_editor.tinymceInit = true;
        tinymce.init({
          theme : "silver",
          relative_urls: false,
          min_width: 600,
          min_height: 267,
          elementpath: false,
          entity_encoding: "raw",
          branding: false,
          plugins: [
           "advlist autolink lists link charmap",
           "searchreplace media insertdatetime table directionality paste"
          ],
          external_plugins: {
            'equation': '/modules/tinymce_plugins/equation/plugin.min.js?v=' + P.modules.cacheBuster,
            'image': '/modules/tinymce_plugins/image/plugin.min.js?v=' + P.modules.cacheBuster
          },
          valid_elements: "*[*]",
          valid_children : '+body[md]', // allow md inside body
          custom_elements: 'md[*]', // allow md as element
          br_newline_selector: 'md', // do not break block on enter
          formats:{
            md:{selector:'md', block:'md', deep:true, remove:"all", inherit:false},
            pre:{selector:'pre', block:'pre', deep:true, remove:"all", inherit:false},
            kbd:[ {selector:'kbd', inline:'kbd', deep:true, remove:"all", inherit:false},
                  {selector:'tt', inline:'tt', deep:true, remove:"all", inherit:false}],
            alignleft: [
              {
                selector: 'figure.image',
                collapsed: false,
                classes: 'align-left',
                ceFalseOverride: true,
                preview: 'font-family font-size'
              },
              {
                selector: 'figure,p,h1,h2,h3,h4,h5,h6,td,th,tr,div,ul,ol,li',
                styles: {
                  textAlign: 'left'
                },
                inherit: false,
                preview: false,
                defaultBlock: 'div'
              },
              {
                selector: 'img',
                classes: 'align-left',
                collapsed: false,
                styles: {
                  float: 'left'
                },
                preview: 'font-family font-size'
              },
              {
                selector: 'table',
                collapsed: false,
                styles: {
                  marginLeft: '0',
                  marginRight: 'auto'
                },
                preview: 'font-family font-size'
              }
            ],

            alignright: [
              {
                selector: 'figure.image',
                collapsed: false,
                classes: 'align-right',
                ceFalseOverride: true,
                preview: 'font-family font-size'
              },
              {
                selector: 'figure,p,h1,h2,h3,h4,h5,h6,td,th,tr,div,ul,ol,li',
                styles: {
                  textAlign: 'right'
                },
                inherit: false,
                preview: 'font-family font-size',
                defaultBlock: 'div'
              },
              {
                selector: 'img',
                collapsed: false,
                styles: {
                  float: 'right'
                },
                preview: 'font-family font-size'
              },
              {
                selector: 'table',
                collapsed: false,
                styles: {
                  marginLeft: 'auto',
                  marginRight: '0'
                },
                preview: 'font-family font-size'
              }
            ]
          },
          toolbar: "bold italic | alignleft aligncenter | ltr rtl | bullist numlist outdent indent | link image insertfile | equation prebutton ttbutton | preview | format_help",
          menu: {
            insert: { title: 'Insert', items: 'insertfile media image link | charmap emoticons hr | pagebreak nonbreaking anchor toc | insertdatetime' },
            format: { title: 'Format', items: 'bold italic underline strikethrough superscript subscript codeformat | align formats | toggle_rtl | removeformat' },
            table: { title: 'Table', items: 'inserttable | cell row column | tableprops deletetable' },
          },
          style_formats: [
            { title: 'Paragraph', format: 'p' },
            { title: 'Blockquote', format: 'blockquote' },
            { title: 'Div', format: 'div' }
          ],
          menubar: 'insert format table',
          file_picker_callback : myFileBrowser,
          file_picker_types: 'file image media',
          statusbar: true,
          resize: true,
          browser_spellcheck: true,
          autocomplete_options: { "options": profs },
          autocomplete_delimiters: "32,160",
          autocomplete_min_length: 1,
          default_link_target: "_blank",
          target_list: false,
          link_assume_external_targets: "https",
          link_default_protocol: "https",
          skin_url: "/modules/tinymce_skin",
          table_default_attributes: {cellpadding: "6px", border:"1px", cellspacing:"0"},
          table_default_styles: {'border-collapse': 'collapse'},
          table_cell_advtab: false,
          table_row_advtab: false,
          table_advtab: false,
          mobile: {
            menubar: true,
            resize:true
          },
          contextmenu: "image table",
          init_instance_callback: function(inst){
            if (inst.id === 'fake_editor') {
              setTimeout(function(){tinymce.execCommand('mceRemoveEditor',true, 'fake_editor');}, 100);
              return;
            }
            var instance = tinymce.get(inst.id);
            if (instance) {
              instance.focus();
              P.text_editor.oldText[inst.id.replace("rich_", "")] = instance.getContent();
              actualCaretPositionBookmark = inst.selection.getBookmark(true);
            }
          },
          paste_data_images: true,
          paste_preprocess: function(plugin, args) {
            if (P.text_editor.nodeInTags(args.target.selection.getNode(), ["PRE", "CODE"])) {
              args.content = args.content.replace(/<img[^>]*>/, "");
            } else {
              args.content = P.text_editor.imagePaste(args.content);
            }
            args.content = args.content
              .replace(/"data:image\/.*?"/gi, '""')
              .replace(/'data:image\/.*?'/gi, "''")
              .replace(/&quot;data:image\/.*?&quot;/gi, "&quot;&quot;");

            args.content = P.text_editor.fixBullets(args.content, "<ul>", "</ul>");
            args.content = P.text_editor.fixBullets(args.content, "<ol>", "</ol>");
          },
          paste_postprocess: function(plugin, args) {
            var _strip_style = function(nodes) {
              for (var i = 0; nodes && i < nodes.length; i++) {
                var n = nodes[i];
                _strip_style(n.childNodes);
                if (n.getAttribute) {
                  var s = n.getAttribute("style");
                  if (s) {
                    s = s.toLowerCase().replace(/text-decoration-line/, "text-decoration");
                    var m = s.match(/(text-decoration|font-style|font-weight)\s*:((\s*[\w-]+)+)/g);
                    var r = "";
                    for (var j = 0; m && j < m.length; j++) {
                      if (m[j][0] === "t") {
                        var a = m[j].substr(m[j].indexOf(":") + 1).split(" ");
                        var rr = "";
                        for (var k = 0; k < a.length; k++) {
                          var mm = a[k].match(/(none|underline|line-through)/);
                          if (mm) {
                            rr += " " + mm[1];
                          }
                        }
                        if (rr) {
                          r += " " + m[j].substr(0, m[j].indexOf(":") + 1) + rr + ";";
                        }
                      } else {
                        r += " " + m[j] + ";";
                      }
                    }
                    if (r) {
                      n.setAttribute("style", r);
                    } else {
                      n.removeAttribute("style");
                    }
                  }
                }
              }
            };
            // Drop all styling except text-decoration: none|underline|line-through, font-weight and font-style
            _strip_style(args.node.childNodes);
          },
          setup : function(ed) {
            var END_WORD_KEYS = [32, 59, 186, 188, 190];
            var isProfTag = function (n) {
              if (n && n.nodeName === "STRONG") {
                for (var i = 0; i < n.attributes.length; i++) {
                  if (n.attributes[i].name === "attention") {
                    return true;
                  }
                }
              }
              return false;
            };
            var testNodeName = function (n, name) {
              if (n) {
                if (n.nodeName === name)
                  return true;
              }
              return false;
            };
            var nodeInProfTag = function (n) {
              if (n) {
                if (isProfTag(n)) {
                  if (ed.selection.getSel().focusOffset === ed.selection.getSel().focusNode.nodeValue.length) {
                    return "END";
                  } else {
                    return true;
                  }
                }
                return nodeInProfTag(n.parentNode);
              }
              return false;
            };
            ed.ui.registry.addToggleMenuItem('toggle_rtl', {
              text: 'Right to left',
              onAction: function() {
                ed.execCommand('mceDirectionRTL');
              },
              onSetup: function(api) {
                api.setActive(window.getComputedStyle(ed.selection.getNode()).getPropertyValue("direction") === "rtl");
                return function() {};
              }
            });
            // Escape code block with mouse click below it.
            ed.on('init', () => {
              ed.on('click', (e) => {
                const lastElement = ed.getBody().lastElementChild;

                if (lastElement.nodeName.toLowerCase() !== 'p' && e.clientY > lastElement.getBoundingClientRect().bottom) {
                  ed.undoManager.transact(() => {
                    const p = ed.dom.create('p');
                    p.appendChild(ed.dom.create('br', { 'data-mce-bogus': '1' }));
                    ed.dom.insertAfter(p, lastElement);
                    ed.selection.setCursorLocation(p, 0);
                  });
                }
              });
            });
            ed.on("SetContent", function(ev) {
              var _SetContent = function(n) {
                for (var i = 0; n && i < n.length; i++) {
                  var node = n[i];
                  if (isProfTag(node)) {
                    if (node.childNodes.length === 1 && node.childNodes[0].nodeType === 3 && node.childNodes[0].length) {
                      node.setAttribute("leng", node.childNodes[0].length);
                    } else {
                      node.remove();
                    }
                  } else {
                    if (testNodeName(node, "PRE") || testNodeName(node, "MD") || testNodeName(node, "CODE")) {
                      node.setAttribute("spellcheck", false);
                    }
                    _SetContent(node.children);
                  }
                }
              };
              _SetContent(ed.getBody().children);
            });
            ed.on("GetContent", function(ev) {
              if (ev.format === 'html' && ev.content) {
                ev.content = ev.content
                  .replace(/<(strong attention="\w*")[^>]*>/gi, "<$1>")
                  .replace(/<code\s[^>]*>/gi, "<code>");
              }
            });
            ed.on("drop", P.text_editor.dropOrPaste);
            ed.on("paste", P.text_editor.dropOrPaste);
            ed.on("dragover", function(event){
              event.preventDefault();
            });
            ed.on("NodeChange", function(ev) {
              var move_caret = true;
              var _NodeChange = function (el) {
                if (isProfTag(el)) {
                  if (el.innerText.length !== parseInt(el.getAttribute("leng"))) {
                    var pos = ed.selection.getSel().focusOffset;
                    var sibl = el.previousSibling;
                    var par =  el.parentNode;
                    el.replaceWith(el.innerText);
                    if (move_caret) {
                      if (sibl) {
                        sibl = sibl.nextSibling;
                      } else {
                        sibl = par.firstChild;
                      }
                      ed.selection.setCursorLocation(sibl, pos);
                    }
                  }
                } else {
                  move_caret = false;
                  for (var i = 0; i < el.childElementCount; i++) {
                    _NodeChange(el.children[i]);
                  }
                }
              };
              _NodeChange(ev.element);
            });
            ed.on("click keyup", function(evt) {
              if (ed.selection.getNode().className !== 'mce-pastebin')
                actualCaretPositionBookmark = ed.selection.getBookmark(true);
            });
            ed.on("keydown", function(evt) {
              if (evt.keyCode === 9){ // tab pressed
                var elem = ed.selection.getNode();
                if (testNodeName(elem, "PRE") || testNodeName(elem, "CODE")) {
                  ed.selection.setContent('\x09');
                  evt.preventDefault();
                  evt.stopPropagation();
                  return false;
                }
              } else if (evt.keyCode === 13 && !evt.shift) {
                var elem = ed.selection.getNode();
                if (testNodeName(elem, "MD")) {
                  ed.selection.setContent('<br/>');
                  evt.preventDefault();
                  evt.stopPropagation();
                  return false;
                }
              }
              var pnode = ed.selection.getSel().focusNode.parentNode;
              if (nodeInProfTag(pnode) === "END" && END_WORD_KEYS.indexOf(evt.keyCode) >= 0) {
                if (!pnode.nextSibling) {
                  pnode.parentNode.appendChild(ed.getDoc().createTextNode(""));
                }
                ed.selection.setCursorLocation(pnode.nextSibling);
              }
              return true;
            });
            ed.on("BeforeExecCommand", function(event) {
              var blocks = ed.selection.getSelectedBlocks();
              var pre_included = false;
              var md_included = false;
              for (var i = 0; i < blocks.length && (!pre_included || !md_included); i++) {
                if (!pre_included) pre_included = testNodeName(blocks[i], "CODE") || testNodeName(blocks[i], "PRE");
                if (!md_included) md_included = testNodeName(blocks[i], "MD");
              }
              if (pre_included || md_included) {
                // Allow only very specific commands if selection intersects with pre or md blocks.
                if (event.command === "mceInsertContent" && event.value.paste === true) return;
                if (event.command === "mceToggleFormat" && event.value === "pre") return;
                if (event.command === "mcePreview") return;
                if (event.command === "formatHelp") return;
                if (event.command === "RemoveFormat") return;
                if (event.command === "SelectAll") return;
                if (event.command === "Undo") return;
                if (event.command === "Redo") return;
                if (event.command === "Delete") return;
                if (!pre_included) {
                  if (event.command === "equationCommand") return;
                }
                event.preventDefault();
              }
            });
            ed.on("ExecCommand", function(event, ui, value){
              var blocks = ed.selection.getSelectedBlocks();
              if (event.command === "mceToggleFormat" && event.value === "pre" && blocks.length === 1) {
                // Remove double-breaks added when multiple paragraphs formatted as pre.
                var el = blocks[0];
                for (var i = 2; i < el.childNodes.length; i++) {
                  var n2 = el.childNodes[i - 2];
                  var n1 = el.childNodes[i - 1];
                  var n0 = el.childNodes[i];
                  if (n2.nodeName === "BR" &&
                    n1.nodeName === "BR" &&
                    n0.nodeName === "BR" &&
                    n2.getAttribute("data-mce-bogus") &&
                    !n1.getAttribute("data-mce-bogus") &&
                    !n0.getAttribute("data-mce-bogus")) {
                    el.removeChild(n2);
                    el.removeChild(n1);
                  }
                }
              }
            });
            ed.ui.registry.addAutocompleter('profs', {
              ch: '@',
              minChars: 1,
              columns: 1,
              fetch: function (pattern) {
                pattern = pattern.replace(/\xA0/g, " ").toLowerCase();
                return new tinymce.util.Promise(function (resolve) {
                  var options = [];
                  if (P.top_bar.network && !P.top_bar.network.config.disable_mentions && (P.top_bar.user.isInst || P.top_bar.network.config.enable_mentions_students))
                    options = P.top_bar.network.profs;
                  var ret = [];
                  for (var i = 0; i < options.length; i++) {
                    var name = options[i].name;
                    var email = options[i].email;
                    if (name) {
                      name = name.trim().replace(/[ \xA0]+/g, " ");
                    }
                    var matchname = name;
                    if (name) {
                      if (P.top_bar.user.isInst && email) {
                        matchname += "\xA0(" + email + ")";
                      }
                    } else {
                      if (email) {
                        var idx = email.indexOf("@");
                        if (idx === 1)
                          name = email.substr(0, 1);
                        else if (idx > 1)
                          name = email.substr(0, 2);
                        name += "..." + email.substr(idx);
                        matchname = name;
                      } else {
                        continue;
                      }
                    }
                    if (matchname.toLowerCase().indexOf(pattern) >= 0) {
                      ret.push({
                        text: matchname,
                        value: "<strong attention='" + options[i].id + "' leng='" + (name.length + 1) + "'>" + '@' + name + "</strong>&nbsp;"
                      });
                    }
                  }
                  resolve(ret);
                });
              },
              matches:function (rng) {
                return (!nodeInProfTag(rng.startContainer) && !P.text_editor.nodeInTags(rng.startContainer, ["PRE", "MD", "CODE"]));
              },
              onAction: function (autocompleteApi, rng, value) {
                tinymce.activeEditor.selection.setRng(rng);
                tinymce.activeEditor.insertContent(value);
                autocompleteApi.hide();
              }
            });
          }
       });
      }
      tinymce.execCommand('mceAddEditor',true, 'fake_editor');
    }
    $('#preview_post_modal').on('hidden.bs.modal', function (e) {
      $('#preview_post_modal_body').html('');
    })
  }
};

function doPostPreview(params) {
  // params.pollOptions
  var body = P.text_editor.getEditorText(params.id);
  if (params.id === "old_new_post" && P.old_new_post && P.old_new_post.type === "poll") {
    params.pollOptions = {question: P.old_new_post.question};
  } else if (params.id === "question_note_edit" && P.note_view && P.note_view.content.type === "poll") {
    params.pollOptions = {question: P.poll_view.question};
  }

  body = PEM.callFirst("makeHtml", {text:body, pollOptions:params.pollOptions, preview:true});
  try {
    $('#preview_post_modal_body').html(body);
  } catch (e) {
    $('#preview_post_modal_body').html("Preview failed (" + e.toString() + ")");
  }
  $('#preview_post_modal').modal("show");
  P.renderer.renderMath('preview_post_modal_body');
  P.renderer.ensureSyntaxHighlighting();
  return false;
}
// Push module
P.push = {
  onPushMessage: null,        // function(channel, message). Called on each new message.
  onGetPushCredentials: null, // function(). Called when new credentials are required.
  onPushReconnect: null,      // function(). Called when subscriber reconnected.
  onPushNoConnection: null,   // function(info). Called regularly while push disconnected.
  pushstream: null,
  reconnectCount: 0,
  ws_connected: false,        // websocket is connected.
  noConnectionTimer: 0,
  NO_CONNECTION_PERIOD: 100000, // Call onPushNoConnection if connection failed.
  CREDENTIAL_REFRESH_PERIOD: 10 * 60 * 1000, // 5 minutes less than the timeout on nginx.
  CREDENTIAL_TIMER_PERIOD: 3000,      // Call credential handler each 3 seconds.
  CREDENTIAL_REFRESH_TIMEOUT: 10000,  // Retry (assume network error) if get_refreshed_tokens does not return in 10s.
  credentialTimerHandle: 0, // handle credentials refresh
  credentialLastTime: 0,    // Last time of successful cred retrieval
  credentialLastTry: 0,     // last time cred retrieval initiated.
  pushCredentials: null,    // should be a hashmap containing your channel ids and signatures at any given time.
  wsFirstMessageTimer: 0,
  wsPingTimer: 0,
  WS_CONNECT_TIMEOUT: 10000, // allow 10 seconds for first message to arrive. (See push_stream_header_template)
  WS_PING_PERIOD: 50000,    // Look for connection drop each 50 secs.
  first_connect: true,
  // Sets push credentials and channels in the P.push module.
  // Call this method each time the credentials&channels are retrieved.
  // Will reconnect push automatically on change.
  setPushCredentials: function(credentials){
    var channels_changed =
      P.push.pushCredentials == null || P.push.pushCredentials.channels !== credentials.channels;
    P.push.pushCredentials = credentials;
    P.push.credentialLastTime = new Date().getTime();
    P.push.credentialLastTry = 0;
    if (P.push.pushstream) {
      if (!P.push.isActive() || channels_changed) {
        console.info('Push (re)connecting on new credentials');
        P.push.pushstream.connect();
        P.push.refreshCredentials(false);
      }
    }
  },
  // Retrieves currently stored push credentials in the P.push module.
  getPushCredentials: function(){
    return P.push.pushCredentials || {};
  },
  // Initiate retrieval of push credentials.
  // force = false: do not try if CREDENTIAL_REFRESH_TIMEOUT has not passed.
  // Can be called any time.
  refreshCredentials: function(force) {
    var now = new Date().getTime();
    if (force === undefined) {
      force = true;
    }

    if (now - P.push.credentialLastTry > P.push.CREDENTIAL_REFRESH_TIMEOUT) {
      // Refresher idle or timeouted.
      if (P.push.credentialLastTry && P.push.isActive()) {
        console.error('Push credentials refresh failed!');
        // Failed to get credentials. Something is wrong, disconnect push.
        // setPushCredentials will reconnect after successful cred retrieval.
        P.push.pushstream.disconnect();
        P.push.credentialLastTime = 0; // assume credentials are invalid.
      }
      if ((now - P.push.credentialLastTime > P.push.CREDENTIAL_REFRESH_PERIOD && !P.push.ws_connected) || force) {
        if (P.push.onGetPushCredentials) {
          P.push.credentialLastTry = now;
          console.info('Push refreshing credentials');
          P.push.onGetPushCredentials();
        }
      }
    } // else cred refresh in progress
    // Rearm the timer
    if (P.push.credentialTimerHandle) {
      clearTimeout(P.push.credentialTimerHandle);
    }
    P.push.credentialTimerHandle = setTimeout(P.push.refreshCredentials, P.push.CREDENTIAL_TIMER_PERIOD, false);
  },
  onMessage: function(eventMessage, id, channel) {
    if (Object.prototype.toString.call(eventMessage) === '[object String]' && eventMessage.length > 0 && id >= 0) {
      if ($.browser && $.browser.msie) // for internet explorer, escape enters
        eventMessage = eventMessage.replace(/\n/g, '\\n');
      eventMessage = JSON.parse(eventMessage);
    }
    if (typeof(eventMessage) == "string")
      eventMessage = JSON.parse(eventMessage);
    if (P.push.wsFirstMessageTimer) {
      clearTimeout(P.push.wsFirstMessageTimer);
      P.push.wsFirstMessageTimer = 0;
    }
    if (P.push.onPushMessage) {
      P.push.onPushMessage(channel, eventMessage);
    }
  },
  onStatusChange: function(state) {
    if (state === PushStream.CONNECTING) {
      P.push.reconnectCount++;
    }
    if (P.push.wsPingTimer) {
      clearInterval(P.push.wsPingTimer);
      P.push.wsPingTimer = 0;
    }
    if (P.push.wsFirstMessageTimer) {
      clearTimeout(P.push.wsFirstMessageTimer);
      P.push.wsFirstMessageTimer = 0;
    }
    if (state === PushStream.OPEN) {
      if (P.push.noConnectionTimer) {
        clearInterval(P.push.noConnectionTimer);
        P.push.noConnectionTimer = 0;
      }
      P.push.ws_connected = true;
      P.push.reconnectCount = 0;
      if (P.push.onPushReconnect) {
        var first = P.push.first_connect;
        setTimeout(function () {
          console.info('Push reconnected');
          P.push.onPushReconnect(first);
        }, 500);
      }
      if (P.push.first_connect) {
        P.push.first_connect = false;
      }
      P.push.wsFirstMessageTimer = setTimeout(P.push.pushstream.connect, P.push.WS_CONNECT_TIMEOUT);
      P.push.wsPingTimer = setInterval(
        function () {
          P.push.pushstream.sendMessage("ping");
        },
        P.push.WS_PING_PERIOD);
    } else {
      P.push.ws_connected = false;
    }
    if (state === PushStream.CLOSED) {
      var now = new Date().getTime();
      if (now - P.push.credentialLastTime > P.push.CREDENTIAL_REFRESH_PERIOD) {
        P.push.pushstream.disconnect();
        P.push.refreshCredentials(true); // This will reconnect push once credentials are good.
      }
      if (P.push.noConnectionTimer === 0) {
        P.push.noConnectionTimer = setInterval(function() {
          if (P.push.onPushNoConnection) {
            var now = new Date().getTime();
            if (now - P.push.credentialLastTime < P.push.CREDENTIAL_REFRESH_PERIOD) {
              P.push.onPushNoConnection(P.push.reconnectCount);
            }
          }
        }, P.push.NO_CONNECTION_PERIOD);
      }
    }
  },
  isActive: function() {
    return P.push.pushstream && P.push.pushstream._keepConnected;
  },
  isConnected: function() {
    return P.push.ws_connected;
  },
  init: function() {
    if (P.push.pushstream) {
      throw Error("Double init");
    }
    P.push.pushstream = new PushStream({
      host: PUSH_HOST,
      port: PUSH_PORT,
      useSSL: true,
      urlPrefixWebsocket: "/push/sub/ws",
      modes: "websocket",
      extraParams : P.push.getPushCredentials,
      onstatuschange: P.push.onStatusChange,
      onmessage: P.push.onMessage,
      reconnectOnChannelUnavailableInterval: 10000,
    });
    if (P.push.pushCredentials) {
      P.push.pushstream.connect();
      P.push.refreshCredentials(false);
    }
  }
};
P.user_careers_profile = {

  user: {},
  profileData: null,
  termOrder: ['Fall 2014', 'Summer 2014', 'Spring 2014', 'Winter 2014', 'Fall 2013', 'Summer 2013', 'Spring 2013', 'Winter 2013', 'Autumn 2012', 'Winter Term 1 2012', 'Fall 2012', 'Summer 2012', 'Spring 2012', 'Winter 2012', 'Fall 2011', 'Summer 2011', 'Spring 2011', 'Winter 2011', 'Fall 2010', 'Summer 2010', 'Spring 2010', 'Winter 2010', 'Other'],
  pastTerms: ['Fall 2013', 'Summer 2013', 'Spring 2013', 'Winter 2013', 'Autumn 2012', 'Fall 2012', 'Summer 2012', 'Spring 2012', 'Winter 2012', 'Fall 2011', 'Summer 2011', 'Spring 2011', 'Winter 2011', 'Fall 2010', 'Summer 2010', 'Spring 2010', 'Winter 2010', 'Other'],
  skillList: ["C", "C++", "C#", "Java", "R", "Ruby", "Python", "Perl",
    "HTML", "CSS", "Javascript", "jQuery", "Rails", "PHP", "SQL", "MySQL",
    "Objective-C", "Android", "Illustrator", "Photoshop"],
  tagAutocompleteSelected: false,

  initHandlers: function() {
    if (!$('.request_resume_as').hasClass("disabled")) {
      $('.request_resume_as').click(function(){
        $(this).toggleClass('anon');
        return false;
      });
    }
    if (jQuery().placeholder) // only do this if placeholder plugin is loaded
      $('#add_tags').placeholder();
    $('.show_tag_toggle').click(function(){
      $('.tag_library').show();
      $(this).hide();
      $('.hide_tag_toggle').show();
    });
    $('.hide_tag_toggle').click(function(){
      $('.tag_library').hide();
      $(this).hide();
      $('.show_tag_toggle').show();
    });
    $('.start_manage_tag_toggle').click(function(){
      $('.tag_library').addClass('edit_mode');
      $(this).hide();
      $('.done_manage_tag_toggle').show();
    });
    $('.done_manage_tag_toggle').click(function(){
      $('.tag_library').removeClass('edit_mode');
      $(this).hide();
      $('.start_manage_tag_toggle').show();
    });
    $("#add_tags").keyup(function(e) {
      if (!$(this).val()) {
        $(".tags_autocomplete").hide();
        return false;
      }
      var keyCode = (window.event) ? e.which : e.keyCode;
      if (keyCode == 13) {
        e.preventDefault();
        if (P.user_careers_profile.tagAutocompleteSelected)
          P.user_careers_profile.addTag(P.user_careers_profile.tagAutocompleteSelected);
        else
          P.user_careers_profile.addTag($(this).val());
        return false;
      }
      if(keyCode == 40 && $(".tags_autocomplete li").length > 0) {
        e.preventDefault();
        if (!P.user_careers_profile.tagAutocompleteSelected) {
          var topList = $(".tags_autocomplete li").first();
          topList.addClass("highlight");
          P.user_careers_profile.tagAutocompleteSelected = topList.text();
        }
        else {
          $(".tags_autocomplete li").each(function() {
            if ($(this).hasClass("highlight")) {
              $(this).removeClass("highlight");
              if ($(this).next() && $(this).next().length > 0) {
                $(this).next().addClass("highlight");
                P.user_careers_profile.tagAutocompleteSelected = $(this).next().text();
              }
              else {
                $(".tags_autocomplete li").first().addClass("highlight");
                P.user_careers_profile.tagAutocompleteSelected = $(".tags_autocomplete li").first().text();
              }
              return false;
            }
          });
        }
        return false;
      }
      if (keyCode == 38 && $(".tags_autocomplete li").length > 0) {
        if (!P.user_careers_profile.tagAutocompleteSelected) {
          var topList = $(".tags_autocomplete li").last();
          topList.addClass("highlight");
          P.user_careers_profile.tagAutocompleteSelected = topList;
        }
        else {
          $(".tags_autocomplete li").each(function() {
            if ($(this).hasClass("highlight")) {
              $(this).removeClass("highlight");
              if ($(this).prev() && $(this).prev().length > 0) {
                $(this).prev().addClass("highlight");
                P.user_careers_profile.tagAutocompleteSelected = $(this).prev().text();
              }
              else {
                $(".tags_autocomplete li").last().addClass("highlight");
                P.user_careers_profile.tagAutocompleteSelected = $(".tags_autocomplete li").last().text();
              }
              return false;
            }
          });
        }
        return false;
      }
      var storedTags = [];
      if (typeof(COMPANY_TAGS) != 'undefined') storedTags = COMPANY_TAGS;
      var searchTag = $.trim($(this).val().toLowerCase());
      //var listHtml = '<li>Searching for:<br> &quot;<span id="tag_search_query">' + $(this).val() + '</span>&quot;</li>';
      var listHtml = '';
      for (var i = 0; i < storedTags.length; i++) {
        var searchAgainst = $.trim(storedTags[i].toLowerCase());
        if (searchAgainst.indexOf(searchTag) !== -1)
          listHtml += '<li class="add_tag_autocomplete" onclick="return P.user_careers_profile.addTag(\'' + storedTags[i].replace("\'", "\\'") + '\');">' + storedTags[i] + '</li>';
      }
      $(".tags_autocomplete").html(listHtml);
      P.user_careers_profile.tagAutocompleteSelected = false;
      $(".tags_autocomplete").show();
    });

    $(".profile_body .edit_button").click(function() {
      var top = $(this).closest('.profile_section');
      if (top.find('.no_conent_message:visible').length > 0) {
        setTimeout(function(){top.find('.add_button').click();}, 100);
      }
      top.addClass('edit_mode');
      top.find('.profile_block').show();
      return false;
    });
    $(".profile_body .save_button").click(function() {
      P.user_careers_profile.saveSection($(this).closest('.profile_section'));
      $(this).closest('.profile_section').removeClass('edit_mode');
      return false;
    });
    $(".profile_header .edit_button").click(function() {
      $('.profile_header').addClass('edit_mode');
      return false;
    });
    $(".profile_header .save_button").click(function() {
      P.user_careers_profile.saveSection($('.profile_header'));
      $('.profile_header').removeClass('edit_mode');
      return false;
    });
    $(".view_as_company").click(function() {
      $('#careers_profile').addClass('previewing_company_view');
      return false;
    });
    $(".stop_view_as_company").click(function() {
      $('#careers_profile').removeClass('previewing_company_view');
      return false;
    });
    //$(".back_to_search").click(function() {
      //PEM.fire("showHomescreen");
    //  $("#user_profile_wrapper").html('');
    //  $("#company_search").show();
    //  $(".back_to_search").hide();
    //  $(".feed_item").removeClass("selected");
    //  return false;
    //});
    $('.remove_profile_row').click(function() {
      $(this).closest('.profile_row').remove();
      return false;
    });
    $('.add_profile_row').click(function() {
      var dataFieldArray = $(this).attr('data-field-array');
      $(this).before('<div class="profile_row clearfix"><input type="text" class="profile_text_input long_input show_for_edit" data-field-array="' + dataFieldArray + '">' +
            '<i class="icon-remove-sign remove_button show_for_edit remove_profile_row" onclick="$(this).closest(\'.profile_row\').remove();"></i></div>');
      $(this).prev().find('input').focus();
      return false;
    });
    $('.delete_section').click(function() {
      $(this).closest('.profile_sub_section').remove();
      return false;
    });
    $('.add_work_row').click(function(){
      var html = P.user_careers_profile.defaultExtraFields('work');
      $(this).before(html);
      $($(this).prev().find('input')[0]).focus();
      return false;
    });
    $('.add_research_row').click(function(){
      var html = P.user_careers_profile.defaultExtraFields('research');
      $(this).before(html);
      $($(this).prev().find('input')[0]).focus();
      return false;
    });
    $('.add_side_row').click(function() {
      var html = ' \
        <div class="profile_sub_section add_section" data-field-array="side_projects"> \
            <input type="text" class="profile_text_input full_width_input show_for_edit" placeholder="What was project title?" data-subfield="title"> \
            <textarea rows="5" class="profile_textarea show_for_edit" placeholder="What did you do?" data-subfield="text"></textarea> \
            <a href="#" class="show_for_student action_link delete_button show_for_edit right_align" onclick="$(this).closest(\'.profile_sub_section\').remove();">delete section</a> \
        </div>';
      $(this).before(html);
      $($(this).prev().find('input')[0]).focus();
      return false;
    });
    $('.add_extra_row').click(function() {
      var html = P.user_careers_profile.defaultExtraFields('extracurriculars');
      $(this).before(html);
      $($(this).prev().find('input')[0]).focus();
      return false;
    });
    $('.add_skill_row').click(function() {
      var html = '\
          <div class="profile_row add_another clearfix" data-field-array="skills_list_tmp"> \
            <select style="width:150px;" data-subfield="name">' + P.user_careers_profile.generateSkillList() + '</select> \
            <select style="width:100px;" data-subfield="years">' + P.user_careers_profile.generateYearList('1') + '</select> \
            <i class="icon-remove-sign remove_button show_for_edit" onclick="$(this).closest(\'.profile_row\').remove();"></i> \
          </div>';
      $(this).before(html);
      return false;
    });
    $('.view_as_company').click(function() {
      PA.call_pj("user_profile.get_public_profile", {user_id:P.user_careers_profile.user.id}, null, function(data) {
         if (data["company_status"]) {
           var updater_id = data["company_status"]["updater"];
           if (COMPANY_USERS[updater_id]) {
             data["company_status"]["updater"] = COMPANY_USERS[updater_id].name;
           }
        }
        P.user_careers_profile.profileData = data;
        P.user_careers_profile.showProfile(P.user_careers_profile.profileData, true);
      }, function(err){alert(err);})
      return false;
    });
    $('.stop_view_as_company').click(function(){
      P.user_careers_profile.profileData = null;
      P.user_careers_profile.showMyProfile();
      return false;
    });
    $('.publish_profile').click(function() {
      var params = {set:{"profile_settings.published":true}};
      if (!P.user_careers_profile.profileData.profile_settings.company_see)
        params.set["profile_settings.company_see"] = true;
      if (!P.user_careers_profile.profileData.profile_settings.any_see)
        params.set["profile_settings.any_see"] = true;
      if (!P.user_careers_profile.profileData.profile_settings.company_profile)
        params.set["profile_settings.company_profile"] = true;
      P.user_careers_profile.updateProfile(params);
      return false;
    });
    $('.unpublish_profile').click(function() {
      P.user_careers_profile.updateProfile({unset:{"profile_settings.published":true}});
      return false;
    });
    $('.edit_settings').click(function() {
      P.user_careers_profile.editCareersSettings();
      return false;
    });
    $(".archive").click(function() {
      if (typeof(COMPANY_USER_ID) === 'undefined') return false;
      var userId = $("#careers_profile").attr("uid");
      var method = "company.archive_profile";
      if (P.user_careers_profile.profileData.archived.exist(COMPANY_USER_ID))
        method = "company.unarchive_profile";
      PA.call_pj(method, {user_id: userId}, $("#user_profile_wrapper"), function(data) {
        if (method == "company.archive_profile") {
          $("#" + userId).remove();
          $('.archive_icon, .archive_icon_small, .archive').addClass('active');
          $('.archive_text').text('Un-archive Profile');
          P.user_careers_profile.profileData.archived.push(COMPANY_USER_ID);
        } else {
          $('.archive_icon, .archive_icon_small, .archive').removeClass('active');
          $('.archive_text').text('Archive Profile');
          P.user_careers_profile.profileData.archived = [];
        }
      }, function(err){
        alert(err);
      });
      return false;
    });
    $(".favorite").click(function() {
      var method = "favorite_profile";
      if ($('.favorite_text').html() == "Unfavorite")
        method = "unfavorite_profile";
      var userId = $("#careers_profile").attr("uid");
      PA.call_pj("company."+method, {user_id: userId, company_id:INTERNAL_ID}, 1, function(data) {
        PEM.fire("toggleFavorite", {userId: userId, method: method});
      }, function(err){
        alert(err);
      });
      if (method == "favorite_profile") {
        $(".profile_who .favorite_icon, .favorite").addClass('active');
        $('.favorite_text').html("Unfavorite");
      }
      else {
        $(".profile_who .favorite_icon, .favorite").removeClass('active');
        $('.favorite_text').html("Favorite");
      }
      return false;
    });
    $('.favorite_link').click(function() {
      var method = "favorite_profile";
      if ($(".favorite_text").html() == "Unfavorite")
        method = "unfavorite_profile";
      var userId = $("#careers_profile").attr("uid");
      PA.call_pj("company."+method, {user_id: userId, company_id:INTERNAL_ID}, 1, function(data) {
        PEM.fire("toggleFavorite", {userId: userId, method: method});
      }, function(err){
        alert(err);
      });
      if (method == "favorite_profile") {
        $(".profile_who .favorite_icon, .favorite").addClass('active');
        $(".favorite_text").html("Unfavorite");
      }
      else {
        $(".profile_who .favorite_icon, .favorite").removeClass('active');
        $(".favorite_text").html("Favorite");
      }
      return false;
    });
    $(".archive").click(function(){
      var method = "archive";
      if ($(".archive_text").html() == "Unarchive Profile")
          method = "un_archive";
      if (method == "archive") {
        $(".archive").addClass("active");
        $(".archive_text").html("Unarchive Profile");
      }
      else {
        $(".archive").removeClass("active");
        $(".archive_text").html("Archive Profile");
      }
      return false;
    });
    $('.remove_fast_actions_tips').click(function(){
      $(this).parent().parent().hide();
      PA.markSeenCompany("fast_actions");
      return false;
    });
    $(".send_message").click(function() {
      var cName = false;
      if (typeof(COMPANY_NAME) != 'undefined')
        cName = COMPANY_NAME;
      var params = {
        uid: P.user_careers_profile.profileData.user_id,
        name: P.user_careers_profile.profileData.name,
        companyName: cName
      };
      PEM.fire("showSendMessageModal", params);
      return false;
    });
    $(".see_messages").click(function() {
      PA.call_pj("company.get_conversation", {user_id: P.user_careers_profile.profileData.user_id}, 1, function(data) {
        var params = {
          withName: data.with_name,
          messages: data.messages
        }
        PEM.fire("showConversationModal", params);
      });
      return false;
    });
    $('.profile_text_input.new_class').keypress(function(e) {
      if(e.which == 13) {
        // add new class
        var term = $(this).attr("term");
        var where = "courses_stud";
        if ($(this).attr("ista") == "yes") where = "courses_inst";
        var data = {name:$(this).val()};
        var key = where + "." + term;
        var mySet = {};
        mySet[key] = data;
        P.user_careers_profile.updateProfile({add_to_set:mySet});
        return false;
      }
    });
    $('.delete_existing_class').click(function(){
      var me = $(this);
      var data = {};
      if (me.attr('cn').length > 0) data.cn = me.attr('cn');
      if (me.attr('name').length > 0) data.name = me.attr('name');
      if (me.attr('type').length > 0) data.type = me.attr('type');
      var key = "courses_stud";
      if (me.attr('ista') == "yes") key = "courses_inst";
      key += "." + me.closest(".profile_section").attr("term");
      mySet = {};
      mySet[key] = data;
      P.user_careers_profile.updateProfile({pull:mySet});
      return false;
    });
    $('.add_new_class').click(function(){
      $(this).hide();
      $(this).parent().find('.adding_class').show();
    });
    $('.add_new_term_class').click(function(){
      var me = $(this);
      var term = me.closest(".adding_class").find(".adding_class_term").val();
      var where = "courses_stud";
      if (me.attr("ista") == "yes") where = "courses_inst";
      var data = {name:me.closest(".adding_class").find(".profile_text_input").val()};
      var key = where + "." + term;
      var mySet = {};
      mySet[key] = data;
      P.user_careers_profile.updateProfile({add_to_set:mySet});
      return false;
    });
    $('.upload_resume_link').click(function(){
      $('#upload_form_file').click();
      return false;
    });
    $('.close_privacy_msg').click(function(){
      $(this).closest(".message").remove();
      PA.markSeenUnseen("prof_priv");
    });
    $('.request_resume').click(function(){
      var userId = $("#careers_profile").attr("uid");
      var _this = this;
      if (typeof(INTERNAL_ID) != 'undefined') {
        var params = {user_id: userId, company_id:INTERNAL_ID};
        if ($('.request_resume_as').hasClass("anon"))
          params.config = {anonymous:true};
        PA.call_pj("careers_company.request_resume", params, 1, function(data) {
          $(_this).replaceWith("Resume requested!");
          $('.request_resume_as').addClass("disabled");
          $('.request_resume_as').unbind();
          var prof = P.user_careers_profile.profileData;
          if (!prof.resume_req) prof.resume_req = {};
          prof.resume_req[INTERNAL_ID] = 1;
        }, function(err){
          alert(err);
        });
      }
      return false;
    });
    $('.show_tagging').click(function(){
      $(this).closest('.careers_tagging').find('.tagging_wrapper').show();
      $(this).hide();
      $('.hide_tagging').show();
      $('.profile_company_tag_list').hide();
      return false;
    });
    $('.hide_tagging').click(function(){
      $(this).closest('.careers_tagging').find('.tagging_wrapper').hide();
      $(this).hide();
      $('.show_tagging').show();
      if (!P.user_careers_profile.profileData.company_tags || P.user_careers_profile.profileData.company_tags.length == 0)
        $('.profile_company_tag_list').hide();
      else {
        var html = '';
        for (var i = 0; i < P.user_careers_profile.profileData.company_tags.length; i++) {
          html += '<li><a href="#" class="tag folder selected" onclick="return false;">' + P.user_careers_profile.profileData.company_tags[i] + '</a></li>';
        }
        $(".selected_tags").html(html);
        $('.profile_company_tag_list').show();
      }
      return false;
    });
    $('.create_new_tag').click(function(){
      var tag = $(this).parent().find('.new_tag_textbox').val();
      if (tag) {
        $(this).parent().find('.new_tag_textbox').val('');
        var prof = P.user_careers_profile.profileData;
        if (!prof.company_tags) prof.company_tags = [];
        prof.company_tags.push(tag);
        PA.call_pj("careers_company.update_profile_tag", {tags: prof.company_tags, internal_id:INTERNAL_ID, uid:prof.user_id}, null);
        $('.tag_list_profile').append('<li class="li_tag_wrapper" tag="' + tag + '"><a href="#" class="tag folder selected" onclick="return P.user_careers_profile.toggleTag(this);">' + tag + '</a></li>');
        $('.tag_list_modal').append('<li class="li_tag_wrapper" tag="' + tag + '"><a href="#" class="tag folder" onclick="return false;">' + tag + '</a> <a href="#" onclick="return P.user_careers_profile.deleteTag(this);">Remove</a></li>');
        PA.call_pj("careers_company.update_tag", {tag: tag, internal_id:INTERNAL_ID}, null, function(data) {
          COMPANY_TAGS = data.sort();
        });
      }
    });
    $('.create_new_tag_pure').click(function(){
      var tag = $(this).parent().find('.new_tag_textbox').val();
      if (tag) {
        $(this).parent().find('.new_tag_textbox').val('');
        var prof = P.user_careers_profile.profileData;
        if (!prof.company_tags) prof.company_tags = [];
        prof.company_tags.push(tag);
        PA.call_pj("careers_company.update_profile_tag", {tags: prof.company_tags, internal_id:INTERNAL_ID, uid:prof.user_id}, null);
        $('.tag_list_profile').append('<li class="li_tag_wrapper" tag="' + tag + '"><a href="#" class="tag folder selected" onclick="return P.user_careers_profile.toggleTag(this);">' + tag + '</a></li>');
        $('.tag_list_modal').append('<li class="li_tag_wrapper" tag="' + tag + '"><a href="#" class="tag folder" onclick="return false;">' + tag + '</a> <a href="#" onclick="return P.user_careers_profile.deleteTag(this);">Remove</a></li>');
        PA.call_pj("careers_company.update_tag", {tag: tag, internal_id:INTERNAL_ID}, null, function(data) {
          COMPANY_TAGS = data.sort();
        });
      }
    });
    $('.download_resume').click(function() {
      PA.call_pj("user_profile.company_download_resume", {uid:$(this).attr("uid")}, 1);
      params = {
        message: "resume",
        uid: $(this).attr("uid"),
        link: $(this).attr("href"),
        event: "careers.profile_info_link",
        from: "profile"
      }
      var prof = P.user_careers_profile.profileData;
      if (typeof(INTERNAL_ID) != 'undefined' && prof.resume_req && prof.resume_req[INTERNAL_ID]) params.message = "resume req";
      PA.call_pj("generic.event_to_requests", params,1);
    });
    $(".profile_info_link").click(function() {
      var uid = $(this).closest("#careers_profile").attr("uid");
      if (!uid) return;
      params = {
        message: $(this).attr('ltype'),
        uid: $(this).closest("#careers_profile").attr("uid"),
        link: $(this).attr("href"),
        event: "careers.profile_info_link",
        from: "profile"
      }
      PA.call_pj("generic.event_to_requests", params,1);
    });
    $(".status_value").unbind().change(function() {
      var new_status = $("#careers_profile[uid=" + P.user_careers_profile.profileData.user_id + "] .status_value").val();
      PA.call_pj("careers_company.update_candidate_status", {user_id:P.user_careers_profile.profileData.user_id , status:new_status, update_if_set: 1}, 1, function(data) {
        P.user_careers_profile.profileData.company_status = data;
        var status = data.status;
        var updater = data.updater;
        var params = {
          status: status,
          updater: updater,
          user_id: P.user_careers_profile.profileData.user_id
        }
        PEM.fire("updateCandidateStatus", params);

      },function(err){
        alert(err);
      });
    });
    if (P.user_careers_profile.profileData.company_status && P.user_careers_profile.profileData.company_status.status) {
      $('.status_value').val(P.user_careers_profile.profileData.company_status.status);
    }
    $(".tipsy").remove(); // remove all tipsy messages
    $('[tipsy]').tipsy({gravity: 'n', html: true, title:"tipsy"});
    var buttons = PEM.callFirstTrue("studentProfilePrevNext");
    if (buttons && !buttons.p) $('.profile_nav_btn_previous').addClass("disabled");
    if (buttons && !buttons.n) $('.profile_nav_btn_next').addClass("disabled");
    $('.profile_nav_btn_previous').unbind().click(function(){
      PEM.fire("studentProfilePrevNext", -1);
      return false;
    });
    $('.profile_nav_btn_next').unbind().click(function(){
      PEM.fire("studentProfilePrevNext", 1);
      return false;
    });
    $('.add_profile_note').click(function(){
      $(this).hide();
      $(this).siblings('.action_note_edit').show();
      return false;
    });
    $('.cancel_profile_note').click(function(){
      var top = $(this).closest('.action_note_edit');
      top.hide();
      top.siblings('.add_profile_note').show();
      return false;
    });
    $('.save_profile_note').click(function(){
      var top = $(this).closest('.action_note_edit');
      var note = top.find('.company_actions_note').val();
      var when = top.attr("when");
      var params = {
        internal_id:INTERNAL_ID,
        uid:P.user_careers_profile.profileData.user_id,
        note:note
      };
      if (when)
        params.update = when;
      PA.call_pj("careers_company.add_update_profile_note", params, null, function(data) {
        if (when) {
          // update note here
          top.siblings('.add_profile_note').html('&ldquo;' + note + '&rdquo; <a href="#" class="edit_profile_note">Edit</a>');
          top.siblings('.add_profile_note').show();
          top.hide();
        } else {
          // add note here
          // actually need to refresh the whole thing
          var pd = P.user_careers_profile.profileData;
          if (!pd.company_log) pd.company_log = [];
          pd.company_log.push({
              who:COMPANY_USER_ID,
              note:note,
              when:parseInt(data),
              action:"note"
          });
          if ($('#user_profile_wrapper_modal').is(':visible'))
            P.user_careers_profile.showProfile(P.user_careers_profile.profileData, true, false, '#user_profile_wrapper_modal', true);
          else
            P.user_careers_profile.showProfileToCompany(pd);
        }
      });
      return false;
    });
    if (!PA.isSeenCompany("fast_actions")) $('.fast_actions_tips').show();
  },
  toggleTag: function(me) {
    var prof = P.user_careers_profile.profileData;
    if (!prof.company_tags) prof.company_tags = [];
    var tag = $(me).text();
    $(".tag_library li a").each(function() {
      if ($(this).text() == tag) {
        if ($(me).hasClass("active"))
          $(this).removeClass("active");
        else
          $(this).addClass("active");
        return false;
      }
    });
    if ($(me).hasClass("active")) {
      $(me).remove();
      prof.company_tags.remove(tag);
    } else {
      $(me).addClass("active");
      prof.company_tags.push(tag);
    }
    PA.call_pj("careers_company.update_profile_tag", {tags: prof.company_tags, internal_id:INTERNAL_ID, uid:prof.user_id}, null);
    return false;
  },
  toggleTagFromLibrary: function(me) {
    if ($(".tag_library").hasClass("edit_mode"))
      return false;
    var prof = P.user_careers_profile.profileData;
    if (!prof.company_tags) prof.company_tags = [];
    var tag = $(me).text();
    if ($(me).hasClass("active")) {
      $(me).removeClass("active");
      prof.company_tags.remove(tag);
      $("#selected_user_tags li").each(function() {
        if ($(this).find("a").text() == tag)
          $(this).find("a").remove();
      });
      PA.call_pj("careers_company.update_profile_tag", {tags: prof.company_tags, internal_id:INTERNAL_ID, uid:prof.user_id}, null);
    } else {
      $(me).addClass("active");
      P.user_careers_profile.addTag(tag)
    }
    return false;
  },
  deleteTag: function(me) {
    var tag = $(me).parent().parent().text();
    var prof = P.user_careers_profile.profileData;
    if (!prof.company_tags) prof.company_tags = [];
    prof.company_tags.remove(tag);
    $('#selected_user_tags li').each(function(){
      if ($(this).text() == tag) $(this).remove();
    });
    $(me).parent().parent().parent().remove();
    PA.call_pj("careers_company.update_tag", {tag: tag, internal_id:INTERNAL_ID, remove:true}, null, function(data) {
      COMPANY_TAGS = data.sort();
    });
    PA.call_pj("careers_company.update_profile_tag", {tags: prof.company_tags, internal_id:INTERNAL_ID, uid:prof.user_id}, null);
  },
  addTag: function(tagName) {
    var prof = P.user_careers_profile.profileData;
    if (!prof.company_tags) prof.company_tags = [];
    $(".tags_autocomplete").hide();
    $("#add_tags").val('');
    $(".tag_library li a").each(function() {
      if ($(this).text() == tagName) {
        $(this).addClass("active");
      }
    });
    if  (prof.company_tags.exist(tagName))
      return false;
    prof.company_tags.push(tagName);
    PA.call_pj("careers_company.update_profile_tag", {tags: prof.company_tags, internal_id:INTERNAL_ID, uid:prof.user_id}, null);
    var tagExists = false;
    $("#selected_user_tags li").each(function() {
      if ($(this).find("a").text() == tagName) {
        $(this).find("a").addClass("active");
        tagExists = true;
      }
    });
    if (!tagExists)
      $("#add_tags_input").before('<li><a href="#" class="careers_tag active" onclick="return P.user_careers_profile.toggleTag(this);">' + tagName + '</a></li>');
    PA.call_pj("careers_company.update_tag", {tag: tagName, internal_id:INTERNAL_ID}, null, function(data) {
      if (typeof(COMPANY_TAGS) != 'undefined' && !COMPANY_TAGS.exist(tagName)) {
        $(".start_manage_tag_toggle").before('<li><a href="#" class="careers_tag active" onclick="return P.user_careers_profile.toggleTagFromLibrary(this);">' + tagName + '<span class="remove_tag_wrap"><i class="icon-remove-sign remove_tag" onclick="return P.user_careers_profile.deleteTag(this);"></i></span></a></li>');
      } else {
      }
      COMPANY_TAGS = data.sort();
    });
  },
  startUpload: function() {
    P.user_careers_profile.uploading = true;
    $.blockUI();
    $('#upload_form').submit();
  },
  onUploadComplete: function() {
    if (!P.user_careers_profile.uploading) return false;
    P.user_careers_profile.uploading = false;
    $.unblockUI();
    var content = $('#hidden-upload-frame-ucp').contents().find('body').html();
    P.user_careers_profile.profileData.resume = content;
    P.user_careers_profile.showProfile(P.user_careers_profile.profileData);
  },
  editCareersSettings: function() {
    if (P.user_careers_profile.profileData)
      P.user_careers_profile.editCareersSettingsShow();
    else {
      P.user_careers_profile.loadMyProfile(P.user_careers_profile.editCareersSettingsShow);
    }
  },
  editCareersSettingsShow: function() {
    if ($('#edit_profile_settings').length > 0)
      $('#edit_profile_settings').modal('show');
    else {
      $('#user_profile_wrapper').append(P.user_careers_profile.settingsTemplate({profile:P.user_careers_profile.profileData}));
      $('#edit_profile_settings .submit').click(function(){
        P.user_careers_profile.saveSection($('#edit_profile_settings'));
        $('#edit_profile_settings').modal('hide');
        return false;
      });
      $('#edit_profile_settings').modal('show');
    }
  },
  defaultExtraFields: function(type) {
    return '<div class="profile_sub_section add_section" data-field-array="' + type + '"> \
            <input type="text" class="profile_text_input full_width_input show_for_edit" placeholder="What was your title?" data-subfield="title"> \
            <input type="text" class="profile_text_input full_width_input show_for_edit" placeholder="Where did you do this?" data-subfield="where"> \
            <input type="text" class="profile_text_input full_width_input show_for_edit" placeholder="When did you do this?" data-subfield="when"> \
            <textarea rows="5" class="profile_textarea show_for_edit" placeholder="What did you do?" data-subfield="what"></textarea> \
            <a href="#" class="show_for_student action_link delete_button show_for_edit right_align" onclick="$(this).closest(\'.profile_sub_section\').remove();">delete section</a> \
        </div>';
  },
  saveSection: function(top) {
    noShow = false;
    if (top.top) {
      noShow = top.noShow;
      top = top.top;
    }
    var text = top.find("input[data-field][type=text], input[data-field][type=hidden]");
    var textarea = top.find("textarea[data-field]");
    var radio = top.find("input[data-field][type=radio]:checked");
    var check = top.find("input[data-field][type=checkbox]");
    var select = top.find("select[data-field]");
    var arr = top.find("input[data-field-array][type=text], input[data-field-array][type=hidden], textarea[data-field-array]");
    var arr_a = top.find("a[data-field-array]");
    var divs = top.find("div[data-field-array]");
    var params = {set:{},div_id:top.attr("id")};
    for (var i = 0; i < text.length; i++) {
      var e = $(text[i]);
      params.set[e.attr('data-field')] = e.val();
    }
    for (var i = 0; i < textarea.length; i++) {
      var e = $(textarea[i]);
      params.set[e.attr('data-field')] = e.val();
    }
    for (var i = 0; i < select.length; i++) {
      var e = $(select[i]);
      var val = e.val();
      var key = e.attr('data-field');
      if (key == "school_id") {
        // find it in the array
        for (var i = 0; i < P.user_careers_profile.profileData.schools.length; i++) {
          if (P.user_careers_profile.profileData.schools[i].id == val) {
            key = "school";
            val = P.user_careers_profile.profileData.schools[i].name;
          }
        }
      }
      params.set[key] = val;
    }
    for (var i = 0; i < radio.length; i++) {
      var e = $(radio[i]);
      var key = e.attr('data-field');
      var val = e.attr('value');
      if (params.set[key]) val = val + ", " + params.set[key];
      params.set[key] = val;
    }
    for (var i = 0; i < check.length; i++) {
      var e = $(check[i]);
      if (e.attr('checked'))
        params.set[e.attr('data-field')] = true;
      else
        params.set[e.attr('data-field')] = false;
    }
    for (var i = 0; i < arr_a.length; i++) {
      var e = $(arr_a[i]);
      var field = e.attr('data-field-array');
      if (!params.set[field]) params.set[field] = [];
    }
    for (var i = 0; i < arr.length; i++) {
      var e = $(arr[i]);
      var field = e.attr('data-field-array');
      if (!params.set[field]) params.set[field] = [];
      if (e.val())
        params.set[field].push(e.val());
    }
    for (var i = 0; i < divs.length; i++) {
      var e = $(divs[i]);
      var arrField = e.attr('data-field-array');
      if (!params.set[arrField]) params.set[arrField] = [];
      // now create hashmap
      var map = {};
      var sub = e.find("[data-subfield]");
      var nr = 0;
      for (var j = 0; j < sub.length; j++) {
        var f = $(sub[j]);
        if ((f.attr("type") == "radio" || f.attr("type") == "checkbox") && !f.attr("checked")) continue;
        if (f.val()) {
          map[f.attr('data-subfield')] = f.val();
          if (f.prop("tagName") != "SELECT" || arrField == "skills_list_tmp") nr += 1;
        }
      }
      if (nr > 0) params.set[arrField].push(map);
    }
    if (params.set.skills_list_tmp) {
      // generate skills_list and skills_hash
      var skillsList = [];
      var skillsHash = {};
      for (var i = 0; i < params.set.skills_list_tmp.length; i++) {
        var e = params.set.skills_list_tmp[i];
        skillsList.push(e.name);
        var normalized = e.name.toLowerCase().replace(/[^\w]/g, "_");
        skillsHash[normalized] = e;
      }
      delete params.set.skills_list_tmp;
      params.set.skills_list = skillsList;
      params.set.skills_hash = skillsHash;
    }
    P.user_careers_profile.updateProfile(params, noShow);
  },
  setUser: function(user) {
    P.user_careers_profile.user = user;
    if (typeof(LOAD_MY_PROFILE) != 'undefined') P.user_careers_profile.showMyProfile();
  },
  loadMyProfile: function(callback) {
    if (!P.user_careers_profile.profileData && !P.user_careers_profile.user.isPublic) {
      P.modules.getData("user_profile", 1, function(data){
        
        if( !data.preference ) data.preference = {selectedPreferences : [], sizeSlider : {}};
        if(!data.work_experience) data.work_experience = [];

        P.user_careers_profile.profileData = data;
        P.user_careers_profile.prepareProfile(data);
        PEM.fire("profileChange", data);
        if (callback) callback.call(window, data);
      });
      return false;
    }
    return P.user_careers_profile.profileData;
  },
  showMyProfile: function() {
    //if (P.user_careers_profile.user.isInst && !P.user_careers_profile.user.isTA) return;
    PEM.fire("cleanDashboard");
    $('#student_careers_navbar li').removeClass('active');
    if (!P.user_careers_profile.profileData) {
      PA.call_pj("user_profile.get_profile", {}, null, function(data){
        P.user_careers_profile.profileData = data;
        PEM.fire("profileChange", data);
        P.user_careers_profile.showProfile(P.user_careers_profile.profileData);
      }, function(err){alert(err);});
      return;
    }
    P.user_careers_profile.showProfile(P.user_careers_profile.profileData);
  },
  showCustomProfile: function(uid) {
    PEM.fire("cleanDashboard");
    $('#student_careers_navbar li').removeClass('active');
    PA.call_pj("user_profile.get_public_profile", {user_id:uid}, null, function(data){
        if (data["company_status"]) {
          var updater_id = data["company_status"]["updater"];
          if (COMPANY_USERS[updater_id]) {
            data["company_status"]["updater"] = COMPANY_USERS[updater_id].name;
          }
        }
      P.user_careers_profile.profileData = data;
      PEM.fire("profileChange", data);
      P.user_careers_profile.showProfile(P.user_careers_profile.profileData, true);
    }, function(err){alert(err);});
  },
  showCustomProfileModal: function(uid) {
    var from = "discover";
    if (typeof(LOAD_PROFILE) != 'undefined' && LOAD_PROFILE) from = "link";
    var params = {user_id:uid, from:from};
    if (typeof(DEBUG_PARAMS) != 'undefined') {
      params.debug = DEBUG_PARAMS;
      if (DEBUG_PARAMS.from) params.from = DEBUG_PARAMS.from;
    }
    LOAD_PROFILE = false;
    PA.call_pj("user_profile.get_public_profile", params, null, function(data){
         if (data["company_status"]) {
           var updater_id = data["company_status"]["updater"];
           if (COMPANY_USERS[updater_id]) {
             data["company_status"]["updater"] = COMPANY_USERS[updater_id].name;
           }
         }
      P.user_careers_profile.profileData = data;
      PEM.fire("profileChange", data);
      P.user_careers_profile.showProfile(P.user_careers_profile.profileData, true, false, '#user_profile_wrapper_modal', true);
      setTimeout(function() {
        $('#user_profile_wrapper_modal').scrollTop(0);
      }, 200);
      $('#user_profile_modal').modal('show');
      $('.user_profile_modal_title').text(P.user_careers_profile.profileData.name);
      $('#back_to_company_wrapper').hide();
    }, function(err){alert(err);});
  },
  detectWebsite: function(url, type) {
    if (!url) return "";
    url = url.trim();
    var actualUrl = url;
    if (url.indexOf(".") > 0 && url.toLowerCase().indexOf("http") != 0)
      actualUrl = "http://" + url;
    if (actualUrl.toLowerCase().indexOf("http") == 0) {
      return "<a href='" + actualUrl + "' class='profile_info_link' ltype='" + type + "' target='_blank'>" + url + "</a>";
    }
    return url;
  },
  prepareProfile: function(data) {
    var testForValue = function(hash) {
      var hasValue = false;
      for (var i in hash) {
        if (hash[i] && i != "email") {
          hasValue = true;
          break;
        }
      }
      return hasValue;
    }
    var total = 100;
    if (!data.company) data.company = {};
    if (!data.contact) data.contact = {};
    if (!testForValue(data.contact)) {data.noContact = true; total -= 10;}
    if (!data.academics) data.academics = {};
    if (!testForValue(data.academics)) {data.noAcademics = true;total -= 10;}
    if (!data.archived) data.archived = [];
    if (!data.awards) data.awards = [];
    if (data.awards.length == 0) {data.noAwards = true;total -= 10;}
    if (!data.work) data.work = [];
    if (data.work.length == 0) {data.noWork = true;total -= 10;}
    if (!data.research) data.research = [];
    if (data.research.length == 0) {data.noResearch = true;total -= 10;}
    if (!data.side_projects) data.side_projects = [];
    if (data.side_projects.length == 0) {data.noSideProjects = true;total -= 10;}
    if (!data.extracurriculars) data.extracurriculars = [];
    if (data.extracurriculars.length == 0) {data.noExtracurriculars = true;total -= 10;}
    if (!data.skills_list) data.skills_list = [];
    if (!data.skills_hash) data.skills_hash = {};
    if (data.skills_list.length == 0) {data.noSkills = true;total -= 10;}
    if (!data.links) data.links = {};
    if (!testForValue(data.links)) {data.noLinks = true;total -= 10;}
    if (data.noLinks && data.contact.website) {data.noLinks = false;total += 10}
    if (!data.about_me) {data.about_me = "";total -= 10;}
    if (!data.profile_settings) data.profile_settings = {};
    if (!data.companies) data.companies = [];
    if (total <= 0) total = 10;

    if (!data.academics.grad_year) data.noGradYear = true;
    if (!data.academics.major) data.noMajor = true;
    if (!data.academics.program) data.noProgram = true;
    if (data.noGradYear || data.noProgram) data.noGradYearOrProgram = true;
    if (!data.contact.website || !data.links.linkedin || !data.resume) data.noResumeOrLink = true;

    if (data.schools)
      data.schools.sort(function(a,b){ if(a.name>b.name) return 1; if (a.name<b.name) return -1; return 0;})
    data.allEmails = data.contact.email;
    if (!data.allEmails) data.allEmails = data.email;
    data.allEmails2 = data.allEmails;
    if (typeof(data.emails) == "string") {
      data.allEmails = data.emails.replace(/["\[\]]/g, "").replace(/,/g, "<br/>").trim();
      data.allEmails2 = data.emails.replace(/["\[\]]/g, "").trim();
    }
    if (typeof(data.emails) == "object" && data.emails.join) {
      data.allEmails = data.emails.join("<br/>");
      data.allEmails2 = data.emails.join(", ");
    }
    if (data.contact.custom_email) {
      data.allEmails = data.contact.custom_email.replace(/,/g, "<br/>").trim();
      data.allEmails2 = data.contact.custom_email;
    }
    // make links
    data.contact.WS = P.user_careers_profile.detectWebsite(data.contact.website, 'website');
    data.links.FB = P.user_careers_profile.detectWebsite(data.links.facebook, 'facebook');
    data.links.LI = P.user_careers_profile.detectWebsite(data.links.linkedin, 'linkedin');
    data.links.TW = P.user_careers_profile.detectWebsite(data.links.twitter, 'twitter');
    data.links.GI = P.user_careers_profile.detectWebsite(data.links.github, 'github');
    data.links.SO = P.user_careers_profile.detectWebsite(data.links.stackoverflow, 'stackoverflow');
    data.profileProgress = total;
    if (total < 25) data.profileProfessLessThan25 = true;
    if (data.photo) {
      if (data.photo.indexOf("_35.png") > 0) {
        data.photo = data.photo.replace("_35.png", "") + "_100.png";
      }
      data.imagePath = 'https://d1b10bmlvqabco.cloudfront.net/photos/' + data.user_id + '/' + data.photo;
    } else if (data.facebook_id)
      data.imagePath = 'https://graph.facebook.com/' + data.facebook_id + '/picture?type=square';

    var program = data.academics.program;
    if (program && program.toLowerCase() == "grad") data.academics.program = "Graduate";
    if (program && program.toLowerCase() == "undergrad") data.academics.program = "Undergraduate";

    data.skillsList = [];
    for (var i = 0; i < data.skills_list.length; i++) {
      var skill = data.skills_list[i].toLowerCase().replace(/[^\w]/g, "_");
      if (data.skills_hash[skill])
        data.skillsList.push(data.skills_hash[skill]);
    }
    // prepare courses
    if (!P.user_careers_profile.termOrderHash) {
      P.user_careers_profile.termOrderHash = {};
      for (var i = 0; i < P.user_careers_profile.termOrder.length; i++) {
        P.user_careers_profile.termOrderHash[P.user_careers_profile.termOrder[i]] = i;
      }
    }
    var hasTAed = false;
    if (data.courses_inst) {
      var arr = [];
      for (var term in data.courses_inst) {
        var classes = data.courses_inst[term];
        if (!term) term = "Other";
        if (classes.length > 0) {
          var company_profile_id = "";
          if (typeof(INTERNAL_ID) != 'undefined')
            company_profile_id = INTERNAL_ID;
          classes = $.map(classes, function(class_obj) {return {"company_profile_id": company_profile_id, "cn": class_obj.cn, "name": class_obj.name, "cn_esc": escape(class_obj.cn), "name_esc": escape(class_obj.name), "type": class_obj.type, "term": escape(term), "school": escape(data.school)}});
          arr.push({term:term, nr:P.user_careers_profile.termOrderHash[term], classes:classes});
          hasTAed = true;
        }
      }
      arr.sort(function(a,b){return a.nr - b.nr;});
      data.coursesInst = arr;
    }
    data.hasTAed = hasTAed;
    var hasStudded = false;
    if (data.courses_stud) {
      var arr = [];
      for (var term in data.courses_stud) {
        var classes = data.courses_stud[term];
        if (!term) term = "Other";
        if (classes.length > 0) {
          var company_profile_id = "";
          if (typeof(INTERNAL_ID) != 'undefined')
            company_profile_id = INTERNAL_ID;
          classes = $.map(classes, function(class_obj) {return {"company_profile_id": company_profile_id, "cn": class_obj.cn, "name": class_obj.name, "cn_esc": escape(class_obj.cn), "name_esc": escape(class_obj.name), "type": class_obj.type, "term": escape(term), "school": escape(data.school)}});
          arr.push({term:term, nr:P.user_careers_profile.termOrderHash[term], classes:classes});
          hasStudded = true;
        }
      }
      arr.sort(function(a,b){return a.nr - b.nr;});
      data.coursesStud = arr;
    }
    data.hasStudded = hasStudded;
    if (typeof(COMPANY_PROFILE) != 'undefined') data.onCompany = true;
  },
  showProfile: function(data, asCompany, noShow, id, forCompany) {
    data.me = false;
    if (!id) id = '#user_profile_wrapper';
    if (P.user_careers_profile.user)
      data.me = (data.user_id === P.user_careers_profile.user.id);
    if (asCompany && !data.me) asCompany = false;
    if (asCompany) data.me = false;
    data.notMe = !data.me;
    data.asCompany = asCompany;
    var showPrivacyMessage = false;
    var forStudent = true;
    if (forCompany) forStudent = false;
    var canAdmin = false;
    if (typeof(CAN_ADMIN) != 'undefined' && CAN_ADMIN) canAdmin = true;

    P.user_careers_profile.prepareProfile(data);
    if (!noShow) {
      var user = P.user_careers_profile.user;
      if (data.me && user && user.config.seen_message && !user.config.seen_message.exist("prof_priv")) {
        showPrivacyMessage = true;
      }
      var req = false;
      var reqAnon = false;
      var myid = "";
      if (typeof(INTERNAL_ID) != 'undefined' && data.resume_req_arr && data.resume_req_arr.exist(INTERNAL_ID + "_anon")) reqAnon = true;
      if (typeof(INTERNAL_ID) != 'undefined' && data.resume_req && data.resume_req[INTERNAL_ID]) req = true;
      if (typeof(COMPANY_USER_ID) != 'undefined') myid = COMPANY_USER_ID;
      var tags = [];
      if (typeof(COMPANY_TAGS) != 'undefined') tags = COMPANY_TAGS;
      $(id).html(P.user_careers_profile.template({
        user:user,
        profile:data,
        forStudent:forStudent,
        forCompany:forCompany,
        showPrivacy:showPrivacyMessage,
        pastTerms:P.user_careers_profile.pastTerms,
        canAdmin: canAdmin,
        allTags: tags,
        res_req:req,
        myid: myid,
        res_req_anon:reqAnon
      }));
      $(id).show();
      P.user_careers_profile.initHandlers();
      if (asCompany) {
        $('.show_for_student_preview').show();
        $('.hide_for_student_preview').hide();
        //$('.profile_actions').hide();
        if (P.user_careers_profile.profileData.noContact)
          $('.profile_contact').hide();
      } else {
        //$('.profile_actions').show();
      }
      if (!data.me && P.user_careers_profile.profileData.noContact)
        $('.profile_contact').hide();
      //if (typeof(INTERNAL_ID) != 'undefined') {
      //  if (window.history && window.history.pushState) {
      //    try {
      //      window.history.pushState({}, "User profile", "/company/" + INTERNAL_ID + "/user/" + data.user_id);
      //    } catch (err) {}
      //  }
      //}
      if (P.user_careers_profile.profileData.no_profile || P.user_careers_profile.profileData.no_info) {
        $('.hide_for_not_published').hide();
        $('.show_for_not_published').show();
      }
    }
  },
  showProfileToCompany: function(profile) {
    P.user_careers_profile.profileData = profile;
    P.user_careers_profile.prepareProfile(profile);
    P.user_careers_profile.profileData = profile;
    var req = false;
    var reqAnon = false;
    var myid = "";
    if (typeof(INTERNAL_ID) != 'undefined' && profile.resume_req_arr && profile.resume_req_arr.exist(INTERNAL_ID + "_anon")) reqAnon = true;
    if (typeof(INTERNAL_ID) != 'undefined' && profile.resume_req && profile.resume_req[INTERNAL_ID]) req = true;
    if (typeof(COMPANY_USER_ID) != 'undefined') myid = COMPANY_USER_ID;
    var canAdmin = false;
    if (typeof(CAN_ADMIN) != 'undefined' && CAN_ADMIN) canAdmin = true;
    var tags = [];
    if (typeof(COMPANY_TAGS) != 'undefined') tags = COMPANY_TAGS;
    $('#user_profile_wrapper').html(P.user_careers_profile.template({
          profile:profile,
          forCompany:true,
          fromSearch:true,
          res_req:req,
          res_req_anon:reqAnon,
          canAdmin:canAdmin,
          myid:myid,
          allTags:tags
    }));
    //if (typeof(INTERNAL_ID) != 'undefined') {
    //  if (window.history && window.history.pushState) {
    //    try {
    //      window.history.pushState({}, "User profile", "/company/" + INTERNAL_ID + "/user/" + profile.user_id);
    //    } catch (err) {}
    //  }
    //}
    P.user_careers_profile.initHandlers();
    $('.show_for_student_preview').hide();
    $(".empty_academics").hide();
    $("#company_search").hide();
    $('.back_to_search').show();
    $('#user_profile_wrapper').show();
  },
  updateProfile: function(params, noShow) {
    PA.call_pj("user_profile.update_profile", params, null, function(data) {
      P.user_careers_profile.profileData = data;
      PEM.fire("profileChange", data);
      if ($('#careers_profile').length == 0) noShow = true;
      P.user_careers_profile.showProfile(P.user_careers_profile.profileData, false, noShow);
      PEM.fire("profileChange", P.user_careers_profile.profileData);
    }, function(err){alert(err);})
  },
  generateSkillList: function(selected) {
    var html = "";
    for (var i = 0; i < P.user_careers_profile.skillList.length; i++) {
      var skill = P.user_careers_profile.skillList[i];
      html += "<option value='" + skill + "' ";
      if (selected == skill) html += "selected";
      html += ">" + skill + "</option>";
    }
    return html;
  },
  generateYearList: function(selected) {
    var html = "<option value=''>Years Exp.</option>";
    selected = parseInt(selected);
    for (var i = 1; i < 10; i++) {
      html += "<option value='" + i + "' ";
      if (selected == i) html += "selected";
      html += ">" + i + " year" + (i > 1 ? "s":"") + "</option>";
    }
    return html;
  },
  sentMessage: function() {
    $(".show_for_messages").show();
  },
  init: function(module) {
    P.user_careers_profile.template = module.template;
    PEM.addListener("showMyProfile", P.user_careers_profile.showMyProfile);
    PEM.addListener("loadMyProfile", P.user_careers_profile.loadMyProfile);
    PEM.addListener("saveSection", P.user_careers_profile.saveSection);
    PEM.addListener("editCareersSettings", P.user_careers_profile.editCareersSettings);
    PEM.addListener("showUserProfileToCompany", P.user_careers_profile.showProfileToCompany);
    PEM.addListener("showCustomProfile", P.user_careers_profile.showCustomProfile);
    PEM.addListener("showCustomProfileModal", P.user_careers_profile.showCustomProfileModal);
    PEM.addListener("sentMessage", P.user_careers_profile.sentMessage);
    PTM.getModuleTemplate("user_careers_profile", "settings", function(template) {P.user_careers_profile.settingsTemplate = template;});
    Handlebars.registerHelper('skillList', function(selected, options) {
      return P.user_careers_profile.generateSkillList(selected);
    });
    Handlebars.registerHelper('yearList', function(selected, options) {
      return P.user_careers_profile.generateYearList(selected);
    });
  }

};

P.homescreen = {
  random_experiences : [{"name":"Rasmus Rygaard","answer":"There's a tradeoff between spending a summer at a smaller company where you get more responsibility and independence and a larger c","c_name":"Airbnb","question":"What I wished I knew when thinking about internships?","alum_id":"rasmus_rygaard","ciid":"airbnb"},{"name":"Phillippe Siclait","answer":"I met the people and immediately knew there was something special about them. The people at Airbnb care deeply about their craft, e","c_name":"Airbnb","question":"Why I decided to join Airbnb?","alum_id":"phillippe_siclait","ciid":"airbnb"},{"name":"Caitlin Foster","answer":"Internships are learning experiences, take advantage of any networking or training opportunities that you are given.","c_name":"Blackbaud","question":"What I wished I knew when thinking about internships/first jobs?","alum_id":"caitlin_foster","ciid":"blackbaud"},{"name":"Jerry Zheng","answer":"Before I joined AppFolio, I was the Director of Database Development and Operations at FastClick/ValueClick where I was responsible","c_name":"AppFolio","question":"What was my background prior to joining AppFolio?","alum_id":"jerry_zheng","ciid":"appfolio"},{"name":"Russ Muzzolini","answer":"I thought it was a great company filled with incredibly smart, humble, hardworking people and the technology that you were working ","c_name":"Spire","question":"Why I decided to join Spire?","alum_id":"russ_muzzolini","ciid":"spire"},{"name":"Nicole Hedley","answer":"In my first year of college, I wish I had known about all of the career opportunities in software engineering that exist and that t","c_name":"Pinterest","question":"What I wished I knew in my first year of college?","alum_id":"nicole_hedley","ciid":"pinterest"},{"name":"Anonymous 1","answer":"The challenges of \u200bFin-tech are interesting and the being able to see the  immediate results of my work is rewarding. Also - this","c_name":"Summit Securities Group","question":"Why did I join SSG?","alum_id":"anonymous_1","ciid":"ssgllc"},{"name":"Faith","answer":"The fast paced and fun environment was the most obvious reason I wanted to join Illumina. Everyone here is working really hard towa","c_name":"Illumina","question":"Why did I decide to join Illumina?","alum_id":"faith","ciid":"illumina"},{"name":"Zack Hsi","answer":"We like to see a grasp of CS fundamentals, an analytical mind, a proactive attitude, and a culture fit. You'll most likely come in,","c_name":"Lyft","question":"What is the interview process like at Lyft?","alum_id":"zack_hsi","ciid":"lyft"},{"name":"Tommy MacWilliam","answer":"Don't be afraid to apply! When I first started thinking about internships, I remember thinking that I didn't have enough experience","c_name":"Quora","question":"What I wished I knew when thinking about internships?","alum_id":"tommy_macwilliam","ciid":"quora"},{"name":"Rick","answer":"Initiative and team skills are extremely important to have here.  You really need to be comfortable in a team environment to do wel","c_name":"Illumina","question":"For new hires, what are great skills and traits to have and what are great classes to have taken?","alum_id":"rick","ciid":"illumina"},{"name":"Victor Zhu","answer":"I love that I'm able to make extremely high impact. The team I work on is \"Black Ops\" and the goal of my team is to reduce negative","c_name":"Pinterest","question":"What do I love most about my job?","alum_id":"victor_zhu","ciid":"pinterest"},{"name":"Ian Vernon","answer":"I wanted to gain experience in the software industry, as well as work on a great and fascinating product. Furthermore, as a produce","c_name":"Sonos","question":"Why did I join Sonos?","alum_id":"ian_vernon","ciid":"sonos"},{"name":"David Patterson","answer":"I would say, in terms of classes, Embedded and Control Systems classes were very useful and applicable to this job.","c_name":"Spire","question":"What classes did I enjoy the most in college?","alum_id":"david_patterson","ciid":"spire"},{"name":"Joyce Zhang","answer":"I\u2019m responsible to improve the user experience of a new product, and people here are talented and supportive, so I can make a rea","c_name":"Intersystems","question":"What I love most about my current position?","alum_id":"joyce_zhang","ciid":"intersystems"},{"name":"Anastassia Kornilova","answer":"Reach out to people early and often. As an intern, you may feel like you are expected to figure out everything on your own. This ca","c_name":"Pinterest","question":"What I wished I knew when thinking about internships?","alum_id":"anastassia_kornilova","ciid":"pinterest"},{"name":"Jesse Trutna","answer":"Being a mercenary, a friend called me up asking if I was available for some work.  Satellites was enough to pique my interest; a co","c_name":"Spire","question":"Why I decided to join Spire?","alum_id":"jesse_trutna","ciid":"spire"},{"name":"Jonathan Maltz","answer":"The friends that you keep in your life will define you in ways that you can't begin to imagine.  Make sure to spend your time with ","c_name":"Yelp","question":"What I wished I knew in my first year of college","alum_id":"jonathan_maltz","ciid":"yelp"},{"name":"Lisa Romesser","answer":"I spent the past eight years in sales and sales management roles within Citrix Online Services Division. My career spanned from dir","c_name":"AppFolio","question":"What was my background prior to joining AppFolio?","alum_id":"lisa_romesser","ciid":"appfolio"},{"name":"Juli\u00e1n Gonz\u00e1lez","answer":"Freshman 15 is real :) More importantly, if everything seems scary, that\u2019s a good sign! You\u2019re not going to be in a simple comf","c_name":"AppDynamics","question":"What I wished I knew in my first year of college?","alum_id":"julin_gonzlez","ciid":"appdynamics"},{"name":"Derrick Asiedu","answer":"Internships are great resume-builders, but are most valuable when treated as opportunities to learn about yourself, what you enjoy,","c_name":"Riot Games","question":"What I wished I knew when thinking about internships?","alum_id":"derrick_asiedu","ciid":"riotgames"},{"name":"Andrew","answer":"We are given the opportunity to develop our own trading styles and strategies from the ground up. The culture encourages us to make","c_name":"Gelber Group","question":"Why I decided to join Gelber Group?","alum_id":"andrew","ciid":"gelber"},{"name":"Ayesha Amrin Dastagiri","answer":"How to have a perfect work life balance. I learned to take up more responsibilities and also, how to plan and develop quality work ","c_name":"Apigee","question":"What is one of the most valuable lessons I learned while working at Apigee?","alum_id":"ayesha_amrin_dastagiri","ciid":"apigee"},{"name":"Alex","answer":"Gelber\u2019s intern program not only provided the human, technological, and educational resources for a hands-on introduction to trad","c_name":"Gelber Group","question":"What did you like about Gelber Group's Internship Program?","alum_id":"alex","ciid":"gelber"},{"name":"Anonymous 1","answer":"Finance if always changing, always in a state of flux. There is never a boring day. Literally\u200b!\u200b \u200b","c_name":"Summit Securities Group","question":"Why am I excited about the future of SSG?","alum_id":"anonymous_1","ciid":"ssgllc"},{"name":"Allison Candido","answer":"Internships should be the experience to work as a team member for a stint and see how software development happens in the real worl","c_name":"Flatiron Health","question":"What I wished I knew when thinking about internships?","alum_id":"allison_candido","ciid":"flatiron"},{"name":"Josh Morris","answer":"This is the first job I've had where every day I get to utilize ALL the skills I've learned over the last 15 years. It's challengin","c_name":"DAQRI","question":"What do you enjoy about DAQRI?","alum_id":"josh_morris","ciid":"daqri"},{"name":"Aaron Hanel","answer":"For new hires skills and traits that I recommend is to be social and outgoing. Everyone here is extremely helpful and the ability t","c_name":"AppFolio","question":"For new hires, what are great skills and traits to have and what are great classes to have taken?","alum_id":"aaron_hanel","ciid":"appfolio"},{"name":"Joey Robinson","answer":"Work smart and cast a wide net: A work related thing that I wish I had known was that when it comes to writing code, it is not just","c_name":"Sift Science","question":"My first year of college, I wish I knew...","alum_id":"joey_robinson","ciid":"sift_science"},{"name":"Anonymous 1","answer":"Take our research system to the next level. Face challenges ranging from data mining and performance to building an infrastructure ","c_name":"Summit Securities Group","question":"What projects am I working on at SSG?","alum_id":"anonymous_1","ciid":"ssgllc"},{"name":"Allison Candido","answer":"The most important class for interviewing at any tech company is data structures. Data structures are integral in all problem solvi","c_name":"Flatiron Health","question":"Which classes helped you through the interview process at Flatiron Health?","alum_id":"allison_candido","ciid":"flatiron"},{"name":"Jessica Ho","answer":"It\u2019s more important to spend your summer doing something that makes you infectiously excited and talk with a sparkle in your eye ","c_name":"Airbnb","question":"What I wished I knew when thinking about internships?","alum_id":"jessica_ho","ciid":"airbnb"},{"name":"Anu Kashyap","answer":"In high school, you're often given very well defined problems, and so the steps you take to solve those problems are likewise relat","c_name":"Pinterest","question":"What are some of the best skills I acquired throughout college?","alum_id":"anu_kashyap","ciid":"pinterest"},{"name":"Kevin Chan","answer":"The sooner you start looking the more likely you\u2019ll be able to secure an offer for the upcoming summer. Definitely leverage the e","c_name":"Evernote","question":"What I wished I knew when thinking about internships?","alum_id":"kevin_chan","ciid":"evernote"},{"name":"David S.","answer":"The classes that had amazing professors. It's so inspiring to hear someone be so excited about a subject; it's contagious. Whether ","c_name":"Yelp","question":"Which classes did you enjoy the most?","alum_id":"david_s","ciid":"yelp"},{"name":"Molly Bartlett Dishman","answer":"Some of the traits that are the most important to have are the willingness to learn; integrity and openness to new ideas. I found w","c_name":"ThoughtWorks","question":"For new hires, what are great skills and traits to have and what are great classes to have taken?","alum_id":"molly_bartlett_dishman","ciid":"thoughtworks"},{"name":"2. Pooja Jain","answer":"The people at Apigee and their attitude makes Apigee truly unique. Every person truly understands that synergy and teamwork is what","c_name":"Apigee","question":"What is one of the most valuable lessons I learned while working at Apigee?","alum_id":"2_pooja_jain","ciid":"apigee"},{"name":"Catherine Koenigsknecht","answer":"I had just decided not to go to medical school and had been working in a biochemistry lab doing tuberculosis drug research for the ","c_name":"Urban Teachers","question":"Why did you decide to be a teacher?","alum_id":"catherine_koenigsknecht","ciid":"urban_teachers"},{"name":"Arjun Rao","answer":"I work on the front end team so I'm helping to redesign the console on top of the new technology we're implementing. It's been exci","c_name":"Sift Science","question":"The projects I've worked on include...","alum_id":"arjun_rao","ciid":"sift_science"},{"name":"Joseph Sidebotham","answer":"The primary reason I chose to join AppFolio is the culture and environment that I felt when I visited and met with people who worke","c_name":"AppFolio","question":"Why I decided to join AppFolio?","alum_id":"joseph_sidebotham","ciid":"appfolio"},{"name":"John Rizo","answer":"Twitch is a place where employees thrive when they're eager to explore and learn new things.  Engineers are constantly pushing them","c_name":"Twitch","question":"For new hires, what are great skills and traits to have and what are great classes to have taken?","alum_id":"john_rizo","ciid":"twitch"},{"name":"Geoff Calkins","answer":"Interviewing can feel long and stressful, but it's not meant to be. We're trying to decide if we want to work with you, and we also","c_name":"Flatiron Health","question":"What advice would you give to those looking to work at Flatiron Health?","alum_id":"geoff_calkins","ciid":"flatiron"},{"name":"Erin","answer":"Be flexible and willing to move fast. There are a lot of great things to do and interesting projects to work on. 7 Choices to Extra","c_name":"Illumina","question":"For new hires, what are great skills and traits to have and what are great classes to have taken?","alum_id":"erin","ciid":"illumina"},{"name":"Meghan Quiqley","answer":"If you truly want to be a teacher, investing 4 years in Urban Teachers is just the beginning.  I plan on investing many more years ","c_name":"Urban Teachers","question":"Why is it worth investing at least 4 years at Urban Teachers and in teaching?","alum_id":"meghan_quiqley","ciid":"urban_teachers"},{"name":"Keren Gu","answer":"To apply your knowledge: I wish I applied myself in multiple fields that do not seem connected to begin with but then you can gain ","c_name":"Sift Science","question":"My first year of college, I wish I knew...","alum_id":"keren_gu","ciid":"sift_science"},{"name":"Genevieve Conley","answer":"I wish I had worried less about the 'brand name' of the companies and more about what I actually wanted to learn. For instance -- b","c_name":"Riot Games","question":"What I wished I knew when thinking about internships?","alum_id":"genevieve_conley","ciid":"riotgames"},{"name":"Tatyana Casino","answer":"So far I learned that the key to success is communication. If you are having any kind of problem, doubt, concern or an idea how to ","c_name":"WillowTree","question":"What is one of the most valuable lessons I learned while working at WillowTree?","alum_id":"tatyana_casino","ciid":"willow_tree"},{"name":"Vinod","answer":"I decided to join Qualtrics because I want to know what it is like to work at a smaller company that is growing rapidly. To play a ","c_name":"Qualtrics","question":"Why I decided to join Qualtrics?","alum_id":"vinod","ciid":"qualtrics"},{"name":"Ben Swartz","answer":"Twitch Xbox One App, Following Games, Counter-Strike Global Offensive Directory, Twitch APIs","c_name":"Twitch","question":"What projects I have worked on?","alum_id":"ben_swartz","ciid":"twitch"},{"name":"Scott Ko","answer":"The most valuable lesson I have learned is that we must all take responsibility for our actions and to not take things personally.","c_name":"Apigee","question":"What is one of the most valuable lessons I learned while working at Apigee?","alum_id":"scott_ko","ciid":"apigee"},{"name":"Mahesh Bingi","answer":"Working on hard problems with smart people is the fastest way to learn and grow.","c_name":"Apigee","question":"What is one of the most valuable lessons I learned while working at Apigee?","alum_id":"mahesh_bingi","ciid":"apigee"},{"name":"Ian Logan","answer":"When looking for internships and job opportunities it\u2019s important to focus on acquiring a diverse set of experiences. Be a sponge","c_name":"Airbnb","question":"What I wished I knew in my first year of college?","alum_id":"ian_logan","ciid":"airbnb"},{"name":"Zach Steward","answer":"Over the summer, I learned how much applications of Palantir could benefit society\u2014and it was good to learn that there are really","c_name":"Palantir Technologies","question":"Lesson learned at Palantir","alum_id":"zach_steward","ciid":"palantir"},{"name":"Ben Swartz","answer":"Curiosity is the best trait to have. I was a Math major (and did not take any CS classes) because I was interested in Math. I was c","c_name":"Twitch","question":"For new hires, what are great skills and traits to have and what are great classes to have taken?","alum_id":"ben_swartz","ciid":"twitch"},{"name":"Casey Maher","answer":"What was perhaps best about the internship was the fact that I didn't feel much different from a full-time employee, besides leavin","c_name":"IXL Learning","question":"How was you experience as an intern?","alum_id":"casey_maher","ciid":"ixl"},{"name":"John McSpedon","answer":"Step outside of college expectations: I think academically speaking, I wish I had a better understanding of proof based math. The c","c_name":"Sift Science","question":"My first year of college, I wish I knew...","alum_id":"john_mcspedon","ciid":"sift_science"},{"name":"Noah Dietz","answer":"It is important to have some level of autonomy, lots of motivation and curiosity, and fun-loving attitude. I say these things becau","c_name":"Apigee","question":"For new hires to succeed at Apigee, what are great skills and traits to have and what are great classes to have taken?","alum_id":"noah_dietz","ciid":"apigee"},{"name":"Richard Whalen","answer":"Get as much experience outside of class as you can. The biggest thing working against new grad candidates is the lack of experience","c_name":"Thumbtack","question":"What I wished I knew in my first year of college?","alum_id":"richard_whalen","ciid":"thumbtack"},{"name":"Olivia Grubert","answer":"I love the happy, helpful, and clever people here that keep our design fresh, both inside and out.","c_name":"Yelp","question":"What I love most about working here","alum_id":"olivia_grubert","ciid":"yelp"},{"name":"Bryan Wong","answer":"When I joined the company we started working on our next generation satellite and a big chunk of what I worked on was building the ","c_name":"Spire","question":"What projects have I worked on?","alum_id":"bryan_wong","ciid":"spire"},{"name":"Tommy MacWilliam","answer":"I think what separates Quora from other companies is how much we focus on learning. A company's product tends to be reflected in th","c_name":"Quora","question":"What I love most about my current position?","alum_id":"tommy_macwilliam","ciid":"quora"},{"name":"David S.","answer":"I work on improving the quality of the nearby suggestions we give on our mobile apps and maintaining our infrastructure for storing","c_name":"Yelp","question":"What I work on at Yelp","alum_id":"david_s","ciid":"yelp"},{"name":"Ryan Sears","answer":"I get to spend my days doing the things I really love doing (building extremely secure, extremely scalable systems) around people t","c_name":"ThinAir","question":"Why I decided to join ThinAir?","alum_id":"ryan_sears","ciid":"thinair"},{"name":"Noah Dietz","answer":"I worked on an open-source, Swagger-based project called swagger-test-templates. This is a code generation tool for API testing. I ","c_name":"Apigee","question":"What projects have I worked on?","alum_id":"noah_dietz","ciid":"apigee"},{"name":"Prita","answer":"The people! Everybody is incredibly passionate about what they do here and I wanted to be a part of a team where we could all grow ","c_name":"Illumina","question":"Why did I decide to join Illumina?","alum_id":"prita","ciid":"illumina"},{"name":"Michael Solomon","answer":"Even as an intern, I\u2019m making meaningful contributions to my team and the product that I\u2019m working on. The work is a lot of fun","c_name":"Fitbit","question":"What do you enjoy about working at Fitbit?","alum_id":"michael_solomon","ciid":"fitbit"},{"name":"Jon","answer":"I initially was a little hesitant, to be honest. I hadn't really heard of Qualtrics, and I wasn't sure I wanted to move to Utah (th","c_name":"Qualtrics","question":"Why I decided to join Qualtrics?","alum_id":"jon","ciid":"qualtrics"},{"name":"Chris Horuk","answer":"In my first year of college, I wish I knew how useful office hours are. I barely went to any office hours, whether offered by the p","c_name":"AppFolio","question":"What I wished I knew in my first year of college?","alum_id":"chris_horuk","ciid":"appfolio"},{"name":"Caroline Grant","answer":"I have always worked while going to school. I was not actively pursuing to find an internship.  My professor told me about Appfolio","c_name":"AppFolio","question":"What I wished I knew when thinking about internships?","alum_id":"caroline_grant","ciid":"appfolio"},{"name":"Klaus Schauser","answer":"I was the Founder and CTO of Expertcity/CitrixOnline from 1999 through 2006 and was the visionary behind GoToMyPC, GoToAssist, and ","c_name":"AppFolio","question":"What was my background prior to joining AppFolio?","alum_id":"klaus_schauser","ciid":"appfolio"},{"name":"Meghan Quiqley","answer":"I chose Urban Teachers to help guide me on the path to teaching.  I was not an education major in college, but Urban Teachers gave ","c_name":"Urban Teachers","question":"Why did you choose Urban Teachers as your teacher preparation program?","alum_id":"meghan_quiqley","ciid":"urban_teachers"},{"name":"Christina Brant","answer":"I decided to work at Inflection to be a part of the incredibly talented and fun team and to work on some interesting design challen","c_name":"Inflection","question":"Why I decided to join Inflection?","alum_id":"christina_brant","ciid":"inflection"},{"name":"Kathleen Graves","answer":"Get an internship in the field you\u2019re interested in as soon as possible. Companies look for work experience and the sooner you st","c_name":"Blackbaud","question":"What I wished I knew when thinking about internships/first jobs?","alum_id":"kathleen_graves","ciid":"blackbaud"},{"name":"Terrence Li","answer":"Project Loki. It's classified, but all I can say is it is a Metric Correlation tool that help correlate similar metrics together.","c_name":"Apigee","question":"What projects have I worked on?","alum_id":"terrence_li","ciid":"apigee"},{"name":"Geoff Calkins","answer":"Brilliant people, meaningful mission, and some of the toughest/most interesting problems to solve.","c_name":"Flatiron Health","question":"Why I decided to join Flatiron Health?","alum_id":"geoff_calkins","ciid":"flatiron"},{"name":"Derrick Asiedu","answer":"Working with people who are not only intelligent and passionate about their work, but also deliberate and methodical in accomplishi","c_name":"Riot Games","question":"What I love most about my current position?","alum_id":"derrick_asiedu","ciid":"riotgames"},{"name":"Ashley Lorden","answer":"I didn't study CS in college, but I learned a lot about the balance between working independently and knowing when to ask questions","c_name":"Lyft","question":"What are some of the best skills I acquired throughout college?","alum_id":"ashley_lorden","ciid":"lyft"},{"name":"Ian Logan","answer":"I\u2019ve always worked as an engineer, and have recently moved to an engineering lead/manager role. I am the engineering manager for ","c_name":"Airbnb","question":"What I love most about my current position?","alum_id":"ian_logan","ciid":"airbnb"},{"name":"Howon Lee","answer":"I should have tried a little harder at reading the assigned texts, and less time grinding the ladder on Starcraft II, and then late","c_name":"Riot Games","question":"What I wished I knew in my first year of college?","alum_id":"howon_lee","ciid":"riotgames"},{"name":"Steven Stanek","answer":"One of the great aspects of working for a startup is that you get to touch *everything*. I've had the fortune of working on things ","c_name":"Shopkick","question":"What projects have I worked on?","alum_id":"steven_stanek","ciid":"shopkick"},{"name":"Geoff Calkins","answer":"Product Management at Flatiron sits between many other domains--engineering, oncology, informatics, biostatistics, business develop","c_name":"Flatiron Health","question":"What I love most about my current position?","alum_id":"geoff_calkins","ciid":"flatiron"},{"name":"Jeremy Hiatt","answer":"Look for new opportunities, both academic and non-academic, outside of your desired focus/concentration/major. On a whim I decided ","c_name":"Shopkick","question":"What do I wish I knew my first year of college?","alum_id":"jeremy_hiatt","ciid":"shopkick"},{"name":"Jonathan Maltz","answer":"Last summer I worked on mobile reviews, which was a pretty amazing project because at the time, EVERYONE was asking when the app wa","c_name":"Yelp","question":"Projects I've worked on","alum_id":"jonathan_maltz","ciid":"yelp"},{"name":"Rasmus Rygaard","answer":"College is over before you know it. Although you can go on and on about the things you would like to do, they do not happen unless ","c_name":"Airbnb","question":"What I wished I knew in my first year of college?","alum_id":"rasmus_rygaard","ciid":"airbnb"},{"name":"Anastassia Kornilova","answer":"The most valuable skill I've learned so far in college is knowing when to scale back. In high school, it can be fairly easy to do t","c_name":"Pinterest","question":"What I wished I knew in my first year of college?","alum_id":"anastassia_kornilova","ciid":"pinterest"},{"name":"Nick Allain","answer":"It\u2019s something that I knew without knowing it. You have to try and turn your passion into a career, which I was doing outside of ","c_name":"Spire","question":"What I wished I knew in my first year of college?","alum_id":"nick_allain","ciid":"spire"},{"name":"Becca Zak","answer":"I joined IXL through a friend (and now coworker!) recommendation. I had only ever heard great things about her job here and once I ","c_name":"IXL Learning","question":"Why did I join IXL?","alum_id":"becca_zak","ciid":"ixl"},{"name":"Andrew Ko","answer":"The people. Everyone around me enjoys both the challenge and the teamwork.","c_name":"Medallia","question":"What I love most about my current position?","alum_id":"andrew_ko","ciid":"medallia"},{"name":"Ruoran Wang","answer":"I learned that in production. making things work is not enough. As an engineer, it\u2019s crucial to make things work reliably and eff","c_name":"Fitbit","question":"What is one of the most valuable lessons I learned while working at Fitbit?","alum_id":"ruoran_wang","ciid":"fitbit"},{"name":"Vinod","answer":"I enjoyed classes that really challenged my way of thinking through things. So, Machine Learning and Algorithms were my favorite cl","c_name":"Qualtrics","question":"Which classes I enjoyed the most?","alum_id":"vinod","ciid":"qualtrics"},{"name":"Gwenn","answer":"Networking and maintaining professional relationships is as important as making A's. Even if you don't need help with a class, make","c_name":"Illumina","question":"What I wished I knew in my first year of college?","alum_id":"gwenn","ciid":"illumina"},{"name":"Ayesha Amrin Dastagiri","answer":"Apigee had Lunch and learn sessions which were amazing. Every week people from various Business Unit would give a talk on the work ","c_name":"Apigee","question":"What was my experience working at Apigee like?","alum_id":"ayesha_amrin_dastagiri","ciid":"apigee"},{"name":"Ryan Sears","answer":"Find (even non-compensated) employment in the field you want to go into and fold back the things you learn from class into what you","c_name":"ThinAir","question":"What I wished I knew in my first year of college?","alum_id":"ryan_sears","ciid":"thinair"},{"name":"Brandon Carter","answer":"Software engineering or something that puts you in the mindset of working in production. Make friends, ask questions, be adaptable,","c_name":"WillowTree","question":"For new hires, what are great skills and traits to have and what are great classes to have taken?","alum_id":"brandon_carter","ciid":"willow_tree"},{"name":"Mark Schulte","answer":"I decided to join Fitbit because I wanted to intern at a company that did embedded systems work and was fairly small. I have never ","c_name":"Fitbit","question":"Why did I decide to join Fitbit?","alum_id":"mark_schulte","ciid":"fitbit"},{"name":"Chris Horuk","answer":"One thing I wish I knew when I was thinking about internships was that you don't always have to meet all of the posted requirements","c_name":"AppFolio","question":"What I wished I knew when thinking about internships?","alum_id":"chris_horuk","ciid":"appfolio"},{"name":"Akshay Jagadeesh","answer":"I would say the most important skill is probably experience engineering a product, which unfortunately, is not something that's rea","c_name":"Nutanix","question":"For new hires, what are great skills and traits to have and what are great classes to have taken?","alum_id":"akshay_jagadeesh","ciid":"nutanix"},{"name":"Molly Bartlett Dishman","answer":"I think one of the best things I learned was to work with others. Specifically, learn how to learn from others.  I have a degree in","c_name":"ThoughtWorks","question":"What are some of the best skills I acquired throughout college?","alum_id":"molly_bartlett_dishman","ciid":"thoughtworks"},{"name":"Katie Thomas","answer":"Coding is fun!  I didn't try it until the end of Junior year.  Also, don't be afraid to branch out from what you're good at and try","c_name":"Thumbtack","question":"What I wished I knew in my first year of college?","alum_id":"katie_thomas","ciid":"thumbtack"},{"name":"Carter Tiernan","answer":"InterSystems already has a pivotal role within healthcare systems, I think it is exciting to be able to mold and contribute to the ","c_name":"Intersystems","question":"Why am I excited about the future of Intersystems?","alum_id":"carter_tiernan","ciid":"intersystems"},{"name":"Jessica Ho","answer":"After a couple of unfulfilling jobs, I spent time soul-searching to come up with three must-haves for my ideal company:\n1. Accelera","c_name":"Airbnb","question":"Why I decided to join Airbnb?","alum_id":"jessica_ho","ciid":"airbnb"}],
  template: null,
  user: null,
  network: null,
  seenMessages: {},
  // Messages that instructors see (in order)
  welcomeQueue: ['tips_tricks', 'first_day', 'enroll_inst_self', 'enroll_students', 'access_code', 'enroll_inst'],
  fetchCallbacks: [],
  tech_tour_num_shows: 10,
  // This determines if the homescreen techtour application card should show up for appropriate cases (TA and non TA both)
  techtourIsLive: true,
  techtourViewCounter: 'view_counter_ghc_2019',
  initHandlers:function() {
    $("#enroll_members_button").click(function() {
      var members = $(".enroll_members").val();
      var params = {
        from: "groupsHomeScreen",
        id: P.homescreen.network.id,
        add_members: members,
        event: 'groups.home_sent_invites'
      };
      PA.call_pj("network.update", params, $(".homescreen_box.invite_members"), function(data) {
        $("#enroll_members_button").fadeOut(200, function() {
            $(".enroll_members_confirmation").fadeIn(200).delay(1000).fadeOut(function() {
              $("#enroll_members_button").fadeIn(200);
            });
          });
        $(".enroll_members").val("");
      }, function(err){ alert(err); });
    });
    $('.invite_members_button').click(function(e) {
      var members = $(".enroll_members").val();
      var params = {
        from: "groupsHomescreen",
        id: P.homescreen.network.id,
        add_members: members,
        event: 'groups.homescreen_sent_invites'
      };
      if ($('#customize_invite_checkbox').is(":checked"))
        params.message = $(".invite_email_text").val();
      PA.call_pj("network.update", params, $(".invite_members"), function(data) {
        $('#customize_invite_checkbox').attr('checked', false);
        $(".enroll_members").val("");
        $(".invite_email_text").hide();
        $(".customize_invite_label").fadeOut(200, function() {
          $(".enroll_mebmers_sent").fadeIn(200).delay(1500).fadeOut(function() {
            $(".customize_invite_label").fadeIn(200);
          });
        });
        }, function(err){ alert(err); });
    });
    $(".import_button.facebook").click(function() {
      PA.call_pj("generic.event_to_requests", {event: "group.invite_click_fb"}, 1);
      alert("Implementing as you click...");
    });
    $(".import_button.gmail").click(function() {
      PA.call_pj("generic.event_to_requests", {event: "group.invite_click_gmail"}, 1);
      alert("Implementing as you click...");
    });
    $('#customize_invite_checkbox').change(function() {
      if($(this).is(":checked")) {
        $(".invite_email_text").show();
        $(".invite_email_text").focus();
      } else {
        $(".invite_email_text").hide();
      }
    });
  },
  initCaagHandlers: function() {
    $('.insights_link').on('click', function() {
      var params = {event: "insights_link_clicked_through"};
      PA.call_pj("generic.event_to_requests", params, null, function(data) {
      }, function(err){ alert(err); });
    });
  },
  setUser: function(user) {
    P.homescreen.user = user;
  },
  setNetwork:function(network) {
    P.homescreen.network = network;
  },
  sendStickerRequest: function() {
    var address = $('#request_stickers_address').val();
    if (address.length < 30) {
      $('#address_error').show();
      return;
    }
    PA.call_pj('user.send_sticker_request', {address: $('#request_stickers_address').val(), network_id: P.homescreen.network.id}, null, function(data){
      $('#request_form').hide();
      $('#confirmation_message').show();
      P.top_bar.network.config.stickers_requested = true;
      $('#request_stickers_homescreen_requested').show();
      $('#request_stickers_homescreen').hide();
      $('#request_stickers_stats_requested').show();
      $('#request_stickers_stats').hide();
      $('#request_stickers_homescreen_requested').show();
      $('#request_stickers_homescreen').hide();
    }, function(err){
      alert(err);
    })
  },
  inGHCAudience: function() {
    return P.top_bar.userProfile && P.top_bar.userProfile.tags && (P.top_bar.userProfile.tags.indexOf("diversity_women") >= 0 || P.top_bar.userProfile.tags.indexOf("women_gzd") >= 0) && P.top_bar.userProfile.academics && P.top_bar.userProfile.academics.major && P.top_bar.userProfile.academics.major.toLowerCase().indexOf("comput") >= 0 &&
        P.top_bar.userProfile.profile_settings.published;
  },
  showTechTourOrGHC: function() {
    if (!P.homescreen.showingTechTour
      && !PA.isSeenUser("ghc_2019") 
      && (!P.homescreen.user.config[P.homescreen.techtourViewCounter] || P.homescreen.user.config[P.homescreen.techtourViewCounter] < P.homescreen.tech_tour_num_shows)
      && (P.homescreen.user.isTA || !P.homescreen.user.isInst)
      && ((!P.homescreen.user.config) || (!P.homescreen.user.config.ghc_2019)) 
      && P.homescreen.network.type !== "no-verify"
      && P.homescreen.techtourIsLive
      && !PA.isProfessor() 
      && P.homescreen.inGHCAudience()
    ) {
      P.homescreen.showingTechTour = true;                            
      PTM.getModuleTemplate("homescreen", "homescreen_tech_tour", P.homescreen.showStudent);
      PA.call_pj("user.set", {"stat" : P.homescreen.techtourViewCounter, "val" : P.homescreen.user.config[P.homescreen.techtourViewCounter] + 1}, 1);
      $('#upload_resume_button').click(function(){
        $('#upload_form_file').click();
        return false;
      });
    }
  },
  showHomeScreen: function(from) {
    if( $('#ClassStatisticsPanel').length > 0 ) return;
    if (typeof(AUTO_POST) != 'undefined' && AUTO_POST) return;
    if (typeof(SHOW_STATS) != 'undefined' && SHOW_STATS) return;
    if (typeof(CID) != 'undefined' && CID) return;
    if ($('.question_note_view').length > 0 && $('.question_note_view').html() != "") return;
    if (!P.homescreen.network || !P.homescreen.user) return;
    $('.remove_on_post_load').remove();
    if(P.homescreen.user.isPublic) {
      $("#inactive_group_message").hide();
    }
    if ($('#request_stickers_modal')) $('#request_stickers_modal').remove();
    $('.main_panel').append(P.homescreen.requestStickersTemplate({user: P.homescreen.user}));
    if (window.history && window.history.pushState) {
      window.history.pushState({}, "Piazza", P.feed.network.urlType + "/" + P.feed.network.id);
    }
    if (P.homescreen.network.type == "group") {
      $('#homescreen').html(P.homescreen.template({network:P.homescreen.network,info: P.info}));
      $('#homescreen').show();
      $('#inactive_group_message').hide();
      P.homescreen.initHandlers();
    } else {
      // either student or instructor
      // see if user is in correct school
      if (P.homescreen.user.isPublic) {
        PTM.getModuleTemplate("homescreen", "homescreen_demo", P.homescreen.showStudent);
        return;
      }
      if (P.homescreen.user.isInst && from != "careers") {
        // uncomment out the code below to show the tech tour again 
        // show tech tour only if user has not dismissed/applied, user is not a professor, user is not opted out of careers, and class is not MOOC
        if (!PA.isSeenUser("ghc_2019") 
            && (!P.homescreen.user.config[P.homescreen.techtourViewCounter] || P.homescreen.user.config[P.homescreen.techtourViewCounter] < P.homescreen.tech_tour_num_shows)
            && P.homescreen.user.isTA 
            && ((!P.homescreen.user.config) || (!P.homescreen.user.config.ghc_2019)) 
            && P.homescreen.network.type !== "no-verify"
            && P.homescreen.techtourIsLive
            && !PA.isProfessor() 
            && P.homescreen.inGHCAudience()
          ) {
          if(P.homescreen.user.config) {
            if (P.homescreen.user.config[P.homescreen.techtourViewCounter]) {
              P.homescreen.showingTechTour = true;                            
              PTM.getModuleTemplate("homescreen", "homescreen_tech_tour", P.homescreen.showStudent);
              PA.call_pj("user.set", {"stat" : P.homescreen.techtourViewCounter, "val" : P.homescreen.user.config[P.homescreen.techtourViewCounter] + 1}, 1);
              $('#upload_resume_button').click(function(){
                $('#upload_form_file').click();
                return false;
              });
            } else {
              P.homescreen.showingTechTour = true;
              PTM.getModuleTemplate("homescreen", "homescreen_tech_tour", P.homescreen.showStudent);                            
              PA.call_pj("user.set", {"stat" : P.homescreen.techtourViewCounter, "val" : 1}, 1);
              $('#upload_resume_button').click(function(){
                $('#upload_form_file').click();
                return false;
              });
            }
          } else {
            P.homescreen.showingTechTour = true;                            
            PTM.getModuleTemplate("homescreen", "homescreen_tech_tour", P.homescreen.showStudent);
            $('#upload_resume_button').click(function(){
              $('#upload_form_file').click();
              return false;
            });            
          }
        } else {
          PTM.getModuleTemplate("homescreen", "homescreen_instructor", P.homescreen.showInstructor);
        }
      } else {
        // uncomment out the code below to show the tech tour again 
        // show tech tour only if user has not dismissed/applied, user is not opted out of careers, and class is not MOOC
        if (!PA.isSeenUser("ghc_2019") 
            && (!P.homescreen.user.config[P.homescreen.techtourViewCounter] || P.homescreen.user.config[P.homescreen.techtourViewCounter] < P.homescreen.tech_tour_num_shows)
            && ((!P.homescreen.user.config) || (!P.homescreen.user.config.ghc_2019)) 
            && P.homescreen.network.type !== "no-verify"
            && P.homescreen.techtourIsLive 
            && !PA.isProfessor()
            && P.homescreen.inGHCAudience()) {
          if(P.homescreen.user.config) {
            if (P.homescreen.user.config[P.homescreen.techtourViewCounter]) {
              P.homescreen.showingTechTour = true;                            
              PTM.getModuleTemplate("homescreen", "homescreen_tech_tour", P.homescreen.showStudent);                            
              PA.call_pj("user.set", {"stat" : P.homescreen.techtourViewCounter, "val" : P.homescreen.user.config[P.homescreen.techtourViewCounter] + 1}, 1);
              $('#upload_resume_button').click(function(){
                $('#upload_form_file').click();
                return false;
              });
            } else {
              P.homescreen.showingTechTour = true;                            
              PTM.getModuleTemplate("homescreen", "homescreen_tech_tour", P.homescreen.showStudent);                            
              PA.call_pj("user.set", {"stat" : P.homescreen.techtourViewCounter, "val" : 1}, 1);
              $('#upload_resume_button').click(function(){
                $('#upload_form_file').click();
                return false;
              });
            }
          } else {
            P.homescreen.showingTechTour = true;                            
            PTM.getModuleTemplate("homescreen", "homescreen_tech_tour", P.homescreen.showStudent);
            $('#upload_resume_button').click(function(){
              $('#upload_form_file').click();
              return false;
            });            
          }        
        } else {
            PTM.getModuleTemplate("homescreen", "homescreen_student", P.homescreen.showStudent);
        }
      }
    }
  },

  availableTimes: [
      {key: "2014", val: "2014"},
      {key: "2015", val: "2015"}
  ],
  jobTypes: [
      {key: "fulltime", val: "Seeking Full Time"},
      {key: "internship", val: "Seeking Internship"},
      {key: "term_internship", val: "Seeking Co-Op/Term Internship"},
      {key: "accepted_position", val: "Accepted Position"},
      {key: "na", val: "Not Applicable"}
  ],

  showWhereUGoing: function(template) {
    $('#homescreen').html(template({
      network:P.homescreen.network,
      user:P.homescreen.user,
      info: P.info
    }));
    //$('#homescreen').hide();
    //if( !P.homescreen.maybeShowCareersStory() )
    $('#homescreen').show();
    //$("#myModal").modal('show');
    $('.close_where_u_going').click(function(){
      PA.markSeenUnseen("where_u_go_2015");
      if (!P.homescreen.user.isTA)
        PTM.getModuleTemplate("homescreen", "homescreen_student", P.homescreen.showStudent);
      else
        PTM.getModuleTemplate("homescreen", "homescreen_instructor", P.homescreen.showInstructor);
    });
    $('.go_student_search').click(function(){
      PA.call_pj("user.mark_seen", {msg:"where_u_go_2015"}, null, function(){
        $.blockUI();
        window.location = "/careers/dashboard#/students";
      });
    });
  },
  updateStatus: function() {
    var status = "";
    var what = "";
    var when = "";
    P.homescreen.profile.status_what = $('#updateJobStatusType').val();
    P.homescreen.profile.status_when = $('#updateJobStatusYear').val();

    if (P.homescreen.profile.status_what) {
      for (var i = 0; i < P.homescreen.jobTypes.length; i++) {
        if (P.homescreen.jobTypes[i].key == P.homescreen.profile.status_what)
          what = P.homescreen.jobTypes[i].val;
      }
      status = what;
      if (P.homescreen.profile.status_when) {
        for (var i = 0; i < P.homescreen.availableTimes.length; i++) {
          if (P.homescreen.availableTimes[i].key == P.homescreen.profile.status_when)
            when = P.homescreen.availableTimes[i].val;
        }
        status = what + " for " + when;
      }

    }
    P.homescreen.profile.status = status;
    var edits = {
      set: {
        "status": status,
        "status_what": P.homescreen.profile.status_what,
        "status_when": P.homescreen.profile.status_when
      }
    }
    PA.call_pj("user_profile.update_profile", edits, null, function(){
      $('#updateJobStatusSave').hide();
      $('#updateJobStatusSaved').show();
      setTimeout(function(){
        $('#updateJobStatusSave').show();
        $('#updateJobStatusSaved').hide();
      }, 3000)
    });
    return false;
  },
  updateRecentCompanyImages : function() {
    var companiesMap = P.top_bar.allCompanies;
    if(!companiesMap) companiesMap = P.homescreen.allCompanies;
    if(!companiesMap) return;
    var companiesArr = Object.keys(companiesMap).map(function(ciid) {
      return {
        internal_id: ciid, 
        image: companiesMap[ciid].image, 
        name: companiesMap[ciid].name,
        digest_whitelist: companiesMap[ciid].digest_whitelist,
        published_at: companiesMap[ciid].published_at
      };
    });
    companiesArr.sort(function(a, b){return b.published_at - a.published_at;});
    var showList = [];
    for (var i = 0; i < companiesArr.length; i++)
      if (companiesArr[i].image && showList.length < 12)
        showList.push(companiesArr[i]);
    // add whitelisted companies now
    shuffleArray(companiesArr);
    for (var i = 0; i < companiesArr.length; i++) {
      if (companiesArr[i].image && companiesArr[i].digest_whitelist && showList.length < 24)
        showList.push(companiesArr[i]);
    }
    shuffleArray(showList);
    var curr = 0;
    var optOut = $('#opt_out_caag').is(":visible"); 
    for (var i = 0; i < showList.length; i++) {
      if(curr >= (optOut ? 12 : 5)) break;
      if(showList[i].image) {
        $((optOut ? "#opt_out_company_link_" : "#company_link_") + curr).attr('href', '/careers/dashboard#/company_profile/' + showList[i].internal_id);
        $((optOut ? "#opt_out_comp_img_" : "#comp_img_") + curr).attr('src', showList[i].image);
        $((optOut ? "#opt_out_comp_img_" : "#comp_img_") + curr).attr('title', showList[i].name);
        $((optOut ? "#opt_out_comp_img_" : "#comp_img_") + curr).tipsy({gravity: 's'});
        curr++;
      }
    }
  },
  reshowCaagJobStatus: function() {
    $('#headed_to_confirmation').hide();
    // $('#job_status_section_div').show();
    $('#headed_to_fields').show();
  },
  hideCaagJobStatus: function() {
    $('#headed_to_confirmation').show();
    // $('#job_status_section_div').hide();
    $('#headed_to_fields').hide();
    $('#headed_to_company').text($('#company_caag').val());
  },
  editWorkedAt: function() {
    $('#worked_at_confirmation').hide();
    $('#worked_at_list').show();
  },
  // the point of this is basically that it happens after the profile object is loaded
  updateVisa: function() {
    var selected = $('input:radio[name=visaOptions]:checked').val();
    var param = "";
    if(selected == 'not_required') {
      param = 'not required';
      if($('#citizen_checkbox_check').is(':checked')) param = 'us citizen';
    } else if (selected == 'required') param = 'required';
    else param = 'required later'
    PA.call_pj('user_profile.update_profile', {set: {visa: param}}, 1, function(data){});
    $('#visa_not_set').hide();
    $('#visa_set').show();
    if(param == 'us citizen') {
      $('#visa_set').text("US citizen");
    } else if(param == 'not required') {
      $('#visa_set').text("Not required");
    } else if(param == 'required') {
      $('#visa_set').text("Required");
    } else {
      $('#visa_set').text("Required later");
    }
  },
  updateDiscoverabilityThermometer: function() {
    var up = P.top_bar.userProfile;
    $('#job_status_year_homescreen').text(P.homescreen.getJobStatusYear());
    P.homescreen.computeProfileProgress(up);
    // var nofThermometer = $('#nof_thermometer');
    // var amount = $('#');
    var nofDiscoverability = $('#percent_profile_completed');

    if(up != null) {
      if(!up.profile_settings || !up.profile_settings.published) {
        $('#profile_completeness_section').hide();
      }
      var hasHeadedTo = function(exp) {
        if(!exp || exp.length === 0) return false;
        var work = exp[0];
        var date = new Date();
        if(work.type == "intern") {
          if(work.year > date.getFullYear()) return true;
          if(work.year < date.getFullYear()) return false;
          if(work.quarter == "Winter") return false;
          if(work.quarter == "Spring" && date.getMonth() >= 3) return false;
          if(work.quarter == "Summer" && date.getMonth() >= 6) return false;
          if(work.quarter == "Fall" && date.getMonth() >= 9) return false;
          return true;
        }
        if(work.start_year > date.getFullYear()) return true;
        if(work.start_year < date.getFullYear()) return false;
        return work.start_month > date.getMonth();
      };
      var hasHeaded = P.homescreen.hasHeadedTo(up.work_experience);

      if(P.homescreen.getJobStatusYear() == up.status_when) {
        if(up.status_what == "accepted_position") {
          $('#job_status').val("accepted");                    
          $('#headed_to_fields').show();
          
          if(hasHeaded) {
            $('#company_caag').val(up.work_experience[0].company);
            $('#role_caag').val(up.work_experience[0].role);
            $('#location_caag').val(up.work_experience[0].city);
            P.homescreen.hideCaagJobStatus();
          } else {
            P.homescreen.reshowCaagJobStatus();      
          }
        } else if(up.status_what == "internship") {
          $('#job_status').val("seeking_intern");
          $('#headed_to_fields').hide();          
        } else if(up.status_what == "fulltime") {
          $('#job_status').val("seeking_full");          
          $('#headed_to_fields').hide();
        } else if(up.status_what == "term_internship") {
          $('#job_status').val("seeking_term");          
        }
        
        
      }
      if(!up.work_experience) up.work_experience = [];
      up.worked_at_arr = up.work_experience.slice(hasHeaded ? 1 : 0);
      if(up.worked_at_arr.length > 0 && up.worked_at_arr[0].company.length > 0) {
        $('#work_not_set').hide();
        $('#worked_at_company').show();
      }
      $('#worked_at_company').text(up.worked_at_arr.map(function(exp){return exp.company;}).join(', '));

      if(up.visa && up.visa.length > 0) {
        $('#visa_not_set').hide();
        $('#visa_set').show();
        if(up.visa == 'us citizen') {
          $('#visa_set').text("US citizen");
          $('#visa_not_reqired').prop('checked', true);
          $('#citizen_checkbox').show();
          $('#citizen_checkbox_check').prop('checked', true);
        } else if(up.visa == 'not required') {
          $('#visa_set').text("Not required");
          $('#visa_not_reqired').prop('checked', true);
          $('#citizen_checkbox').show();
        } else if(up.visa == 'required') {
          $('#visa_set').text("Required");
          $('#visa_reqired').prop('checked', true);
          $('#citizen_checkbox').hide();
        } else {
          $('#visa_set').text("Required later");
          $('#visa_reqired_later').prop('checked', true);
          $('#citizen_checkbox').hide();
        }
      } 



      var progress = P.homescreen.getAdjustedProfileCompletness(up.progress);
      nofDiscoverability.text(Math.round(progress) + "%");            
      if(progress > 85) {
        $('#profile_completed_icon').removeClass("red");
        $('#profile_completed_icon').addClass("green");
      }
      var num_companies_viewed = 0;
      for(var cid in up.company) {
        if(!up.company.hasOwnProperty(cid)) continue;
        if(up.company[cid].has_viewed > 0) {
          num_companies_viewed++;
        }
      }
      if(num_companies_viewed > 10) {
        $('#companies_viewed_icon').removeClass("red");
        $('#companies_viewed_icon').addClass("green");
      }
      $('#num_companies_viewed').text(num_companies_viewed + (num_companies_viewed == 1 ? " company" : " companies") + " viewed");            
      
      
      var getCompaniesFromNof = function(s) {
        s = s.split(" ran searches that you showed up in. ")[0];
        var companies = [];
        var candidates = s.split(", ");
        for (var i = 0; i < candidates.length; i++) {
          var cand = candidates[i];
          if(i != candidates.length - 1) {
            companies.push(cand);            
          } else {
            if(cand.lastIndexOf("and ") == 0) cand = cand.substr(4);
            if(cand.indexOf(" and ") > -1) {
              var options = cand.split(" and ");
              for (var j = 0; j < options.length; j++) {
                companies.push(options[j]);
              }
            } else {
              companies.push(cand);
            }
          }
        }
        return companies;
      };
      
      var nofs = P.top_bar.careersNotifications;
      var companies = [];
      for (var nofid in nofs) {
        if(nofs[nofid].type !== "search_notification") continue;
        companies = companies.concat(getCompaniesFromNof(nofs[nofid].content));
      }
      
      var unique = function(arr) {
        return arr.filter(function(value, index, self){return self.indexOf(value) === index;});
      };
      
      var barPercent = 10*companies.length;
      $('#caag_bar').css("width", barPercent + "%");
      var searchText = "";
      if(companies.length > 10) {
        searchText = "Very High";
      } else if(companies.length > 6) {
        searchText = "High";
      } else if(companies.length > 4) {
        searchText = "Medium";
      } else if(companies.length > 0) {
        searchText = "Low";
      } else {
        searchText = "None";
      }
      $('#search_level').text(searchText);
      if(companies.length > 0) {
        $('#search_list').show();
        $('.search_list_companies').text(unique(companies).join(", "));
      } else {
        $('#search_list').hide();
      }
      // nofThermometer.removeClass("discoverability_meter percent_0").addClass("discoverability_meter percent_" + P.homescreen.getRoundedThermometerDiscoverability(progress));
      // $(".amount").css("height", up.progress);
    }
    P.homescreen.caag_loaded = true;
    // if (!P.homescreen.user.isTA) PTM.getModuleTemplate("homescreen", "homescreen_student", P.homescreen.showStudent);
    // else PTM.getModuleTemplate("homescreen", "homescreen_instructor", P.homescreen.showStudent);
  },
  maybeShowCareersStory: function() {
    var companyIndex = 0;
    var companies = [];
    var initStoryClicks = function() {
      $("#prev_companies").click(function(e) {
        PA.call_pj("generic.event_to_requests", {event: "careers.prev_companies_click"}, 1);
        e.preventDefault();
        prevCompanies();
      });
      $("#next_companies").click(function(e) {
        PA.call_pj("generic.event_to_requests", {event: "careers.next_companies_click"}, 1);
        e.preventDefault();
        nextCompanies();
      });
      $(".see_all_companies").click(function(e) {
        PA.call_pj("generic.event_to_requests", {event: "careers.see_all_companies_click"}, 1);
      });
      $(".view_company_link").click(function(e) {
        var comp = $(this).attr("comp");
        PA.call_pj("generic.event_to_requests", {event: "careers.qa_company_card_click", message: comp}, 1);
      });
      $(".careers_feed_click").click(function() {
        var text1 = $(this).attr('iid');
        var text2 = $(this).attr('uid');
        var text3 = $(this).attr('type');
        PA.call_pj("user_profile.read_careers_story", {sid: text2, iid: text1}, 1);
        PA.call_pj("generic.page_event", {type: "careers.homscreen_story_click",text1:text1,text2:text2,text3:text3}, 1);
      });
    };
    var prevCompanies = function() {
      companyIndex -= 4;
      if (companyIndex < 0)
        companyIndex = 0;
      showSelectedCompanies();
    };
    var nextCompanies = function() {
      if (companyIndex < companies.length - 4)
        companyIndex += 4;
      showSelectedCompanies();
    };
    var showSelectedCompanies = function() {
      if (companyIndex <= 0)
        $("#prev_companies").css("visibility", "hidden");
      else
        $("#prev_companies").css("visibility", "visible");
      if (companyIndex < companies.length - 4)
        $("#next_companies").css("visibility", "visible");
      else
        $("#next_companies").css("visibility", "hidden");
      $(".company_card_item").hide();
      for (var i = companyIndex; i < companyIndex + 4; i++) {
        $("#comp_" + i).show();
      }
    };
    var calcProfileProgress = function(profile) {
      P.homescreen.profile = profile;
      P.homescreen.computeProfileProgress(profile);
      PA.call_pj("generic.event_to_requests", {event: "careers.qa_company_cards_shown"}, 1);

      var initCareersHomepageStuff = function(where) {
        $(where).html(P.top_bar.careersFeedTemplate({
          network:P.homescreen.network,
          user:P.homescreen.user,
          profile:profile,
          companies:companies
        }));
        initStoryClicks();
        showSelectedCompanies();
        $(".homescreen_student_story").show()
        $(".careers_homescreen_feed").show();
        $(".careers_homescreen").show();
        $(".homescreen_default").hide();
        $('#updateJobStatusType').val(profile.status_what);
        $('#updateJobStatusYear').val(profile.status_when);
        if (profile.status_what && (profile.status_what == 'accepted_position' || profile.status_what == 'na') && profile.status_when) {
          $(".job_status_section").hide();
          $(".homescreen_feed_list").css("margin-bottom", "0px");
        }
        $('.homescreen_progressbar .progress_count_number.careers').html(progress);
        $('.homescreen_progressbar .bar.careers').css("width", progress + "%");
        if (progress >= 80) {
          $(".homescreen_company_cards_wrapper").css("padding-bottom", "0px");
          $(".homescreen_company_cards_wrapper").css("margin-bottom", "0px");
          $(".homescreen_company_cards_wrapper").css("border-bottom", "none");
          $(".homescreen_progressbar_wrapper").hide();
        }
        PA.call_pj("generic.page_event", {type: "careers.homscreen_feed_shown"}, 1);
      };

      P.modules.getData("company_list_new", 1, function(data){
        for (var iid in data)
          if( !profile.company[data[iid].id] || !profile.company[data[iid].id].blocked ) {
          companies.push(data[iid]);
          if (!data[iid].published_at || data[iid].published_at == 0)
            data[iid].published_at = new Date(2000, 0, 1).getTime() / 1000;
          }
        
        companies.sort(function(a, b) {          
          var aViewed = (profile.company[a.id] && profile.company[a.id].has_viewed);
          var bViewed = (profile.company[b.id] && profile.company[b.id].has_viewed);
          
          if( aViewed && bViewed) {
            return b.published_at - a.published_at;
          } else if (!aViewed && !bViewed) {
          var aRecentlyPublished = parseInt((new Date().getTime() / 1000 - a.published_at)/(24*3600)) <= 10;
          var bRecentlyPublished = parseInt((new Date().getTime() / 1000 - b.published_at)/(24*3600)) <= 10;
          
          if( aRecentlyPublished && bRecentlyPublished  ) {
              return b.published_at - a.published_at;
          } else if( aRecentlyPublished || bRecentlyPublished ){
            return aRecentlyPublished ? -1 : 1;
          } else {
              return Math.round(Math.random()) * 2 - 1;
          }
          } else {
          return aViewed ? 1 : -1;
          }
        });
        PTM.getModuleTemplate("homescreen", "homescreen_feed", function(template) {
          P.top_bar.careersFeedTemplate = template;
          initCareersHomepageStuff('.homescreen_student_story');
          $('#homescreen').show();
        });
      });
    };
    if ((!P.homescreen.user.isInst || P.homescreen.user.isTA) && P.homescreen.network && !P.homescreen.isOptedOut()) {
      var p = PEM.callFirst("loadMyProfile", calcProfileProgress);
      if (p) {
        calcProfileProgress(p);
      }
      return true;
    } else {
      $(".homescreen_default").show();
      return false;
    }
  },
  isOptedOut: function() {
    return (PA.user.config.email_prefs && PA.user.config.email_prefs.careers && PA.user.config.email_prefs.careers.no_careers) || !PA.user.showCareers;
  },
  computeProfileProgress : function(profile) {
    //
    // I M P O R T A N T:
    //------------------
    // Update calcProfileComplete method in UserProfile.java AND datastore.js
    var progress = 0;
    var base_level_percent = 0.12;
    var hasLinks = false;
    if (profile.links && (profile.links.stackoverflow || profile.links.github || profile.links.website || profile.links.linkedin))
      hasLinks = true;
    profile.has_links = hasLinks;
    if (profile.has_links)
      progress += 2;
    if (profile.coding_since)
      progress += 2;
    if (profile.status)
      progress += 2;
    if (profile.visa)
      progress += 2;
    if (profile.roles && profile.roles.length > 0)
      progress += 2;
    var haveSkills = false;
    if (profile.skills && profile.skills.length > 0)
      haveSkills = true;
    if (profile.hasOwnProperty('haveGoodSkill') && !profile.haveGoodSkill)
      haveSkills = false;
    if (haveSkills)
      progress += 10;
    if (profile.resume || profile.resume_internal)
      progress += 80;
    var scaled_progress = Math.round(progress * (1 - base_level_percent)) + (base_level_percent * 100);
    profile.progress = progress;
  },
  setTypeOfNotification: function(icon, type) {
    // type should be one of ["search", "event", "views"]
    //TODO Seems a bit unsafe to just add whatever class gets passed in.
    icon.removeClass('search').removeClass('event').removeClass('profile').addClass(type);
  },
  getRoundedThermometerDiscoverability: function(progress) {
    return (Math.round(progress/20))*20;
  },
  getAdjustedProfileCompletness : function(progress) {
    return progress*.88 + 12;
  },
  refreshTotalConnections: function() {
    $('#total_connections_count_refresh').hide();
    $('#total_connections_count_refresh2').hide();
    var classmate_counts = P.homescreen.user.networks.map(function(n){return n.user_count;});
    var total_connections = classmate_counts.reduce(function(pv, cv) {return pv + cv;});
    $('#total_connections_count').text(P.homescreen.user.networks < 2 ? total_connections : Math.round(total_connections*0.4));
    $('#total_connections_count2').text(P.homescreen.user.networks < 2 ? total_connections : Math.round(total_connections*0.4));
    if(total_connections > 200) {
      $('#connections_count_icon').removeClass("red");
      $('#connections_count_icon').addClass("green");
    }
    
//    $('#total_connections_count_refresh').show();
//    $('#total_connections').hide();
//    PA.call_pj("student_careers.get_my_network", {from: "all"}, 1, function(data) {
//      var total_connections = Math.max(0, data.total > 1000 ? data.total : data.list.length + data.uids.length);
//      $('#total_connections_count').text(total_connections);
//      if(total_connections > 200) {
//        $('#connections_count_icon').removeClass("red");
//        $('#connections_count_icon').addClass("green");
//      }
//      
//      $('#total_connections_count_refresh').hide();
//      $('#total_connections').show();
//    });
  },
  getCaagVisibilitySettings: function() {
    var show_caag = true;
    var show_opt_out_caag = false;
    var is_opt_in = false;
    if(P.top_bar.user.isInst && !P.top_bar.user.isTA) {
      show_caag = false;
    } else if (!P.top_bar.user.config.logins || P.top_bar.user.config.logins < 10){
      show_caag = false;
    } else if(P.top_bar.userProfile === null) {
      show_caag = false;
      show_opt_out_caag = true;
    } else if(P.top_bar.userProfile.profile_settings === null) {
      show_caag = false;
      show_opt_out_caag = true;
    } else if(P.top_bar.userProfile.profile_settings.hasOwnProperty("opt_out")) {
      show_caag = false;
      show_opt_out_caag = true;
    } else if(!P.top_bar.careersNotifications) {
      show_caag = false;
      show_opt_out_caag = true;
    } 
    
    if(P.top_bar.userProfile != null) {
      is_opt_in = P.top_bar.userProfile.profile_settings.published && 
                 !P.top_bar.userProfile.profile_settings.opt_out && 
                 !(((P.top_bar.user.config || {}).email_prefs || {}).careers || {}).no_careers
    }

    // As we experiment with a version with only one caag:
    show_caag = show_caag || show_opt_out_caag;
    show_opt_out_caag = false;
    return {show_caag: show_caag, show_opt_out_caag: show_opt_out_caag, is_opt_in: is_opt_in};
  },
  getJobStatusYear: function() {
    var d = new Date();
    return d.getUTCMonth() > 6 ? d.getUTCFullYear() + 1 : d.getUTCFullYear();
  },
  updateNotificationPanel: function() {
    P.homescreen.showTechTourOrGHC();
    // var caagState = P.homescreen.getCaagVisibilitySettings();
    // var show_opt_out_caag = caagState.show_opt_out_caag;

    // to temporarily show old caag -- revert ALL below and uncomment all commented out to update to new caag
    var show_caag = false;
    var show_opt_out_caag = false;
    if(P.top_bar.user.isInst && !P.top_bar.user.isTA) {
      show_caag = false;
    } else if (!P.top_bar.user.config.logins || P.top_bar.user.config.logins < 10){
      show_caag = false;
    } else if(P.top_bar.userProfile === null) {
      show_caag = false;
      show_opt_out_caag = true;
    } else if(P.top_bar.userProfile.profile_settings === null) {
      show_caag = false;
      show_opt_out_caag = true;
    } else if(!P.top_bar.userProfile.profile_settings.hasOwnProperty("opt_out") && !P.top_bar.userProfile.profile_settings.published) {
      show_caag = false;
      show_opt_out_caag = true;
    } else if(P.top_bar.userProfile.profile_settings.published) {
      show_caag = true;
      show_opt_out_caag = false;
    }
    // experiment
    show_caag = show_caag || show_opt_out_caag;
    var unpublished = show_opt_out_caag;
    show_opt_out_caag = false;
    P.homescreen.updateRecentCompanyImages();
    if(show_caag && !P.top_bar.showSearch) {
      $("#the_caag_wrapper").show();
      $('#headed_to_fields').hide();
      if(unpublished) {
        $('.not_opted_in_container').show();
        if(P.top_bar.userProfile.school_id == "gm6dmjylA5H"){
          $('#ASUTermsSection').show();
        }
      }
    } else if(show_opt_out_caag && !P.top_bar.showSearch) {
      $("#the_caag_wrapper").show();      
      $("#opt_out_caag").show();      
      $("#the_caag").hide();      
    } else { 
      $("#the_caag_wrapper").hide();
      return;
    }
    //temp remove to show old caag (UNCOMMENT TO UPDATE TO NEW CAAG)
    // $("#the_caag_wrapper").hide();
    // P.homescreen.initCaagHandlers();

    $(".caag_notification").unbind().click(function(e) {
      var typ = $(this).attr("type");
      PA.call_pj("generic.event_to_requests", {event: "careers.caag_link", message: typ}, 1);
    });

    P.homescreen.refreshTotalConnections();
    
    $('#job_status_year').text(P.homescreen.getJobStatusYear());
    $('#job_status').unbind().change(function() {
      var job_yr = P.homescreen.getJobStatusYear();
      var paramsMap = {
        seeking_full:{status: "Seeking Full Time for " + job_yr.toString(), status_what: "fulltime", status_when: job_yr.toString()},
        seeking_intern:{status: "Seeking Internship for " + job_yr.toString(), status_what: "internship", status_when: job_yr.toString()},
        seeking_term:{status: "Seeking Co-Op/Term Internship for " + job_yr.toString(), status_what: "term_internship", status_when: job_yr.toString()},
        accepted:{status: "Accepted Position for " + job_yr.toString(), status_what: "accepted_position", status_when: job_yr.toString()}
      };
      var up = P.top_bar.userProfile;
      var params = paramsMap[$('#job_status').val()];
      up.status = params.status;
      up.status_what = params.status_what;
      up.status_when = params.status_when;
      PA.call_pj("user_profile.update_profile", {set: params}, 1, function(data){console.log(data);});
      if($('#job_status').val() === "accepted") {
        $('#headed_to_fields').show();
        $('#headed_to_confirmation').hide();          
      } else {
        $('#headed_to_fields').hide();  
        $('#headed_to_confirmation').hide();          
      }
      PA.call_pj("generic.event_to_requests", {event: "careers.new_caag.job_status." + $('#job_status').val()}, 1, function(data) {}); 
    });
    
    var companies = P.top_bar.companies;
    var roles = P.top_bar.roles;
    var places = P.top_bar.places;
    
    $('#company_caag').autoComplete({
      minChars: 2,
      source: function(term, suggest){
          term = term.toLowerCase();
          var choices = companies;
          var matches = [];
          for (i=0; i<choices.length; i++)
            if (~choices[i].toLowerCase().indexOf(term) && matches.length < 20)
              matches.push(choices[i]);
          suggest(matches);
      }
    });

    $('#role_caag').autoComplete({
        minChars: 2,
        source: function(term, suggest){
          term = term.toLowerCase();
          var choices = roles;
          var matches = [];
          for (i=0; i<choices.length; i++)
            if (~choices[i].toLowerCase().indexOf(term) && matches.length < 20)
              matches.push(choices[i]);
          suggest(matches);
        }
    });

    $('#location_caag').autoComplete({
        minChars: 2,
        source: function(term, suggest){
          term = term.toLowerCase();
          var choices = places;
          var matches = [];
          for (i=0; i<choices.length; i++)
            if (~choices[i].toLowerCase().indexOf(term) && matches.length < 20)
              matches.push(choices[i]);
          suggest(matches);
        }
    });
    
    var saveIfPossible = function() {
      if( $('#company_caag').val().length > 0 || 
          $('#company_caag').val().length > 0 || 
          $('#company_caag').val().length > 0) {
        P.homescreen.add_headed_to();
        PA.call_pj("generic.event_to_requests", {event: "careers.new_caag.headed_to"}, 1, function(data) {
          P.homescreen.refreshTotalConnections();          
        });
        
        P.homescreen.hideCaagJobStatus();
      }
    };
    
    $('#update_caag').click(saveIfPossible);
    // 
    // $('#company_caag').blur(function(){saveIfPossible();});
    // $('#role_caag').blur(function(){saveIfPossible();});
    // $('#location_caag').blur(function(){saveIfPossible();});
    
    P.homescreen.updateDiscoverabilityThermometer();
    
  },
  add_headed_to: function() {
    var d = new Date();
    var job_yr = d.getUTCMonth() > 5 ? d.getUTCFullYear() + 1 : d.getUTCFullYear();
    var type = "intern";
    if(P.top_bar.profile && 
      P.top_bar.profile.academics && 
      P.top_bar.profile.academics.grad_year && 
      P.top_bar.profile.academics.grad_year == job_yr) type = "full";
    var paramsMap = {
      type: type,
      company: $('#company_caag').val(),
      role: $('#role_caag').val(),
      city: $('#location_caag').val(),
      headed_to: true
    };
    if(type == "intern") {
      paramsMap.quarter = "Summer";
      paramsMap.year = job_yr;
    } else {
      paramsMap.start_month = 6;
      paramsMap.start_year = job_yr;
    }
    PA.call_pj("user_profile.add_work_experience", paramsMap, 1, function(data){console.log(data);});
    $('#job_details_dropdown').hide();    
    PA.call_pj("generic.event_to_requests", {event: "careers.job_dropdown_update_headed_to"}, 1);    
  },
  hasHeadedTo: function(exp) {
    if(!exp || exp.length === 0) return false;
    var work = exp[0];
    var date = new Date();
    if(work.type == "intern") {
      if(work.year > date.getFullYear()) return true;
      if(work.year < date.getFullYear()) return false;
      if(work.quarter == "Winter") return false;
      if(work.quarter == "Spring" && date.getMonth() >= 3) return false;
      if(work.quarter == "Summer" && date.getMonth() >= 6) return false;
      if(work.quarter == "Fall" && date.getMonth() >= 9) return false;
      return true;
    }
    if(work.start_year > date.getFullYear()) return true;
    if(work.start_year < date.getFullYear()) return false;
    return work.start_month > date.getMonth();
  },
  addNewWorkedAt: function() {
    var up = P.top_bar.userProfile;
    var hasError = false;
    var hasHeaded = P.homescreen.hasHeadedTo(up.work_experience);
    for (var i = 0; i < (hasHeaded ? (up.work_experience.length - 1) : up.work_experience.length); i++) {
      var company = $('#company_caag_' + i).val();
      if(company.trim().length == 0) {
        $('#company_caag_' + i).addClass('border-glow-red');
        hasError = true;
      }
      else $('#company_caag_' + i).removeClass('border-glow-red');
      var role = $('#role_caag_' + i).val();
      if(role.trim().length == 0) {
        $('#role_caag_' + i).addClass('border-glow-red');
        hasError = true;
      }
      else $('#role_caag_' + i).removeClass('border-glow-red');
    }
    if(hasError) return;
    for (var i = hasHeaded ? 1 : 0; i < up.work_experience.length; i++) {
      var exp = up.work_experience[i];
      var ui_ind = hasHeaded ? (i - 1) : i;
      exp.company = $('#company_caag_' + ui_ind).val();
      exp.role = $('#role_caag_' + ui_ind).val();
      exp.city = $('#location_caag_' + ui_ind).val();
      exp.year = parseInt($('#year_caag_' + ui_ind).val());
    }
    P.top_bar.userProfile.work_experience.push({
      type: 'intern',
      company: '',
      role: '',
      city: '',
      quarter: 'Summer',
      year: 2015
    });
    if (!P.homescreen.user.isTA) PTM.getModuleTemplate("homescreen", "homescreen_student", P.homescreen.showStudent);
    else PTM.getModuleTemplate("homescreen", "homescreen_instructor", P.homescreen.showInstructor);
    P.homescreen.editWorkedAt()
  },
  saveWorkedAt: function() {
    var up = P.top_bar.userProfile;
    var hasError = false;
    var hasHeaded = P.homescreen.hasHeadedTo(up.work_experience);
    for (var i = 0; i < (hasHeaded ? (up.work_experience.length - 1) : up.work_experience.length); i++) {
      var company = $('#company_caag_' + i).val();
      if(company.trim().length == 0) {
        $('#company_caag_' + i).addClass('border-glow-red');
        hasError = true;
      }
      else $('#company_caag_' + i).removeClass('border-glow-red');
      var role = $('#role_caag_' + i).val();
      if(role.trim().length == 0) {
        $('#role_caag_' + i).addClass('border-glow-red');
        hasError = true;
      }
      else $('#role_caag_' + i).removeClass('border-glow-red');
    }
    if(hasError) return;

    for (var i = hasHeaded ? 1 : 0; i < up.work_experience.length; i++) {
      var exp = up.work_experience[i];
      var ui_ind = hasHeaded ? (i - 1) : i;
      exp.company = $('#company_caag_' + ui_ind).val();
      exp.role = $('#role_caag_' + ui_ind).val();
      exp.city = $('#location_caag_' + ui_ind).val();
      exp.year = parseInt($('#year_caag_' + ui_ind).val());
    }
    PA.call_pj('user_profile.update_profile', {set: {work_experience: up.work_experience}}, 1, function(data){});
    if (!P.homescreen.user.isTA) PTM.getModuleTemplate("homescreen", "homescreen_student", P.homescreen.showStudent);
    else PTM.getModuleTemplate("homescreen", "homescreen_instructor", P.homescreen.showStudent);
  },

  showStudent: function(template) {
    if( $('#ClassStatisticsPanel').length > 0 ) return;
    var newQuestionCount = PEM.callFirst("getUnreadPosts");
    var updatedPostCount = PEM.callFirst("getUpdatedPosts");
    if(newQuestionCount === undefined) newQuestionCount = 0;
    if(updatedPostCount === undefined) updatedPostCount = 0;
    var classAtAGlanceCounts = {
      unread: newQuestionCount,
      updated: updatedPostCount
    };
    PEM.fire("hideSpecialMentions");

    if (P.homescreen.user.isPublic || P.homescreen.showingTechTour) {
      $('#homescreen').html(template({
        network:P.homescreen.network,
        user:P.homescreen.user,
        info: P.info
      }));
      $('#homescreen').show();
      return;
    }

    var up = P.top_bar.userProfile;
    if(!up) {
      var p = PEM.callFirst("loadMyProfile", function(p){ P.homescreen.updateNotificationPanel();
      });
      if (p && !P.homescreen.loaded_caag) {
        P.homescreen.updateNotificationPanel();
      }
      return;
    }
    if(!up.work_experience) up.work_experience = [];
    var hasHeaded = P.homescreen.hasHeadedTo(up.work_experience);
    up.worked_at_arr = up.work_experience.slice(hasHeaded ? 1 : 0);
    if(up.worked_at_arr.length == 0) {
      P.top_bar.userProfile.work_experience.push({
        type: 'intern',
        company: '',
        role: '',
        city: '',
        quarter: 'Summer',
        year: 2015
      });
      $('#worked_at_company').hide();
    }
    P.homescreen.worked_at_display = up.worked_at_arr.slice();

    $('#homescreen').html(template({
      network:P.homescreen.network,
      user:P.homescreen.user,
      classAtAGlanceCounts: classAtAGlanceCounts,
      workedAt: up.worked_at_arr,
      info: P.info
    }));


    var companies = P.top_bar.companies;
    var roles = P.top_bar.roles;
    var places = P.top_bar.places;
    for (var i = 0; i < up.worked_at_arr.length; i++) {
      $('#company_caag_' + i).val(up.worked_at_arr[i].company);
      $('#role_caag_' + i).val(up.worked_at_arr[i].role);
      $('#location_caag_' + i).val(up.worked_at_arr[i].city);
      $('#year_caag_' + i).val(up.worked_at_arr[i].year || up.worked_at_arr[i].year);

      
      $('#company_caag_' + i).autoComplete({
        minChars: 2,
        source: function(term, suggest){
            term = term.toLowerCase();
            var choices = companies;
            var matches = [];
            for (i=0; i<choices.length; i++)
              if (~choices[i].toLowerCase().indexOf(term) && matches.length < 20)
                matches.push(choices[i]);
            suggest(matches);
        }
      });

      $('#role_caag_' + i).autoComplete({
          minChars: 2,
          source: function(term, suggest){
            term = term.toLowerCase();
            var choices = roles;
            var matches = [];
            for (i=0; i<choices.length; i++)
              if (~choices[i].toLowerCase().indexOf(term) && matches.length < 20)
                matches.push(choices[i]);
            suggest(matches);
          }
      });

      $('#location_caag_' + i).autoComplete({
          minChars: 2,
          source: function(term, suggest){
            term = term.toLowerCase();
            var choices = places;
            var matches = [];
            for (i=0; i<choices.length; i++)
              if (~choices[i].toLowerCase().indexOf(term) && matches.length < 20)
                matches.push(choices[i]);
            suggest(matches);
          }
      });
    }
    // this is homescreen search stuff
    if (P.top_bar.showSearch && !P.homescreen.user.isTA) {
      if (P.top_bar.userProfile.academics.major)
        $('#search_major').val(P.top_bar.userProfile.academics.major.split(", ")[0]);
      $('#search_school').val(P.top_bar.userProfile.school);
      var classes = "";
      for (var i = 0; i < P.top_bar.user.networks.length; i++)
        if (P.top_bar.user.networks[i].status == "active")
          classes = classes + (classes.length > 0 ? ",":"") + P.top_bar.user.networks[i].course_number;
      $('#search_class').val(classes);

      var autoCompletes = {
        major:P.top_bar.majors,
        school:P.top_bar.schools
      };
      for (var type in autoCompletes) {
        // add autocomplete
        if (autoCompletes[type]) {
          $('#search_' + type).autoComplete({
            minChars: 2,
            myType:type,
            source: function(term, suggest){
              term = term.toLowerCase();
              var choices = autoCompletes[this.myType];
              var matches = [];
              for (i=0; i<choices.length; i++)
                if (~choices[i].toLowerCase().indexOf(term) && matches.length < 20)
                  matches.push(choices[i]);
              suggest(matches);
            }
          });
        }
      }
      $('.student_search_preview').show();
      $('.homescreen_section_wrapper').hide();
      $('#the_caag_wrapper').hide();
    } else {
      $('.student_search_preview').hide();
    }

    $('#homescreen').hide();
    $('#upload_resume_button').click(function(){
      $('#upload_form_file').click();
      return false;
    });
    $(".goto_my_profile").click(function() {
      PA.call_pj("generic.event_to_requests", {event: "careers.homscreen_profile_click"}, 1);
    });
    var p = PEM.callFirst("loadMyProfile", function(p){ P.homescreen.updateNotificationPanel() });
    if (p && !P.homescreen.loaded_caag) {
      P.homescreen.updateNotificationPanel();
    }
    //P.top_bar.careersFeedTemplate = template;
    //if( !P.homescreen.maybeShowCareersStory() )
    $('#homescreen').show();
    P.homescreen.refreshInstructorStats();
    //var checkProfile = function(p) {
    //  if (p.resume && p.last_resume_upload && p.last_resume_upload >= 1418830079) {
    //    $('.need_upload_resume').hide();
    //    $('.no_need_upload_resume').show();
    //  }
    //};
    //if (PA.user.config.sv2015b) {
    //  $('.need_upload_resume').hide();
    //  $('.sv2014_apply_done').show();
    //} else {
    //  if (!PA.isSeenUser("sv2015b") && !P.homescreen.user.isPublic) {
    //    var p = PEM.callFirst("loadMyProfile", checkProfile);
    //    if (p)
    //      checkProfile(p);
    //  }
    //}
    //$('.apply_button').click(function(){
    //  window.location = "/techtour?step=two";
    //});

    // PA.call_pj("user_profile.get_careers_at_a_glance", {}, 1, function(data) {
    //   P.homescreen.events = data.events;
    //   P.homescreen.companies = data.companies;
    //   P.homescreen.searches = data.searches;
    //   P.homescreen.user_profile = data.user_profile;
    //   PTM.getModuleTemplate("homescreen", "homescreen_careers_aag", P.homescreen.showStudent);
    // }, function(err) {
    //   alert("Error: " + err);
    // });
  },
  runSearch: function() {
    var search = {school:[],class:[],major:[]};
    if ($("#search_school").val())
      search.school.push($("#search_school").val());
    if ($("#search_major").val())
      search.major.push($("#search_major").val());
    if ($("#search_class").val())
      search.class = $("#search_class").val().split(",");
    search.searchType = "" + P.top_bar.showSearch + "_HS_";
    var param = encodeURI(JSON.stringify(search));
    var link = '/careers/dashboard#/search_beginner/q/' + param;
    window.open(link);
    return false;
  },
  showCareersAtAGlance: function(template) {
    // $("#careers_at_a_glance").html(template({
    //   events: P.homescreen.events,
    //   companies: P.homescreen.companies,
    //   searches: P.homescreen.searches,
    //   user_profile: P.homescreen.user_profile
    // }));
  },
  gotoCareersClass: function(nid) {
    PA.call_pj("generic.page_event", {type:"careers.homescreen_class_link"}, 1);
    P.top_bar.changeNetwork(nid);
    return false;
  },
  initHomescreenClicks: function() {
    $(".read_more_link").unbind().click(function() {
      var id = $(this).closest(".company_story").attr("id");
      PA.call_pj("generic.page_event", {type:"careers.read_more", text1:id}, 1);
    });
    $(".homescreen_company_logo").unbind().click(function() {
      var id = $(this).closest(".company_story").attr("id");
      PA.call_pj("generic.page_event", {type:"careers.story_logo_click", text1:id}, 1);
    });
    $('.do-follow-event').unbind().click(function(){
      var eventId = $(this).attr("event");
      var internalId = $(this).attr("company");
      var _this = this;
      PA.call_pj("careers_company.follow_event", {event_id:eventId, internal_id:internalId}, null, function(data){
        for (var i = 0; i < P.homescreen.feed.length; i++) {
          if (P.homescreen.feed[i].id == eventId) {
            P.homescreen.feed[i].config.following = true;
            if (!P.homescreen.feed[i].config.followers)
              P.homescreen.feed[i].config.followers = 0;
            P.homescreen.feed[i].config.followers += 1;
            var html = P.homescreen.eventStoryTemplate({item:P.homescreen.feed[i]});
            $(_this).closest('.company_story').replaceWith(html);
            P.homescreen.initHomescreenClicks();
            break;
          }
        }
      });
    });
    $('.do-unfollow-event').unbind().click(function(){
      var eventId = $(this).attr("event");
      var internalId = $(this).attr("company");
      var _this = this;
      PA.call_pj("careers_company.unfollow_event", {event_id:eventId, internal_id:internalId}, null, function(data){
        for (var i = 0; i < P.homescreen.feed.length; i++) {
          if (P.homescreen.feed[i].id == eventId) {
            P.homescreen.feed[i].config.following = false;
            P.homescreen.feed[i].config.followers -= 1;
            var html = P.homescreen.eventStoryTemplate({item:P.homescreen.feed[i]});
            $(_this).closest('.company_story').replaceWith(html);
            P.homescreen.initHomescreenClicks();
            break;
          }
        }
      });
    });
  },
  changeResolutionOfItem: function($elt, isResolved) {
    $elt.closest('.notification_wrapper').find('.notification_icon').removeClass('green').removeClass('red').addClass(isResolved ? 'green' : 'red');
  },
  updateRelativeTimes: function() {
    $('.auto_update_time').each(function(idx) {
      var when = $(this).attr("when");
      if (when)
        $(this).html(when.toRelativeTime(3000));
    });
  },
  showInstructor: function(template) {
    if( $('#ClassStatisticsPanel').length > 0 ) return;
    PEM.fire("hideSpecialMentions");
    $('#homescreen').html(template({network:P.homescreen.network, user:P.homescreen.user,info:P.info}));
    $('#homescreen').hide();

    if (P.homescreen.network.status == 'active') {
      $('.network-active').show();
      $('.network-inactive').hide();
    } else {
      $('.network-active').hide();
      $('.network-inactive').show();
    }
    
    // get statistics
    P.homescreen.refreshInstructorStats();
    var est = parseInt(P.homescreen.network.enrollment);
    if (isNaN(est)) est = 25;
    if (est < 1) est = 1;
    $('.current_est_enrollment').html(est);
    $('#new_est_enrollment').val(est);
    P.homescreen.showEnrollment();
    $('.new_est_enrollment').unbind().keyup(function(){
      var est = parseInt($(this).val(), 10);
      if (est < 1) est = 1;
      P.homescreen.network.enrollment = est;
      P.homescreen.showEnrollment();
    });
    // either show experienced view, or simple view
    var isDashboard = PEM.callFirst("isDashboard");
    var showExp = true;//(P.homescreen.network.total_content_prof > 15) || PA.isSeenNetwork(P.homescreen.network, "exp");
    if (P.homescreen.homescreenUpdate) {
      $('#homescreen_update_header').html(P.homescreen.homescreenUpdate.title);
      $('#homescreen_update_caption').html(P.homescreen.homescreenUpdate.caption);
      $('#homescreen_update_image').attr("src", P.homescreen.homescreenUpdate.image);

    }
    if (showExp && isDashboard) {
      $('.homescreen_box.ia2a').hide();
      $('.homescreen_section_wrapper').show();
      
      $('#homescreen').show();
      if (P.feed.live) {
        $('#homescreen_start_live').hide();
        $('#homescreen_start_live_progress').show();
      }
      if (P.top_bar.user.config.logins > 20) {
        $('.show-to-experienced').show();
      } else {
      	$('.show-to-experienced').hide();
      }
      if (P.homescreen.profNews && !PA.isSeenUser("close_prof_news") && P.top_bar.user.config.logins > 20) {
        $('#instructor_news').show();
        $('#instructor_news_container').html(P.homescreen.profNews);
        $(".close_prof_news").click(function() {
          $("#instructor_news").hide();
          PA.markSeenUnseen("close_prof_news");
        });
      } else {
        $('#instructor_news').hide();
      }

      if (P.homescreen.network && !PA.isSeenUser("homescreen_careers_is_here2") && !P.homescreen.user.isTA && P.top_bar.user.config.logins > 20) {
         $(".homescreen_careers_is_here").show();
         $(".homescreen_careers_is_here_hide").hide();
        // PA.call_pj("generic.page_event", {type:"careers.show_careers_is_here"}, 1);
         $(".close_prof_careers_warning").click(function() {
           $(".homescreen_careers_is_here").hide();
           $(".homescreen_careers_is_here_hide").show();
           PA.markSeenUnseen("homescreen_careers_is_here2");
         });
      } 
      if (P.homescreen.network && !PA.isSeenUser("lecture_series_1") && !P.homescreen.user.isTA) {
        $("#lecture_series_announcement").show();
     } 
      if(P.homescreen.user.isTA) {
        var p = PEM.callFirst("loadMyProfile", function(p){ P.homescreen.updateNotificationPanel() });
        if (p) {
          P.homescreen.updateNotificationPanel();
        }
        // P.homescreen.updateNotificationPanel();
      }
    } else {
      $('.homescreen_section_wrapper').hide();
      P.homescreen.showWelcomeQueue();
      if(P.homescreen.user.isTA) {
        var p = PEM.callFirst("loadMyProfile", function(p){ P.homescreen.updateNotificationPanel() });
        if (p) {
          P.homescreen.updateNotificationPanel();
        }
      }  
      $('#homescreen').show();
    } 
  },
  showInstructorHomescreenSurvey: function(template) {
    PEM.fire("hideSpecialMentions");
    $('#homescreen').html(template({network:P.homescreen.network, user:P.homescreen.user,info:P.info}));
    $('#homescreen').show();
    $(".homescreen_close_button.prof_survey_close").click(function() {
      var params = {
        stat: "homescreen_prof_survey",
        val: "closed"
      };
      PA.call_pj("user.set", params, $(".homescreen_section_wrapper"), function(data) {
        $(".homescreen_section_wrapper").hide();
        PA.markSeenUnseen("homescreen_prof_survey");
        PTM.getModuleTemplate("homescreen", "homescreen_instructor", P.homescreen.showInstructor);
      }, function(err) {
        alert("Error: " + err);
      });
    });
    $("#submit_homescreen_prof_survey_button").click(function() {
      var params = {
        stat: "homescreen_prof_survey",
        val: {}
      };
      params.val.hours_saved = $("input[name=hoursSavedPerWeek]:checked").val();
      params.val.piazza_helps = $("input[name=piazzaHelpsBetterLearn]:checked").val();
      params.val.reason_why_piazza = $("input[name=reasonWhyPiazza]:checked").val();
      params.val.reason_why_piazza_other = $("#other_reason_why_piazza").val();
      params.val.likely_to_recommend = $("input[name=howLikelyPiazza]:checked").val();
      params.val.reason_why_not_five = $("#why_i_answered").val();
      params.val.reason_piazza_not_others = $("#why_piazza_not_others").val();
      params.val.has_cool_story = $("#cool_piazza_story_contact_me").is(":checked");
      params.val.piazza_allows = [];
      $("input[name=piazzaAllows]:checked").each(function() {
        params.val.piazza_allows.push($(this).val());
      });
      params.val.colleagues_dont_use = $("input[name=colleaguesNotUse]:checked").val();
      params.val.reason_colleagues_other = $("#other_colleagues_not_use").val();
      PA.call_pj("user.set", params, $(".homescreen_section_wrapper"), function(data) {
        PA.markSeenUnseen("homescreen_prof_survey");
        $("#homescreen_survey_modal").modal('show');
      }, function(err) {
        alert("Error: " + err);
      });
    });
    $('#homescreen_survey_modal').on('hidden', function () {
        PTM.getModuleTemplate("homescreen", "homescreen_instructor", P.homescreen.showInstructor);
        $(".homescreen_section_wrapper").hide();
    })
  },
  saveEnrollment: function() {
    var est = parseInt($('.new_est_enrollment:visible').val(), 10);
    if (isNaN(est)) est = 25;
    if (est < 1) est = 1;
    PA.call_pj("network.update", {id: P.homescreen.network.id, enrollment: est}, 1);
    $('.current_est_enrollment').html(est);
    $('#new_est_enrollment').val(est);
    $('.est_enrollment_wrapper').hide();
    $('.est_enrollment_wrapper.view').show();
  },
  showEnrollment: function() {
    var est = parseInt(P.homescreen.network.enrollment);
    if (isNaN(est)) est = 25;
    if (est < 1) est = 1;
    var students = P.homescreen.network.user_count - P.homescreen.network.profs.length;
    if (students < 0) students = 0;
    $('.homescreen_progressbar .progress_count_number_students').html(students);
    if (students == 0) {
      $('.homescreen_progressbar .progress_count').addClass('none_enrolled');
    } else {
      $('.homescreen_progressbar .progress_count').removeClass('none_enrolled');
    }
    var percent = Math.round(students * 100 / est);
    $('.homescreen_progressbar .bar_students').css("width", percent + "%");
  },
  feedCreated: function() {
    if (P.homescreen.network.type != "group" && !P.homescreen.user.isPublic) {
      P.homescreen.refreshNewQuestions();
    }
  },
  refreshNewQuestions: function() {
    // New questions
    var $new = $('#new_question_count');
    var newQuestionCount = PEM.callFirst("getUnreadPosts");
    if(newQuestionCount === undefined) {
      newQuestionCount = 0;
    }
    $new.text(newQuestionCount === 0 ? 'no' : newQuestionCount);
    P.homescreen.changeResolutionOfItem($new, newQuestionCount === 0);
    $new.closest('.notification_wrapper').unbind().click(function() {
      PEM.fire("filterFeed", {
        filter: 'unread',
        showHidden: 'both'
      });
    });
  },
  refreshInstructorStats: function(force) {
    var now = new Date();
    if (!force && P.homescreen.instructorStatsId == P.homescreen.network.id &&
        P.homescreen.instructorStatsLoaded && (now - P.homescreen.instructorStatsLoaded < 1000*60)) {
        if (P.homescreen.instructorStats)
          P.homescreen.showInstructorStats(P.homescreen.instructorStats);
    }

    P.homescreen.instructorStatsId = P.homescreen.network.id;
    P.homescreen.instructorStatsLoaded = now;
    PA.call_pj("network.get_instructor_stats", {
      nid: P.homescreen.network.id
    }, 1, function(data) {
      P.homescreen.instructorStats = data;
      P.homescreen.showInstructorStats(data);
      PEM.fire("instructorStats", data);
    }, function(err) {
    });
    //P.homescreen.initHandlers();
  },
  showInstructorStats: function(data) {
    var nowStr = (new Date()).toISOString();
    $('#activity_last_updated').attr("when", nowStr);
    $('#activity_last_updated').html(nowStr.toRelativeTime());
    $('#students_response_count').text(data.students_response);
    $('#instructors_response_count').text(data.instructors_response);
    $('#total_posts_count').text(data.total_posts);
    $('#total_contributions_count').text(data.total_contributions);
    P.homescreen.refreshNewQuestions();
    // Unanswered questions
    var $unanswered = $('#unanswered_question_count');
    var unansweredQuestionCount = data.unanswered_questions;
    // use < 1 instead of === 0 because bugs in the counting mechanism may sometimes bring the number below 0
    $unanswered.text(unansweredQuestionCount < 1 ? 'no' : unansweredQuestionCount);
    if (P.homescreen.network.config.timer && P.homescreen.network.config.timer.enabled) {
      $('.qa_meta_timer_wrap').show();
      $('#unanswered_question_count_on_timer').text(data.unanswered_questions_on_timer);
      var $due = $('#unanswered_question_count_on_timer_due');
      P.homescreen.changeResolutionOfItem($due, data.unanswered_questions_on_timer_due < 1);
      $due.text(data.unanswered_questions_on_timer_due);
      $due.closest('.notification_wrapper').unbind().click(function() {
        PEM.fire("filterFeed", {
          filter: 'due',
          showHidden: 'both'
        });
      });

    } else {
      $('.qa_meta_timer_wrap').hide();
    }
    P.homescreen.changeResolutionOfItem($unanswered, unansweredQuestionCount < 1);
    $unanswered.closest('.notification_wrapper').unbind().click(function() {
      PEM.fire("filterFeed", {
        filter: 'unanswered',
        showHidden: 'both'
      });
    });

    // Followups
    var $unresolved = $('#unresolved_followup_count');
    var unresolvedFollowupCount = data.unanswered_followups;
    $unresolved.text(unresolvedFollowupCount < 1 ? 'no' : unresolvedFollowupCount);
    P.homescreen.changeResolutionOfItem($unresolved, unresolvedFollowupCount < 1);
    $unresolved.closest('.notification_wrapper').unbind().click(function() {
      PEM.fire("filterFeed", {
        filter: 'unresolved_followups',
        showHidden: 'both'
      });
    });

    // Response time
    var responseTime = data.response_time;
    var responseTimeText;
    if(responseTime === 0) {
      responseTimeText = 'n/a';
    } else {
      responseTimeText = Math.round(responseTime / 60, 2) + ' min';
    }
    $('#average_response_time').text(responseTimeText);

    var licStatus = "license not required"
    var lic = P.homescreen.network && P.homescreen.network.licensing;
    if (!lic.how) {
      lic.how = {};
    }

    if (lic) {
      if (lic.how.old_class) {
        licStatus = "license not needed"
      } else if (lic.type === LICENSING_TYPE_K12 || lic.how.is_k12) {
        licStatus = "K-12/Waived"
      } else if (lic.type === LICENSING_TYPE_NON_CLASS || lic.how.invalid_term) {
        licStatus = "non-class"
      } else if (lic.how.school_negotiations) {
        licStatus = "license not needed at this time"
      } else if (lic.licensed_by_instructor) {
        licStatus = "active instructor license"
      } else if (lic.type === LICENSING_TYPE_DONATION) {
        licStatus = "contribution-supported"
      } else if (lic.how.small_class) {
        licStatus = "not needed at this time (25 students or less)"
      } else if (lic.license_expired) {
        licStatus = "contribution-supported"
      } else if (lic.license_required) {
        licStatus = "pending instructor license (" + lic.days_to_expire + " day" + (lic.days_to_expire > 1 ? "s" : "") + " left)"
      }
    }
    $('#license_status').text(licStatus);
  },
  hideHomeScreen: function() {
    $('#homescreen').hide();
  },
  cleanDashboard: function() {
    $('.dashboard_element').html('');
    $('.main_panel').removeClass("private_post");
    $('#inactive_group_message').hide();
    $('#user_profile_wrapper').hide();
    $('.main_panel').css("top", "0px");
    PEM.fire("showSpecialMentions");
    if (P.homescreen.network && P.homescreen.network.status == "inactive" && !P.homescreen.user.isPublic) {
      $('#inactive_group_message').show();
      if (P.homescreen.network.isGroup){
        $('#inactive_group_message').removeClass('demo_message');
        $('#inactive_group_message').text("! This group has been made inactive. No posts will be allowed until an admin reactivates the group.");
      }
      else{
        var text = "No posts";
        if (P.homescreen.network.config && P.homescreen.network.config.inactive_private) {
          text = "Only private posts to instructors";
        }
        $('#inactive_group_message').removeClass('demo_message');
        $('#inactive_group_message').text("! This class has been made inactive. " + text + " will be allowed until an instructor reactivates the class.");
      }
    } else{
      $('#inactive_group_message').hide();
    }
    if(P.homescreen.user.isPublic) {
      $('#inactive_group_message').addClass('demo_message');
      $('#inactive_group_message').html("Want to go back to the demo homescreen? <a href='#' class ='back_to_demo_button' onclick = 'PEM.fire(\"cleanDashboard\");PEM.fire(\"showHomescreen\");'>Click here</a>");
      $('#inactive_group_message').show();
    }
  },

  // Record that instructor resolved a particular message
  resolveMessage: function(name, params) {
    if(name === 'tips_tricks') {
      PA.call_pj('user.mark_seen', {msg: 'tips_tricks'}, 1, function() {}, function() {});
    }

    P.homescreen.seenMessages[name] = true;

    var $section = $('#' + name);
    $section.addClass('resolved');
    var hider = function() {
      $section.fadeOut(300, function() {
        P.homescreen.showWelcomeQueue({});
      });
    };
    if(typeof params !== 'undefined' && params.hideImmediately) {
      hider();
    } else {
      setTimeout(hider, 5000);
    }
    PA.markSeenNetwork(P.homescreen.network, name);
  },
  showResolvedView: function(name) {
    $section = $('#' + name);
    $section.find('.first_view').hide();
    $section.find('.second_view').show();
    if(name === 'enroll_inst') {
      if(P.homescreen.network.config && P.homescreen.network.config.no_other_instructors === true) {
        $section.find('.second_view').hide();
        $section.find('.no_others_view').show();
      }
    } else if(name === 'setup_course_page') {
      $('#save_setup_course_page').hide();
    }
  },
  showWelcomeQueue: function(params) {
    params = params || {};
    var isDashboard = PEM.callFirst("isDashboard");
    // params are initializing (whether we're in initialization) and prefill (whether there is some particular item that we really want to show)
    // hide them all initially
    if(params.initializing) {
      $('.welome_Q_box').hide();
    }
    P.homescreen.welcomeQueue.forEach(function(msg) {
      P.homescreen.seenMessages[msg] = false;
    });
    if(P.homescreen.network.config && P.homescreen.network.config.seen_message instanceof Array) {
      P.homescreen.network.config.seen_message.forEach(function(msg) {
        // only care about messages that are actually used here: for those, the previous statement would have put them in seenMessages with value false
        if(P.homescreen.seenMessages[msg] === false) {
          P.homescreen.seenMessages[msg] = true;
        }
      });
    }
    var i, len;
    // determine the queue
    var shownQueue = [];
    if(P.homescreen.gettingStartedPage) {
      shownQueue = P.homescreen.welcomeQueue;
      // no access code manipulation in schools that have emails
      if (P.homescreen.network.school_emails) {
        shownQueue.remove(function(elt) {
          return elt === 'access_code';
        });
      }
    } else {
      if(params.prefill !== undefined) {
        shownQueue.push(params.prefill);
      }
      for(i = 0, len = P.homescreen.welcomeQueue.length; i < len; i++) {
        if(P.homescreen.seenMessages[P.homescreen.welcomeQueue[i]] === false || !isDashboard) {
          // make sure prof only sees tips_tricks once
          if(P.homescreen.welcomeQueue[i] === 'tips_tricks' && $.inArray('tips_tricks', PA.user.config.seen_message) !== -1 && isDashboard) {
            continue;
          }
          if(PA.isSeenNetwork(P.homescreen.network, P.homescreen.welcomeQueue[i]) && isDashboard) {
            if (!(P.homescreen.welcomeQueue[i] === 'enroll_students')) {
              continue;
            }
          }
          // never show access code one in temp classes
          if(P.homescreen.welcomeQueue[i] === 'access_code' && P.homescreen.network.school_emails) {
            continue;
          }
          if(!shownQueue.exist(P.homescreen.welcomeQueue[i])) {
            shownQueue.push(P.homescreen.welcomeQueue[i]);
          }
          if(shownQueue.length === 3 && isDashboard) {
            // that's all we need
            break;
          }
        } else {
          if (P.homescreen.welcomeQueue[i] == "enroll_students")
            shownQueue.push("student_progress_bar");
        }
      }
    }
    if (shownQueue.length == 1 && shownQueue[0] == "student_progress_bar") {
      // everything is closed! switch to experienced view
      PA.markSeenNetwork(P.homescreen.network, "exp");
      $('.ia2a').hide();
      $('.homescreen_section_wrapper').show();
    }
    // show the queue
    P.homescreen.welcomeQueue.forEach(function(item) {
      var $item = $('#' + item);
      if(shownQueue.exist(item)) {
        if(!$item.is(':visible')) {
          if(typeof params !== 'undefined' && params.initializing) {
            $item.fadeIn(300);
          } else {
            $item.show();
          }
        }
      } else if($item.is(':visible')) {
        $item.fadeOut(300);
      }
    });
    if (shownQueue.exist("student_progress_bar")) {
      if(!$("#student_progress_bar").is(':visible'))
        $("#student_progress_bar").fadeIn(300);
    }

    P.homescreen.currentlyShown = {};
    // show resolved view for resolved messages
    for(i = 0, len = shownQueue.length; i < len; i++) {
      if(PA.isSeenNetwork(P.homescreen.network, shownQueue[i])) {
        P.homescreen.showResolvedView(shownQueue[i]);
      }
      P.homescreen.currentlyShown[shownQueue[i]] = true;
    }

    P.homescreen.currentlyShownQueue = shownQueue;
    P.homescreen.initIA2A();
  },
  initIA2A: function() {
    // tips & tricks
    var isDashboard = PEM.callFirst("isDashboard");
    if (isDashboard)
      $('.homescreen_close_button').css("visibility", "visible");
    $('#read_tips_tricks').unbind('click').click(function() {
      P.homescreen.resolveMessage('tips_tricks');

      // Tips & Tricks is probably message nr. 1, but may be something else. Backend stores the number
      var tipsTricksNr = 1;
      if(P.homescreen.network.config && P.homescreen.network.config.tips_tricks_nr) {
        tipsTricksNr = P.homescreen.network.config.tips_tricks_nr;
      }
      if(isDashboard) {
        PEM.fire("selectContent", tipsTricksNr);
      } else {
        window.location = '/class/' + P.homescreen.network.id + '?cid=' + tipsTricksNr;
      }
    });

    // first day of class
    if (P.homescreen.currentlyShown["first_day"]) {
      PA.call_pj('network.get_start_date', {nid: P.homescreen.network.id}, 1, function(data) {
        if (data === "DEFAULT") {
          data = new Date().format("mm/dd/yyyy");
          $('#first_day_of_class').val(data);
          $('#first_day_of_class').datepicker();
          $('#first_day').show();
        } else {
          PA.markSeenNetwork(P.homescreen.network, 'first_day');
          if (isDashboard) {
            $('#first_day').hide();
            P.homescreen.showWelcomeQueue({});
          }
          return;
        }
      }, alert);
      $('#save_first_day').unbind('click').click(function() {
        var firstDay = $('#first_day_of_class').val();
        PA.call_pj('network.update', {
          start_date: firstDay,
          id: P.homescreen.network.id
        }, null, function() {
          P.homescreen.resolveMessage('first_day');
          P.homescreen.showResolvedView('first_day');
        });
      });
    }

    if (P.homescreen.currentlyShown["access_code"]) {
      $("#access_code_li").show();
      PA.call_pj('network.get_access_code', {nid: P.homescreen.network.id}, 1, function(data) {
        $('#access_code_input').val(data);
      });
      $('#save_access_code').unbind('click').click(function() {
        var accessCode = $('#access_code_input').val();
        if(accessCode === '') {
          alert("Please provide a nonempty access code");
          return false;
        }
        PA.call_pj('network.update', {id: P.homescreen.network.id,join_code: accessCode}, null, function() {
          P.homescreen.resolveMessage('access_code');
          P.homescreen.showResolvedView('access_code');
        });
      });
    }
      // enrolling professors
    if (P.homescreen.currentlyShown["enroll_inst"]) {
      $('.enroll_inst_actions .btn').unbind('click').click(function() {
        var hasOthers = ($(this).text() === 'yes');
        $('#enroll_inst .ask_view').hide();
        if(hasOthers) {
          $('#enroll_inst .first_view').hide();
          $('#enroll_inst .enroll_view').show();
        } else {
          // save to DB
          PA.call_pj('network.set_config', {nid: P.homescreen.network.id,key: 'no_other_instructors',value: true}, null, function() {
            P.homescreen.network.config.no_other_instructors = true;
            $('#enroll_inst .no_others_view').show();
            P.homescreen.resolveMessage('enroll_inst');
          });
        }
      });
    }
    if (P.homescreen.currentlyShown["enroll_inst_self"]) {
      $('.enroll_inst_self_actions .btn').unbind('click').click(function() {
        var canOthers = ($(this).text() === 'yes');
        if(canOthers) {
          // save to DB
          PA.call_pj('network.update', {id: P.homescreen.network.id, auto_join:"all"}, null, function() {
            P.homescreen.network.config.no_other_instructors = true;
            P.homescreen.resolveMessage('enroll_inst_self', {hideImmediately:true});
          });
        } else {
          // save to DB
          PA.call_pj('network.update', {id: P.homescreen.network.id, auto_join:"all,no-profs"}, null, function() {
            P.homescreen.network.config.no_other_instructors = true;
            P.homescreen.resolveMessage('enroll_inst_self', {hideImmediately:true});
          });
        }
      });
      $('#save_enroll_inst').unbind('click').click(function() {
        var emails = $('#add_instructors').val();
        if(emails === '') {
          alert('Please enter at least one email address.');
          return false;
        }
        P.homescreen.handleAddInstructors(emails);
      });
    }
    $('#share_piazza').unbind('click').click(function() {
      $('#share_email_modal').modal('show');
      return false;
    });
    // enrolling students
    if (P.homescreen.currentlyShown["enroll_students"]) {
      $('#save_enroll_students').unbind('click').click(function() {
        var emails = $('#add_students').val();
        if(emails === '') {
          alert('Please enter at least one email address.');
          return false;
        }
        var params = {id:P.homescreen.network.id, add_students:emails, from:'WelcomeScreen'};
        PA.call_pj("network.update", params, null, function(data) {
          P.homescreen.network.user_count = data.length;
          P.homescreen.showEnrollment();
          P.homescreen.showResolvedView('enroll_students');
          P.homescreen.resolveMessage('enroll_students');
          $('#enroll_students .second_window').hide();
        });
      });
    }
    $('#save_setup_course_page').unbind('click').click(function() {
      P.homescreen.resolveMessage('setup_course_page');
      P.homescreen.showResolvedView('setup_course_page');
    });
    $('#save_setup_sections').unbind('click').click(function() {
      PEM.fire("gotoConfigClass", "ConfigureSection");
    });
    $('.homescreen_close_button').unbind('click').click(function() {
      var welcome_Q_box = $(this).closest('.ia2a');
      welcome_Q_box.fadeOut(400, function() {
        var id = $(this).attr('id');
        P.homescreen.resolveMessage(id, {hideImmediately: true});
        //if (id === "enroll_students") {
          //if (PW.newView.canViewLmsFeature()) {
          //  PA.markSeenUnseen("weblogin_roster");
          //  PA.log_call_pj("log.event", {"event": "weblogin_roster.hide_teaser", "nid" : currentNetworkId});
          //}
        //}
      });
      return false;
    });
    $('#create_a_new_class').unbind('click').click(function() {
      var link = '/instructors/';
      link += (P.homescreen.network.school_ext) ? P.homescreen.network.school_ext : 'school-search';
      window.open(link);
      return false;
    });
  },

  handleAddInstructors: function(text) {
    var i, currEmail;
    var emails = [];
    var unverified_emails = text.split(/[^\w@!#%$&'*+\-\/=?\^_`{}~.]/ig);
    if (unverified_emails.length === 0) {
      return false;
    }
    for (i = 0; i < unverified_emails.length; i++) {
      currEmail = unverified_emails[i];
      if (currEmail !== null && typeof currEmail !== 'undefined' && isValidEmailAddress(currEmail)) {
        emails.push(currEmail);
      }
    }
    if (emails.length === 0) {
      alert('Please enter at least one valid email address.');
      return false;
    }
    // show the modal
    PTM.getModuleTemplate("homescreen", "homescreen_instructor_enroll", function(template) {
      $('#instructor_enroll_modal_wrapper').html(template({emails:emails}));
      $('#instructor_enroll_modal').modal('show');
    });
  },
  handleAddInstructorsAdd: function() {
    var form = $('#instructor_enroll_modal');
    var numberOfEmails = form.find('.instr_email').length;
    var selected = form.find('input:checked').length;
    if(numberOfEmails > selected) {
      alert('Please indicate whether each instructor is a professor or TA');
      return false;
    }

    var profEmails = [];
    var taEmails = [];
    var emails = form.find('.instr_email');
    var selections = form.find('input:checked');
    for (var i = 0; i < emails.length; i++) {
      if($(selections[i]).hasClass("prof")) {
        profEmails.push(emails[i].innerHTML);
      } else {
        taEmails.push(emails[i].innerHTML);
      }
    }

    var params = {id:P.homescreen.network.id, add_inst:profEmails.join(", "), add_ta:taEmails.join(", ")};

    PA.call_pj("network.update", params, null, function(data) {
      if (data) {
        var admins = [];
        data.forEach(function(user) {
          if (user.admin) {
            admins.push(user);
          }
        });
        P.homescreen.network.profs = admins;
        P.homescreen.network.user_count = data.length;
        //Piazzza.WelcomeScreen.initData();
      }
      //var new_profs = currentNetwork.profs.length;
      //PA.trackEvent(true, "InstructorWelcome_Add_Profs", "/class/", {"users_added" : (new_profs - prev_profs)});
    });
    $('#add_instructors').val('');
    P.homescreen.showResolvedView('enroll_inst');
    P.homescreen.resolveMessage('enroll_inst');
    $('#instructor_enroll_modal').modal('hide');
    // hide per Carly
    $('#enroll_inst .third_window').hide();
    return false;
  },
  sendShareEmail: function() {
    var emails = $('#share_email_to').val();

    if(emails.length < 1 || emails.indexOf('@') === -1) {
      alert("Please enter at least one valid email address");
      return false;
    }
    var subject = $('#share_email_subject').val();
    if(subject.length < 1) {
      alert("Please enter a valid subject line");
      return false;
    }
    var content = $('#share_email_content').val();
    if(content.length < 1) {
      alert("Please don't send an empty email");
      return false;
    }
    PA.call_pj('user.send_share_email', {nid: P.homescreen.network.id, to: emails, subject: subject, text: content}, null, function () {
      $('#share_email_modal').modal('hide');
      $('#share_piazza .first_view, #share_piazza_experienced .first_view').hide();
      $('#share_piazza .second_view, #share_piazza_experienced .second_view').show();
      setTimeout(function() {
        $('#share_piazza .second_view, #share_piazza_experienced .second_view').hide();
        $('#share_piazza .first_view, #share_piazza_experienced .first_view').show();
      }, 5000);
    }, alert);
  },
  hideOptin: function() {
    PA.markSeenUnseen("c_optin");
    $('#careers_optin').hide();
    return false;
  },
  hideOptinNew: function(source) {
    PA.markSeenUnseen("c_optin");
    PA.markSeenUnseen("c_optin_new");
    $('#careers_optin_new').hide();
    if (source && source == "feed")
      PA.call_pj("generic.event_to_requests", {event: "careers.hide_new_optin_post_feed"}, 1);
    return false;
  },
  startUpload: function() {
    P.homescreen.uploading = true;
    $.blockUI();
    PA.call_pj("generic.page_event", {type:"careers_student.upload_resume", text1:"homescreen"}, 1);
    $('#upload_form').submit();
  },
  onUploadComplete: function() {
    if (!P.homescreen.uploading) return false;
    P.homescreen.uploading = false;
    $.unblockUI();
    var content = $('#hidden-upload-frame').contents().find('body').html();
    if (P.homescreen.profile)
      P.homescreen.profile.resume = content;
    $('#upload_resume_button').replaceWith('<p class="upload_resume_button profile_status_message">Resume Uploaded</p>');
    window.location = "/techtour?step=two";
  },
  saveThis: function(element) {
    var top = element.closest('.profile_prompt_option');
    if (top.length == 0)
      top = element.closest('.profile_content_input_item_wrapper');
    PEM.fire("saveSection", {top:top, noShow:true});
    element.text("Saved!");
  },
  showCareersOptin: function() {
    PTM.getModuleTemplate("homescreen", "homescreen_careers_opt_in", function(template){
      var p = PEM.callFirst("loadMyProfile", P.homescreen.showCareersOptin);
      if (p) {
        P.homescreen.profile = p;
        P.homescreen.cleanDashboard();
        $('#homescreen').html(template({user:P.homescreen.user, profile:p, info: P.info}));
        $('#homescreen').show();
        $('.opt_in_close').click(function(){
          P.homescreen.hideOptin();
          P.homescreen.showHomeScreen();
        });
        $('#disable_careers').click(function(){
          PA.call_pj("user.update", {email_prefs:{careers:{no_careers:true}}}, null, function(data){
            window.location = "/class";
          });
          return false;
        });
        $('#upload_resume_button').click(function(){
          $('#upload_form_file').click();
          return false;
        });
        $('#upload_resume_button').click(function(){
          P.homescreen.saveThis($(this));
        });
      }
    });
  },
  optInCaagAccept: function() {
    var params = {};
    if(this.network && this.network.id && this.network.id.indexOf("stories") == 0){
      params.url = "stories";
    }
    if(P.homescreen.optInCaagOrigin){
      params.origin = P.homescreen.optInCaagOrigin;
    }
    // ACCEPTED TOS
    PA.call_pj("user_profile.accept_tos", params, null, function(data){
      PA.call_pj("user_profile.incognito_bar_opt_in", params, null, function(data){
          $('#opt_out_caag').hide();
          $('#the_caag').show();
          $('.not_opted_in_container').hide();
          P.homescreen.updateRecentCompanyImages();
          // update profile
          var p = PEM.callFirst("loadMyProfile", function(p){p.profile_settings.published = true;});
          if (p)
            p.profile_settings.published = true;
          PEM.fire("optIn");
        });
    });
  },
  optInCaag: function(forceTos, origin) {
    if(origin){
      P.homescreen.optInCaagOrigin = origin;
    } else {
      P.homescreen.optInCaagOrigin = null;
    }
    // Stanford University or Arizona State University
    $('#termsModal').on('shown.bs.modal', function () {
      var sectionPosition = $('#careersSection').offset().top;
      var containerPosition = $('.terms_modal_body').offset().top;
      var scrollPosition = sectionPosition - containerPosition;
      $('.terms_modal_body').scrollTop(scrollPosition - 5);
      // $('.terms_modal_body').scrollTop($('#careersSection')[0].offsetTop + 20);
      if(P.homescreen.network.school == "Arizona State University") $("#ASUTermsSection").show();
    })
    $('#termsModal').modal('show');
      return false;
    },
  showCareersOptinNew: function() {
    PTM.getModuleTemplate("homescreen", "homescreen_careers_opt_in_new", function(template){
      var p = PEM.callFirst("loadMyProfile", P.homescreen.showCareersOptin);
      if (p) {
        PA.call_pj("generic.event_to_requests", {event: "careers.show_new_optin_post"}, 1);
        P.homescreen.profile = p;
        P.homescreen.cleanDashboard();
        $('#homescreen').html(template({user:P.homescreen.user, profile:p, info: P.info}));
        $('#homescreen').show();
        $('.opt_in_close').click(function(){
          P.homescreen.hideOptinNew();
          P.homescreen.showHomeScreen();
          PA.call_pj("generic.event_to_requests", {event: "careers.hide_new_optin_post"}, 1);
        });
        $("#opt_in_button").click(function() {
          var params = {set:{"profile_settings.published":true, "last_published":parseInt((new Date()).getTime() / 1000)}};
          P.user_careers_profile.updateProfile(params); // publish profile
          PA.call_pj("generic.event_to_requests", {event: "careers.opt_in_from_new_post"}, 1);
          $(".opt_in_message").hide();
          $(".nagbar_wrapper").show();
          PA.markSeenUnseen("c_optin");
        });
        $('#disable_careers').click(function(){
          PA.call_pj("generic.event_to_requests", {event: "careers.opt_out_from_new_post"}, 1);
          PA.markSeenUnseen("c_optin_new");
          PA.markSeenUnseen("c_optin");
          PA.call_pj("user.update", {email_prefs:{careers:{no_careers:true}}}, null, function(data){
            window.location = "/class";
          });
          return false;
        });
        $('#homescreen .upload_resume_button').click(function(){
          $('#upload_form_file').click();
          return false;
        });
        $('#homescreen .next_button').click(function(){
          P.homescreen.saveThis($(this));
        });
      }
    });
  },
  markGHC: function() {
    PA.call_pj("user_profile.update_profile_tags", {add: ["ghc_2019"]}, null, function(data){
      P.homescreen.hideTechTours();
    });
  },
  hideTechTours: function() {
    if(P.homescreen.user.isInst){
      PTM.getModuleTemplate("homescreen", "homescreen_instructor", P.homescreen.showInstructor);
    } else {
      PTM.getModuleTemplate("homescreen", "homescreen_student", P.homescreen.showStudent);
    }
    PA.markSeenUnseen("ghc_2019");
    P.homescreen.showHomeScreen();
  },
  hideLectureSeries: function() {
    PA.markSeenUnseen("lecture_series_1");
    $('#lecture_series_announcement').hide();
  },
  setProfNews: function(profNewsInfo) {
    var profNews = profNewsInfo.prof_news;
    var homescreenUpdate = profNewsInfo.homescreen_update;
    P.homescreen.profNews = profNews;
    P.homescreen.homescreenUpdate = homescreenUpdate;
    if (profNews) {
      $('#instructor_news').show();
      $('#instructor_news_container').html(profNews);
    } else {
      $('#instructor_news').hide();
    }
    if (homescreenUpdate) {
      $('#homescreen_update_header').html(homescreenUpdate.title);
      $('#homescreen_update_caption').html(homescreenUpdate.caption);
      $('#homescreen_update_image').attr("src", homescreenUpdate.image);
    }
  },
  setState: function(state, inactivePrivate, inactiveBlock) {
    PA.call_pj("network.update", {
      id: P.homescreen.network.id,
      status: state,
      config: {inactive_private: inactivePrivate, inactive_block: inactiveBlock}
    }, 1, (function() {}), function(err){alert(err);});
    P.homescreen.network.status = state;
    if (P.homescreen.network.status == 'active') {
      $('.network-active').show();
      $('.network-inactive').hide();
    } else {
      $('.network-active').hide();
      $('.network-inactive').show();
    }
    return false;
  },
  init: function(module) {
    P.homescreen.template = module.template;
    if (module.options.network)
      P.homescreen.network = module.options.network;
    if (module.options.user)
      P.homescreen.user = module.options.user;

    PEM.addListener("network", P.homescreen.setNetwork);
    PEM.addListener("showHomescreen", P.homescreen.showHomeScreen);
    PEM.addListener("cleanDashboard", P.homescreen.cleanDashboard);
    PEM.addListener("content", P.homescreen.hideHomeScreen);
    PEM.addListener("showCareersOptin", P.homescreen.showCareersOptin);
    PEM.addListener("showCareersOptinNew", P.homescreen.showCareersOptinNew);
    //PEM.addListener("showUserProfile", P.homescreen.showProfile);
    //PEM.addListener("showMyProfile", P.homescreen.showMyProfile);
    PEM.addListener("feed_created", P.homescreen.feedCreated);
    PEM.addListener("notifications_loaded", P.homescreen.updateNotificationPanel)
    PEM.addListener("set_prof_news", P.homescreen.setProfNews);
    //Renars or Zach Change JS here!
    //PTM.getModuleTemplate("homescreen", "homescreen_student_network", function(template){P.homescreen.networkDataTemplate = template});
    PTM.getModuleTemplate("homescreen", "homescreen_new_careers", function(template){P.homescreen.careersTemplate = template});
    PTM.getModuleTemplate("homescreen", "request_stickers_modal", function(template){ P.homescreen.requestStickersTemplate = template;});
    PTM.getModuleTemplate("homescreen", "homescreen_new_careers_feed", function(template){P.homescreen.feedItemTemplate = template});
    PTM.getModuleTemplate("careers_dashboard", "careers_dashboard_event_story", function(template){P.homescreen.eventStoryTemplate = template});
    if (typeof(AUTO_POST) == 'undefined' && typeof(CID) == 'undefined') {
      setTimeout(P.homescreen.cleanDashboard, 90);
      setTimeout(function(){ PEM.fire("showHomescreen") }, 100);
    }
  
    setInterval(P.homescreen.updateRelativeTimes, 5000);
  }
};


!function(b){var c=function(d,c){this.element=b(d);this.format=a.parseFormat(c.format||this.element.data("date-format")||"mm/dd/yyyy");this.picker=b(a.template).appendTo("body").on({click:b.proxy(this.click,this)});this.isInput=this.element.is("input");this.component=this.element.is(".date")?this.element.find(".add-on"):false;if(this.isInput)this.element.on({focus:b.proxy(this.show,this),keyup:b.proxy(this.update,this)});else if(this.component)this.component.on("click",b.proxy(this.show,this));else this.element.on("click",b.proxy(this.show,this));this.minViewMode=c.minViewMode||this.element.data("date-minviewmode")||0;if(typeof this.minViewMode==="string")switch(this.minViewMode){case"months":this.minViewMode=1;break;case"years":this.minViewMode=2;break;default:this.minViewMode=0}this.viewMode=c.viewMode||this.element.data("date-viewmode")||0;if(typeof this.viewMode==="string")switch(this.viewMode){case"months":this.viewMode=1;break;case"years":this.viewMode=2;break;default:this.viewMode=0}this.startViewMode=this.viewMode;this.weekStart=c.weekStart||this.element.data("date-weekstart")||0;this.weekEnd=this.weekStart===0?6:this.weekStart-1;this.onRender=c.onRender;this.fillDow();this.fillMonths();this.update();this.showMode()};c.prototype={constructor:c,show:function(a){this.picker.show();this.height=this.component?this.component.outerHeight():this.element.outerHeight();this.place();b(window).on("resize",b.proxy(this.place,this));if(a){a.stopPropagation();a.preventDefault()}!this.isInput;var c=this;b(document).on("mousedown",function(a){b(a.target).closest(".datepicker").length==0&&c.hide()});this.element.trigger({type:"show",date:this.date})},hide:function(){this.picker.hide();b(window).off("resize",this.place);this.viewMode=this.startViewMode;this.showMode();!this.isInput&&b(document).off("mousedown",this.hide);this.element.trigger({type:"hide",date:this.date})},"set":function(){var b=a.formatDate(this.date,this.format);if(!this.isInput){this.component&&this.element.find("input").prop("value",b);this.element.data("date",b)}else this.element.prop("value",b)},setValue:function(b){if(typeof b==="string")this.date=a.parseDate(b,this.format);else this.date=new Date(b);this.set();this.viewDate=new Date(this.date.getFullYear(),this.date.getMonth(),1,0,0,0,0);this.fill()},place:function(){var a=this.component?this.component.offset():this.element.offset();this.picker.css({top:a.top+this.height,left:a.left})},update:function(b){this.date=a.parseDate(typeof b==="string"?b:this.isInput?this.element.prop("value"):this.element.data("date"),this.format);this.viewDate=new Date(this.date.getFullYear(),this.date.getMonth(),1,0,0,0,0);this.fill()},fillDow:function(){var c=this.weekStart,b="<tr>";while(c<this.weekStart+7)b+='<th class="dow">'+a.dates.daysMin[c++%7]+"</th>";b+="</tr>";this.picker.find(".datepicker-days thead").append(b)},fillMonths:function(){var b="",c=0;while(c<12)b+='<span class="month">'+a.dates.monthsShort[c++]+"</span>";this.picker.find(".datepicker-months td").append(b)},fill:function(){var m=new Date(this.viewDate),c=m.getFullYear(),h=m.getMonth(),n=this.date.valueOf();this.picker.find(".datepicker-days th:eq(1)").text(a.dates.months[h]+" "+c);var b=new Date(c,h-1,28,0,0,0,0),l=a.getDaysInMonth(b.getFullYear(),b.getMonth());b.setDate(l);b.setDate(l-(b.getDay()-this.weekStart+7)%7);var e=new Date(b);e.setDate(e.getDate()+42);e=e.valueOf();var d=[],f,g,j;while(b.valueOf()<e){b.getDay()===this.weekStart&&d.push("<tr>");f=this.onRender(b);g=b.getFullYear();j=b.getMonth();if(j<h&&g===c||g<c)f+=" old";else if(j>h&&g===c||g>c)f+=" new";if(b.valueOf()===n)f+=" active";d.push('<td class="day '+f+'">'+b.getDate()+"</td>");b.getDay()===this.weekEnd&&d.push("</tr>");b.setDate(b.getDate()+1)}this.picker.find(".datepicker-days tbody").empty().append(d.join(""));var k=this.date.getFullYear(),p=this.picker.find(".datepicker-months").find("th:eq(1)").text(c).end().find("span").removeClass("active");k===c&&p.eq(this.date.getMonth()).addClass("active");d="";c=parseInt(c/10,10)*10;var o=this.picker.find(".datepicker-years").find("th:eq(1)").text(c+"-"+(c+9)).end().find("td");c-=1;for(var i=-1;i<11;i++){d+='<span class="year'+(i===-1||i===10?" old":"")+(k===c?" active":"")+'">'+c+"</span>";c+=1}o.html(d)},click:function(f){f.stopPropagation();f.preventDefault();var c=b(f.target).closest("span, td, th");if(c.length===1)switch(c[0].nodeName.toLowerCase()){case"th":switch(c[0].className){case"switch":this.showMode(1);break;case"prev":case"next":this.viewDate["set"+a.modes[this.viewMode].navFnc].call(this.viewDate,this.viewDate["get"+a.modes[this.viewMode].navFnc].call(this.viewDate)+a.modes[this.viewMode].navStep*(c[0].className==="prev"?-1:1));this.fill();this.set()}break;case"span":if(c.is(".month")){var d=c.parent().find("span").index(c);this.viewDate.setMonth(d)}else{var e=parseInt(c.text(),10)||0;this.viewDate.setFullYear(e)}if(this.viewMode!==0){this.date=new Date(this.viewDate);this.element.trigger({type:"changeDate",date:this.date,viewMode:a.modes[this.viewMode].clsName})}this.showMode(-1);this.fill();this.set();break;case"td":if(c.is(".day")&&!c.is(".disabled")){var g=parseInt(c.text(),10)||1,d=this.viewDate.getMonth();if(c.is(".old"))d-=1;else if(c.is(".new"))d+=1;var e=this.viewDate.getFullYear();this.date=new Date(e,d,g,0,0,0,0);this.viewDate=new Date(e,d,Math.min(28,g),0,0,0,0);this.fill();this.set();this.element.trigger({type:"changeDate",date:this.date,viewMode:a.modes[this.viewMode].clsName})}}},mousedown:function(a){a.stopPropagation();a.preventDefault()},showMode:function(b){if(b)this.viewMode=Math.max(this.minViewMode,Math.min(2,this.viewMode+b));this.picker.find(">div").hide().filter(".datepicker-"+a.modes[this.viewMode].clsName).show()}};b.fn.datepicker=function(a,d){return this.each(function(){var f=b(this),e=f.data("datepicker"),g=typeof a==="object"&&a;!e&&f.data("datepicker",e=new c(this,b.extend({},b.fn.datepicker.defaults,g)));typeof a==="string"&&e[a](d)})};b.fn.datepicker.defaults={onRender:function(){return""}};b.fn.datepicker.Constructor=c;var a={modes:[{clsName:"days",navFnc:"Month",navStep:1},{clsName:"months",navFnc:"FullYear",navStep:1},{clsName:"years",navFnc:"FullYear",navStep:10}],dates:{days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"],daysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sun"],daysMin:["Su","Mo","Tu","We","Th","Fr","Sa","Su"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]},isLeapYear:function(a){return a%4===0&&a%100!==0||a%400===0},getDaysInMonth:function(c,b){return([31,a.isLeapYear(c)?29:28,31,30,31,30,31,31,30,31,30,31])[b]},parseFormat:function(c){var b=c.match(/[.\/\-\s].*?/),a=c.split(/\W+/);if(!b||!a||a.length===0)throw new Error("Invalid date format.");return{separator:b,parts:a}},parseDate:function(a,c){var g=a.split(c.separator),a=new Date,b;a.setHours(0);a.setMinutes(0);a.setSeconds(0);a.setMilliseconds(0);if(g.length===c.parts.length){for(var e=a.getFullYear(),h=a.getDate(),f=a.getMonth(),d=0,i=c.parts.length;d<i;d++){b=parseInt(g[d],10)||1;switch(c.parts[d]){case"dd":case"d":h=b;a.setDate(b);break;case"mm":case"m":f=b-1;a.setMonth(b-1);break;case"yy":e=2e3+b;a.setFullYear(2e3+b);break;case"yyyy":e=b;a.setFullYear(b)}}a=new Date(e,f,h,0,0,0)}return a},formatDate:function(b,c){var a={d:b.getDate(),m:b.getMonth()+1,yy:b.getFullYear().toString().substring(2),yyyy:b.getFullYear()};a.dd=(a.d<10?"0":"")+a.d;a.mm=(a.m<10?"0":"")+a.m;for(var b=[],d=0,e=c.parts.length;d<e;d++)b.push(a[c.parts[d]]);return b.join(c.separator)},headTemplate:'<thead><tr><th class="prev">&lsaquo;</th><th colspan="5" class="switch"></th><th class="next">&rsaquo;</th></tr></thead>',contTemplate:'<tbody><tr><td colspan="7"></td></tr></tbody>'};a.template='<div class="datepicker dropdown-menu"><div class="datepicker-days"><table class=" table-condensed">'+a.headTemplate+'<tbody></tbody></table></div><div class="datepicker-months"><table class="table-condensed">'+a.headTemplate+a.contTemplate+'</table></div><div class="datepicker-years"><table class="table-condensed">'+a.headTemplate+a.contTemplate+"</table></div></div>"}(window.jQuery);

$.fn.enterKey = function (fnc) {
    return this.each(function () {
        $(this).keypress(function (ev) {
            var keycode = (ev.keyCode ? ev.keyCode : ev.which);
            if (keycode == '13') {
                fnc.call(this, ev);
            }
        })
    })
};
/*
  jQuery autoComplete v1.0.6
    Copyright (c) 2014 Simon Steinberger / Pixabay
    GitHub: https://github.com/Pixabay/jQuery-autoComplete
  License: http://www.opensource.org/licenses/mit-license.php
*/
$(document).keydown(function(event) { 
  if (event.which == 27) { 
    $('#request_stickers_modal').modal('hide');
  }
});
(function($){
    $.fn.autoComplete = function(options){
        var o = $.extend({}, $.fn.autoComplete.defaults, options);

        // public methods
        if (typeof options == 'string') {
            this.each(function(){
                var that = $(this);
                if (options == 'destroy') {
                    $(window).off('resize.autocomplete', that.updateSC);
                    that.off('blur.autocomplete focus.autocomplete keydown.autocomplete keyup.autocomplete');
                    if (that.data('autocomplete'))
                        that.attr('autocomplete', that.data('autocomplete'));
                    else
                        that.removeAttr('autocomplete');
                    $(that.data('el')).remove();
                    that.removeData('el').removeData('autocomplete');
                }
            });
            return this;
        }

        return this.each(function(){
            var that = $(this);
            // sc = 'suggestions container'
            that.sc = $('<div class="autocomplete-suggestions"></div>').addClass(o.menuClass);
            that.data('el', that.sc).data('autocomplete', that.attr('autocomplete'));
            that.attr('autocomplete', 'off');
            that.cache = {};
            that.last_val = '';

            that.updateSC = function(resize, next){
              if (o.onTop) {
                that.sc.css({
                    top: that.offset().top - that.sc.outerHeight(),
                    left: that.offset().left,
                    width: that.outerWidth()
                });
              } else {
                that.sc.css({
                    top: that.offset().top + that.outerHeight(),
                    left: that.offset().left,
                    width: that.outerWidth()
                });
              }
                if (!resize) {
                    that.sc.show();
                    if (!that.sc.maxHeight) that.sc.maxHeight = parseInt(that.sc.css('max-height'));
                    if (!that.sc.suggestionHeight) that.sc.suggestionHeight = $('.autocomplete-suggestion', that.sc).first().outerHeight();
                    if (that.sc.suggestionHeight)
                        if (!next) that.sc.scrollTop(0);
                        else {
                            var scrTop = that.sc.scrollTop(), selTop = next.offset().top - that.sc.offset().top;
                            if ((selTop + that.sc.suggestionHeight) - that.sc.maxHeight > 0)
                                that.sc.scrollTop((selTop + that.sc.suggestionHeight + scrTop) - that.sc.maxHeight);
                            else if (selTop < 0)
                                that.sc.scrollTop(selTop + scrTop);
                        }
                }
            }
            $(window).on('resize.autocomplete', that.updateSC);

            that.sc.appendTo('body');

            that.sc.on('mouseleave', '.autocomplete-suggestion', function (){
                $('.autocomplete-suggestion.selected').removeClass('selected');
            });

            that.sc.on('mouseenter', '.autocomplete-suggestion', function (){
                $('.autocomplete-suggestion.selected').removeClass('selected');
                $(this).addClass('selected');
            });

            that.sc.on('mousedown', '.autocomplete-suggestion', function (e){
                var item = $(this), v = item.data('val');
                that.val(v);
                o.onSelect(e, v, item);
                setTimeout(function(){ that.focus().sc.hide(); }, 10);
            });

            that.on('blur.autocomplete', function(){
                try { over_sb = $('.autocomplete-suggestions:hover').length; } catch(e){ over_sb = 0; } // ***
                if (!over_sb) {
                    that.last_val = that.val();
                    that.sc.hide();
                }
            });

            that.on('focus.autocomplete', function(){ if (!o.minChars) { that.last_val = '\n'; that.trigger('keyup.autocomplete'); } });

            // IE hack ***: input looses focus when clicking scrollbars in suggestions container
            that.sc.focus(function(){
                that.focus();
            });

            function suggest(data){
                var val = that.val();
                that.cache[val] = data;
                if (data.length && val.length >= o.minChars) {
                    var s = '';
                    for (i=0;i<data.length;i++) s += o.renderItem(data[i], val);
                    that.sc.html(s);
                    that.updateSC(0);
                }
                else
                    that.sc.hide();
            }

            that.on('keydown.autocomplete', function(e){
                // down
                if (e.which == 40 && that.sc.html()) {
                    var next, sel = $('.autocomplete-suggestion.selected', that.sc);
                    if (!sel.length) {
                        next = $('.autocomplete-suggestion', that.sc).first();
                        that.val(next.addClass('selected').data('val'));
                    } else {
                        next = sel.next('.autocomplete-suggestion');
                        if (next.length) {
                            sel.removeClass('selected');
                            that.val(next.addClass('selected').data('val'));
                        }
                        else { sel.removeClass('selected'); that.val(that.last_val); next = 0; }
                    }
                    that.updateSC(0, next);
                    return false;
                }
                // up
                else if (e.which == 38 && that.sc.html()) {
                    var next, sel = $('.autocomplete-suggestion.selected', that.sc);
                    if (!sel.length) {
                        next = $('.autocomplete-suggestion', that.sc).last();
                        that.val(next.addClass('selected').data('val'));
                    } else {
                        var next = sel.prev('.autocomplete-suggestion');
                        if (next.length) {
                            sel.removeClass('selected');
                            that.val(next.addClass('selected').data('val'));
                        }
                        else { sel.removeClass('selected'); that.val(that.last_val); next = 0; }
                    }
                    that.updateSC(0, next);
                    return false;
                }
                // esc
                else if (e.which == 27) that.val(that.last_val).sc.hide();
                // enter
                else if (e.which == 13) {
                    var sel = $('.autocomplete-suggestion.selected', that.sc);
                    if (sel.length) { o.onSelect(e, sel.data('val'), sel); setTimeout(function(){ that.focus().sc.hide(); }, 10); }
                }
            });

            that.on('keyup.autocomplete', function(e){
                if (!~$.inArray(e.which, [27, 38, 40, 37, 39])) {
                    var val = that.val();
                    if (val.length >= o.minChars) {
                        if (val != that.last_val) {
                            that.last_val = val;
                            clearTimeout(that.timer);
                            if (o.cache) {
                                if (val in that.cache) { suggest(that.cache[val]); return; }
                                // no requests if previous suggestions were empty
                                for (i=1; i<val.length-o.minChars; i++) {
                                    var part = val.slice(0, val.length-i);
                                    if (part in that.cache && !that.cache[part].length) { suggest([]); return; }
                                }
                            }
                            that.timer = setTimeout(function(){ o.source(val, suggest) }, o.delay);
                        }
                    } else {
                        that.last_val = val;
                        that.sc.hide();
                    }
                }
            });
        });
    }

    $.fn.autoComplete.defaults = {
        source: 0,
        minChars: 3,
        delay: 150,
        cache: 1,
        onTop: false,
        menuClass: '',
        renderItem: function (item, search){
            var re = new RegExp("(" + search.split(' ').join('|') + ")", "gi");
            return '<div class="autocomplete-suggestion" data-val="' + item + '">' + item.replace(re, "<b>$1</b>") + '</div>';
        },
        onSelect: function(e, term, item){}
    };
}(jQuery));

P.editor_guard = {
  template: null,
  user: null,
  okCallback: null,

  initHandlers: function() {
    $('.UIConfirmationWindow .UIActions .submit').click(function(){
      $(this).closest('.UIConfirmationWindow').hide();
      $.fancybox.close();
      if (P.editor_guard.okCallback)
        P.editor_guard.okCallback.call(window);
      return false;
    });
    $('.UIConfirmationWindow .UIActions .cancel').click(function() {
      $(this).closest('.UIConfirmationWindow').hide();
      $.fancybox.close();
      if ($(this).hasClass("draft")) {
        PEM.fire("saveDraft");
        if (P.editor_guard.okCallback)
          P.editor_guard.okCallback.call(window);
      }
      return false;
    });
  },
  showDialog: function(okCallback, id) {
    P.editor_guard.okCallback = okCallback;
    if (!id) id = 'Confirmation_CancelEditor_MoveAway';
    var $modalWindow = $('#' + id);
    $modalWindow.show();
    // Open the corresponding confirmation window.
    if ($modalWindow.size() > 0) {
      $.fancybox({
        'autoScale': true,
        'hideOnOverlayClick': false,
        'href': '#' + id,
        'padding': 0,
        'showCloseButton': false,
        'enableEscapeButton': false,
        'transitionIn': 'none',
        'transitionOut': 'none'
      });
    }
  },
  verifyAnyCancel: function(okCallback) {
    var isOpen = PEM.callFirst("hasActiveEditor");
    if (isOpen) {
      if (isOpen == "old_new_post") {
        PEM.fire("saveDraft", false);
        PEM.fire("cancelAll");
        if (okCallback) okCallback.call(window);
      } else {
        P.editor_guard.showDialog(function () {
          PEM.fire("cancelAll");
          P.editor_guard.verifyMustRead(okCallback);
        });
      }
    } else {
      P.editor_guard.verifyMustRead(okCallback);
    }
  },
  verifyMustRead: function(okCallback) {
    var mr = PEM.callFirst("getContentMustRead");
    if (mr && mr.mrp && !P.editor_guard.user.is_public) {
      var params = {
        title: "Mark post as \"I’ve read this\"?",
        body: "This post is required to read before you can add a new post. Would you like to mark this post as \"I’ve read this\" (removes this post from reading list bin)?",
        confirm: "Yes",
        cancel: "No",
        callback: function() {
          PA.call_pj("content.confirm_read", mr, 1);
          if (okCallback) okCallback.call(window);
        },
        cancelCallback: okCallback,
      };
      PEM.fire("showConfirmationWindow", params);
    } else {
      if (okCallback) okCallback.call(window);
    }
  },
  init: function(module) {
    P.editor_guard.template = module.template;
    $('body').append(module.template());
    P.editor_guard.initHandlers();

    PEM.addListener("verifyCancel", P.editor_guard.showDialog);
    PEM.addListener("verifyCancelNewPost", function(callback){P.editor_guard.showDialog(callback, "Confirmation_CancelEditor_NewQuestion")});
    PEM.removeListener("verifyAnyCancel", defaultVerify);
    PEM.addListener("verifyAnyCancel", P.editor_guard.verifyAnyCancel);

    if (module.options.user)
      P.editor_guard.user = module.options.user;
  }
};
P.confirmation_window = {
  okCallback: null,
  cancelCallback:null,
  initHandlers: function() {
    var $modalWindow = $('#confirm_window');
    $modalWindow.find('#edit_cancel_button1').click(function(){
      return P.confirmation_window.clickCallback($modalWindow, true);
    });
    $modalWindow.find('#edit_cancel_button2').click(function() {
      return P.confirmation_window.clickCallback($modalWindow, false);
    });
  },
  clickCallback: function (modal, first) {
    modal.hide();
    $.fancybox.close();
    if (!P.confirmation_window.reverse_buttons !== !first) {
      if (P.confirmation_window.cancelCallback)
        P.confirmation_window.cancelCallback.call(window);
    } else {
      if (P.confirmation_window.okCallback)
        P.confirmation_window.okCallback.call(window);
    }
    return false;
  },
  showConfirmationWindow: function(params) {
    P.confirmation_window.okCallback = params.callback;
    P.confirmation_window.cancelCallback = params.cancelCallback;
    P.confirmation_window.reverse_buttons = params.reverse_buttons;
    var cancel = params.cancel;
    var confirm = params.confirm;
    var body = params.body;
    var b1 = "#edit_cancel_button1";
    var b2 = "#edit_cancel_button2";
    if (params.reverse_buttons) {
      b2 = b1;
      b1 = "#edit_cancel_button2";
    }
    if (!cancel && cancel !== "")
      cancel = "Cancel";
    if (!confirm)
      confirm = "Confirm";
    if (body) {
      $(".confirm_window_body").html(body);
      $(".confirm_window_body").show();
    } else {
      $(".confirm_window_body").hide();
      $(".confirm_window_body").html("");
    }
    $(".confirm_window_title").html(params.title);
    $(b2).html(confirm);
    $(b2).addClass("submit");
    $(b2).removeClass("cancel");
    $(b2).show();
    $(b1).addClass("cancel");
    $(b1).removeClass("submit");
    if (cancel === "") {
      $(b1).hide();
    } else {
      $(b1).html(cancel);
    }
    var $modalWindow = $('#confirm_window');
    $modalWindow.show();
    // Open the corresponding confirmation window.
    if ($modalWindow.size() > 0) {
      $.fancybox({
        'autoScale': true,
        'hideOnOverlayClick': false,
        'href': '#confirm_window',
        'padding': 0,
        'showCloseButton': false,
        'enableEscapeButton': false,
        'transitionIn': 'none',
        'transitionOut': 'none'
      });
    }
    return false;
  },

  init: function(module) {
    $("body").append(module.template());
    P.confirmation_window.initHandlers();
    PEM.addListener("showConfirmationWindow", P.confirmation_window.showConfirmationWindow);
  }
};
P.stats = {
  template: null,
  user: null,
  network: null,
  googleChartsDidLoad: false,
  needsChartDrawn: true,

  initHandlers:function() {
  },
  setUser: function(user) {
    P.stats.user = user;
  },
  setNetwork:function(network) {
    P.stats.network = network;
  },
  
  isOnStatsPage: function() {
    var e = $(".top_bar_statistics");
    return e && e.hasClass('active');
  },
  downloadJson: function() {
    PA.call("network.export_class", {nid: P.stats.network.id}, 1);
    $('#downloadJson').html("Export started. A link to the export file will be sent to your email: " + PA.user.email);
    return false;
  },
  showStats: function(opts) {
    if (P.stats.network.type == "group") return;
    PEM.fire("cleanDashboard");
    $('#statistics_panel').html(P.stats.template({network:P.stats.network, user:P.stats.user}));
    $('#classStatisticLink').html('');
    
    $.blockUI();
    if (!P.stats.googleDidLoad()) {
      // NOTE: after google charts finishes loading, showStats() is called again 
      // to unblock the UI and retrieve stats
      // If google library failed to load, unblock ui and alert user:
      if(!P.stats.googleLoaderDidLoad()) {
        $.unblockUI();
        alert("Google chart library failed to load.");
      }
      return;
    }
    
    if (!P.stats.user) { P.stats.user = PA.user;}
    if (P.stats.user && P.stats.user.isInst) {
      var day = new Date().format("mmm-dd");
      var link = '(<a target="_blank" href="/class_statistics/' + P.stats.network.id + '?day=' + day + '">Get class statistics as a CSV file</a>)';
      var poll_link = '(<a target="_blank" href="/bulk_poll_statistics/' + P.stats.network.id + '?day=' + day + '">Bulk download poll statistics</a>)';
      if (!P.stats.user.isTA) {
        var download_link = '<a href="#" onclick="return P.stats.downloadJson();">Download class contents in JSON/CSV format</a>';
        $('#downloadJson').html(download_link);
      }
      if (P.stats.network.total_content_stud >= 20)
        link += ' (<a target="_blank" href="/stats/report/' + P.stats.network.id + '">' + P.stats.network.course_number + ' Piazza Report</a>)';
      $('#classStatisticLink').html(link);
      $('#pollStatisticLink').html(poll_link);
      $('#statsHeader').show();
    } else{
      if (P.stats.network.total_content_stud >= 20)
        $('#classStatisticLink').html('<a target="_blank" href="/stats/report/' + P.stats.network.id + '">View Piazza Report</a>');
    }
    
      PA.call("network.get_stats", {
        nid: P.stats.network.id, anonymize : false
      }, null, function (data) {
        P.stats.classStats = data;
        if (data.total) {
          $('#stats_posts').html(data.total.posts || 0);
          $('#stats_posts_anon').html(data.total.anon_pool || 0);
          $('#stats_questions').html(data.total.questions || 0);
          $('#stats_ir').html(data.total.i_answers || 0);
          $('#stats_sr').html(data.total.s_answers || 0);
          $('#stats_rt').html(showSecs(data.total.response_time));
          $('#stats_total_time').html(showSecs(data.total.net_time));
        }
        $('#stats_most_active').empty();
        if (data.top_users) { // populate most active users
          data.top_users.forEach(function (usr) {
            
            $('#stats_most_active').append('<li><divclass="student_name"><strong>'
            + usr.name + '</strong></div> ' + '<div class="value">' + usr.posts + ' contributions; ' + usr.days + ' days online</div></li>');
          })
        }
        $('#stats_askers').empty();
        if (data.top_askers && data.top_askers.length > 0) {
          var top_askers = '';
          top_askers += '<thead><tr>';
              top_askers += '<th class="header" style="font-size: 11px;width:275px;">Name, Email</th>';
              top_askers += '<th class="header" style="font-size: 11px;">questions asked</th>'
          top_askers += '</tr></thead>';
          data.top_askers.forEach(function(usr) {
            top_askers += '<tr>';
              top_askers += '<td style="width: 290px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">';
                top_askers += '<strong>' +usr.name + '</strong>'
                top_askers += '<span class="span-small">' + usr.email + '</span>';
              top_askers += '</td>';
              top_askers += '<td style="marign-left: 10px;">' + usr.asks + '</td>';
            top_askers += '</tr>';
          });
          $('#top_askers').show();
          $('#stats_askers').html(top_askers);
          $('#stats_askers').tablesorter();
        } else {
          $('#top_askers').hide();
        }
        $('#stats_good_q').empty();
        if (data.top_good_q && data.top_good_q.length > 0) {
          var good_q = '';
          good_q += '<thead><tr>';
            good_q += '<th class="header" class="th-300" style="font-size: 11px;width:275px;">Name, Email</th>';
            good_q += '<th class="header" class="th-300" style="font-size: 11px;">number of &quot;good question&quot;s</th>';
          good_q += '</tr></thead>';
          data.top_good_q.forEach(function(usr) {

            good_q += '<tr>';
              good_q += '<td style="width: 290px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">';
              good_q += '<strong>' + usr.name + '</strong>'
              good_q += '<span class="span-small">' + usr.email + '</span>';
              good_q += '</td>';
              good_q += '<td style="margin-left: 10px;">' + usr.good_q + '</td>';
            good_q += '</tr>';
          });
          $('#top_good_q').show();
          $('#stats_good_q').html(good_q);
          $('#stats_good_q').tablesorter();
        } else {
          $('#top_good_q').hide();
        }
        $('#stats_answerers').empty();
        if (data.top_answerers && data.top_answerers.length > 0) {
          var top_a = '';
          top_a += '<thead><tr>';
            top_a += '<th class="header" style="font-size: 11px;width: 275px;">Name, Email</th>';
            top_a += '<th class="header" style="font-size: 11px;">number of answers</th>';
          top_a += '</tr></thead>';
          data.top_answerers.forEach(function(usr) {
            top_a += '<tr>';
              top_a += '<td style="width: 290px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">';
              top_a += '<strong>' +usr.name + '</strong>'
              top_a += '<span class="span-small">' + usr.email + '</span>';
              top_a += '</td>';
              top_a += '<td style="margin-left: 10px;">' + usr.answers + '</td>';
            top_a += '</tr>';
          });
          $('#top_answerers').show();
          $('#stats_answerers').html(top_a);
          $('#stats_answerers').tablesorter();
        } else {
          $('#top_answerers').hide();
        }
        $('#stats_good_a').empty();
        if (data.top_good_a && data.top_good_a.length > 0) {
          var good_a = '';
          good_a += '<thead><tr>';
            good_a += '<th class="header" style="font-size: 11px;width:275px;">Name, Email</th>';
            good_a += '<th class="header" style="font-size: 11px;">number of endorsed answers</th>';
          good_a += '</tr></thead>';
          data.top_good_a.forEach(function(usr) {
            good_a += '<tr>';
              good_a += '<td class="td-300" style="width: 290px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">';
              good_a += '<strong>' + usr.name + '</strong>'
              good_a += '<span class="span-small">' + usr.email + '</span>'; 
              good_a += '</td>';
              good_a += '<td style="margin-left: 10px;">' + usr.good_a + '</td>';
            good_a += '</tr>';
          });
          $('#top_good_a').show();
          $('#stats_good_a').html(good_a);
          $('#stats_good_a').tablesorter();
        } else {
          $('#top_good_a').hide();
        }
        $('#stats_listeners').empty();
        if (data.top_listeners && data.top_listeners.length > 0) {
          var list = '';
          list += '<thead><tr>';
            list += '<th class="header" style="font-size: 11px;width:275px;">Name, Email</th>';
            list += '<th class="header" style="font-size: 11px;">number of questions/notes viewed</th>';
          list += '</tr></thead>';
          data.top_listeners.forEach(function(usr) {
            list += '<tr>';
              list += '<td style="width: 290px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">';
              list += '<strong>' +usr.name + '</strong>'
              list += '<span class="span-small">' + usr.email + '</span>';
              list += '<td style="margin-left: 10px;">' + usr.views + '</td>';
            list += '</tr>';
          });
          $('#top_listeners').show();
          $('#stats_listeners').html(list);
          $('#stats_listeners').tablesorter();
        } else {
          $('#top_listeners').hide();
        }
        $('#stats_all_users').empty();
        if (data.users && data.users.length > 0) {
          $('#stats_all_users').show();
          $('#stud_participation').show();
          $('#more_info_coming').hide();
	/*$('#stats_all_users').append('' +
					'<tr>' +
						'<th>Name, Email</span>' +
				  		'<th>Days Online</span>' +
				  		'<th>Posts Viewed<em>*</em></span>' +
				  		'<th>Contributions<em>**</em></span>' +
					'</tr>');
				data.users.forEach(function(usr){
				  $('#stats_all_users').append('' +
					'<tr>' +
						'<td>' + usr.name + '<span class="span-small">' + usr.email + '</span></td>' +
						'<td>' + usr.days + '</td>' +
						'<td>' + usr.views + '</td>' +
						'<td>' + usr.posts + '</td>' +
					'</tr>');
				});*/
          $('#stats_all_users').append('<thead><tr><th class="header" style="font-size: 11px;width: 275px;">Name, Email</th>'
            + '<th class="header" style="font-size: 11px;">days online</th>'
            + '<th class="header" style="font-size: 11px;">posts viewed<em>*</em></th>'
            + '<th class="header" style="font-size: 11px;">contributions<em>**</em></th></tr></thead>');
          var total = 0;
          for (var i = 0; i < data.users.length; i++)
            if (data.users[i].posts > 0) total = total + 1;
          if (!P.stats.user.isInst || total >= 5 || (data.top_users && data.top_users.length >= 5)) {
            data.users.forEach(function (usr) {
              $('#stats_all_users').append('<tr><td style="width: 290px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"><strong>' + usr.name + '</strong> <span class="span-small">' + usr.email + '</span></td>' + '<td style="margin-left: 10px;">' + usr.days + '</td>' + '<td>' + usr.views + '</td>' + '<td>' + usr.posts + '</td></tr>');
            });
            $('#stats_all_users').tablesorter();
          } else {
            $('#stud_participation').hide();
            $('#more_info_coming').show();
            $('#stats_most_active').empty();
          }
        } else {
          $('#stats_all_users').hide();
          $('#stud_participation').hide();
          $('#more_info_coming').show();
        }
        $('#stats_all_instructors').empty();
        if (data.profs && data.profs.length > 0) {
          $('#stats_all_instructors').show();
          $('#prof_participation').show();
          $('#stats_all_instructors').append('<thead><tr><th class="header" style="font-size: 11px;width: 275px;">Name, Email</th>' + '<th class="header" style="font-size: 11px;">days online</th>' + '<th class="header" style="font-size: 11px;">posts viewed<em>*</em></th>' + '<th class="header" style="font-size: 11px;">contributions<em>**</em></th></tr></thead>');
          data.profs.forEach(function (usr) {
            $('#stats_all_instructors').append('<tr><td><strong>' + usr.name + '</strong> <span class="span-small">' + usr.email + '</span>' + '</td></td>' + '<td>' + usr.days + '</td>' + '<td>' + usr.views + '</td>' + '<td>' + usr.posts + '</td></tr>');
          });
          $('#stats_all_instructors').tablesorter();
        } else {
          $('#stats_all_instructors').hide();
          $('#prof_participation').hide();
        }
        P.stats.showStatsChart(data);
      });
    
    
    
    $('#statistics_panel').show();
  },
  
  showStatsChart: function() {
    if (!P.stats.googleDidLoad()) { 
      P.stats.needsChartDrawn = true;
      return;
    }
    var chartElem = document.getElementById('googleChart');
    if (!chartElem) {
      return;
    }
    var type = $('#stats_chart_selector').val();
    var dataTable = new google.visualization.DataTable();
    var colName = type == 'users' ? "users" : "questions";
    dataTable.addColumn('date', 'Date');
    dataTable.addColumn('number', colName);
    var rows = [];
    var classStats = P.stats.classStats;
    if (!classStats) {
      return;
    }
    var minus = 1;
    if (classStats.daily.length > 1 && !classStats.daily[classStats.daily.length - 2].users) {
      minus = 2;
    }
    var hadError = false;
    for (var i = 0; i < classStats.daily.length - minus; i++) {
      var o = classStats.daily[i];
      if (!o[type]) {
        o[type] = 0;
      }
      try {
        rows.push([P.stats.parseDate(o.raw_day), o[type]]);
      } catch (e) {
        hadError = true;
        console.log("Error parsing date for data point:", o.raw_day);
      }
    }
    if (hadError) {
      alert("Some data unparsable in range");
    }
    dataTable.addRows(rows);
    var chart = new google.visualization.LineChart(chartElem);
    google.visualization.events.addListener(
        chart, 
        'error', 
        function(e) {
          console.log("Error while building stats graph for "+type+"!", e);
        }
    );
    chart.draw(
        dataTable, 
        {
          vAxis: {
            gridlines: {
                color: 'transparent'
            }
          },
          width: 800, 
          height: 450,
          explorer: {
            axis: 'horizontal',
            maxZoomIn: 0.1
          },
          legend: {
            position: 'bottom',
          }
        }
    );
    P.stats.needsChartDrawn = false;
  },
  
  googleDidLoad: function() {
    return P.stats.googleChartsDidLoad;
  },
  
  randomInt: function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  },
  
  // NOTE: just for local testing
  generateTestData: function() {
    var domainStart = P.stats.parseDate("20160101");
    var domainEnd = P.stats.parseDate("20170101");
    var curDate = new Date(domainStart.getTime());
    var min = 10;
    var max = 100;
    var format = 'yyyymmdd';
    var data = [];
    var short = 1000;
    var i = 0;
    while ((curDate.getTime() <= domainEnd.getTime()) && i < short) {
      data.push(
          {
            posts: P.stats.randomInt(min, max),
            users: P.stats.randomInt(min, max),
            questions: P.stats.randomInt(min, max),
            raw_day: curDate.format(format)
          }
      );
      curDate.setDate(curDate.getDate() + 1);
      i ++;
    }
    return {
      daily: data,
      users: [],
      top_users: [],
      profs: [],
      total: {}
    }
  },
  
  // @throws Error if unparsable
  parseDate: function(statsObjStr) {
    if (!statsObjStr || statsObjStr.length < 4) {
      throw Error("Invalid date string!");
    }
    var str = statsObjStr;
    try {
      var year = parseInt(str.slice(0,4));
      var month = parseInt(str.slice(4,6));
      var day = parseInt(str.slice(6));
    } catch (e) {
      console.log("Error parsing date string: " + str);
      throw e;
    }
    var d =  new Date(year, month - 1, day);
    if (d == 'Invalid Date') {
      throw Error("Invalid date!");
    }
    return d;
  },
  
  googleLoaderDidLoad: function() {
    return typeof(google) !== 'undefined';
  },
  
  loadGoogleCharts: function() {
    if (!P.stats.googleLoaderDidLoad()) {
      P.stats.googleChartsDidLoad = false;
      return;
    }
    google.charts.load('45', {'packages':['corechart']});
    google.charts.setOnLoadCallback(function() { 
      P.stats.googleChartsDidLoad = true;
      if (!P.stats.needsChartDrawn) {
        return;
      }
      if (!P.stats.isOnStatsPage()) {
        return;
      }
      P.stats.showStats();
    });
  },
  
  init: function(module) {
    P.stats.template = module.template;
    if (module.options.network)
      P.stats.network = module.options.network;
    if (module.options.user)
      P.stats.user = module.options.user;

    PEM.addListener("network", P.stats.setNetwork);
    PEM.addListener("showClassStats", P.stats.showStats);
    P.stats.loadGoogleCharts();
    PTM.getModuleTemplate("homescreen", "request_stickers_modal", function(template){$('.main_panel').append(template)});
  }
};
P.upload_manager = {
  MAX_FILE_SIZE: 99000000,
  template: null,
  network:   null,
  submitCallback: null,
  cancelCallback: null,
  user: null,
  userData: null,
  setUser: function(user) {
    P.upload_manager.user = user;
  },
  doUpload: function() {
    var file = $("#upload_manager_filepicker");
    if (file && file[0].files && file[0].files.length === 1) {
      P.upload_manager.uploadFromFile(file[0].files[0], null, true, function(url, name) {
        if (url) {
          P.upload_manager.submit(url, name);
        }
      }, alert);
    }
  },
  uploadFromDataUrl: function(dataUrl, file_name, register, callback, error_callback) {
    if (!error_callback) error_callback = function(){};
    if (dataUrl.length > P.upload_manager.MAX_FILE_SIZE) {
      error_callback("File too big!");
      return;
    }
    var _error_callback = function(err){
      error_callback(err);
      $.unblockUI();
    };
    var _doUpload = function(data, image_width) {
      var m = data.match(/^data:(.*?)(;base64)?,(.*?)$/);
      if (m && m[2] && m[3]) {
        if (!m[1]) {
          m[1] ="application/octet-stream";
        }
        var params = {file: m[3], type: m[1]};
        if (file_name) {
          params.name = file_name;
        }
        if (register) {
          params.nid = P.upload_manager.network.id;
        }
        PA.call_pj("generic.upload_paste_file", params, null, function (ret) {
          if (ret && ret.url) {
            callback(ret.url, ret.name, image_width);
            $.unblockUI();
          } else {
            _error_callback("File upload failed");
          }
        }, _error_callback);
      } else {
        _error_callback("Invalid dataUrl");
      }
    };
    $.blockUI();
    if (dataUrl.substr(0,11) === "data:image/") {
      var image = new Image();
      image.addEventListener('load', function(evt) {
        var ret = P.text_editor.resizeImage(evt.target);
        _doUpload(ret, evt.target.naturalWidth);
      });
      image.addEventListener('error', function(evt) {
        //this is not an image, but a regular attachment?
        _doUpload(dataUrl, false);
      });
      image.src = dataUrl;
    } else {
      _doUpload(dataUrl, false);
    }
  },
  uploadFromFile: function(file, file_name, register, callback, error_callback) {
    if (!error_callback) error_callback = function(){};
    if (file.size > P.upload_manager.MAX_FILE_SIZE * 0.75) {
      error_callback("File too big.");
      return;
    }
    var reader = new FileReader();
    if (!file_name && file.name) {
      file_name = file.name;
    }
    reader.onloadend = function (revt) {
      if (revt.target.result) {
        P.upload_manager.uploadFromDataUrl(revt.target.result, file_name, register, callback, error_callback);
      } else {
        error_callback("Failed to load file data");
      }
    }
    reader.readAsDataURL(file);
  },
  submit: function(url, name) {
    if (url.match(/^\/redirect\//)) { // if it's a "new-style" URL that starts with '/redirect/'
        // do nothing
    }
    else if (url.match(/^http/)) { // if it's an "old-style" URL that starts with 'http'
        // do nothing
        // THIS SHOULD GO AWAY WHEN WE MIGRATE ALL MONGO URLS
    } else { // if it's an "old-style" URL that only has the relative bucket path, prepend the CDN
      url = "https://d1b10bmlvqabco.cloudfront.net/" + url;
        // THIS SHOULD GO AWAY WHEN WE MIGRATE ALL MONGO URLS
    }

    if (P.upload_manager.submitCallback)
      P.upload_manager.submitCallback(url, name);

    $('#modal_windows').hide();
    $('#upload_manager').modal('hide');

    return false;
  },
  cancel: function() {
    if (P.upload_manager.cancelCallback)
      P.upload_manager.cancelCallback();
    $('#modal_windows').hide();
    $('#upload_manager').modal('hide');
    return false;
  },
  deleteFile: function(fid) {
    var answer = confirm("Are you sure you want to remove this file? (it will still be downloadable)");
    if (!answer) return false;
    // find nid for this file
    $('#file_' + fid).hide();
    for (var nid in P.upload_manager.userData) {
      if (P.upload_manager.userData[nid][fid]) {
        PA.call_pj("user.remove_file", {nid:nid, fid:fid}, null);
      }
    }
    return false;
  },
  prepareData: function() {
    var data = {};
    var nid = P.upload_manager.network.id;
    if (P.upload_manager.userData[nid]) {
      // find network
      for (var i = 0; i < P.upload_manager.user.networks.length; i++) {
        if (P.upload_manager.user.networks[i].id === nid) {
          var net = P.upload_manager.user.networks[i];
          var networkStuff = {name:net.name, nid:net.id, files:[]};
          if (net.course_number)
            networkStuff.name = net.my_name;
          for (var fid in P.upload_manager.userData[nid]) {
            var fileStuff = P.upload_manager.userData[nid][fid];
            fileStuff.fid = fid;
            var size = parseInt(fileStuff.size);
            if (size > 1000000) size = Math.round(size / 10000) / 100 + "mb";
            else if (size > 1000) size = Math.round(size / 10) / 100 + "kb";
            else size = size + "b";
            fileStuff.size = size;
            networkStuff.files.push(fileStuff);
          }
          networkStuff.files.sort(function(a,b){
            if (a.created > b.created) return 1;
            if (a.created < b.created) return -1;
            return 0;
          });
          if (networkStuff.files.length > 0)
            data = networkStuff;
        }
      }
    }
    P.upload_manager.userDataPrepared = data;
  },
  show: function(callbacks) {
    // save away the callback functions for later calling
    if (callbacks) {
      P.upload_manager.submitCallback = callbacks.submit;
      P.upload_manager.cancelCallback = callbacks.cancel;
    } else {
      P.upload_manager.submitCallback = null;
      P.upload_manager.cancelCallback = null;
    }

    // get a list of the user's files that they uploaded before and store that list in 'data'
    PA.call_pj("user.get_files", {nid: P.upload_manager.network.id}, null, function(data){
      P.upload_manager.userData = data;

      // format the list of files showing their filesize, for display in Upload Manager file browser
      P.upload_manager.prepareData();

      if ($('#upload_manager').length == 0) {
        $('#modal_windows').append(
            P.upload_manager.template( {
                network:P.upload_manager.network,
                data:P.upload_manager.userDataPrepared
            })
        );
      } else {
        $('#upload_manager').replaceWith(
            P.upload_manager.template({
                network:P.upload_manager.network,
                data:P.upload_manager.userDataPrepared
            })
        );
      }

      $('#modal_windows').show();
      $('#modal_windows').children().hide();
      $('#upload_manager').modal('show');

    }, function(err){
      alert("Error initializing file manager: " + err);
    });
  },
  setNetwork: function(network) {
    P.upload_manager.network = network;
  },
  init: function(module) {
    if (module.options.network)
      P.upload_manager.network = module.options.network;
    P.upload_manager.template = module.template;
    
    PEM.addListener("network", P.upload_manager.setNetwork);
    PEM.addListener("showUploadManager", P.upload_manager.show);
  }
};
P.drafts = {
  template: null,
  draft: {},
  drafts: {},
  network: null,
  showing: false,
  autoSave: false,

  initHandlers: function() {
  },

  showDrafts: function(loadFirst) {
    P.drafts.showing = true;
    P.drafts.showDraftsFeed();
    P.drafts.draft = {};
    $('#question_feed_questions').find('.selected').removeClass('selected');
    $('#question_feed_questions').scrollTop(0);
    if (!P.drafts.autoSave && P.drafts.showing)
      P.drafts.saveDraftTimeout();
    if (loadFirst && P.drafts.firstDraftId) {
      P.drafts.loadDraft(P.drafts.firstDraftId);
    }
    return false;
  },
  showDraftsFeed: function() {
    $('#draft_group').remove();
    var arr = [];
    for (var id in P.drafts.drafts) {
      P.drafts.drafts[id].id = id;
      arr.push(P.drafts.drafts[id]);
    }
    arr.sort(function(a,b){ if (a.id > b.id) return -1; return 1;})
    $('#question_feed_questions').prepend(P.drafts.template({drafts:arr}));
    P.drafts.firstDraftId = arr.length > 0 ? arr[0].id : null;
    if (P.drafts.draft.id)
      $("#" + P.drafts.draft.id).addClass('selected');
    if (PA.user.config.hide_draft == "yes") {
      var $bucket = $('#bucket_draft');
      if ($bucket.find('span').html())
        $bucket.find('span').html('&#9656;' + $bucket.find('span').html().substring(1));
      $bucket.siblings('.item-list-in-bucket').hide();
    }
  },
  saveDraftTimeout: function() {
    P.drafts.autoSave = setTimeout(function(){
      P.drafts.saveDraft();
      P.drafts.saveDraftTimeout();
    }, 30000);
  },
  maybeShowDrafts: function() {
    if (P.drafts.showing)
      P.drafts.showDraftsFeed();
  },

  hideDrafts: function() {
    $('#draft_group').remove();
    P.drafts.showing = false;
    if (P.drafts.autoSave) {
      clearTimeout(P.drafts.autoSave);
      P.drafts.autoSave = false;
    }
  },

  saveDraft: function(onlyExisting) {
    var d = P.drafts.draft;
    d.content = PEM.callFirst("getEditorText", "old_new_post");
    if (d.content == "<p></p>")
      d.content = "";
    if (!d.content && !$('#post_summary').val()) return;
    if (onlyExisting && !d.id) return;
    d.btn = {};
    d.txt = {};
    $('#old_new_post_window').find('input[type=radio], input[type=checkbox]').each(function(){
      var id = $(this).attr('id');
      if (id) {
        d.btn[id] = !!$(this).attr('checked');
      }
    });
    $('#old_new_post_window').find('input[type=text], select').each(function(){
      d.txt[$(this).attr('id')] = $(this).val();
    });
    d.folders = P.folder_selector.getSelectedFolders();

    if (P.old_new_post.type == "poll") {
      P.old_new_post.updateQuestions();
      d.questions = [P.old_new_post.question];
    } else {
      delete d.questions;
    };

    d.selectedPrivateUsers = P.old_new_post.selectedPrivateUsers;
    P.drafts.draft = d;
    PA.call_pj("network.save_draft", {nid:P.drafts.network.id, draft:d}, 1, function(id) {
      $('#save_draft').html("Draft saved!");
      setTimeout(function(){$('#save_draft').html("Save Draft");}, 2000);
      d.id = id;
      P.drafts.drafts[d.id] = d;
      if (P.drafts.showing) P.drafts.showDraftsFeed();
      P.folders_bar.setNumDrafts();
    });
  },

  loadDraft: function(id) {
    if (id == P.drafts.deletedId) return;
    P.drafts.saveDraft(true); // save current draft, if one is open
    $('#question_feed_questions').find('.selected').removeClass('selected');
    $('#' + id).addClass('selected');
    if (P.drafts.drafts[id]) {
      P.drafts.draft = P.drafts.drafts[id];
      var d = P.drafts.draft;
      $('#old_new_post_window').find('input[type=radio], input[type=checkbox]').each(function(){
        var id = $(this).attr('id');
        if (id && this.name.substr(0, 16) !== 'main_def_editor_') {
          if (d.btn[id]) {
            if (!$(this).attr('checked'))
              $(this).click();
          } else if ($(this).attr('type') === 'checkbox')
            $(this).attr('checked', false);
        }
      });
      $('#old_new_post_window').find('input[type=text], select').each(function(){
        $(this).val(d.txt[$(this).attr('id')]);
      });
      PEM.fire("setEditorText", {postfix:"old_new_post", text:d.content});

      P.folder_selector.setSelectedFolders(d.folders, true, true);

      P.old_new_post.selectedPrivateUsers = {};
      $(".poll_selected_user_list li").remove();
      $(".selected_user_list li").remove();
      if (P.old_new_post.type == "poll") {
        P.old_new_post.question = (d.questions || [P.old_new_post.newQuestion()])[0];
      } else {
        P.old_new_post.question = P.old_new_post.newQuestion();
      }
      P.old_new_post.redrawPollChoices();
      P.old_new_post.sectionTypeChange();
      P.old_new_post.subGroupChange();
      P.old_new_post.isAnnouncement();
      
      P.old_new_post.selectedPrivateUsers = {};
      if (d.btn.publish_to_individuals || d.btn.individual_members) {
        if (!P.old_new_post.usersAutoComplete) {
          P.old_new_post.loadAutocompleteUsers(function(){
            P.old_new_post.sectionTypeChange();
            for (var i = 0; i < P.old_new_post.usersAutoComplete.length; i++)
              if (d.selectedPrivateUsers[P.old_new_post.usersAutoComplete[i].id])
                P.old_new_post.selectIndividualUserToPost(i);
          });
        } else {
          for (var i = 0; i < P.old_new_post.usersAutoComplete.length; i++)
            if (d.selectedPrivateUsers[P.old_new_post.usersAutoComplete[i].id])
              P.old_new_post.selectIndividualUserToPost(i);
        }
      }
    }
  },
  toggleFolder: function() {
    var $bucket = $('#bucket_draft');
    var hideDraft = "no";
    if($bucket.siblings('.item-list-in-bucket').is(':visible')){
      $bucket.find('span').html('&#9656;' + $bucket.find('span').html().substring(1));
      $bucket.siblings('.item-list-in-bucket').hide();
      hideDraft = "yes";
    } else {
      $bucket.find('span').html('&#9662;' + $bucket.find('span').html().substring(1));
      $bucket.siblings('.item-list-in-bucket').show();
    }
    PA.user.config.hide_draft = hideDraft;
    PA.call_pj("user.set", {stat:"hide_draft", val:hideDraft}, 1);
  },
  deleteDraft: function(id) {
    $('#' + id).remove();
    P.drafts.deletedId = id;
    delete P.drafts.drafts[id];
    PA.call_pj("network.delete_draft", {nid:P.drafts.network.id, id:id}, null, function(){
      if (P.drafts.draft && P.drafts.draft.id == id) {
        // clear data!
        $('#post_summary').val("");
        PEM.fire("setEditorText", {postfix:"old_new_post", text:""});
        P.drafts.draft = {};
      }
      P.folders_bar.setNumDrafts();
    });
    return false;
  },
  deleteCurentDraft: function() {
    if (P.drafts.draft && P.drafts.draft.id) {
      P.drafts.deleteDraft(P.drafts.draft.id);
      P.drafts.draft = {};
    }
  },
  setDrafts: function(dr) {
    if (dr)
      P.drafts.drafts = dr;
    else
      P.drafts.drafts = {};
    P.drafts.maybeShowDrafts();
    P.folders_bar.setNumDrafts();
  },

  init: function(module) {
    P.drafts.template = module.template;
    P.drafts.initHandlers()

    PEM.addListener("deleteCurrentDraft", P.drafts.deleteCurentDraft);
    PEM.addListener("saveDraft", P.drafts.saveDraft);
    PEM.addListener("showDrafts", P.drafts.showDrafts);
    PEM.addListener("cleanDashboard", P.drafts.hideDrafts);
    PEM.addListener("hideDrafts", P.drafts.hideDrafts);
    PEM.addListener("setDrafts", P.drafts.setDrafts);
    PEM.addListener("feed_created", P.drafts.maybeShowDrafts);
    PEM.addListener("network", function(n){ P.drafts.network = n; });
    if (module.options.network) {
      P.drafts.network = module.options.network;
    }
  }

};
P.old_new_post = {

  type:              "question",
  postTo:            "all",
  usersAutoComplete: null,
  selectedPrivateUsers: {},
  user:              null,
  network:           null,
  template:          null,
  question:          null,

  newQuestion:       function() {
    return {id: makeId(), text: "", type: "radio", answers: [], explanation: ""};
  },
  addPollAnswer:     function(answerText) {
    this.question.answers.push({id: makeId(), text: answerText, deleted: false});
  },
  sanitizeAnswer: function(value) {
    value = value.replace(/>/g, "&gt;");
    value = value.replace(/</g, "&lt;");
    value = value.replace(/"/g, '&quot;');
    return value;
  },
  updateQuestions:    function() {
    if (P.old_new_post.type != "poll") {
      return;
    }

    for (var i = 0; i < this.question.answers.length; i++) {
      const answer = this.question.answers[i];
      answer.text = this.sanitizeAnswer($('#answer_' + answer.id).val().trim());
    }

    this.question.explanation = $('#input_poll_explanation').val().trim();

    if ($('#selections_allowed_more').is(':checked')) {
      this.question.type = "checkbox";
    } else {
      this.question.type = "radio";
    }
  },
  hasManyFolders:    null,
  showingAllFolders: false,

  initEventHandlers: function() {
    //Click Handlers for New Post window Footer

    $('#post_type_question').click(function() {
      P.old_new_post.switchToQuestion(this);
      return true;
    });
    $('#post_type_poll').click(function() {
      P.old_new_post.switchToPoll(this);
      return true;
    });
    $('#post_type_note').click(function() {
      P.old_new_post.switchToNote(this);
      return true;
    });
    $('#post_button').click(function() {
      P.old_new_post.submitPost();
      return false;
    });

    $("#add_poll_choice").click(function() {
      P.old_new_post.addPollChoice();
      return false;
    });

    $("#save_draft").click(function() {
      PEM.fire("saveDraft");      
      return false;
    });
    $("#post_cancel_button").click(function() {
      PEM.fire("cancelOneForce", {postfix: "old_new_post"});
      return false;
    });

    $("input[name='post_to']").change(function() {
      P.old_new_post.sectionTypeChange();
    });

    $("input[name='publish_to']").change(function() {
      P.old_new_post.sectionTypeChange();
    });

    $("#posting_options_bypass_email").click(function() {
      P.old_new_post.sectionTypeChange();
    });

    $("#member_names").keyup(function() {
      P.old_new_post.performUsersAutocomplete();
    });
    $("#input_poll_choice").keypress(function(e){
      if(e.which == 13) {
        P.old_new_post.addPollChoice();
        return false;
      }
    });
    $('#post_summary').keydown(function(event){
      if (event.which == 9) {
        PEM.fire("focusEditor", "old_new_post");
        return false;
      }
      return true;
    });
    $(".must_read_expire_radio").change(function() {
      P.note_view.showMustReadTime();
      return false;
    });
    $("#must_read_date").datepicker();
    $("#must_read_time").timepicker({
      listWidth: 1,
      selectOnBlur: true,
      timeFormat: 'h:i a',
    });
    P.note_view.showMustReadTime();
    if (P.old_new_post.searchTimeoutInterval)
      clearTimeout(P.old_new_post.searchTimeoutInterval);
    if (P.old_new_post.network.config.show_dupes) {
      $('#post_summary').keyup(function(e){
        var text = $(this).val();
        if (text.length > 1 && text !== P.old_new_post.searchSubject) {
          clearTimeout(P.old_new_post.searchTimeout);
          var timeout = 1000;
          if (e.keyCode == 13) timeout = 10;
          P.old_new_post.searchTimeout = setTimeout(function() {
            P.old_new_post.search();
          }, timeout);
        }
        if (text.length == 0) {
          clearTimeout(P.old_new_post.searchTimeout);
        }
      });
      P.old_new_post.searchTimeoutInterval = setInterval(function(){P.old_new_post.search();}, 10000);
    }
    P.old_new_post.seen = {};
    if (P.feed) {
      P.old_new_post.showMustReadsWarning(P.feed.getMustReadPosts());
    }
  },

  search: function(subject) {
    // only do search for quesitons!
    // hide for notes or polls
    if (P.old_new_post.type != "question") {
      $('.post_duplicate').hide();
      return;
    }
    var subject = $('#post_summary').val();
    var content = PEM.callFirst("getEditorText", "old_new_post");
    var query = (subject + " " + content).trim();

    query = query.replace(/&amp;/g, "&");
    query = query.replace(/&quot;/g, '"');
    query = query.replace(/&nbsp;/g, ' ');

    if (query.length == 0) {
      $('.post_duplicate').hide();
      return;
    }
    if (P.old_new_post.oldQuery == query) return;
    P.old_new_post.oldQuery = query;
    var nid = P.old_new_post.network.id;

    PA.call_pj("network.find_similar", {query:query, old_query:P.old_new_post.oldESQuery, nid:nid}, $(".post_duplicate"), function(ret){
      var list = ret.list;
      if (P.old_new_post.oldESQuery == ret.query) {
        return;
      }
      P.old_new_post.oldESQuery = ret.query;
      if (!list || list.length == 0) {
        $('.post_duplicate').hide();
        return;
      }
      $('.post_duplicate').show();
      var html = "";
      P.old_new_post.seen = {};
      for (var i = 0; i < list.length; i++) {
        var item = list[i];
        var part = "<li><a href=\"/class/" + nid + "?cid=" + item.nr + "&from=similar\" target=\"_blank\">@" + item.nr + " " + item.subject + "</a><br>";
        var h = item.highlight;
        h = h.replace(/___bold_start___/g, "<b>");
        h = h.replace(/___bold_end___/g, "</b>");
        part += h;
        part += "</li>";
        html += part;
        if (!P.old_new_post.seen[item.nr] || P.old_new_post.seen[item.nr] > i)
          P.old_new_post.seen[item.nr] = i;
      }
      $('#similar-posts').html(html);
    });
  },
  switchToQuestion: function(element) {
    $('#post_button').text('Post My Question to ' + P.old_new_post.network.course_number + '!');
    $('#old_new_post_window .show_for_note_question').addClass('show');
    $('#old_new_post_window .show_for_poll').removeClass('show');
    $('#old_new_post_window .show_for_note').removeClass('show');
    $('#old_new_post_window .show_for_question').addClass('show');
    $('#advanced_options_div').show()
    $(".post_type_box").removeClass("active");
    $(element).closest(".post_type_box").addClass("active");
    $('#announcement_wrapper').hide();
    P.old_new_post.type = "question";
    P.old_new_post.sectionTypeChange();
  },

  switchToNote: function(element) {
    $('#post_button').text('Post My Note to ' + P.old_new_post.network.course_number + '!');
    $('#old_new_post_window .show_for_note_question').addClass('show');
    $('#old_new_post_window .show_for_poll').removeClass('show');
    $('#old_new_post_window .show_for_note').addClass('show');
    $('#old_new_post_window .show_for_question').removeClass('show');
    $('#advanced_options_div').show()
    $(".post_type_box").removeClass("active");
    if ($('#entire_group').attr('checked'))
      $('#announcement_wrapper').show();
    $(element).closest(".post_type_box").addClass("active");
    P.old_new_post.type = "note";
    P.old_new_post.sectionTypeChange();
  },

  switchToPoll: function(element) {
    $('#post_button').text('Post My Poll to ' + P.old_new_post.network.course_number + '!');
    $('#old_new_post_window .show_for_note_question').removeClass('show');
    $('#old_new_post_window .show_for_poll').addClass('show');
    $('#old_new_post_window .show_for_note').removeClass('show');
    $('#old_new_post_window .show_for_question').removeClass('show');
    $('#advanced_options_div').hide()
    $(".post_type_box").removeClass("active");
    $(element).closest(".post_type_box").addClass("active");
    $('#announcement_wrapper').hide();
    P.old_new_post.type = "poll";
    P.old_new_post.sectionTypeChange();
  },

  showAllTags: function() {
    $('#new_folder_list').addClass('show_all');
    $('.show_more_folders').hide();
    $('#new_folder_sep').hide();
    P.old_new_post.showingAllFolders = true;
    return false;
  },

  onFoldersResize: function() {
    if (P.old_new_post.showingAllFolders)
      return;
    var lis = $(".folders_li")
    if (lis.length) {
      var hasManyFolders = lis.last().position().top - lis.first().position().top > 86;
      if (P.old_new_post.hasManyFolders !== hasManyFolders) {
        if (hasManyFolders) {
          $('.show_more_folders').show();
          if (P.old_new_post.user.isInst)
            $('#new_folder_sep').show();
        } else {
          $('.show_more_folders').hide();
          $('#new_folder_sep').hide();
        }
        P.old_new_post.hasManyFolders = hasManyFolders;
      }
    }
  },

  setUser: function(user) {
    if ($.browser.msie) {
      setTimeout(function(){
        setTimeout(function(){$('#search-box').blur();}, 300);
      }, 500);
      $(".post_summary").focus();

    }
    P.old_new_post.user = user;
  },
  showMustReadsWarning: function(must_reads) {
    if (must_reads.mr > 0 && !P.feed.live) {
      var unread_text = "" + must_reads.mr + " unread item";
      if (must_reads.mr > 1) {
        unread_text += "s";
        $('.unread_count_these').text("these");
      } else {
        $('.unread_count_these').text("it");
      }
      $('.unread_count').text(unread_text);
      if (must_reads.mrp > 0) {
        var must_read_text;
        if (must_reads.mr === 1 && must_reads.mrp === 1) {
          must_read_text = "You are required to read it";
        } else if (must_reads.mrp === 1) {
          must_read_text = "One of them is required to read";
        } else if (must_reads.mrp === must_reads.mr) {
          must_read_text = "All of them are required to read";
        } else {
          must_read_text = "" + must_reads.mrp + " of them are required to read";
        }
        $('#must_read_count').text(must_read_text);
        $('#must_read_to_post_message').addClass('show');
        $('#must_read_message').removeClass('show');
      } else {
        $('#must_read_message').addClass('show');
        $('#must_read_to_post_message').removeClass('show');
      }
    } else {
      $('#must_read_to_post_message').removeClass('show');
      $('#must_read_message').removeClass('show');
    }
  },

  cancelNewPost: function() {
    alert('show post delete confirmation message if user started drafting post');
    $('#old_new_post_window').hide();
  },
  addPollChoice: function() {
    var choice = $('#input_poll_choice').val().trim();
    if (choice.length == 0) return;
    P.old_new_post.addPollAnswer(this.sanitizeAnswer(choice));

    P.old_new_post.redrawPollChoices();
    $('#input_poll_choice').val('');
    $('#input_poll_choice').focus();
  },
  redrawPollChoices: function() {
    var html = "";
    for (var i = 0; i < P.old_new_post.question.answers.length; i++) {
      const answer = P.old_new_post.question.answers[i];
      html += '<li>' +
                '<div style="margin-left: 20px">' +
                  '<div class="reorder_class"/>' +
                  '<input class="span3 poll_answer_item" id="answer_' + answer.id + '" type="text" value="' + answer.text + '" onchange="return P.old_new_post.onChangePollChoice(' + i + ');">' +
                  '<i class="icon-remove" onclick="return P.old_new_post.removePollChoice(' + i + ');"></i>' +
                  '<span class="new_post_error answer_empty_' + i + '">Please enter answer</span>' +
                '</div>' +
              '</li>'
    }

    $('#poll_options_preview').html(html);

    $('#poll_options_preview').b_sortable({handle:".reorder_class"}).bind('sortupdate', function() {
      P.old_new_post.updateAnswerOrder();
    });
  },
  onChangePollChoice: function(ai) {
    const arr = $('#poll_options_preview .poll_answer_item');
    const inputElement = $(arr[ai]);
    // var answerId = inputElement.attr("id").replace("answer_", "");

    P.old_new_post.question.answers[ai].text = inputElement.val();
  },
  updateAnswerOrder: function() {
    var arr = $('#poll_options_preview .poll_answer_item');
    var list = {};
    for (var i = 0; i < arr.length; i++)
      list[$(arr[i]).attr("id").replace("answer_", "")] = i;
    P.old_new_post.question.answers.sort(function(a,b) {
      return list[a.id] - list[b.id];
    });
  },
  removePollChoice: function(i) {
    if (i < P.old_new_post.question.answers.length)
      P.old_new_post.question.answers.splice(i, 1);
    P.old_new_post.redrawPollChoices();
    return false;
  },
  cloneNewPollVerify: function() {
    PEM.fire("verifyAnyCancel", P.old_new_post.cloneNewPoll);
  },
  cleanDashboard: function() {
    $('.main_panel').removeClass("private_post");
  },
  showNewPost: function(html) {

    var publish_later = false;
    var always_open = false;
    var anonymity = "yes";
    var revote = false;
    var multiple_selections = false;
    var bypass_email = false;
    var notify_mobile_update = false;

    var show_results = "av";
    var close_after = "48";

    P.old_new_post.question = P.old_new_post.newQuestion();

    if (P.old_new_post.user.config.poll_defaults) {
      {"revote", "show_results", "multiple_selections", "close_after", "always_open", "anonymous", "publish_later"};
      revote = P.old_new_post.user.config.poll_defaults.revote == 1;
      show_results = P.old_new_post.user.config.poll_defaults.show_results;
      multiple_selections = P.old_new_post.user.config.poll_defaults.multiple_selections == 1;
      close_after = P.old_new_post.user.config.poll_defaults.close_after;
      always_open = P.old_new_post.user.config.poll_defaults.always_open == 1;
      publish_later = P.old_new_post.user.config.poll_defaults.publish_later == 1;
      anonymity = P.old_new_post.user.config.poll_defaults.anonymous;
    }

    html = html || "";
    PEM.fire("content", null);
    PEM.fire("cleanDashboard");
    PEM.fire("showDrafts");


    P.old_new_post.showingAllFolders = false;
    P.old_new_post.hasManyFolders = null;
    P.old_new_post.selectedSection = "";
    P.old_new_post.selectedPrivateUsers = {};


    var term = P.top_bar.network.term.toLowerCase().replace(/\s+/g, "") || "other";
    var shortNumber = P.top_bar.network.short_number;

    P.old_new_post.network.folderUrl = "/configure-classes/" + term + "/" + shortNumber + "#FoldersSettings";

    // by default if the feed is filtered by a folder, have the folder already selected on new posts:
    var folders = P.old_new_post.network.folders;
    if (folders == null || typeof(folders) == "undefined") {
      folders = [];
    }

    P.folder_selector.initialize(
      "new_post_folders",
      "new_folder_list",
      [P.feed.feedFilter]);

    var anon = PEM.callFirst("getAnonymityOptions");
    var net = P.old_new_post.network;
    net.isGroup = (net.type == "group");
    net.isNoVerify = (net.type == "no-verify");
    // sections
    if (net.config && net.config.class_sections && net.config.class_sections.section_list && net.config.class_sections.section_list.length > 0) {
      if (net.subGroups.length > 0)
        net.mySubgroup = net.subGroups[0];
    }
    var feedback = false;
    var feedbackClass = "";
    if (P.old_new_post.user.config.feedback && P.old_new_post.user.config.feedback[net.id]) {
      var total = 0;
      for (var i = 0; i < P.old_new_post.user.config.feedback[net.id].length; i++) {
        var f = P.old_new_post.user.config.feedback[net.id][i];
        if (f.cnt > 0) {
          if (!feedback) feedback = [];
          feedback.push(f);
          total += f.cnt;
        }
      }
      if (total < 3) {
        feedback = false;
      }
      if (total > 9) feedbackClass = "medium";
      //if (total > 9) feedbackClass = "heavy";
    }

    $("#old_new_post_window").replaceWith(P.old_new_post.template({user:P.old_new_post.user, anon:anon, isInst:(P.old_new_post.user.isInst && !P.old_new_post.network.isGroup),
      network:P.old_new_post.network, publish_later: publish_later, always_open: always_open, anonymity: anonymity,
      revote: revote, multiple_selections: multiple_selections, bypass_email: bypass_email, notify_mobile_update: notify_mobile_update, show_results: show_results, is_clone: false,
      feedback: feedback, feedback_class:feedbackClass, close_after:close_after, question: P.old_new_post.question,
      show_must_read: P.old_new_post.user.isInst && (P.old_new_post.network.config === null || P.old_new_post.network.config.must_read !== false),
      timezone:moment().tz(moment.tz.guess()).format("z")
    }));
    P.old_new_post.onFoldersResize();

    // check that this class can have private posts, and
    // determine if entire class or individuals should by default be checked if not an instructor:
    $('#entire_group').attr('checked', true);
    if (net.config['default_posts_to_private'] && !net.noPrivatePosts && !P.old_new_post.user.isInst) {
      $('#entire_group').attr('checked', null);
      $('#individual_members').attr('checked', 1);
    }

    P.old_new_post.sectionTypeChange();
    PEM.fire("injectEditor", {
      where: $("#old_new_post_editor"),
      postfix: "old_new_post",
      height: 150,
      text: html,
      cancel: function(hideHomeScreen){P.old_new_post.hideNewPost(!hideHomeScreen)},
      noSave: true
    });
    P.old_new_post.initEventHandlers();
    //P.old_new_post.initAttachments();
    $('#post_summary').focus();
    $('#post_summary').val('');
    if (P.feed.live) {
      $('.class_live_wrapper').show();
      $('#class_live').attr('checked', true);
    } else {
      $('.class_live_wrapper').hide();
    }
    if (P.old_new_post.network.type != "group" && PA.user.isInst)
      $('#post_type_note').click();
    else
      $('#post_type_question').click();
    if (net.mySubgroup) {
      $('#subgroup_dropdown').val(net.mySubgroup);
      P.old_new_post.subGroupChange();
    }
    if (net.status == "inactive" && net.config.inactive_private && !P.old_new_post.user.isInst) {
      $('.class_reg_wrapper').hide();
      $('#individual_members').attr('checked', true);
      P.old_new_post.sectionTypeChange();
    }
  },
  cloneNewPoll: function(html) {
    html = html || "";
    PEM.fire("cleanDashboard");
    P.old_new_post.showingAllFolders = false;
    P.old_new_post.hasManyFolders = null;
    P.old_new_post.selectedSection = "";
    var anon = PEM.callFirst("getAnonymityOptions");
    var net = P.old_new_post.network;
    net.isGroup = (net.type == "group");
    net.isNoVerify = (net.type == "no-verify");
    // sections
    if (net.config && net.config.class_sections && net.config.class_sections.section_list.length > 0) {
      net.subGroups = net.config.class_sections.section_list;
      // find first subgroup that is mine
      if (P.old_new_post.user.config.feed_groups) {
        for (var i = 0; i < net.subGroups.length; i++) {
          var sect = net.subGroups[i];
          if (P.old_new_post.user.config.feed_groups.exist(sect.id)) {
            net.mySubgroup = sect;
            break;
          }
        }
      }
    }

    var allow_followups = P.poll_view.content.config.allow_followups;
    var always_open = P.poll_view.content.config.always_open;
    var anonymity = P.poll_view.content.config.anonymous;
    var close_after = P.poll_view.content.config.close_after;
    var publish_later = P.poll_view.content.config.publish_later;
    var unpublished = P.poll_view.content.config.unpublished;
    var revote = P.poll_view.content.config.revote;
    var show_results = P.poll_view.content.config.show_results;
    var bypass_email = P.poll_view.content.config.bypass_email;
    var notify_mobile_update = P.poll_view.content.config.notify_mobile_update == 1;
    var body = P.poll_view.content.body;
    var title = P.poll_view.content.subject;
    var question = P.poll_view.content.questions[0];
    var multiple_selections = question.type == "checkbox";

    for (var i = question.answers.length-1; i >= 0; i--) {
      if (question.answers[i].deleted) {
        question.answers.splice(i, 1);
      }
    }
    P.old_new_post.question = question;

    if (publish_later == 0)
      publish_later = false;
    else
      publish_later = true;

    if (always_open == 1)
      always_open = true;
    else
      always_open = false;

    if (revote == 1)
      revote = true;
    else
      revote = false;


    if (bypass_email == 1)
      bypass_email = true;


    $("#old_new_post_window").replaceWith(P.old_new_post.template({user:P.old_new_post.user, anon:anon, isInst:(P.old_new_post.user.isInst && !P.old_new_post.network.isGroup),
      network:P.old_new_post.network, publish_later: publish_later, always_open: always_open, anonymity: anonymity, close_after:close_after,
      revote: revote, multiple_selections: multiple_selections, bypass_email: bypass_email, notify_mobile_update: notify_mobile_update, show_results: show_results, question: question, is_clone: true,
      show_must_read: P.old_new_post.user.isInst && (P.old_new_post.network.config === null || P.old_new_post.network.config.must_read !== false),
      timezone:moment().tz(moment.tz.guess()).format("z")
    }));

    P.old_new_post.onFoldersResize();

    PEM.fire("injectEditor", {
      where: $("#old_new_post_editor"),
      postfix: "old_new_post",
      height: 150,
      text: body,
      cancel: function(){P.old_new_post.hideNewPost(true)},
      noSave: true
    });
    P.old_new_post.initEventHandlers();
    $('#post_summary').focus();
    if (P.old_new_post.network.type != "group")
      $('#post_type_poll').click();
    // if (net.mySubgroup) {
      // $('#subgroup_dropdown').val(net.mySubgroup.id);
      // P.old_new_post.subGroupChange();
    // }
    $("#post_summary").val(title);
    $("#input_poll_explanation").val(question.explanation);

    if ($('#publish_later').attr('checked') && $('#post_type_poll').attr('checked')) {
      $('#bypassing_email').hide();
      P.old_new_post.realPostTo = "me";
    }

    $('#entire_group').attr('checked', true);
    var fg = P.poll_view.content.config.feed_groups;
    if (fg) {
      if (fg.indexOf("_") > 0) {
        if (P.old_new_post.network.subGroups && P.old_new_post.network.sectionNames[fg]) {
          $('#class_subgroup').attr('checked', true);
        } else {
          $('#individual_members').attr('checked', true);
        }
      }
    }
    if (P.feed.live) {
      $('.class_live_wrapper').show();
      $('#class_live').attr('checked', true);
    } else {
      $('.class_live_wrapper').hide();
    }
    P.old_new_post.sectionTypeChange();
    for (var i = 0; i < P.poll_view.content.folders.length; i++) {
      $('#folder_' + P.poll_view.content.folders[i]).click();
    }

    P.old_new_post.redrawPollChoices();
  },
  subGroupChange: function() {
    if (!P.old_new_post.network.config.class_sections) return;
    if (!$("#subgroup_dropdown").val()) return;
    P.old_new_post.selectedSectionError = false;
    if ($('#subgroup_dropdown').val() == "All my groups") {
      var net = P.old_new_post.network;
      var all = "";
      for (var i = 0; i < net.subGroups.length; i++) {
        if (net.subGroups[i].name != "All my groups") {
          var sect = net.subGroups[i].id;
          if (all) all += P.note_view.FEED_GROUP_DELIMITER;
          all += sect;
        }
      }
      P.old_new_post.selectedSection = all;
      return;
    }
    var sect = $('#subgroup_dropdown').val();
    P.old_new_post.selectedSection = sect;
    $('#subgroup_list .error_wrapper').hide();
    var usr = P.old_new_post.user;
    if (usr.config && usr.config.feed_groups && usr.config.feed_groups.exist(sect)) {
      // do nothing here
    } else {
      if (usr.isInst) {
        $('#not-in-section-instructor').show();
      } else {
        if (P.old_new_post.network.config.class_sections.allow_enroll != 1) {
          $('#not-in-section-student').show();
          P.old_new_post.selectedSectionError = true;
        } else {
          $('#not-in-section-can-join').show();
          P.old_new_post.selectedSectionError = true;
        }
      }
    }
  },
  joinSection: function(sect) {
    if (!P.old_new_post.selectedSection || P.old_new_post.selectedSection == "") return false;
    if (P.old_new_post.network.config.class_sections.allow_enroll != 1) return false;
    PA.call_pj("network.manage_users_to_sections", {
      nid: P.old_new_post.network.id,
      section: sect,
      join: 1
    }, null, function(data) {
      if (!PA.user.config) PA.user.config = {};
      if (!PA.user.config.feed_groups) PA.user.config.feed_groups = [];
      PA.user.config.feed_groups.push(sect);
      P.old_new_post.subGroupChange();
      //PD.existingPost_SectionChange();
    }, function(err) {alert(err);});
    return false;
  },

  selectTag: function(obj, hash) {
    var tag = $(obj).text();
    if (hash[tag]) {
      delete hash[tag];
      $(obj).removeClass('selected');
    } else {
      hash[tag] = true;
      $(obj).addClass('selected');
      $(".new_post_error.no_folders").removeClass("show");
    }
    return false;
  },
  loadAutocompleteUsers: function(callback) {
    if (P.old_new_post.network.type != "group" && !P.old_new_post.user.isInst) {
      // for students - only add existing instructors
      P.old_new_post.usersAutoComplete = [];
      for (var i = 0; i < P.old_new_post.network.profs.length; i++)
        P.old_new_post.usersAutoComplete.push(P.old_new_post.network.profs[i]);
      P.old_new_post.usersAutoComplete.push({name:"Instructors",id:"instr_" + P.old_new_post.network.id})
      if (callback)
        callback.call();
    } else {
      PA.call_pj("network.get_all_users", {nid: P.old_new_post.network.id}, $(".post_to"), function(data) {
        P.old_new_post.usersAutoComplete = data;
        if (P.old_new_post.network.type != "group")
          P.old_new_post.usersAutoComplete.push({name:"Instructors", id:"instr_" + P.old_new_post.network.id})
        if (callback)
          callback.call();
      });
    }
  },
  sectionTypeChange: function() {
    if ($('#selections_allowed_more').is(':checked')) {
      P.old_new_post.question.type = "checkbox";
    } else {
      P.old_new_post.question.type = "radio";
    }

    if ($('#publish_later').attr('checked') && $('#post_type_poll').attr('checked'))
      $('#bypassing_email').hide();
    else if (P.old_new_post.user.isInst)
      $('#bypassing_email').show();

    if ($('#class_live').attr('checked')) {
      $('#bypassing_email').hide();
    }

    $('#notify_mobile_update').hide();
    if (P.old_new_post.user.isInst && P.old_new_post.type == "poll") {
      $('#notify_mobile_update').show();
    }

    $('#announcement_wrapper').hide();
    if ($('#entire_group').attr('checked') || $('#class_live').attr('checked')) {
      $("#member_names").hide();
      $("#member_names_message").hide();
      $('.selected_user_list').hide();
      $('#subgroup_list').hide();
      if (P.old_new_post.type == "note")
        $('#announcement_wrapper').show();
      $(".new_post_error.no_names").removeClass("show");
      P.old_new_post.postTo = "all";
      if (!P.old_new_post.user.isInst) $('#post_anonymity_wrapper').show();

    } else if ($('#individual_members').attr('checked')){
      if (!P.old_new_post.usersAutoComplete) {
        P.old_new_post.selectedPrivateUsers = {};
        P.old_new_post.loadAutocompleteUsers(function(){
          if (!P.old_new_post.user.isInst && !P.old_new_post.network.isGroup) // auto-select instructors
            P.old_new_post.selectIndividualUserToPost(P.old_new_post.usersAutoComplete.length - 1);
        });
      }
      $("#member_names").show();
      $("#member_names_message").show();
      $('.selected_user_list').show();
      $('#subgroup_list').hide();
      $('#member_names').focus();
      P.old_new_post.postTo = "individual";
      if (!P.old_new_post.user.isInst) {
        $('#post_anonymity_wrapper').hide();
        $('#new_post_anonymity').val('no');
      }
    } else {
      $('.selected_user_list').hide();
      P.old_new_post.postTo = "all";
      if (!P.old_new_post.user.isInst) $('#post_anonymity_wrapper').show();
    }
    if ($('#class_subgroup').attr('checked')) {
      $("#member_names").hide();
      $("#member_names_message").hide();
      P.old_new_post.postTo = "section";
      $('#subgroup_list').show();
    }
    P.old_new_post.realPostTo = P.old_new_post.postTo;
    if ($('#post_type_poll').attr('checked')) {
      if ($('#publish_later').attr('checked')) {
        P.old_new_post.realPostTo = "me";
      }
    }
  },

  performUsersAutocomplete: function() {
    if (!P.old_new_post.usersAutoComplete) {
      P.old_new_post.loadAutocompleteUsers();
      return;
    }
    var text = $('#member_names').val().toLowerCase();
    var drop = $('#member_names_dropdown_list').empty();
    var resultCount = 0;
    if (text.length > 0) {
      for (var i = 0; i < P.old_new_post.usersAutoComplete.length; i++) {
        var usr = P.old_new_post.usersAutoComplete[i];
        if (usr.us) continue;
        if (!usr.name) continue;
        //if (PD.selectedPrivateUsers[usr.id]) continue;
        if (usr.id == P.old_new_post.user.id) continue;
        if ((usr.name && usr.name.toLowerCase().indexOf(text) >= 0) ||
            (usr.email && usr.email.toLowerCase().indexOf(text) >= 0)) {
          var html = '<li class="clearFix" onclick="P.old_new_post.selectIndividualUserToPost(' + i + ');">';
          if (usr.id == "instr_" + P.old_new_post.network.id)
            html += '<div class="user_image"><div class="user_pic"><div class="white_border"><img title="Instructors" src="https://dvngeac8rg9mb.cloudfront.net/images/dashboard/common/default_user.png" onload="onImageLoad(event);" width="32" height="32" style="width: 32px; height: 32px; left: 0px; top: 0px;"></div></div></div>';
          else
            html += '<div class="user_image">' + PA.getUserPic(usr.id) + '</div>';
          html += '<div class="user_details">';
          html += '<div class="user_name">' + usr.name + '</div>';
          //html += '<div class="user_email">' + usr.email + '</div>';
          html += '</div></li>'
          drop.append(html);
          resultCount += 1;
        }
      }
      if (resultCount == 0) {
        drop.append('<li><div class="no_result">User not found</div></li>');
      }
      $('#member_names_dropdown_list').show();
    } else {
      $('#member_names_dropdown_list').hide();
    }
  },
  selectIndividualUserToPost: function(idx) {
    if (idx >= 0 && idx < P.old_new_post.usersAutoComplete.length) {
      var usr = P.old_new_post.usersAutoComplete[idx];
      if (!P.old_new_post.selectedPrivateUsers[usr.id]) {
        P.old_new_post.selectedPrivateUsers[usr.id] = 1;
        $('.selected_user_list').append('<li id="individual_' + idx + '">' + P.old_new_post.usersAutoComplete[idx].name + ' <i class="icon-remove" onclick="return P.old_new_post.removeIndividualUserToPost(' + idx + ')"></i></li>');
      }
    }
    $('#member_names').val('');
    return false;
  },
  removeIndividualUserToPost: function(idx) {
    if (idx >= 0 && idx < P.old_new_post.usersAutoComplete.length) {
      var usr = P.old_new_post.usersAutoComplete[idx];
      P.old_new_post.selectedPrivateUsers[usr.id] = false;
      $('#individual_' + idx).remove();
    }
    return false;
  },
  submitPost: function() {
    if (P.old_new_post.submitPost_ValidateForm()) {
      P.old_new_post.submitPost_HandleSubmission();
    } else
      $('.main_panel').scrollTop(0);
    return false;
  },
  submitPost_ValidateForm: function() {
    // Validate the title and details fields.
    var titleIsValid    = P.old_new_post.submitPost_ValidateTitle();
    var tagIsValid      = P.old_new_post.submitPost_ValidateFolders();
    var validateAnswers = P.old_new_post.submitPost_ValidateAnswers();
    // var detailsAreValid = P.old_new_post.submitPost_ValidateDetails();

    if (P.old_new_post.postTo == "individual") {// check if user selected anything
      var cnt = 0;
      for (var z in P.old_new_post.selectedPrivateUsers) {
        if (P.old_new_post.selectedPrivateUsers[z]) {
          cnt += 1;
        }
      }
      if (cnt > 10) {
        $(".new_post_error.no_names").removeClass("show");
        $(".new_post_error.too_many_names").addClass("show");
        return false;
      } else {
        $(".new_post_error.too_many_names").removeClass("show");
      }
    }

    if (P.old_new_post.postTo == "section") {
      if (P.old_new_post.selectedSectionError) return false;
    }
    return (titleIsValid && tagIsValid && validateAnswers);// && detailsAreValid);
  },
  submitPost_ValidateTitle: function() {

    var $wrapper = $('#post_summary');
    var title = $wrapper.val();

    /* Hide all existing Post Summary error messages. */
    $wrapper.siblings(".new_post_error").removeClass("show");

    var isValid = true;
    if (title.length <= 0) {
      $wrapper.siblings(".new_post_error.no_summary").addClass("show");
      isValid = false;
    } else if (title.length > 100) {
      $wrapper.siblings(".new_post_error.long_summary").addClass("show");
      isValid = false;
    }

    return isValid;

  },
  submitPost_ValidateFolders: function() {
    var isValid = true;
    if (P.old_new_post.network.config.disable_folders) return true;
    if (P.folder_selector.getSelectedFolders().length === 0) {
      $(".new_post_error.no_folders").addClass("show");
      isValid = false;
    } else {
      $(".new_post_error.no_folders").removeClass("show");
    }
    return isValid;
  },
  submitPost_ValidateAnswers: function() {
    if (P.old_new_post.type != "poll") {
      return true;
    }
    for (var i = 0; i < P.old_new_post.question.answers.length; i++) {
      const answerId = P.old_new_post.question.answers[i].id;
      $(".new_post_error.answer_empty_" + answerId).removeClass("show");
      if ($('#answer_' + answerId).val().trim() === "") {
        $(".new_post_error.answer_empty_" + answerId).addClass("show");
        $('#answer_' + answerId).focus();
        return false;
      };
    }
    return true;
  },
  submitPost_ValidateDetails: function() {
    var text = PEM.callFirst("getEditorText", "old_new_post");

    var isValid = true;
    if (text.length <= 0) {
      $('.new_post_error.no_details').addClass('show');
      isValid = false;
    } else {
      $('.new_post_error.no_details').addClass('hide');
    }

    return isValid;

  },
  submitPost_HandleSubmission: function() {
    var type = P.old_new_post.type;
    var subject = $("#post_summary").val();
    var content = PEM.callFirst("getEditorText", "old_new_post");
    // anonymity
    var anonymity = $("#new_post_anonymity").val();
    if (!anonymity)
      anonymity = "no";
    var status = "active";

    var params = {
      nid:          P.old_new_post.network.id,
      type:         type,
      subject:      subject,
      content:      content,
      anonymous:    anonymity,
      client_time:  (new Date()).format("m/dd/yy h:MM TT"),
      status:       status,
      folders:      P.folder_selector.getSelectedFolders()
    };

    var config = {};

    if ($('#posting_options_bypass_email').attr('checked') == 'checked') {
      config.bypass_email = 1;
      params.prof_override = true;
    }

    if (type == "note" && $('#posting_options_announcement').attr('checked')) {
      config.is_announcement = 1;
    }
    if ($('#class_live').attr('checked')) {
      config.live = P.feed.live;
    }
    // who to post to?
    if (P.old_new_post.postTo == "individual") {
      var feedGroups = "";
      for (var z in P.old_new_post.selectedPrivateUsers)
        if (P.old_new_post.selectedPrivateUsers[z]) {
          feedGroups += (feedGroups.length == 0 ? "" : "," ) + z;
        }
      if (feedGroups == "") return false;
      feedGroups += "," + PA.user.id;
      config.feed_groups = feedGroups;
    }
    var sectionsInfo = []; // each object is a section name / folder name combo
    if (P.old_new_post.postTo == "section") {
      var sects = P.old_new_post.selectedSection.split(P.note_view.FEED_GROUP_DELIMITER);
      for (var i = 0; i < sects.length; i++) {
        var info = {};
        var sect = sects[i];
        var folder = P.old_new_post.network.sectionNames[sect];
        info.sect = sect;
        info.folder = folder;
        sectionsInfo.push(info);
      }
    }
    if ($('#posting_options_no_email').attr('checked')) {
      config.emails_notifications = false;
      config.resolved_followups = true;
    }

    // poll
    if (type == "poll") {
      config.anonymous = "no";
      config.show_results = "av"; //av = after vote; ac = after close; "" = right away; nn = never
      config.close_after = $("#poll_close_date_menu").val();
      config.allow_followups = "yes";
      config.always_open = 0;
      config.revote = 0;
      config.publish_later = 0;
      config.unpublished = 0;
      config.bypass_email = 0;
      config.notify_mobile_update = 0;

      config.toggle_visibility_on = 1;

      if (this.question.answers.length < 1) {
        $(".new_post_error.no_poll_choices").addClass("show");
        $('#appendedInputButton').focus();
        return false;
      } else {
        $(".new_post_error.no_poll_choices").removeClass("show");
      }
      P.old_new_post.updateQuestions();
      params.questions = [this.question];

      if ($("#poll_close_date_never").is(":checked")) config.always_open = 1;
      if ($("#show_poll_results_before_member_votes").is(":checked"))
        config.show_results = "";
      else if ($("#show_poll_results_after_poll_closes").is(":checked"))
        config.show_results = "ac";
      else if ($("#show_poll_results_keep_private").is(":checked"))
        config.show_results = "nn";

      if ($("#poll_anonymity_nobody").is(":checked"))
        config.anonymous = "yes";
      if ($("#poll_anonymity_students").is(":checked"))
        config.anonymous = "stud";

      if ($("#revotes_yes").is(":checked")) {
        config.revote = 1;
      }
      if ($("#revotes_no").is(":checked")) {
        config.revote = 0;
      }


      if ($('#posting_options_bypass_email').attr('checked') == 'checked') {
        config.bypass_email = 1;
        params.prof_override = true;
      }
      if ($('#notify_mobile_update_input').attr('checked') == 'checked') {
        config.notify_mobile_update = 1;
      }

      if (P.old_new_post.postTo === "me") {
        config.publish_later = 1;
        config.unpublished = 1;
      }
      else {
        config.publish_later = 0;
        config.unpublished = 0;
      }
    }
    if (P.old_new_post.seen && Object.keys(P.old_new_post.seen).length > 0)
      config.seen = P.old_new_post.seen;

    if ($('#must_read').attr('checked')) {
      config.must_read = true;
      if ($('#must_read_auto').attr('checked')) {
        var date = new Date($('#must_read_date').val());
        var time = $('#must_read_time').timepicker('getSecondsFromMidnight');
        time = date.getTime() + time * 1000;
        config.must_read_expire = time;
      }
      if($('#must_read_to_post').attr('checked') && config.must_read) {
        config.must_read_to_post = true;
      }
    }

    params.config = config;

    var postingToMultipleGroups = sectionsInfo.length > 1;
    // if it's going to groups (1 or more), create first n-1 of them and then
    // do the normal callback as usual with the final group configuration
    if (P.old_new_post.postTo == "section") {
      if (postingToMultipleGroups) {
        $('#page_center').block(); // will be unblocked by final petty call
        // if posting to multiple groups at once, do not check against last posted time or 
        // subject and content already existing in other posts:
        params.ignore_checks = true;
      }
      var foldersWithoutGroups = params.folders.slice(0);
      for (var i=0; i<sectionsInfo.length; i++){
        if (i > sectionsInfo.length-2) {
          break;
        }
        var folders = foldersWithoutGroups.slice(0);
        var info = sectionsInfo[i];
        var sect = info.sect || '';
        var folder = info.folder || '';
        folders.push(folder);
        params.folders = folders;
        params.config.feed_groups = sect;
        PA.call_pj('content.create', params, 1, function(data) {}, function(e){alert(e)});
      }
      // the last group post uses the usual callbacks
      var folders = foldersWithoutGroups.slice(0);
      var info = sectionsInfo[sectionsInfo.length - 1];
      var sect = info.sect || '';
      var folder = info.folder || '';
      folders.push(folder);
      params.folders = folders;
      params.config.feed_groups = sect;
    }
    if (P.old_new_post.realPostTo == "me") {
      var feedGroups = "instr_" + P.old_new_post.network.id;
      feedGroups += "," + PA.user.id;
      config.publish_later_to = config.feed_groups;
      config.feed_groups = feedGroups;
      config.publish_later = 1;
      config.unpublished = 1;
    }
    // usual post create with final callbacks
    PA.call_pj('content.create', params, $('#page_center'), function(data) {
      if (type == "poll") {
        // set poll defaults
        var pollOptions = ["revote", "show_results", "close_after", "always_open", "anonymous", "publish_later"];
        P.old_new_post.user.config.poll_defaults = {"multiple_selections": P.old_new_post.question.type == "checkbox"};
        for (var i = 0; i < pollOptions.length; i++) {
          var option = pollOptions[i];
          P.old_new_post.user.config.poll_defaults[option] = config[option];
        }
      }

      // delete current draft
      PEM.fire("deleteCurrentDraft");
      // hide form
      PEM.fire("cancelOneForce", {postfix: "old_new_post", hideHomeScreen: true});
      if ($('#attachment_list').children().length > 0)
        PEM.fire("start_upload", data.id);
      PEM.fire("cleanDashboard");
      data.my_post = true;
      data.default_anonymity = anonymity;
      PEM.fire("content", data);
      P.renderer.renderMath("view_quesiton_note");
      if (P.feed && P.push && !P.push.isConnected()) {
        P.feed.refreshFeedContent();
      }
    }, function(err) {
      alert(err);
    });

    return true;
  },
  setNetwork: function(network) {
    P.old_new_post.network = network;
    P.old_new_post.usersAutoComplete = null; // do not want to auto-load this! expensive on server.
    P.old_new_post.selectedPrivateUsers = {};
    // see if we need to show prepopulated stuff
    if (typeof(AUTO_POST) != 'undefined' && AUTO_POST) {
      if (P.old_new_post.user.resource_note_info && P.old_new_post.user.isInst) {
        P.old_new_post.selectPrepopulatedNote(P.old_new_post.user.resource_note_info);
      } else {
        P.old_new_post.showNewPost();
        $('#posting_options_announcement').attr('checked', true);
        P.old_new_post.isAnnouncement();
      }
      AUTO_POST = false;
    }
  },
  isAnnouncement: function() {
    if ($('#posting_options_announcement').attr('checked'))
      $('#new_post_alert_announcement').show();
    else
      $('#new_post_alert_announcement').hide();
  },
  selectPrepopulatedNote: function(resource_info) {
    var url = "";
    if (resource_info['resource_type'] == 'file') {
      url = "http://www.piazza.com/class_profile/get_resource/" + P.old_new_post.network.id + "/" + resource_info['rid'];
    } else if (resource_info['resource_type'] == 'link') {
      url = resource_info['content'];
    }
    //if (resource_info['section'] == 'lecture_notes') resource_info['section'] = "lecture notes"
    var sect = resource_info['section'];
    var title;
    for (var i = 0; i < P.old_new_post.network.config.resource_sections.length; i++) {
      if (sect == P.old_new_post.network.config.resource_sections[i].name) {
        title = P.old_new_post.network.config.resource_sections[i].title;
      }
    }

    if (!title) {
      alert("New note creation failed. The resource section is not found!");
      P.top_bar.loadQaSite();
      return;
    }

    var school = P.old_new_post.network.school_ext
    var term = P.old_new_post.network.term.toLowerCase().replace(/\s+/g, "") || "other";
    var shortNumber = P.old_new_post.network.short_number;
    var subject = resource_info['title'] + " has been added to class resources page under " + title;
    var html = "";
    html += "The teaching staff has posted a new " + title + " resource."
    html += "<br /><br />Title: " + resource_info['title'] + "<br />";
    if (url != "") html += '<a href="' + url + '" target="_blank">' + url + "</a><br />";
    if (resource_info['date']) {
      if (resource_info['section'] == 'lecture notes')
        html += "<br/> Lecture date: " + resource_info['date'];
      else
        html += "<br/> Due date: " + resource_info['date'];
    }
    html += "<br /><br />";
    html += 'You can view it on the course page: '
    html += '<a href="https://piazza.com/' + school + '/' + term + '/' + shortNumber + '/resources" target="_blank">https://piazza.com/' + school + '/' + term + '/' + shortNumber + '/resources</a>'
    html += '<br />';
    P.old_new_post.showNewPost(html);
    $('#post_summary').val(subject);
  },
  hideNewPost: function(showHomeScreen) {
    $("#old_new_post_window").hide();
    PEM.fire("hideDrafts");
    clearTimeout(P.old_new_post.searchTimeoutInterval);
    if (showHomeScreen)
      PEM.fire("showHomescreen");
  },
  pushNetworkMessage: function(message) {
    if (message.action === "sections_update" && message.section_list) {
      // populate section names
      net = P.old_new_post.network;
      net.sectionNames = {};
      net.subGroups = [];
      net.showAllGroups = false;
      net.config.class_sections.section_list = message.section_list;
      if (P.top_bar.user.config.feed_groups && net.config.class_sections.section_list) {
        for (var j = 0; j < net.config.class_sections.section_list.length; j++) {
          var sect = net.config.class_sections.section_list[j];
          net.sectionNames[sect.id] = sect.name;
          if (P.top_bar.user.config.feed_groups.exist(sect.id)) {
            net.subGroups.push(sect);
          }
        }
        if (net.subGroups.length > 1) {
          net.showAllGroups = true;
        }
      }
    }
    if (message.action === "folders_update" && message.folders) {
      if (!$("#old_new_post_window").is(":visible")) return;
      P.old_new_post.network.folders = message.folders;
      P.old_new_post.network.config.disable_folders = message.disable_folders;
      P.old_new_post.hasManyFolders = null;
      P.old_new_post.onFoldersResize();
    }
  },

  init: function(module) {
    P.old_new_post.template = module.template;
    PEM.addListener("network", P.old_new_post.setNetwork);
    PEM.addListener("show_new_post", P.old_new_post.showNewPost);
    PEM.addListener("clone_new_poll", P.old_new_post.cloneNewPollVerify);
    PEM.addListener("content", function(){P.old_new_post.hideNewPost(false)});
    PEM.addListener("cleanDashboard", P.old_new_post.cleanDashboard);
    PEM.addListener("newMustReads", P.old_new_post.showMustReadsWarning);
    PEM.addListener("pushNetworkMessage", P.old_new_post.pushNetworkMessage);
    if (module.options.user)
      P.old_new_post.user = module.options.user;
    if (module.options.network) {
      P.old_new_post.setNetwork(module.options.network);
    }
    window.addEventListener('resize', P.old_new_post.onFoldersResize, { passive: true });
  }
};
P.history_slider = {
  network:null,
  content:null,
  user:null,
  template:null,
  slider:null,
  curHistory:null,
  highlight:null,
  tooltipTimeout:1500,

  recentActivityTemplates: {update:"updated the %w",
    s_answer: "started off the students' response", i_answer: "started off the instructors' response",
    question_update: "edited the question", note_update: "edited the note",
    attach: "added attachment", dupe: "marked duplicate to this %w",
    s_answer_update: "enhanced the students' response", i_answer_update: "enhanced the instructors' response",
    followup: "asked a follow-up question", feedback: "added a comment to the followup discussion",
    tag_endorse_add: "endorsed the %w", tag_endorse_remove: "un-endorsed the %w",
    tag_flag_add: "flagged the %w", tag_flag_remove: "un-flagged the %w",
    tag_good_add: "thinks this is a good %w", tag_good_remove: "no longer thinks this is a good %w",
    tag_disagree_add: "disagrees with %w", tag_disagree_remove: "no longer disagrees with %w"
  },
  contentTypes: {
    question: "Question", note: "Note", poll: "Poll",
    s_answer: "students' response", i_answer: "instructors' response"
  },
  banned_cache: {},
  setNetwork: function(network) {
    P.history_slider.network = network;
  },
  setContent: function(content) {
    P.history_slider.banned_cache = {};
    P.history_slider.content = content;
    if (!content) return;
    var haveHistory = false;
    var max = 0;
    if (content && content.change_log) {
      // first get rid of non-existant followups
      var followupCount = 0;
      var replyCount = 0;
      for (var i = 0; i < content.children.length; i++) {
        var c = content.children[i];
        if (c.type == "followup") {
          followupCount += 1;
          replyCount += c.children.length;
        }
      }
      var cl = content.change_log;
      var lastV = false;
      for (var i = 0; i < cl.length; i++) {
        if (cl[i].v && cl[i].v != lastV) {
          cl[i].vis = cl[i].v;
          lastV = cl[i].v;
        }
        if (cl[i].type == "followup") {
          if (followupCount > 0)
            followupCount -= 1;
          else {
            cl.splice(i, 1);
            i -= 1;
          }
        }
        if (cl[i].type == "feedback") {
          if (replyCount > 0)
            replyCount -= 1;
          else {
            cl.splice(i, 1);
            i -= 1;
          }
        }
      }
      max = content.change_log.length;
      var contentType = content.type;
      P.history_slider.curHistory = null;
      contentType = contentType.charAt(0).toUpperCase() + contentType.slice(1);
      content.disabledHistory = content.tags.exist("no_history");
      haveHistory = (max > 0) && !content.disabledHistory;
      $('#history_slider_wrapper').html(P.history_slider.template({content:content,haveHistory:haveHistory, type:contentType, user:P.top_bar.user}));
      if (max > 0) {
        $('.main_panel').css("top", "26px");
        $('#history_slider').show();
      } else {
        $('.main_panel').css("top", "0px");
        $('#history_slider').hide();
      }
      P.history_slider.tooltipTimeout = 1500;
      if(P.top_bar.user.isInst) {
        $('.slider_wrapper').addClass('has_disable');
      }
    }
    if (haveHistory) {
      var red = 0;
      var feedItem = PEM.callFirst("getSelectedItem");
      if (feedItem) {
        if (feedItem.version && feedItem.main_version) {
          red = feedItem.main_version - feedItem.version;
          if (feedItem.version == 0 || (feedItem.version == 1 && feedItem.main_version > 4)) ret = 0;
        }
        feedItem.version = feedItem.main_version;
      }
      P.history_slider.slider = $('#actual_history_slider').slider({
        tooltip:'hide',
        min:0,
        max:max-1,
        value:max-1,
        red:red
      }).on('slide', function(ev){
        if (P.history_slider.slider.getValue() != P.history_slider.curHistory) {
          P.history_slider.showHistoryToolTip();
        }
      }).on('slideStop', function(ev){
        P.history_slider.hideHistoryToolTip();
      }).data('slider');
    }
  },
  showHistoryToolTip: function() {
    var val = P.history_slider.slider.getValue();
    if (isNaN(val)) {
      val = 0;
    }
    P.history_slider.curHistory = val;
    var activity = P.history_slider.content.change_log[val];
    P.history_slider.showActivity(activity);
    P.history_slider.showHistory(val);
  },
  fadeOutHistoryToolTip: function(instant) {
    if (instant) {
      $('#question_history_description_wrapper').hide();
    } else {
      $('#question_history_description_wrapper').fadeOut();
    }
    $('.attachments_item').css("border", "none");
    PEM.fire("hideHistoryHighlight");
  },
  hideHistoryToolTip: function(now) {
    P.history_slider.curHistory = null;
    if (P.history_slider.removeHistory) {
      clearTimeout(P.history_slider.removeHistory);
      P.history_slider.removeHistory = 0;
    }
    if (now) {
      P.history_slider.fadeOutHistoryToolTip(true);
    } else {
      P.history_slider.removeHistory = setTimeout(
        P.history_slider.fadeOutHistoryToolTip,
        P.history_slider.tooltipTimeout);
    }
  },
  toggleHistory: function() {
    var content = P.history_slider.content;
    var params = {cid:content.id};
    if (content.disabledHistory) { //enable
      params.hide = "no";
      content.tags.remove("no_history");
    } else { //disable
      params.hide = "yes";
      content.tags.push("no_history");
      $('#user_banner_div').val("");
      if ($('#user_ban_enabled').val()) {
        P.history_slider.toggleBan();
      }
    }
    PA.call_pj("content.show_hide_history", params, 1, function(data){
      PEM.fire("content", content);
    });
  },
  showActivity: function(activity) {
    var content = P.history_slider.content;
    var highlight = "question";
    if (activity.to) {
      for (var i = 0; i < content.children.length; i++) {
        if (activity.to == content.children[i].id) {
          content = content.children[i];
          highlight = content.type;
        }
      }
    }
    if (activity["for"]) {
      for (var i = 0; i < content.children.length; i++) {
        if (activity["for"] == content.children[i].type) {
          content = content.children[i];
          highlight = content.type;
        }
      }
    }
    var c_type = content.type;
    if (activity["for"]) c_type = activity["for"];
    var what = P.history_slider.contentTypes[c_type];
    // special case for followup
    var type = activity.type;
    if (activity.action) type = type + "_" + activity.action;
    var tmp = P.history_slider.recentActivityTemplates[type];
    if (type == "followup" || type == "dupe") highlight = "followup";
    if (type == "feedback") highlight = "feedback";
    if (type == "attach") highlight = "attach";
    if (type == "s_answer" || type == "s_answer_update") highlight = "s_answer";
    if (type == "i_answer" || type == "i_answer_update") highlight = "i_answer";
    if (type == 'create') {
      if (content.type == 'question') tmp = 'asked a question';
      if (content.type == 'note') tmp = 'posted a note';
      if (content.type == 'poll') tmp = 'posted a poll';
    }
    if (activity.vis) tmp += ' (visibility: ' + activity.vis + ')';
    if (tmp) tmp = tmp.replace(/%w/g, what);
    var pic = "";
    var user_name = "Anonymous";
    var is_student = true;
    if (type == "attach") {
      pic = PA.getUserPic()
    } else {
      user_name = PA.getUserName(activity.uid, activity.anon, false, false, false, activity.uid_a);
      pic = PA.getUserPic(activity.uid, activity.uid_a);
      if (PA.users[activity.uid]) {
        is_student = PA.users[activity.uid].role === 'student' || PA.users[activity.uid].role === '';
      }
    }
    if ($('#user_ban_enabled').val()) {
      P.history_slider.showBanned(activity.is_banned);
      $('#user_name_to_ban').html(user_name);
      $('#user_banner_div').show();
      if (is_student) {
        $('#user_banner_prof').hide();
        $('#user_banner_stud').show();
      } else {
        $('#user_banner_prof').show();
        $('#user_banner_stud').hide();
      }
    } else {
      $('#user_banner_div').hide();
    }
    tmp = user_name + " " + tmp;
    $('#question_history_image').html(pic);
    $('#question_history_timestamp').html(activity.when.toRelativeTime());
    $('#question_history_data').html(tmp + ". ");
    $('#question_history_description_wrapper').show();
    P.history_slider.highlight = highlight;
  },
  showHistory: function(val) {
    var history = {q_idx:0,sa_idx:0,ia_idx:0,hide_followups:0,hide_feedbacks:0,hide_attach:0,
              hide:{},tag_good:{},tag_endorse_i:{},tag_endorse_s:{}, idx:val};
    // calculate what to hide
    for (var i = val + 1; i < P.history_slider.content.change_log.length; i++) {
      var item = P.history_slider.content.change_log[i];
      if (item.type == "s_answer" || item.type == "s_answer_update") history.sa_idx++;
      if (item.type == "i_answer" || item.type == "i_answer_update") history.ia_idx++;
      if (item.type == "question" || item.type == "update") history.q_idx++;
      if (item.type == "tag_good") history.tag_good[item.uid] = 1;
      if (item.type == "tag_endorse" && item["for"] == "i_answer") history.tag_endorse_i[item.uid] = 1;
      if (item.type == "tag_endorse" && item["for"] == "s_answer") history.tag_endorse_s[item.uid] = 1;
      if (item.type == "followup") history.hide_followups++;
      if (item.type == "feedback") history.hide_feedbacks++;
      if (item.type == "attach") history.hide_attach++;
    }
    history.highlight = P.history_slider.highlight;
    PEM.fire("history", history);
    // special handing of attachments
    $('.attachments_item').css("border", "none");
    var allAttach = [];
    for (var id in ATTACHMENTS)
      allAttach.push({id:id,u:ATTACHMENTS[id].updated});
    allAttach = allAttach.sort(function(a,b){
      if(a.u > b.u) return -1;
      if(a.u < b.u) return 1;
      return 0;
    });
    // hide unneeded attachments
    $('.attachments_item').show();
    for (var i = 0; i < history.hide_attach; i++)
      $('#attach_' + allAttach[i].id).hide();
    if (history.highlight == "attach") {
      if (history.hide_attach < allAttach.length) {
        $('#attach_' + allAttach[history.hide_attach].id).css("border-top","2px solid #0f0");
        $('#attach_' + allAttach[history.hide_attach].id).css("border-bottom","2px solid #0f0");
        $('.main_panel').scrollTo('#attach_' + allAttach[history.hide_attach].id);
      }
    }
    if ($('#user_ban_enabled').val()) {
      $('.userBannerText').html("Close Ban User Console");
    }
  },
  setUser: function(user) {
    P.history_slider.user = user;
  },
  addBanned: function(params) {
    if (P.history_slider.content.id === params.cid) {
      P.history_slider.banned_cache[params.idx] = params.expires;
      if (P.history_slider.slider.getValue() === params.idx) {
        P.history_slider.showBanned();
      }
    }
  },
  showBanned: function(is_banned) {
    var ban = P.history_slider.banned_cache[P.history_slider.slider.getValue()];
    if (ban === null || ban === undefined) {
      ban = is_banned;
    }
    var d = P.clock.getLocalDiff(ban);
    if (d < 10000) { // Allow for 10s error.
      $('#user_is_banned').show();
      $('#user_is_not_banned').hide();
    } else {
      $('#user_is_banned').hide();
      $('#user_is_not_banned').show();
    }
  },
  doBan: function(unban) {
    var params = {
      cid:P.history_slider.content.id,
      idx:P.history_slider.slider.getValue()};
    if (unban) {
      params.days = 0;
    } else {
      params.days = $('#user_banner_type').val();
    }
    PA.call_pj("content.ban_user_from_network", params, 1, P.history_slider.addBanned);
    return false;
  },
  toggleBan: function() {
    if ($('#user_ban_enabled').val()) {
      $('#user_ban_enabled').val("");
      P.history_slider.tooltipTimeout = 1500;
      $('#user_ban_help').hide();
      $('#ban_user_console').css("font-weight", "");
      $('#ban_user_console').css("text-decoration", "");
      $('.main_panel').css("top", "26px");
      P.history_slider.hideHistoryToolTip(true);
      $('.userBannerText').html("Open Ban User Console");
    } else {
      $('#ban_user_console').css("font-weight", "bold");
      $('#ban_user_console').css("text-decoration", "underline");
      $('#user_ban_enabled').val("1");
      $('#user_ban_help').show();
      $('.main_panel').css("top", "52px");
      P.history_slider.tooltipTimeout = 150000000;
      $('.userBannerText').html("Close Ban User Console");
      P.history_slider.showHistoryToolTip();
      P.history_slider.hideHistoryToolTip();
    }
    return false;
  },
  init: function(module) {
    PEM.addListener("network", P.history_slider.setNetwork);
    PEM.addListener("content", P.history_slider.setContent);
    PEM.addListener("toggle_history", P.history_slider.toggleHistory);
    if (module.options.network)
      P.history_slider.network = module.options.network;
    P.history_slider.template = module.template;
  }
};

/*****************************************************************
 *
 *****************************************************************/


!function( $ ) {

  var Slider = function(element, options) {
    this.element = $(element);
    var ticks = "";
    for (var i = 0; i < options.max - 1; i++) {
      var percent = ((i + 1) / options.max) * 100;
      ticks += '<div class="slider-tick" style="left:' + percent + '%"></div>';
    }
    var red = "";
    if (options.red && options.red > 0) {
      // make red
      var left = 100 - (options.red / options.max) * 100;
      var width = 100 - left;
      red = '<div class="slider-red" style="left:' + left + '%;width:' + width + '%"></div>';
    }
    this.picker = $('<div class="slider">'+
              '<div class="slider-track">'+
                '<div class="slider-selection"></div>'+
                red + ticks +
                '<div class="slider-handle"></div>'+
                '<div class="slider-handle"></div>'+
              '</div>'+
              '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'+
            '</div>')
              .insertBefore(this.element)
              .append(this.element);
    this.id = this.element.data('slider-id')||options.id;
    if (this.id) {
      this.picker[0].id = this.id;
    }

    if (typeof Modernizr !== 'undefined' && Modernizr.touch) {
      this.touchCapable = true;
    }

    var tooltip = this.element.data('slider-tooltip')||options.tooltip;

    this.tooltip = this.picker.find('.tooltip');
    this.tooltipInner = this.tooltip.find('div.tooltip-inner');

    this.orientation = this.element.data('slider-orientation')||options.orientation;
    switch(this.orientation) {
      case 'vertical':
        this.picker.addClass('slider-vertical');
        this.stylePos = 'top';
        this.mousePos = 'pageY';
        this.sizePos = 'offsetHeight';
        this.tooltip.addClass('right')[0].style.left = '100%';
        break;
      default:
        this.picker.addClass('slider-horizontal');
        this.orientation = 'horizontal';
        this.stylePos = 'left';
        this.mousePos = 'pageX';
        this.sizePos = 'offsetWidth';
        this.tooltip.addClass('top')[0].style.top = -this.tooltip.outerHeight() - 14 + 'px';
        break;
    }

    this.min = this.element.data('slider-min')||options.min;
    this.max = this.element.data('slider-max')||options.max;
    this.step = this.element.data('slider-step')||options.step;
    this.value = this.element.data('slider-value')||options.value;
    if (this.value[1]) {
      this.range = true;
    }

    this.selection = this.element.data('slider-selection')||options.selection;
    this.selectionEl = this.picker.find('.slider-selection');
    if (this.selection === 'none') {
      this.selectionEl.addClass('hide');
    }
    this.selectionElStyle = this.selectionEl[0].style;


    this.handle1 = this.picker.find('.slider-handle:first');
    this.handle1Stype = this.handle1[0].style;
    this.handle2 = this.picker.find('.slider-handle:last');
    this.handle2Stype = this.handle2[0].style;

    var handle = this.element.data('slider-handle')||options.handle;
    switch(handle) {
      case 'round':
        this.handle1.addClass('round');
        this.handle2.addClass('round');
        break;
      case 'triangle':
        this.handle1.addClass('triangle');
        this.handle2.addClass('triangle');
        break;
    }

    if (this.range) {
      this.value[0] = Math.max(this.min, Math.min(this.max, this.value[0]));
      this.value[1] = Math.max(this.min, Math.min(this.max, this.value[1]));
    } else {
      this.value = [ Math.max(this.min, Math.min(this.max, this.value))];
      this.handle2.addClass('hide');
      if (this.selection == 'after') {
        this.value[1] = this.max;
      } else {
        this.value[1] = this.min;
      }
    }
    this.diff = this.max - this.min;
    this.percentage = [
      (this.value[0]-this.min)*100/this.diff,
      (this.value[1]-this.min)*100/this.diff,
      this.step*100/this.diff
    ];

    this.offset = this.picker.offset();
    this.size = this.picker[0][this.sizePos];

    this.formater = options.formater;

    this.layout();

    if (this.touchCapable) {
      // Touch: Bind touch events:
      this.picker.on({
        touchstart: $.proxy(this.mousedown, this)
      });
    } else {
      this.picker.on({
        mousedown: $.proxy(this.mousedown, this)
      });
    }

    if (tooltip === 'show') {
      this.picker.on({
        mouseenter: $.proxy(this.showTooltip, this),
        mouseleave: $.proxy(this.hideTooltip, this)
      });
    } else {
      this.tooltip.addClass('hide');
    }
  };

  Slider.prototype = {
    constructor: Slider,

    over: false,
    inDrag: false,

    showTooltip: function(){
      this.tooltip.addClass('in');
      //var left = Math.round(this.percent*this.width);
      //this.tooltip.css('left', left - this.tooltip.outerWidth()/2);
      this.over = true;
    },

    hideTooltip: function(){
      if (this.inDrag === false) {
        this.tooltip.removeClass('in');
      }
      this.over = false;
    },

    layout: function(){
      this.handle1Stype[this.stylePos] = this.percentage[0]+'%';
      this.handle2Stype[this.stylePos] = this.percentage[1]+'%';
      if (this.orientation == 'vertical') {
        this.selectionElStyle.top = Math.min(this.percentage[0], this.percentage[1]) +'%';
        this.selectionElStyle.height = Math.abs(this.percentage[0] - this.percentage[1]) +'%';
      } else {
        this.selectionElStyle.left = Math.min(this.percentage[0], this.percentage[1]) +'%';
        this.selectionElStyle.width = Math.abs(this.percentage[0] - this.percentage[1]) +'%';
      }
      if (this.range) {
        this.tooltipInner.text(
          this.formater(this.value[0]) +
          ' : ' +
          this.formater(this.value[1])
        );
        this.tooltip[0].style[this.stylePos] = this.size * (this.percentage[0] + (this.percentage[1] - this.percentage[0])/2)/100 - (this.orientation === 'vertical' ? this.tooltip.outerHeight()/2 : this.tooltip.outerWidth()/2) +'px';
      } else {
        this.tooltipInner.text(
          this.formater(this.value[0])
        );
        this.tooltip[0].style[this.stylePos] = this.size * this.percentage[0]/100 - (this.orientation === 'vertical' ? this.tooltip.outerHeight()/2 : this.tooltip.outerWidth()/2) +'px';
      }
    },

    mousedown: function(ev) {

      // Touch: Get the original event:
      if (this.touchCapable && ev.type === 'touchstart') {
        ev = ev.originalEvent;
      }

      this.offset = this.picker.offset();
      this.size = this.picker[0][this.sizePos];

      var percentage = this.getPercentage(ev);

      if (this.range) {
        var diff1 = Math.abs(this.percentage[0] - percentage);
        var diff2 = Math.abs(this.percentage[1] - percentage);
        this.dragged = (diff1 < diff2) ? 0 : 1;
      } else {
        this.dragged = 0;
      }

      this.percentage[this.dragged] = percentage;
      this.layout();

      if (this.touchCapable) {
        // Touch: Bind touch events:
        $(document).on({
          touchmove: $.proxy(this.mousemove, this),
          touchend: $.proxy(this.mouseup, this)
        });
      } else {
        $(document).on({
          mousemove: $.proxy(this.mousemove, this),
          mouseup: $.proxy(this.mouseup, this)
        });
      }

      this.inDrag = true;
      var val = this.calculateValue();
      this.element.trigger({
          type: 'slideStart',
          value: val
        }).trigger({
          type: 'slide',
          value: val
        });
      return false;
    },

    mousemove: function(ev) {

      // Touch: Get the original event:
      if (this.touchCapable && ev.type === 'touchmove') {
        ev = ev.originalEvent;
      }

      var percentage = this.getPercentage(ev);
      if (this.range) {
        if (this.dragged === 0 && this.percentage[1] < percentage) {
          this.percentage[0] = this.percentage[1];
          this.dragged = 1;
        } else if (this.dragged === 1 && this.percentage[0] > percentage) {
          this.percentage[1] = this.percentage[0];
          this.dragged = 0;
        }
      }
      this.percentage[this.dragged] = percentage;
      this.layout();
      var val = this.calculateValue();
      this.element
        .trigger({
          type: 'slide',
          value: val
        })
        .data('value', val)
        .prop('value', val);
      return false;
    },

    mouseup: function(ev) {
      if (this.touchCapable) {
        // Touch: Bind touch events:
        $(document).off({
          touchmove: this.mousemove,
          touchend: this.mouseup
        });
      } else {
        $(document).off({
          mousemove: this.mousemove,
          mouseup: this.mouseup
        });
      }

      this.inDrag = false;
      if (this.over == false) {
        this.hideTooltip();
      }
      this.element;
      var val = this.calculateValue();
      this.element
        .trigger({
          type: 'slideStop',
          value: val
        })
        .data('value', val)
        .prop('value', val);
      return false;
    },

    calculateValue: function() {
      var val;
      if (this.range) {
        val = [
          (this.min + Math.round((this.diff * this.percentage[0]/100)/this.step)*this.step),
          (this.min + Math.round((this.diff * this.percentage[1]/100)/this.step)*this.step)
        ];
        this.value = val;
      } else {
        val = (this.min + Math.round((this.diff * this.percentage[0]/100)/this.step)*this.step);
        this.value = [val, this.value[1]];
      }
      return val;
    },

    getPercentage: function(ev) {
      if (this.touchCapable) {
        ev = ev.touches[0];
      }
      var percentage = (ev[this.mousePos] - this.offset[this.stylePos])*100/this.size;
      percentage = Math.round(percentage/this.percentage[2])*this.percentage[2];
      return Math.max(0, Math.min(100, percentage));
    },

    getValue: function() {
      if (this.range) {
        return this.value;
      }
      return this.value[0];
    },

    setValue: function(val) {
      this.value = val;

      if (this.range) {
        this.value[0] = Math.max(this.min, Math.min(this.max, this.value[0]));
        this.value[1] = Math.max(this.min, Math.min(this.max, this.value[1]));
      } else {
        this.value = [ Math.max(this.min, Math.min(this.max, this.value))];
        this.handle2.addClass('hide');
        if (this.selection == 'after') {
          this.value[1] = this.max;
        } else {
          this.value[1] = this.min;
        }
      }
      this.diff = this.max - this.min;
      this.percentage = [
        (this.value[0]-this.min)*100/this.diff,
        (this.value[1]-this.min)*100/this.diff,
        this.step*100/this.diff
      ];
      this.layout();
    }
  };

  $.fn.slider = function ( option, val ) {
    return this.each(function () {
      var $this = $(this),
        data = $this.data('slider'),
        options = typeof option === 'object' && option;
      if (!data)  {
        $this.data('slider', (data = new Slider(this, $.extend({}, $.fn.slider.defaults,options))));
      }
      if (typeof option == 'string') {
        data[option](val);
      }
    })
  };

  $.fn.slider.defaults = {
    min: 0,
    max: 10,
    step: 1,
    orientation: 'horizontal',
    value: 5,
    selection: 'before',
    tooltip: 'show',
    handle: 'round',
    formater: function(value) {
      return value;
    }
  };

  $.fn.slider.Constructor = Slider;

}( window.jQuery );


;(function($){var h=$.scrollTo=function(a,b,c){$(window).scrollTo(a,b,c)};h.defaults={axis:'xy',duration:parseFloat($.fn.jquery)>=1.3?0:1,limit:true};h.window=function(a){return $(window)._scrollable()};$.fn._scrollable=function(){return this.map(function(){var a=this,isWin=!a.nodeName||$.inArray(a.nodeName.toLowerCase(),['iframe','#document','html','body'])!=-1;if(!isWin)return a;var b=(a.contentWindow||a).document||a.ownerDocument||a;return/webkit/i.test(navigator.userAgent)||b.compatMode=='BackCompat'?b.body:b.documentElement})};$.fn.scrollTo=function(e,f,g){if(typeof f=='object'){g=f;f=0}if(typeof g=='function')g={onAfter:g};if(e=='max')e=9e9;g=$.extend({},h.defaults,g);f=f||g.duration;g.queue=g.queue&&g.axis.length>1;if(g.queue)f/=2;g.offset=both(g.offset);g.over=both(g.over);return this._scrollable().each(function(){if(e==null)return;var d=this,$elem=$(d),targ=e,toff,attr={},win=$elem.is('html,body');switch(typeof targ){case'number':case'string':if(/^([+-]=)?\d+(\.\d+)?(px|%)?$/.test(targ)){targ=both(targ);break}targ=$(targ,this);if(!targ.length)return;case'object':if(targ.is||targ.style)toff=(targ=$(targ)).offset()}$.each(g.axis.split(''),function(i,a){var b=a=='x'?'Left':'Top',pos=b.toLowerCase(),key='scroll'+b,old=d[key],max=h.max(d,a);if(toff){attr[key]=toff[pos]+(win?0:old-$elem.offset()[pos]);if(g.margin){attr[key]-=parseInt(targ.css('margin'+b))||0;attr[key]-=parseInt(targ.css('border'+b+'Width'))||0}attr[key]+=g.offset[pos]||0;if(g.over[pos])attr[key]+=targ[a=='x'?'width':'height']()*g.over[pos]}else{var c=targ[pos];attr[key]=c.slice&&c.slice(-1)=='%'?parseFloat(c)/100*max:c}if(g.limit&&/^\d+$/.test(attr[key]))attr[key]=attr[key]<=0?0:Math.min(attr[key],max);if(!i&&g.queue){if(old!=attr[key])animate(g.onAfterFirst);delete attr[key]}});animate(g.onAfter);function animate(a){$elem.animate(attr,f,g.easing,a&&function(){a.call(this,e,g)})}}).end()};h.max=function(a,b){var c=b=='x'?'Width':'Height',scroll='scroll'+c;if(!$(a).is('html,body'))return a[scroll]-$(a)[c.toLowerCase()]();var d='client'+c,html=a.ownerDocument.documentElement,body=a.ownerDocument.body;return Math.max(html[scroll],body[scroll])-Math.min(html[d],body[d])};function both(a){return typeof a=='object'?a:{top:a,left:a}}})(jQuery);
P.special_mentions = {
  template: null,
  hof: null,
  avg: null,
  users_7: 0,
  online_users: 0,
  user: null,
  isHidden: false,
  showTechTour: false,
  uploading: false,
  
  initEventHandlers: function() {
    var currentYear = (new Date()).getFullYear();
    $('#copyright_year').text(currentYear);
    $(".report_bug").unbind().click(function() {
      PEM.fire("showBugReport");
    });
    $(".special_mentions_visibility").unbind().click(function() {
      P.special_mentions.toggleStats();
    });
    if (P.top_bar.showSearch && (!P.top_bar.user.isInst || P.top_bar.user.isTA)) {
      $('#search_mention_major').autoComplete({
        minChars: 2,
        onTop: true,
        source: function(term, suggest){
          term = term.toLowerCase();
          var choices = P.top_bar.majors;
          var matches = [];
          for (i=0; i<choices.length; i++)
            if (~choices[i].toLowerCase().indexOf(term) && matches.length < 20)
              matches.push(choices[i]);
          suggest(matches);
        }
      });
      $('#search_mention_school').autoComplete({
        minChars: 2,
        onTop: true,
        source: function(term, suggest){
          term = term.toLowerCase();
          var choices = P.top_bar.schools;
          var matches = [];
          for (i=0; i<choices.length; i++)
            if (~choices[i].toLowerCase().indexOf(term) && matches.length < 20)
              matches.push(choices[i]);
          suggest(matches);
        }
      });
      $('#search_mention_school').val(P.top_bar.userProfile.school);
      if (P.top_bar.userProfile.academics.major)      
        $('#search_mention_major').val(P.top_bar.userProfile.academics.major.split(", ")[0]);
      var classes = "";
      for (var i = 0; i < P.top_bar.user.networks.length; i++)
        if (P.top_bar.user.networks[i].status == "active")
          classes = classes + (classes.length > 0 ? ",":"") + P.top_bar.user.networks[i].course_number;
      $('#search_mention_class').val(classes);
      $('#student_search_toolbar').show();
      $('#special_mentions_regular').hide();
      $('#special_mentions').addClass('student_search_special_mentions');
    }
  },

  setUser: function(user) {
    P.special_mentions.user = user;
  },

  setHof: function(info) {
    P.special_mentions.hof = info.hof;
    P.special_mentions.avg = info.avg;
    P.special_mentions.users_7 = info.users_7;
    P.special_mentions.ensure_users_7();
    P.special_mentions.setSpecialMentions();
  },
  ensure_users_7: function() {
    var online_users = P.special_mentions.online_users;
    var users_7 = P.special_mentions.users_7;
    if (!users_7 || online_users > users_7) {
      if (PA.staticContent)
        online_users += Math.floor(10*Math.random());
      P.special_mentions.users_7 = online_users;
    }
  },
  updateOnlineUsers: function(data) {
    P.special_mentions.online_users = data.users;
    P.special_mentions.ensure_users_7();
    $("#users_online_stat").html(P.special_mentions.online_users);
    $("#users_7_stat").html(P.special_mentions.users_7);
  },
  setSpecialMentions: function() {
    var none = true;
    var contentText = "";
    var ba = null;
    var whoa = false;
    var time = 0;
    var when = null;
    if (P.special_mentions.hof && P.special_mentions.hof.best_answer && P.special_mentions.hof.best_answer.length > 0) {
      for (var i = 0; i < P.special_mentions.hof.best_answer.length && i < 1; i++) {
        ba = P.special_mentions.hof.best_answer[i];
        if (!ba || ba.time < 2) continue;
        none = false;
        if (ba.time < 60) whoa = true;
        var text = ba.text.split(' ');
        if (text.length > 4)
          contentText = text.slice(0,4).join(" ") + "...";
        else
          contentText = ba.text;
        time = showSecs(ba.time);
        if (ba.when && ba.when > 0)
          when = new Date(ba.when * 1000);
      }
    }
    var avg = "N/A";
    if (P.special_mentions.avg) {
      if (P.special_mentions.avg < 60*60*3)
        avg = showSecs(P.special_mentions.avg);
      else
        avg = ">3 hr";
    }
    var params = {
      none: none,
      ba: ba,
      whoa: whoa,
      when: when,
      time: time,
      contentText: contentText,
      online_users: P.special_mentions.online_users,
      users_7: P.special_mentions.users_7,
      avg: avg
    }
    if (P.special_mentions.isHidden) return;
    $("#special_mentions").replaceWith(P.special_mentions.template(params));
    if (P.special_mentions.user && P.special_mentions.user.config && P.special_mentions.user.config.hide_stats)
      P.special_mentions.hideStats();
    else
      P.special_mentions.showStats();
    P.special_mentions.initEventHandlers();
  },

  toggleStats: function() {
    if ($('#page_bottom_bar').is(':visible')) {
      P.special_mentions.hideStats();
      PA.call_pj('user.set', {stat:'hide_stats', val:'yes'}, 1);
      PA.user.config.hide_stats = 'yes';
    } else {
      P.special_mentions.showStats();
      PA.call_pj('user.unset', {stat:'hide_stats'}, 1);
      PA.user.config.hide_stats = null;
    }
  },
  hideStats: function() {
    P.special_mentions.maybeShowTechTour();    
    $(".special_mentions_visibility.hide").hide();
    $('#page_bottom_bar').hide();
    $('#page_center').css("bottom", "0px");
    $(".special_mentions_visibility.show").show();
  },
  showStats: function() {
    P.special_mentions.maybeShowTechTour();    
    $(".special_mentions_visibility.show").hide();
    $('#page_bottom_bar').show();
    $('#page_center').css("bottom", "74px");
    $(".special_mentions_visibility.hide").show();
  },
  hideBar: function() {
    P.special_mentions.maybeShowTechTour();
    P.special_mentions.isHidden = true;
    $('#page_bottom_bar').hide();
    $('#page_center').css("bottom", "0px");
    $(".special_mentions_visibility").hide();
  },
  showBar: function() {
    P.special_mentions.maybeShowTechTour();    
    P.special_mentions.isHidden = false;
    P.special_mentions.setSpecialMentions();
  },
  runSearch: function() {
    var params = {};
    if ($('#search_mention_major').val())
      params.major = [$('#search_mention_major').val()];
    if ($('#search_mention_class').val())
      params.class = $('#search_mention_class').val().split(",");
    if ($('#search_mention_school').val())
      params.school = [$('#search_mention_school').val()];
    params.searchType = "" + P.top_bar.showSearch + "_SM_";
    var param = encodeURI(JSON.stringify(params));
    var link = '/careers/dashboard#/search_beginner/q/' + param;
    window.open(link);
    return false;
  },
  init: function(module) {
    P.special_mentions.hideBar();    
    PEM.addListener("newHof", P.special_mentions.setHof);
    PEM.addListener("online_users", P.special_mentions.updateOnlineUsers);
    PEM.addListener("hideSpecialMentions", P.special_mentions.hideBar);
    PEM.addListener("showSpecialMentions", P.special_mentions.showBar);
    if (module.options.user)
      P.special_mentions.user = module.options.user;
    P.special_mentions.template = module.template;
  },
  maybeShowTechTour: function(){
    if (P.homescreen.user && P.homescreen.user.isInst && (typeof(from)==='undefined' || from != "careers")) {
      if (!PA.isSeenUser("ghc_2019") 
          && (!P.homescreen.user.config[P.homescreen.techtourViewCounter] || P.homescreen.user.config[P.homescreen.techtourViewCounter] < P.homescreen.tech_tour_num_shows)
          && P.homescreen.user.isTA 
          && ((!P.homescreen.user.config) || (!P.homescreen.user.config.ghc_2019)) 
          && P.homescreen.network.type !== "no-verify"
          && P.homescreen.techtourIsLive
          && !PA.isProfessor() 
          && P.homescreen.inGHCAudience()
        ) {
        if(P.homescreen.user.config) {
          if (P.homescreen.user.config[P.homescreen.techtourViewCounter]) {
            if(P.homescreen.user.config[P.homescreen.techtourViewCounter] < P.homescreen.tech_tour_num_shows) {
              P.special_mentions.showTechTour = true;
            } else {
              P.special_mentions.showTechTour = false;
            }
          } else {
            P.special_mentions.showTechTour = true;
          }
        } else {
          P.special_mentions.showTechTour = true;
        }
      } else {
        P.special_mentions.showTechTour = false;
      }
    } else {
      if (!PA.isSeenUser("ghc_2019")
          && P.homescreen.user
          && (!P.homescreen.user.config[P.homescreen.techtourViewCounter] || P.homescreen.user.config[P.homescreen.techtourViewCounter] < P.homescreen.tech_tour_num_shows)
          && ((!P.homescreen.user.config) || (!P.homescreen.user.config.ghc_2019))
          && P.homescreen.network.type !== "no-verify"
          && P.homescreen.techtourIsLive
          && !PA.isProfessor()
          && P.homescreen.inGHCAudience()
        ) {
        if(P.homescreen.user.config) {
          if (P.homescreen.user.config[P.homescreen.techtourViewCounter]) {
            if(P.homescreen.user.config[P.homescreen.techtourViewCounter] < P.homescreen.tech_tour_num_shows) {
              P.special_mentions.showTechTour = true;                            
            } else {
              P.special_mentions.showTechTour = false;                
            }
          } else {
            P.special_mentions.showTechTour = true;
          }
        } else {
          P.special_mentions.showTechTour = true;           
        }        
      } else {
          P.special_mentions.showTechTour = false;
      }
    }
    
    if(P.special_mentions.showTechTour){
      $("#special_mentions_techtour").show();
      $("#special_mentions_regular").hide();
    } else {
      $("#special_mentions_techtour").hide();
      $("#special_mentions_regular").show();
    }
  },
  markGHC: function() {
    PA.call_pj("user_profile.update_profile_tags", {add: ["ghc_2019"]}, null, function(data){
      P.special_mentions.dismissTechTour();
    });
  },
  dismissTechTour: function(){
    $("#special_mentions_techtour").hide();
    $("#special_mentions_regular").show();
    PA.markSeenUnseen("ghc_2019");
  },
  startUpload: function(){
    P.special_mentions.uploading = true;
    $.blockUI();
    PA.call_pj("generic.page_event", {type:"careers_student.upload_resume", text1:"special_mentions"}, 1);
    $('#upload_form_tt').submit();
  },
  onUploadComplete: function() {
    if (!P.special_mentions.uploading) return false;
    P.special_mentions.uploading = false;
    $.unblockUI();
    var content = $('#hidden-upload-frame-tt').contents().find('body').html();
    if (P.homescreen.profile)
      P.homescreen.profile.resume = content;
    $('#upload_resume_button-tt').replaceWith('<p class="upload_resume_button profile_status_message">Resume Uploaded</p>');
    window.location = "/techtour?step=two";
  }, 
  closeTechTourVideo: function() {
    $('#youtube_iframe').attr('src', '');
  }, 
  openTechTourVideo: function() {
    $('#youtube_iframe').attr('src', '//www.youtube-nocookie.com/embed/qVuprSMlZ38?rel=0&controls=1&showinfo=0&autoplay=1');
  }
};

P.careers_nagbar = {
  shown:{},
  initEventHandlers: function(base) {

    base.find('.skip_button').click(function(){
      var test = $(this).closest('.profile_prompt_option').attr('test');
      P.careers_nagbar.profile.skip[test] = true;
      PA.call_pj("user_profile.update_profile", {set:{skip:P.careers_nagbar.profile.skip}, div_id:"nagbar_skip"}, 1);
      P.careers_nagbar.updateNagbar(P.careers_nagbar.profile);
      return false;
    });
    base.find('.next_on_click').click(function(){
      var top = $(this).closest(".nagbar_section");
      top.find('.input_with_button').show();
      top.find('.skip_button').hide();
      top.find('.next_button').show();
    });
    base.find('.next_button').click(function(){
      P.careers_nagbar.saveThis($(this));
    });
    base.find('.clone_parent_button').click(function(){
      P.careers_nagbar.cloneFunction(this);
    });
    $('.upload_resume_link').click(function(){
      $('#upload_form_file').click();
      return false;
    });
    /*
    base.find('input.save_on_click').click(function(){
      P.careers_nagbar.saveThis($(this));
    });
    base.find('input.save_on_enter').keypress(function(e) {
      if (e.which == 13) {
        P.careers_nagbar.saveThis($(this));
      }
    });
    base.find('input.yes_button').click(function(){
      var helper = $(this).closest('.profile_prompt_option').attr('helper');
      if (helper) {
        base.find('#' + helper).show();
        base.find('.profile_content_input').show();
      }
    });
    base.find('.save_and_close').click(function(){
      var top = $(this).closest('.profile_content_input_item_wrapper');
      PEM.fire("saveSection", {top:top, noShow:true});
    });
    base.find('.add_section').click(function(){
      var oldElement = $($(this).closest('.profile_content_input_item_wrapper').find('.profile_content_input_item')[0]);
      var newElement = oldElement.clone();
      newElement.find("input, textarea").each(function(){$(this).val("")});
      $(this).before(newElement);
    });
*/
  },
  cloneFunction: function(element) {
    var oldElement = $(element).parent();
    var newElement = oldElement.clone();
    newElement.find("input").each(function(){$(this).val("")});
    oldElement.find(".clone_parent_button").hide();
    oldElement.after(newElement);
    newElement.find('.clone_parent_button').click(function(){
      P.careers_nagbar.cloneFunction(this);
    });
  },
  saveThis: function(element) {
    var top = element.closest('.profile_prompt_option');
    if (top.length == 0)
      top = element.closest('.profile_content_input_item_wrapper');
    var test = top.attr('test');
    if (test == "noResumeOrLink" || test == "noMajor") {
      P.careers_nagbar.profile.skip[test] = true;
      PA.call_pj("user_profile.update_profile", {set:{skip:P.careers_nagbar.profile.skip}, div_id:"nagbar_skip"}, 1);
    }
    PEM.fire("saveSection", {top:top, noShow:true});
  },
  showNagbar: function(div) {
    if (!div && P.careers_nagbar.div) $(P.careers_nagbar.div).hide();
    P.careers_nagbar.div = div;
    if (!div) {
      $(P.careers_nagbar.div).html('');
      return;
    }
    P.modules.getData("user_profile", null, function(data){
      var pro = PEM.callFirst("loadMyProfile");
      if (pro) P.careers_nagbar.updateNagbar(pro);
    });
  },
  startUpload: function() {
    P.careers_nagbar.uploading = true;
    $.blockUI();
    $('#upload_form').submit();
  },
  onUploadComplete: function() {
    if (!P.careers_nagbar.uploading) return false;
    P.careers_nagbar.uploading = false;
    $.unblockUI();
    var content = $('#hidden-upload-frame').contents().find('body').html();
    P.careers_nagbar.profile.resume = content;
    $('.upload_resume_link').html("File uploaded.");
  },
  setProgram: function(program) {
    $('#main_program_input').val(program);
    $('#main_program').html(program);
    return false;
  },
  updateNagbar: function(profile) {
    if (P.careers_nagbar.div) {
      if (!profile.skip) profile.skip = {};
      P.careers_nagbar.profile = profile;
      profile.profileProgress10 = profile.profileProgress / 10;
      var base = $(P.careers_nagbar.div);
      base.hide();
      base.html(P.careers_nagbar.template({profile:profile}));
      P.careers_nagbar.initEventHandlers(base);
      var found = false;
      var skipped = false;
      var options = base.find(".profile_prompt_option");
      var curStep = 1;
      var optId = "";
      for (var i = 0; i < options.length; i++) {
        var opt = $(options[i]);
        var test = opt.attr("test");
        if (profile[test]) {
          if (profile.skip[test]) {
            skipped = true;
            continue;
          }
          found = true;
          curStep = i + 1;
          opt.show();
          optId = opt.attr("id");
          if (test == "noGradYear") {
            if (!profile.noProgram) {
              opt.find("#main_program").text(profile.academics.program);
            }
          }
          if (test == "noGradYearOrProgram") {
            if (!profile.noGradYear) opt.find("input[value=" + profile.academics.grad_year + "]").attr('checked', true);
            if (!profile.noProgram) {
              opt.find("#main_program").text(profile.academics.program);
            }
            opt.find('.skip_button').hide();
            opt.find('.next_button').show();
          }
          if (test == "noResumeOrLink") {
            if (profile.links.linkedin || profile.contact.website || profile.resume) {
              opt.find('.skip_button').hide();
              opt.find('.next_button').show();
            }
          }
          break;
        }
      }
      if (found) {
        base.show();
        base.find(".progress_number").html(curStep);
        base.find(".progress .bar").css("width", (curStep) * 20 + "%");
        if (optId && !P.careers_nagbar.shown[optId]) {
          var text3 = "careers";
          if (P.top_bar.isDashboard) text3 = "dashboard";
          PA.call_pj("generic.page_event", {type:"nagbar.display",text1:optId, text2:PA.user.id, text3:text3}, 1);
          P.careers_nagbar.shown[optId] = 1;
        }
      }// else {
       // if (skipped) {
       //   profile.skip = {};
       //   PA.call_pj("user_profile.update_profile", {set:{skip:P.careers_nagbar.profile.skip}}, 1);
       //   P.careers_nagbar.updateNagbar(profile);
       // }
      //}
    }
  },

  init: function(module) {
    P.careers_nagbar.template = module.template;
    if (module.options.user)
      P.careers_nagbar.user = module.options.user;
    PEM.addListener("profileChange", P.careers_nagbar.updateNagbar);
    PEM.addListener("showNagbar", P.careers_nagbar.showNagbar);
  }

};

P.conflict_answer = {

  cancelCallback: null,
  submitCallback: null,

  initHandlers: function() {
  },
  submit: function() {
    if (P.conflict_answer.submitCallback)
      P.conflict_answer.submitCallback.call(window, $('#conflictServerResponse').val());
  },
  submitMine: function() {
    if (P.conflict_answer.submitCallback)
      P.conflict_answer.submitCallback.call(window, $('#conflictMyResponse').val());
  },
  cancel: function() {
    if (P.conflict_answer.cancelCallback)
      P.conflict_answer.cancelCallback.call(window);
  },
  showConflict: function(params) {
    $('#concurrency_conflict_dialog').jqmShow();
    $('#conflictServerResponse').val(params.otherText);
    $('#conflictMyResponse').val(params.myText);
    $('#conflictMyResponse').focus();
    P.conflict_answer.submitCallback = params.submit;
    P.conflict_answer.cancelCallback = params.cancel;
    return false;
  },

  init: function(module) {
    $("body").append(module.template());
    $('#concurrency_conflict_dialog').jqm();
    P.conflict_answer.initHandlers()

    PEM.addListener("showConflict", P.conflict_answer.showConflict);
  }

};
P.conflict_post = {

  cancelCallback: null,
  submitCallback: null,

  initHandlers: function() {
  },
  submit: function() {
    var isValidSubject = P.conflict_post.validateSubject();
    if (isValidSubject) {
      $('#concurrency_conflict_dialog_post').jqmHide();
      if (P.conflict_post.submitCallback)
        P.conflict_post.submitCallback.call(window, $('#conflictServerPostSubject').val(), $('#conflictServerPost').val());
    }
    return false;
  },
  cancel: function() {
    $('#concurrency_conflict_dialog_post').jqmHide();
    if (P.conflict_post.cancelCallback)
      P.conflict_post.cancelCallback.call(window);
    return false;
  },
  showConflict: function(params) {
    $("#concurrency_conflict_dialog_post").removeClass("has_error");
    $('#concurrency_conflict_dialog_post').jqmShow();
    $('#conflictServerPost').val(params.otherText);
    $("#conflictServerPostSubject").val(params.otherSubject);
    $('#conflictMyPost').val(params.myText);
    $("#conflictMyPostSubject").val(params.mySubject);
    $('#conflictServerPost').focus();
    P.conflict_post.submitCallback = params.submit;
    P.conflict_post.cancelCallback = params.cancel;
    return false;
  },
  validateSubject: function() {
    var isValid = true
    var subject = $("#concurrency_conflict_dialog_post #conflictServerPostSubject").val()
    if (subject.length <= 0) {
      $("#concurrency_conflict_dialog_post").find(".error_message.no_summary").addClass("show");
      $("#concurrency_conflict_dialog_post").find(".error_message.long_summary").removeClass("show");
      isValid = false;
    }
    else if (subject.length > 100) {
      $("#concurrency_conflict_dialog_post").find(".error_message.long_summary").addClass("show");
      $("#concurrency_conflict_dialog_post").find(".error_message.no_summary").removeClass("show");
      isValid = false
    }
    else {
      $("#concurrency_conflict_dialog_post").find(".error_message.long_summary").removeClass("show");
      $("#concurrency_conflict_dialog_post").find(".error_message.no_summary").removeClass("show"); 
    }
    if (!isValid) {
      $("#concurrency_conflict_dialog_post").addClass("has_error");
    }
    return isValid;
  },
  init: function(module) {
    $("body").append(module.template());
    $('#concurrency_conflict_dialog_post').jqm();
    P.conflict_post.initHandlers()

    PEM.addListener("showPostConflict", P.conflict_post.showConflict);
  }

};
P.careers_company_select_modal = {
  companies: null,
  questionResponses: {
  },
  initHandlers: function() {
    
    // // dismiss button on modal:
    $(".company_ranking_dismiss_link").click(function() {
      // log each company selected in angular module, but log when modal is dismissed, which angular cannot do:
      PA.call_pj("generic.event_to_requests", {event: P.top_bar.SELECT_COMPANY_MODAL_CONSTANTS.EVENT_DISMISS_SELECT_MODAL}, 1, function(){});
      // mark this modal as seen for student:
      PA.markSeenUnseen(P.top_bar.SELECT_COMPANY_MODAL_CONSTANTS.SEEN_MESSAGE_SELECT_MODAL_THIS_YEAR);
      $('#careers_company_list_modal').modal('hide');
      return false;
    });
    // done button on modal:
    $("#company_ranking_done_btn").click(function() {
      PA.markSeenUnseen(P.top_bar.SELECT_COMPANY_MODAL_CONSTANTS.SEEN_MESSAGE_SELECT_MODAL_THIS_YEAR);
      $('#careers_company_list_modal').modal('hide');

    });
    
  },
  select_question_answer: function(qid, co, allCos) {
    var params = {
      survey_name      : '2018_' + qid,
      answers          : [co]
    };

    PA.call_pj('user_profile.add_survey_question_answers', params, 1);

    for (var i = 0; i < allCos.length; i++) {
      var co_i = allCos[i];
      var elem = $('.' + qid + '_' + co_i + '_selected');
      if(co == co_i) {
        elem.show();
      } else {
        elem.hide();
      }
    }
    $('#company_ranking_done_btn').show();
  },
  buildSingleQuestion: function(id, q, cos) {
    var html = "";
    html += '<div class="custom_question clearfix">';
    html +=   '<label class="question_header">' + q + '</label>';
    html +=   '<div class="logo_answer_wrapper ' + (cos.length == 3 ? 'three_answers' : 'four_answers') + '">';
    for (var i = 0; i < cos.length; i++) {
      var co = cos[i];
      var qid = id;
      var cl = P.careers_company_select_modal.getCompanyClassName(co);
      var all_answers = cos;
      html +=   '<div class="pull-left logo_wrapper" onclick="P.careers_company_select_modal.showDoneButton=true;">';
      html +=     '<div class="' + cl + ' survey-company-logo" onclick="P.careers_company_select_modal.select_question_answer(\'' + qid + '\', \'' + co + '\', ' +  buildArray(cos) + ');">';
      html +=       '<div class="selected_box ' + qid + '_' + co + '_selected" style="display: none;"><span class="icon-ok icon-white"></span><h5 class="selected_text">Selected</h5></div>';
      html +=     '</div>';
      html +=   '</div>';
    }
    html +=   '</div>';
    html += '</div>';
    return html;
  },
  buildVsQuestion: function(id, q, as) {
    var html = '';
    html += '<div class="custom_question clearfix">';
    html +=   '<label class="question_header">' + q + '</label>';
    html +=   '<div class="logo_answer_wrapper">';
    var numVersus = 2;
    for (var i = 0; i < numVersus; i++) {
      var qid = id + '_' + as[i].sort().join('_');
      var all_answers = as[i];
      html +=   '<div class="numeral pull-left">' + (i + 1) + '.</div>';
      html +=   '<div class="pull-left logo_wrapper" onclick="P.careers_company_select_modal.showDoneButton=true;">';
      html +=     '<div class="' + P.careers_company_select_modal.getCompanyClassName(as[i][0]) + ' survey-company-logo" onclick="P.careers_company_select_modal.select_question_answer(\'' + qid + '\', \'' + as[i][0] + '\', ' + buildArray(as[i]) + ');">';
      html +=       '<div class="selected_box ' + qid + '_' + as[i][0] + '_selected" style="display: none;"><span class="icon-ok icon-white"></span><h5 class="selected_text">Selected</h5></div>';
      html +=     '</div>';
      html +=   '</div>';
      html +=   '<div class="vs pull-left"> - vs - </div>';
      html +=   '<div class="pull-left logo_wrapper" onclick="P.careers_company_select_modal.showDoneButton=true;">';
      html +=     '<div class="' + P.careers_company_select_modal.getCompanyClassName(as[i][1]) + ' survey-company-logo" onclick="P.careers_company_select_modal.select_question_answer(\'' + qid + '\', \'' + as[i][1] + '\', ' + buildArray(as[i]) + ');">';
      html +=       '<div class="selected_box ' + qid + '_' + as[i][1] + '_selected" style="display: none;"><span class="icon-ok icon-white"></span><h5 class="selected_text">Selected</h5></div>';
      html +=     '</div>';
      html +=   '</div>';
    }
    html +=   '</div>';
    html += '</div>';
    return html;
  },
  showHideWarningText: function(show) {
    var elem = $(".min_select_text");
    show ? elem.show() : elem.hide();
  },

  selectQuestion: function(elem, question, answer) {
    console.log(elem, question, answer);

    
    $('#survey_questions_done_btn_done').show();

    var responses = P.careers_company_select_modal.questionResponses.desired_tech;
    responses[answer] = !responses[answer];

    var techs = Object.keys(responses).filter(function(x){return responses[x]});
    

    var params = {
      survey_name      : 'desired_tech',
      answers          : techs
    };

    PA.call_pj('user_profile.add_survey_question_answers', params, 1);
    
    
  },
  
  blockUnblockSelectModal: function(block) {
    var modal_elem = $("#careers_company_list_modal");
    if (!modal_elem) {
      return;
    }
    if (block) {
      modal_elem.block();
    } else {
      $(".modal-body.two").hide();
      modal_elem.unblock();
    }
  },
  
  // returns the count of the selected companies in the modal iframe:
  countSelected: function() {
    var iframe = $('iframe');
    if (!iframe) {
      return 0;
    }
    var selected = $(".ranking_logo.selected", iframe.contents());
    return selected.length;
  },

  show: function() {
    //$("#careers_company_list_modal").html(P.careers_company_select_modal.template({}));
    //P.careers_company_select_modal.blockUnblockSelectModal(true);
    P.careers_company_select_modal.initHandlers();
    $('#careers_company_list_modal').modal({
      backdrop: 'static',
      keyboard: false
    });
    P.careers_company_select_modal.buildColumns();
    P.careers_company_select_modal.populateLogos();
    P.careers_company_select_modal.populateQuestions();
    //$("#careers_company_list_modal").waitForImages(function() {
      // log in vertica, modal shown and show modal:
    //  PA.call_pj("generic.event_to_requests", {event: P.top_bar.SELECT_COMPANY_MODAL_CONSTANTS.EVENT_SHOW_SELECT_MODAL}, 1, function(){});
    //});
  },
  populateQuestions: function() {
    var container = $('#first_question');
    container.show();

    var typeOneQuestions = [
      {
        id: 'fintech', 
        q: "Which fintech firm would you <span class='most'>most</span> like to work for?",
        a: ["jp_morgan", "goldman_sachs", "robinhood", "coinbase"]
      }, {
        id: 'streaming', 
        q: "Whose video streaming services would you <span class='most'>most</span> want to work on?",
        a: ["netflix", "disney", "amazon", "hulu"]
      }, {
        id: 'pharma', 
        q: "Which pharma/biotech company would you <span class='most'>most</span> like to work for?",
        a: ["roche", "jnj", "23andme", "illumina"]
      }, {
        id: 'auto', 
        q: "Whose autonomous driving technology would you <span class='most'>most</span> want to work on?",
        a: ["general_motors", "ford", "waymo", "tesla"]
      }, {
        id: 'iot', 
        q: "Whose IoT technology would you <span class='most'>most</span> want to work on?",
        a: ["nest", "ring", "whirlpool"]
      }, {
        id: 'ridesharing', 
        q: "Whose ride-sharing technology would you <span class='most'>most</span> want to work on?",
        a: ["uber", "lyft", "waymo"]
      }, {
        id: 'cloud', 
        q: "Whose cloud services technology would you <span class='most'>most</span> want to work on?",
        a: ["amazon", "google", "microsoft"]
      }, {
        id: 'students', 
        q: "Whose student-oriented product would you <span class='most'>most</span> want to work on?",
        a: ["piazza", "linkedin", "handshake", "workday"]
      }
    ];
    var typeTwoQuestions = [
      {
        id: 'facebook_vs', 
        q: 'Which large tech company would you want to work for?',
        a: [
          ['facebook', 'google'],
          ['facebook', 'amazon'],
          ['facebook', 'microsoft'],
          ['facebook', 'apple']
        ]
      }, {
        id: 'retailer_vs', 
        q: 'Which retailer would you want to work for?',
        a: [
          ['walmart', 'target'],
          ['amazon', 'walmart'],
          ['amazon', 'alibaba']
        ]
      }, {
        id: 'auto_vs', 
        q: 'Whose autonomous driving technology would you want to work on?',
        a: [
          ['general_motors', 'tesla'],
          ['ford', 'tesla'],
          ['tesla', 'dyson'],
          ['tesla', 'waymo'],
        ]
      }, {
        id: 'aerospace_vs', 
        q: 'Whose aerospace technology would you want to work on?',
        a: [
          ['spacex', 'nasa'],
          ['spacex', 'boeing'],
          ['spacex', 'blue_origin']
        ]
      }, {
        id: 'student_vs', 
        q: 'Whose student oriented product would you want to work on?',
        a: [
          ['piazza', 'linkedin'],
          ['piazza', 'workday'],
          ['piazza', 'handshake'],
          ['linkedin', 'workday']
        ]
      }
    ];

    var rand = Math.floor(Math.random() * 2);
    // rand = 0;
    html = '';
    if(rand == 0) {
      var questions = shuffleArray(typeOneQuestions);
      for (var i = 0; i < questions.length; i++) {
        const elem = questions[i];
        elem.a = shuffleArray(elem.a); 
      }

      var qsToShow = 4;
      for (var i = 0; i < qsToShow; i++) {
        question = questions[i];
        html += P.careers_company_select_modal.buildSingleQuestion(question.id, question.q, question.a);
      }
    } else if(rand == 1) {
      var questions = shuffleArray(typeTwoQuestions);
      for (var i = 0; i < questions.length; i++) {
        var question = questions[i];
        question.a = shuffleArray(question.a);
        for (var j = 0; j < question.a.length; j++) {
          question.a[j] = shuffleArray(question.a[j]);
        }
      }

      var qsToShow = 2;
      for (var i = 0; i < qsToShow; i++) {
        question = questions[i];
        html += P.careers_company_select_modal.buildVsQuestion(question.id, question.q, question.a);
      }

    }

    container.html(html);
  },
  
  populateLogos: function() {
    var logosContainer = $('.logo_containers_wrapper');
    var html = "";
    var numCols = 3;
    // var numCols = 1;
    for (var i = 0; i < numCols; i++) {
      var col = P.careers_company_select_modal.columns[i];
      html += P.careers_company_select_modal.getColumnHtml(col, i) + '\n';
    }
    logosContainer.html(html);
  },
  
  getColumnClass: function(index) {
    if(index == 0) return 'column_one';
    if(index == 1) return 'column_two';
    if(index == 2) return 'column_three';
  },
  
  getColumnHtml: function(col, index) {
    var html = "";
    
    html += (
      '<div class="column_one ' + 
      P.careers_company_select_modal.getColumnClass(index) + 
      ' pull-left">\n'
    );
    for (var i = 0; i < col.length; i++) {
      var cat = col[i];
      
      html += P.careers_company_select_modal.getCategoryHtml(cat, index, i) + '\n';
      
    }
    
    html += '</div>'
    return html;
  },
  
  getCategoryHtml: function(cat, row_idx, col_idx) {
    var html = "";
    
    html += (
      '<div class="logos_container ' + 
      (cat.tag == '' ? 'winter_modal ' : '') + 
      P.careers_company_select_modal.getColorClass(col_idx, row_idx) + 
      '">\n'
    );
    
    if(cat.tag != '') {
      html += (
        '<div class="category_header ' +
        P.careers_company_select_modal.getColorClass(col_idx, row_idx) +  
        '">' + cat.tag + '</div>'
      );
    }
    
    html += '<div class="logos_wrapper clearfix">';
    
    for (var i = 0; i < cat.companies.length; i++) {
      var co = cat.companies[i];
      html += P.careers_company_select_modal.getCompanyHtml(co) + '\n';
    }
    
    html += '</div>';
    
    html += '</div>';
    return html;
  },
  
  selectedCompanies: [],
  
  isCompanySelected: function(co) {
    return P.careers_company_select_modal.selectedCompanies.indexOf(co) >= 0;
  },
  
  getAllShowingCompanies: function() {
    var list = [];
    for (var i = 0; i < P.careers_company_select_modal.columns.length; i++) {
      for (var j = 0; j < P.careers_company_select_modal.columns[i].length; j++) {
        for (var k = 0; k < P.careers_company_select_modal.columns[i][j].companies.length; k++) {
          var co = P.careers_company_select_modal.columns[i][j].companies[k].internal_id;
          list.push(co);
        }
      }
    }
    return list;
  },
  numCompaniesSelected: 0,
  selectUnselectCompany: function(co) {
    var selected = $('.' + co + '_selected');
    var add = !P.careers_company_select_modal.isCompanySelected(co);
    var params = {
      survey_name      : 'selected_companies_2019',
      internal_id      : co,
      add              : add,
      companies_visible: P.careers_company_select_modal.getAllShowingCompanies()
    };
    PA.call_pj("user_profile.add_remove_selected_company_for_survey", params, 1);
    if(P.careers_company_select_modal.numCompaniesSelected == 0) {
      PA.call_pj("generic.event_to_requests", {
        event: 'seen_company_rankings_modal_2018',
        user_id: P.top_bar.user.id,
      }, 1);
    }
    if(add) {
      P.careers_company_select_modal.selectedCompanies.push(co);
      selected.show();
      $('#company_ranking_done_btn').show();
      P.careers_company_select_modal.numCompaniesSelected += 1;
    } else {
      var idx = P.careers_company_select_modal.selectedCompanies.indexOf(co);
      P.careers_company_select_modal.selectedCompanies.splice(idx, 1);
      selected.hide();
      P.careers_company_select_modal.numCompaniesSelected -= 1;
    }
  },
  getCompanyClassName: function(co) {
    // return isNaN(co.internal_id[0]) ? co.internal_id : '_' + co.internal_id;
    return isNaN(co[0]) ? co : '_' + co;
  },
  getCompanyHtml: function(co) {
    var html = '';
    html += '<div class="pull-left logo_wrapper" onclick="P.careers_company_select_modal.showDoneButton=true;">';
    
    html += (
      '<div class="' + 
      P.careers_company_select_modal.getCompanyClassName(co.internal_id) + 
      (P.careers_company_select_modal.isCompanySelected(co.internal_id) ? ' selected' : '') + 
      ' survey-company-logo" onclick="P.careers_company_select_modal.selectUnselectCompany(\'' +
      co.internal_id + 
      '\');">' + 
        '<div class="selected_box ' + co.internal_id + '_selected">' +
          '<span class="icon-ok icon-white"></span>' +
          '<h5 class="selected_text">Selected</h5>' +
        '</div>' +
      '</div>'
    );
    
    html += '</div>';
    return html;
  },

  getLogosData: function() {
    var categories = {
      tech: [
        "microsoft", "apple", "intel", "ibm", "nvidia", "oracle", "dell", 
        "cisco", "hewlett_packard", "qualcomm", "palantir", "salesforce", 
        "sap", "adobe", "hpe", "intuit", "tesla", "verizon", "visa", 
        "mastercard", "disney", "att", "peloton", "we_company"
      ],
      internet: [
        "google", "facebook", "amazon", "netflix", "snap", "spotify", "dropbox", 
        "linkedin", "twitter", "airbnb", "uber", "paypal", "slack",  "pinterest", 
        "quora", "ebay", "piazza", "square", "tencent", "alibaba", "baidu", "jd", "lyft", "postmates"
      ],
      finance: [
        "goldman_sachs", "jp_morgan", "bank_of_america", "morgan_stanley", 
        "citi_group", "capitalone", "wellsfargo", "barclays", "two_sigma",
        "deshaw", "jane_street", "rbc", "blackrock", "hsbc", "deutsche_bank", "ubs",
        "credit_suisse", "robinhood", "sofi"
      ],
      consulting: [
        "mckinsey_company", "bcg", "accenture", "deloitte",
        "ernst___young", "pwc", "kpmg"
      ],
      pharma: [
        "roche", "jnj", "pfizer", "merck", "glaxosmithkline",
        "novartis", "illumina", "unitedhealth", "mckesson", "medtronic",
        "abbvie", "amgen", "bayer", "novo_nordisk", "sanofi", "23andme"
      ],
      aerospace_and_defense: [
        "nasa", "spacex", "lockheedmartin", "northropgrumman",
        "boeing", "airbus", "raytheon"
      ],
      industrials: [
        "samsungsemiconductor", "general_electric",
        "ford", "general_motors", "schlumberger", "fca"
      ]
    };
    var companies = [];
    for (var cat_name in categories) {
      if (categories.hasOwnProperty(cat_name)) {
        for (var i = 0; i < categories[cat_name].length; i++) {
          var co_name = categories[cat_name][i];
          companies.push({
            "tag": cat_name,
            "internal_id": co_name
          });
        }
      }
    }
    return companies;
  },

  getColorClassGrid: function() {
    return [
      ['keynote_blue', 'keynote_brown'], // col 1
      ['keynote_maroon', 'keynote_orange'], // col 2
      ['keynote_green', 'keynote_purple'] // col 3
    ];
  },
  
  getShapeCategoryMap: function() {
    return {
      2: ["consulting", "industrials", "aerospace_and_defense"], 
      3: ["pharma"],
      4: ["finance"],
      5: ["internet", "tech"]
    };
    // return {
    //   8: ['all']
    // }
  },
  // returns the map holding the grouping of company refs for the given industry:

  getTagGroupCompanies: function(tag) {
    var comps = P.careers_company_select_modal.getCompanySurveyList('tag_groups');
    for (var i=0; i<comps.length; i++) {
      var g = comps[i];
      if (g && g.tag == tag) {
        return g.companies;
      }
    }
    return null;
  },
  
  getTagNames: function() {
    return {
      finance: "Financial Services", 
      consulting: "Consulting/Professional Services", 
      internet: "Consumer Internet", 
      tech: "Technology", 
      pharma: "Pharma/Healthcare", 
      aerospace_and_defense: "Aerospace/Defense", 
      industrials: "Industrials"
    };
    // return {
    //   all: ""
    // }
  },
  getTagGroups: function() {
    var tag_groups = [];

    var list = P.careers_company_select_modal.getLogosData();
    var map = {};

    for (var i=0; i<list.length; i++) {
      var c = list[i];
      if (!map[c.tag]) {
        map[c.tag] = [c];
      } else {
        map[c.tag].push(c);
      }
    }

    // reduce into list:
    var tags = Object.keys(map);
    for (var i=0; i<tags.length; i++) {
      tag_groups.push({
        tag: tags[i],
        companies: map[tags[i]]
      });
    }
    return tag_groups;
  },
  getCompanySurveyList: function(kind) {
    if ("companies" == kind) {
      return P.careers_company_select_modal.getLogosData();
    } else if ("tag_groups" == kind) {
      return P.careers_company_select_modal.getTagGroups();
    } else {
      return P.careers_company_select_modal.getLogosData();
    }
  },
  getRandomStructure: function() {
    var structure_base = [[2, 5], [5, 2], [2, 5]];
    var rand = Math.floor(Math.random() * 3);
    if(rand === 0) {
      structure_base[0] = [3, 4];
    } else if(rand === 1) {
      structure_base[1] = [4, 3];
    } else if(rand === 2) {
      structure_base[2] = [3, 4];
    }
    if(Math.floor(Math.random() * 2) === 0) {
      for (var i = 0; i < structure_base.length; i++) {
        tmp = structure_base[i][0];
        structure_base[i][0] = structure_base[i][1];
        structure_base[i][1] = tmp;
      }
    }
    return structure_base;
    // return [[8]]
  },
  buildColumns: function() {
    P.careers_company_select_modal.columns = [];
    var structure_base = P.careers_company_select_modal.getRandomStructure();
    // for (var i = 0; i < structure_base.length; i++) {
    //   shuffleArray(structure_base[i]);
    // }
    // shuffleArray(structure_base);

    var our_shape_map = P.careers_company_select_modal.getShapeCategoryMap();
    for (var shape in our_shape_map) {
      if (our_shape_map.hasOwnProperty(shape)) {
        shuffleArray(our_shape_map[shape]);
      }
    }
    var colSize = 3;
    for (i = 0; i < structure_base.length; i++) {
      var col_structure = structure_base[i];
      var col = [];
      for (var j = 0; j < col_structure.length; j++) {
        shape = col_structure[j];
        var tag = our_shape_map[shape].shift();
        var companies = shuffleArray(P.careers_company_select_modal.getTagGroupCompanies(tag));
        col.push({tag: P.careers_company_select_modal.getTagNames()[tag], companies: companies.slice(0, Math.min(companies.length, colSize*shape))});
      }
      P.careers_company_select_modal.columns.push(col);
    }
  },

  // ui helper to return the color class for the outline of the logo container in the grid 
  // row_idx - number the index of the box in the column 
  // col_idx - number the index of the col in the grid
  getColorClass: function(row_idx, col_idx) {
    var col = P.careers_company_select_modal.getColorClassGrid()[col_idx] || [];
    return row_idx >= col.length ? '' : col[row_idx];
  },
  

  init: function(module) {
    P.careers_company_select_modal.template = module.template;
    if (module.options.user)
      P.careers_company_select_modal.user = module.options.user;
    if (module.options.network)
      P.careers_company_select_modal.network = module.options.network;
    PEM.addListener("showCompanySelectModal", P.careers_company_select_modal.show);
    Handlebars.registerHelper('leftRightPopover', function(num, options) {
      if (num % 8 >= 6) return "right_popover";
      return "left_popover";
    });
    Handlebars.registerHelper('topBottomPopover', function(num, options) {
      if (num >= 32) return "top";
      return "bottom";
    });
    
  }
};

// some global helpers for this page:
// Note: move into service if this module moved into other modules:
var normalizeKey = function(s){
  if (!s) return  "";
  return s.toLowerCase().trim().replace(/[^A-Za-z0-9_]/g, "_");
};
var shuffleArray = function(data) {
  data = data || [];
  for (var j, x, i = data.length; i; j = Math.floor(Math.random() * i), x = data[--i], data[i] = data[j], data[j] = x);
  return data;
};
var buildArray = function(cos) {
  return "['" + cos.join("', '") + "']";
};P.contributions = {
  template: null,
  stats: {},
  contentCnt: 0,
  showBox: function(content) {
    P.contributions.content = content;
    var net = P.contributions.network;
    var show = false;
    if (net.licensing.license_required) {
      if (net.licensing.type === LICENSING_TYPE_DONATION) {
        show = true;
      }
      if (net.licensing.type === LICENSING_TYPE_INSTRUCTOR && net.licensing.license_expired &&
          !net.licensing.licensed_by_student) {
        show = true;
      }
    }
    if (content) {
      if (P.contributions.contentCnt % 10 !== 0) show = false;
      P.contributions.contentCnt += 1;
    }
    if (show) {
      var amounts = net.licensing.donations || {amount1: 1, amount2: 2,amount3: 4};
      $(".contributions").html(P.contributions.template(amounts));
      $(".contributions").show();
    } else {
      $(".contributions").hide();
    }
  },
  showCustom: function() {
    $("#contributions_wrapper").hide();
    $("#custom_contributions_wrapper").show();
  },
  showCustomButton: function() {
    var inv = $('#custom_invoice').attr('checked');
    if (inv) {
      $('#custom_pay_button').hide();
      $('#custom_pay_button_invoice').show();
    } else {
      $('#custom_pay_button').show();
      $('#custom_pay_button_invoice').hide();
    }
  },
  setUser: function(user) {
    P.contributions.user = user;
  },
  setNetwork:function(network) {
    P.contributions.network = network;
  },
  pay: function(amount, invoice) {
    var redirect = P.contributions.network.id;
    if (P.contributions.content) {
      redirect += "?cid=" + P.contributions.content.nr;
    }
    var params = {
      term:P.contributions.network.term,
      sid: P.contributions.network.school_id,
      nid: P.contributions.network.id,
      redirect: redirect,
      amount: amount,
      invoice: invoice
    };
    PA.call_pj("licensing.create_student_license", params, null,
        function(result) {
          if (result && result.license) {
            const license = result.license;
            const pids = Object.keys((license && license.payments) || {});
            const p = license.payments[pids[0]];
            if (p.stripe && p.stripe.session_id) {
              $.blockUI();
              STRIPE.redirectToCheckout({sessionId: p.stripe.session_id})
            } else if (p.stripe && p.stripe.invoice_id) {
              $('#custom_invoice_wrapper').text('Invoice sent. Contribution prompt will go away once payment is completed.');
            }
          } else {
            alert("Error communicating with payment service. Try again later, or contact Piazza Support.");
          }
        },
        function(err) {
          alert(err);
        })
  },
  checkAmount: function () {
    var minAmount;
    if (P.contributions.network.licensing.donations) {
      minAmount = P.contributions.network.licensing.donations.amountMin
    }
    if (!minAmount) {
      minAmount = 8
    }
    var ret = parseInt($('#custom_amount').val());
    if (!ret || ret < minAmount) {
      alert("Amount should be at least " + minAmount + " USD");
      return false;
    }
    return ret;
  },
  customPay: function() {
    var amount = P.contributions.checkAmount();
    if (amount) {
      P.contributions.pay(amount);
    }
  },
  requestInvoice: function() {
    var amount = P.contributions.checkAmount();
    if (amount) {
      $('#custom_contributions_wrapper').hide();
      $('#custom_invoice_wrapper').show();
      P.contributions.pay(amount, true);
    }
  },
  setStats: function(stats) {
    P.contributions.stats = stats;
    if (stats.total_posts >= 20) {
      P.contributions.stats.show = true;
    }
  },
  init: function(module) {
    P.contributions.template = module.template;
    PEM.addListener("network", P.contributions.setNetwork);
    PEM.addListener("content", P.contributions.showBox);
    PEM.addListener("showHomescreen", P.contributions.showBox);
    PEM.addListener("instructorStats", P.contributions.setStats);
    PEM.addListener("show_new_post", function(){
      $(".contributions").hide();
    });
  }
}
